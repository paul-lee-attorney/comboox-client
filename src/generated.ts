// Generated by @wagmi/cli@0.1.15 on 2023/8/13 at 12:56:13
import {
  useContract,
  UseContractConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GeneralKeeper
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const generalKeeperABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'contents',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'result', internalType: 'bool', type: 'bool', indexed: true },
    ],
    name: 'ExecAction',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetRoleAdmin',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'acceptAlongDeal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'sigHash', internalType: 'bytes32', type: 'bytes32' }],
    name: 'acceptSHA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'activateSHA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'attitude', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'castVote',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'attitude', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'castVoteOfGM',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'body', internalType: 'address', type: 'address' },
      { name: 'docUrl', internalType: 'bytes32', type: 'bytes32' },
      { name: 'docHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'circulateIA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'body', internalType: 'address', type: 'address' },
      { name: 'docUrl', internalType: 'bytes32', type: 'bytes32' },
      { name: 'docHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'circulateSHA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
    ],
    name: 'closeDeal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'computeFirstRefusal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'params', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'desHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'executor', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createAction',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'params', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'desHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'executor', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createActionOfGM',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'createCorpSeal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'snOfIA', internalType: 'uint256', type: 'uint256' }],
    name: 'createIA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'doc', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'executor', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createMotionToApproveDoc',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfPos', internalType: 'uint256', type: 'uint256' }],
    name: 'createMotionToRemoveDirector',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfPos', internalType: 'uint256', type: 'uint256' }],
    name: 'createMotionToRemoveOfficer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfPld', internalType: 'bytes32', type: 'bytes32' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
      { name: 'guaranteedAmt', internalType: 'uint256', type: 'uint256' },
      { name: 'execDays', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createPledge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'version', internalType: 'uint256', type: 'uint256' }],
    name: 'createSHA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseCapital',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'delegate', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'entrustDelegaterForBoardMeeting',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'delegate', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'entrustDelegaterForGeneralMeeting',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'typeOfAction', internalType: 'uint256', type: 'uint256' },
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'params', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'desHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execAction',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'params', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'desHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execActionOfGM',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'execAntiDilution',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'execDragAlong',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfRule', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfRightholder', internalType: 'uint256', type: 'uint256' },
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'execFirstRefusal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' }],
    name: 'execOption',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfDeal', internalType: 'bytes32', type: 'bytes32' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'version', internalType: 'uint256', type: 'uint256' },
      { name: 'buyer', internalType: 'uint256', type: 'uint256' },
      { name: 'groupOfBuyer', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execPledge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfBrf', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execSwapOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'execTagAlong',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'extDays', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'extendPledge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amt', internalType: 'uint256', type: 'uint256' }],
    name: 'fetchPoints',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBMM',
    outputs: [
      { name: '', internalType: 'contract IMeetingMinutes', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBOS',
    outputs: [
      { name: '', internalType: 'contract IBookOfShares', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'title', internalType: 'uint256', type: 'uint256' }],
    name: 'getBook',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCompUser',
    outputs: [
      {
        name: '',
        internalType: 'struct UsersRepo.User',
        type: 'tuple',
        components: [
          { name: 'isCOA', internalType: 'bool', type: 'bool' },
          { name: 'counterOfV', internalType: 'uint32', type: 'uint32' },
          { name: 'balance', internalType: 'uint216', type: 'uint216' },
          {
            name: 'primeKey',
            internalType: 'struct UsersRepo.Key',
            type: 'tuple',
            components: [
              { name: 'pubKey', internalType: 'address', type: 'address' },
              { name: 'refund', internalType: 'uint16', type: 'uint16' },
              { name: 'discount', internalType: 'uint16', type: 'uint16' },
              { name: 'gift', internalType: 'uint32', type: 'uint32' },
              { name: 'coupon', internalType: 'uint32', type: 'uint32' },
            ],
          },
          {
            name: 'backupKey',
            internalType: 'struct UsersRepo.Key',
            type: 'tuple',
            components: [
              { name: 'pubKey', internalType: 'address', type: 'address' },
              { name: 'refund', internalType: 'uint16', type: 'uint16' },
              { name: 'discount', internalType: 'uint16', type: 'uint16' },
              { name: 'gift', internalType: 'uint32', type: 'uint32' },
              { name: 'coupon', internalType: 'uint32', type: 'uint32' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDK',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getGMM',
    outputs: [
      { name: '', internalType: 'contract IMeetingMinutes', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'title', internalType: 'uint256', type: 'uint256' }],
    name: 'getKeeper',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getROA',
    outputs: [
      {
        name: '',
        internalType: 'contract IRegisterOfAgreements',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getROC',
    outputs: [
      {
        name: '',
        internalType: 'contract IRegisterOfConstitution',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getROD',
    outputs: [
      {
        name: '',
        internalType: 'contract IRegisterOfDirectors',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getROM',
    outputs: [
      {
        name: '',
        internalType: 'contract IRegisterOfMembers',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getROO',
    outputs: [
      {
        name: '',
        internalType: 'contract IRegisterOfOptions',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getROP',
    outputs: [
      {
        name: '',
        internalType: 'contract IRegisterOfPledges',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getROS',
    outputs: [
      { name: '', internalType: 'contract IRegisterOfSwaps', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSHA',
    outputs: [
      {
        name: '',
        internalType: 'contract IShareholdersAgreement',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isFinalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'caller', internalType: 'address', type: 'address' }],
    name: 'isKeeper',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'issueNewShare',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'lockPledge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfBrf', internalType: 'uint256', type: 'uint256' },
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'lockSwapOrder',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nameOfCompany',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'candidate', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'nominateDirector',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'candidate', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'nominateOfficer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfConsider', internalType: 'uint256', type: 'uint256' },
      { name: 'paidOfConsider', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfTarget', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'placeSwapOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'doc', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'executor', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'proposeDocOfGM',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'proposeMotionToBoard',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'proposeMotionToGeneralMeeting',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
      { name: 'closingDeadline', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'pushToCoffer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfPos', internalType: 'uint256', type: 'uint256' }],
    name: 'quitPosition',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'refundDebt',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'title', internalType: 'uint256', type: 'uint256' },
      { name: 'book', internalType: 'address', type: 'address' },
    ],
    name: 'regBook',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'title', internalType: 'uint256', type: 'uint256' },
      { name: 'keeper', internalType: 'address', type: 'address' },
    ],
    name: 'regKeeper',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'regNumOfCompany',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
    ],
    name: 'releasePledge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfBrf', internalType: 'uint256', type: 'uint256' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
    ],
    name: 'releaseSwapOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeDirector',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeOfficer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
    ],
    name: 'requestPaidInCapital',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfTarget', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'requestToBuy',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokePledge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfBrf', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeSwapOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_name', internalType: 'string', type: 'string' },
      { name: '_symbol', internalType: 'string', type: 'string' },
    ],
    name: 'setCompInfo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'max', internalType: 'uint256', type: 'uint256' }],
    name: 'setMaxQtyOfMembers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
      { name: 'expireDate', internalType: 'uint256', type: 'uint256' },
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'setPayInAmt',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'signIA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sha', internalType: 'address', type: 'address' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'signSHA',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbolOfCompany',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'takeBackKeys',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'takeGiftShares',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'takePosition',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'takeSeat',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'terminateDeal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'buyer', internalType: 'uint256', type: 'uint256' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferPledge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferTargetShare',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'd1', internalType: 'uint256', type: 'uint256' },
      { name: 'd2', internalType: 'uint256', type: 'uint256' },
      { name: 'd3', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'updateOracle',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'voteCounting',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'voteCountingOfGM',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawPayInAmt',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IRegCenter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iRegCenterABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'snOfDoc',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'body', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'CreateDoc',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'headSn',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'counterLocker',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'payload', internalType: 'bytes', type: 'bytes', indexed: false },
      {
        name: 'hashLock',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'LockConsideration',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'headSn',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'hashLock',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'LockPoints',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'to', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'amt', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'MintPoints',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'headSn',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'PickupConsideration',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'headSn',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'PickupPoints',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'snOfRule',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'SetPlatformRule',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'typeOfDoc',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'version',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'body', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetTemplate',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'TransferOwnership',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'to', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'amt', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'TransferPoints',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'TurnOverCenterKey',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'headSn',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'WithdrawPoints',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'typeOfDoc', internalType: 'uint256', type: 'uint256' },
      { name: 'version', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'counterOfDocs',
    outputs: [{ name: 'seq', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'counterOfTypes',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'counterOfUsers',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'typeOfDoc', internalType: 'uint256', type: 'uint256' }],
    name: 'counterOfVersions',
    outputs: [{ name: 'seq', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'dk', internalType: 'address', type: 'address' }],
    name: 'createComp',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfDoc', internalType: 'bytes32', type: 'bytes32' },
      { name: 'primeKeyOfOwner', internalType: 'address', type: 'address' },
    ],
    name: 'createDoc',
    outputs: [
      {
        name: 'doc',
        internalType: 'struct DocsRepo.Doc',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct DocsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDoc', internalType: 'uint32', type: 'uint32' },
              { name: 'version', internalType: 'uint32', type: 'uint32' },
              { name: 'seqOfDoc', internalType: 'uint64', type: 'uint64' },
              { name: 'creator', internalType: 'uint40', type: 'uint40' },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          { name: 'body', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBookeeper',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'snOfDoc', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getDoc',
    outputs: [
      {
        name: 'doc',
        internalType: 'struct DocsRepo.Doc',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct DocsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDoc', internalType: 'uint32', type: 'uint32' },
              { name: 'version', internalType: 'uint32', type: 'uint32' },
              { name: 'seqOfDoc', internalType: 'uint64', type: 'uint64' },
              { name: 'creator', internalType: 'uint40', type: 'uint40' },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          { name: 'body', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'getDocByUserNo',
    outputs: [
      {
        name: 'doc',
        internalType: 'struct DocsRepo.Doc',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct DocsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDoc', internalType: 'uint32', type: 'uint32' },
              { name: 'version', internalType: 'uint32', type: 'uint32' },
              { name: 'seqOfDoc', internalType: 'uint64', type: 'uint64' },
              { name: 'creator', internalType: 'uint40', type: 'uint40' },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          { name: 'body', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'snOfDoc', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getDocsList',
    outputs: [
      {
        name: '',
        internalType: 'struct DocsRepo.Doc[]',
        type: 'tuple[]',
        components: [
          {
            name: 'head',
            internalType: 'struct DocsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDoc', internalType: 'uint32', type: 'uint32' },
              { name: 'version', internalType: 'uint32', type: 'uint32' },
              { name: 'seqOfDoc', internalType: 'uint64', type: 'uint64' },
              { name: 'creator', internalType: 'uint40', type: 'uint40' },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          { name: 'body', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'hashLock', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getLocker',
    outputs: [
      {
        name: 'locker',
        internalType: 'struct LockersRepo.Locker',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct LockersRepo.Head',
            type: 'tuple',
            components: [
              { name: 'from', internalType: 'uint40', type: 'uint40' },
              { name: 'to', internalType: 'uint40', type: 'uint40' },
              { name: 'expireDate', internalType: 'uint48', type: 'uint48' },
              { name: 'value', internalType: 'uint128', type: 'uint128' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct LockersRepo.Body',
            type: 'tuple',
            components: [
              {
                name: 'counterLocker',
                internalType: 'address',
                type: 'address',
              },
              { name: 'payload', internalType: 'bytes', type: 'bytes' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getLocksList',
    outputs: [{ name: '', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'getMyUserNo',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'getPlatformRule',
    outputs: [
      {
        name: '',
        internalType: 'struct UsersRepo.Rule',
        type: 'tuple',
        components: [
          { name: 'eoaRewards', internalType: 'uint32', type: 'uint32' },
          { name: 'coaRewards', internalType: 'uint32', type: 'uint32' },
          { name: 'ceiling', internalType: 'uint32', type: 'uint32' },
          { name: 'floor', internalType: 'uint32', type: 'uint32' },
          { name: 'rate', internalType: 'uint16', type: 'uint16' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'argu', internalType: 'uint16', type: 'uint16' },
          { name: 'seq', internalType: 'uint16', type: 'uint16' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'author', internalType: 'uint256', type: 'uint256' }],
    name: 'getRoyaltyRule',
    outputs: [
      {
        name: '',
        internalType: 'struct UsersRepo.Key',
        type: 'tuple',
        components: [
          { name: 'pubKey', internalType: 'address', type: 'address' },
          { name: 'refund', internalType: 'uint16', type: 'uint16' },
          { name: 'discount', internalType: 'uint16', type: 'uint16' },
          { name: 'gift', internalType: 'uint32', type: 'uint32' },
          { name: 'coupon', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getUser',
    outputs: [
      {
        name: '',
        internalType: 'struct UsersRepo.User',
        type: 'tuple',
        components: [
          { name: 'isCOA', internalType: 'bool', type: 'bool' },
          { name: 'counterOfV', internalType: 'uint32', type: 'uint32' },
          { name: 'balance', internalType: 'uint216', type: 'uint216' },
          {
            name: 'primeKey',
            internalType: 'struct UsersRepo.Key',
            type: 'tuple',
            components: [
              { name: 'pubKey', internalType: 'address', type: 'address' },
              { name: 'refund', internalType: 'uint16', type: 'uint16' },
              { name: 'discount', internalType: 'uint16', type: 'uint16' },
              { name: 'gift', internalType: 'uint32', type: 'uint32' },
              { name: 'coupon', internalType: 'uint32', type: 'uint32' },
            ],
          },
          {
            name: 'backupKey',
            internalType: 'struct UsersRepo.Key',
            type: 'tuple',
            components: [
              { name: 'pubKey', internalType: 'address', type: 'address' },
              { name: 'refund', internalType: 'uint16', type: 'uint16' },
              { name: 'discount', internalType: 'uint16', type: 'uint16' },
              { name: 'gift', internalType: 'uint32', type: 'uint32' },
              { name: 'coupon', internalType: 'uint32', type: 'uint32' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'targetAddr', internalType: 'address', type: 'address' },
      { name: 'fee', internalType: 'uint256', type: 'uint256' },
      { name: 'author', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getUserNo',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'typeOfDoc', internalType: 'uint256', type: 'uint256' }],
    name: 'getVersionsList',
    outputs: [
      {
        name: '',
        internalType: 'struct DocsRepo.Doc[]',
        type: 'tuple[]',
        components: [
          {
            name: 'head',
            internalType: 'struct DocsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDoc', internalType: 'uint32', type: 'uint32' },
              { name: 'version', internalType: 'uint32', type: 'uint32' },
              { name: 'seqOfDoc', internalType: 'uint64', type: 'uint64' },
              { name: 'creator', internalType: 'uint40', type: 'uint40' },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          { name: 'body', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newKeeper', internalType: 'address', type: 'address' }],
    name: 'handoverCenterKey',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'key', internalType: 'address', type: 'address' }],
    name: 'isKey',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'uint256', type: 'uint256' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
      { name: 'expireDate', internalType: 'uint256', type: 'uint256' },
      { name: 'counterLocker', internalType: 'address', type: 'address' },
      { name: 'payload', internalType: 'bytes', type: 'bytes' },
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'lockConsideration',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'uint256', type: 'uint256' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
      { name: 'expireDate', internalType: 'uint256', type: 'uint256' },
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'lockPoints',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'uint256', type: 'uint256' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
      { name: 'expireDate', internalType: 'uint256', type: 'uint256' },
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'mintAndLockPoints',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'uint256', type: 'uint256' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mintPoints',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
    ],
    name: 'pickupPoints',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'regUser',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'bKey', internalType: 'address', type: 'address' }],
    name: 'setBackupKey',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'snOfRule', internalType: 'bytes32', type: 'bytes32' }],
    name: 'setPlatformRule',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'snOfRoyalty', internalType: 'bytes32', type: 'bytes32' }],
    name: 'setRoyaltyRule',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'typeOfDoc', internalType: 'uint256', type: 'uint256' },
      { name: 'body', internalType: 'address', type: 'address' },
    ],
    name: 'setTemplate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'uint256', type: 'uint256' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferPoints',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'info', internalType: 'bytes32', type: 'bytes32' }],
    name: 'updateUserInfo',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'snOfDoc', internalType: 'bytes32', type: 'bytes32' }],
    name: 'verifyDoc',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'hashLock', internalType: 'bytes32', type: 'bytes32' }],
    name: 'withdrawPoints',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IGeneralKeeper
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iGeneralKeeperABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'contents',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'result', internalType: 'bool', type: 'bool', indexed: true },
    ],
    name: 'ExecAction',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'acceptAlongDeal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'sigHash', internalType: 'bytes32', type: 'bytes32' }],
    name: 'acceptSHA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'activateSHA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'attitude', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'castVote',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'attitude', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'castVoteOfGM',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'body', internalType: 'address', type: 'address' },
      { name: 'docUrl', internalType: 'bytes32', type: 'bytes32' },
      { name: 'docHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'circulateIA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'body', internalType: 'address', type: 'address' },
      { name: 'docUrl', internalType: 'bytes32', type: 'bytes32' },
      { name: 'docHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'circulateSHA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
    ],
    name: 'closeDeal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'computeFirstRefusal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'params', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'desHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'executor', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createAction',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'params', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'desHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'executor', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createActionOfGM',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'createCorpSeal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'snOfIA', internalType: 'uint256', type: 'uint256' }],
    name: 'createIA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'doc', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'executor', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createMotionToApproveDoc',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfPos', internalType: 'uint256', type: 'uint256' }],
    name: 'createMotionToRemoveDirector',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfPos', internalType: 'uint256', type: 'uint256' }],
    name: 'createMotionToRemoveOfficer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfPld', internalType: 'bytes32', type: 'bytes32' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
      { name: 'guaranteedAmt', internalType: 'uint256', type: 'uint256' },
      { name: 'execDays', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createPledge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'version', internalType: 'uint256', type: 'uint256' }],
    name: 'createSHA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseCapital',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'delegate', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'entrustDelegaterForBoardMeeting',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'delegate', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'entrustDelegaterForGeneralMeeting',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'typeOfAction', internalType: 'uint256', type: 'uint256' },
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'params', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'desHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execAction',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'params', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'desHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execActionOfGM',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'execAntiDilution',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'execDragAlong',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfRule', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfRightholder', internalType: 'uint256', type: 'uint256' },
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'execFirstRefusal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' }],
    name: 'execOption',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfDeal', internalType: 'bytes32', type: 'bytes32' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'version', internalType: 'uint256', type: 'uint256' },
      { name: 'buyer', internalType: 'uint256', type: 'uint256' },
      { name: 'groupOfBuyer', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execPledge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfBrf', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execSwapOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'execTagAlong',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'extDays', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'extendPledge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amt', internalType: 'uint256', type: 'uint256' }],
    name: 'fetchPoints',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBMM',
    outputs: [
      { name: '', internalType: 'contract IMeetingMinutes', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBOS',
    outputs: [
      { name: '', internalType: 'contract IBookOfShares', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'title', internalType: 'uint256', type: 'uint256' }],
    name: 'getBook',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCompUser',
    outputs: [
      {
        name: '',
        internalType: 'struct UsersRepo.User',
        type: 'tuple',
        components: [
          { name: 'isCOA', internalType: 'bool', type: 'bool' },
          { name: 'counterOfV', internalType: 'uint32', type: 'uint32' },
          { name: 'balance', internalType: 'uint216', type: 'uint216' },
          {
            name: 'primeKey',
            internalType: 'struct UsersRepo.Key',
            type: 'tuple',
            components: [
              { name: 'pubKey', internalType: 'address', type: 'address' },
              { name: 'refund', internalType: 'uint16', type: 'uint16' },
              { name: 'discount', internalType: 'uint16', type: 'uint16' },
              { name: 'gift', internalType: 'uint32', type: 'uint32' },
              { name: 'coupon', internalType: 'uint32', type: 'uint32' },
            ],
          },
          {
            name: 'backupKey',
            internalType: 'struct UsersRepo.Key',
            type: 'tuple',
            components: [
              { name: 'pubKey', internalType: 'address', type: 'address' },
              { name: 'refund', internalType: 'uint16', type: 'uint16' },
              { name: 'discount', internalType: 'uint16', type: 'uint16' },
              { name: 'gift', internalType: 'uint32', type: 'uint32' },
              { name: 'coupon', internalType: 'uint32', type: 'uint32' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getGMM',
    outputs: [
      { name: '', internalType: 'contract IMeetingMinutes', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'getKeeper',
    outputs: [{ name: 'keeper', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getROA',
    outputs: [
      {
        name: '',
        internalType: 'contract IRegisterOfAgreements',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getROC',
    outputs: [
      {
        name: '',
        internalType: 'contract IRegisterOfConstitution',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getROD',
    outputs: [
      {
        name: '',
        internalType: 'contract IRegisterOfDirectors',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getROM',
    outputs: [
      {
        name: '',
        internalType: 'contract IRegisterOfMembers',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getROO',
    outputs: [
      {
        name: '',
        internalType: 'contract IRegisterOfOptions',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getROP',
    outputs: [
      {
        name: '',
        internalType: 'contract IRegisterOfPledges',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getROS',
    outputs: [
      { name: '', internalType: 'contract IRegisterOfSwaps', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSHA',
    outputs: [
      {
        name: '',
        internalType: 'contract IShareholdersAgreement',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'caller', internalType: 'address', type: 'address' }],
    name: 'isKeeper',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'issueNewShare',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'lockPledge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfBrf', internalType: 'uint256', type: 'uint256' },
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'lockSwapOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'candidate', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'nominateDirector',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'candidate', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'nominateOfficer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfConsider', internalType: 'uint256', type: 'uint256' },
      { name: 'paidOfConsider', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfTarget', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'placeSwapOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'doc', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'executor', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'proposeDocOfGM',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'proposeMotionToBoard',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'proposeMotionToGeneralMeeting',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
      { name: 'closingDeadline', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'pushToCoffer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfPos', internalType: 'uint256', type: 'uint256' }],
    name: 'quitPosition',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'refundDebt',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'title', internalType: 'uint256', type: 'uint256' },
      { name: 'keeper', internalType: 'address', type: 'address' },
    ],
    name: 'regBook',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'title', internalType: 'uint256', type: 'uint256' },
      { name: 'keeper', internalType: 'address', type: 'address' },
    ],
    name: 'regKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
    ],
    name: 'releasePledge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfBrf', internalType: 'uint256', type: 'uint256' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
    ],
    name: 'releaseSwapOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeDirector',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeOfficer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
    ],
    name: 'requestPaidInCapital',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfTarget', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'requestToBuy',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokePledge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfBrf', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeSwapOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_name', internalType: 'string', type: 'string' },
      { name: '_symbol', internalType: 'string', type: 'string' },
    ],
    name: 'setCompInfo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'max', internalType: 'uint256', type: 'uint256' }],
    name: 'setMaxQtyOfMembers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
      { name: 'expireDate', internalType: 'uint256', type: 'uint256' },
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'setPayInAmt',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'signIA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sha', internalType: 'address', type: 'address' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'signSHA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'takeGiftShares',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'takePosition',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'takeSeat',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'terminateDeal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'buyer', internalType: 'uint256', type: 'uint256' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferPledge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferTargetShare',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'd1', internalType: 'uint256', type: 'uint256' },
      { name: 'd2', internalType: 'uint256', type: 'uint256' },
      { name: 'd3', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'updateOracle',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'voteCounting',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'voteCountingOfGM',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawPayInAmt',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// RegCenter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const regCenterABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'snOfDoc',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'body', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'CreateDoc',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'headSn',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'counterLocker',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'payload', internalType: 'bytes', type: 'bytes', indexed: false },
      {
        name: 'hashLock',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'LockConsideration',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'headSn',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'hashLock',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'LockPoints',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'to', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'amt', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'MintPoints',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'headSn',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'PickupConsideration',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'headSn',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'PickupPoints',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'snOfRule',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'SetPlatformRule',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'typeOfDoc',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'version',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'body', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetTemplate',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'TransferOwnership',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'to', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'amt', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'TransferPoints',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'TurnOverCenterKey',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'headSn',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'WithdrawPoints',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'typeOfDoc', internalType: 'uint256', type: 'uint256' },
      { name: 'version', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'counterOfDocs',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'counterOfTypes',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'counterOfUsers',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'typeOfDoc', internalType: 'uint256', type: 'uint256' }],
    name: 'counterOfVersions',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'dk', internalType: 'address', type: 'address' }],
    name: 'createComp',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfDoc', internalType: 'bytes32', type: 'bytes32' },
      { name: 'primeKeyOfOwner', internalType: 'address', type: 'address' },
    ],
    name: 'createDoc',
    outputs: [
      {
        name: 'doc',
        internalType: 'struct DocsRepo.Doc',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct DocsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDoc', internalType: 'uint32', type: 'uint32' },
              { name: 'version', internalType: 'uint32', type: 'uint32' },
              { name: 'seqOfDoc', internalType: 'uint64', type: 'uint64' },
              { name: 'creator', internalType: 'uint40', type: 'uint40' },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          { name: 'body', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBookeeper',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'snOfDoc', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getDoc',
    outputs: [
      {
        name: 'doc',
        internalType: 'struct DocsRepo.Doc',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct DocsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDoc', internalType: 'uint32', type: 'uint32' },
              { name: 'version', internalType: 'uint32', type: 'uint32' },
              { name: 'seqOfDoc', internalType: 'uint64', type: 'uint64' },
              { name: 'creator', internalType: 'uint40', type: 'uint40' },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          { name: 'body', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'getDocByUserNo',
    outputs: [
      {
        name: 'doc',
        internalType: 'struct DocsRepo.Doc',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct DocsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDoc', internalType: 'uint32', type: 'uint32' },
              { name: 'version', internalType: 'uint32', type: 'uint32' },
              { name: 'seqOfDoc', internalType: 'uint64', type: 'uint64' },
              { name: 'creator', internalType: 'uint40', type: 'uint40' },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          { name: 'body', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'snOfDoc', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getDocsList',
    outputs: [
      {
        name: '',
        internalType: 'struct DocsRepo.Doc[]',
        type: 'tuple[]',
        components: [
          {
            name: 'head',
            internalType: 'struct DocsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDoc', internalType: 'uint32', type: 'uint32' },
              { name: 'version', internalType: 'uint32', type: 'uint32' },
              { name: 'seqOfDoc', internalType: 'uint64', type: 'uint64' },
              { name: 'creator', internalType: 'uint40', type: 'uint40' },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          { name: 'body', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'hashLock', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getLocker',
    outputs: [
      {
        name: 'locker',
        internalType: 'struct LockersRepo.Locker',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct LockersRepo.Head',
            type: 'tuple',
            components: [
              { name: 'from', internalType: 'uint40', type: 'uint40' },
              { name: 'to', internalType: 'uint40', type: 'uint40' },
              { name: 'expireDate', internalType: 'uint48', type: 'uint48' },
              { name: 'value', internalType: 'uint128', type: 'uint128' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct LockersRepo.Body',
            type: 'tuple',
            components: [
              {
                name: 'counterLocker',
                internalType: 'address',
                type: 'address',
              },
              { name: 'payload', internalType: 'bytes', type: 'bytes' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getLocksList',
    outputs: [{ name: '', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getMyUserNo',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPlatformRule',
    outputs: [
      {
        name: '',
        internalType: 'struct UsersRepo.Rule',
        type: 'tuple',
        components: [
          { name: 'eoaRewards', internalType: 'uint32', type: 'uint32' },
          { name: 'coaRewards', internalType: 'uint32', type: 'uint32' },
          { name: 'ceiling', internalType: 'uint32', type: 'uint32' },
          { name: 'floor', internalType: 'uint32', type: 'uint32' },
          { name: 'rate', internalType: 'uint16', type: 'uint16' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'argu', internalType: 'uint16', type: 'uint16' },
          { name: 'seq', internalType: 'uint16', type: 'uint16' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'author', internalType: 'uint256', type: 'uint256' }],
    name: 'getRoyaltyRule',
    outputs: [
      {
        name: '',
        internalType: 'struct UsersRepo.Key',
        type: 'tuple',
        components: [
          { name: 'pubKey', internalType: 'address', type: 'address' },
          { name: 'refund', internalType: 'uint16', type: 'uint16' },
          { name: 'discount', internalType: 'uint16', type: 'uint16' },
          { name: 'gift', internalType: 'uint32', type: 'uint32' },
          { name: 'coupon', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getUser',
    outputs: [
      {
        name: '',
        internalType: 'struct UsersRepo.User',
        type: 'tuple',
        components: [
          { name: 'isCOA', internalType: 'bool', type: 'bool' },
          { name: 'counterOfV', internalType: 'uint32', type: 'uint32' },
          { name: 'balance', internalType: 'uint216', type: 'uint216' },
          {
            name: 'primeKey',
            internalType: 'struct UsersRepo.Key',
            type: 'tuple',
            components: [
              { name: 'pubKey', internalType: 'address', type: 'address' },
              { name: 'refund', internalType: 'uint16', type: 'uint16' },
              { name: 'discount', internalType: 'uint16', type: 'uint16' },
              { name: 'gift', internalType: 'uint32', type: 'uint32' },
              { name: 'coupon', internalType: 'uint32', type: 'uint32' },
            ],
          },
          {
            name: 'backupKey',
            internalType: 'struct UsersRepo.Key',
            type: 'tuple',
            components: [
              { name: 'pubKey', internalType: 'address', type: 'address' },
              { name: 'refund', internalType: 'uint16', type: 'uint16' },
              { name: 'discount', internalType: 'uint16', type: 'uint16' },
              { name: 'gift', internalType: 'uint32', type: 'uint32' },
              { name: 'coupon', internalType: 'uint32', type: 'uint32' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'targetAddr', internalType: 'address', type: 'address' },
      { name: 'fee', internalType: 'uint256', type: 'uint256' },
      { name: 'author', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getUserNo',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'typeOfDoc', internalType: 'uint256', type: 'uint256' }],
    name: 'getVersionsList',
    outputs: [
      {
        name: '',
        internalType: 'struct DocsRepo.Doc[]',
        type: 'tuple[]',
        components: [
          {
            name: 'head',
            internalType: 'struct DocsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDoc', internalType: 'uint32', type: 'uint32' },
              { name: 'version', internalType: 'uint32', type: 'uint32' },
              { name: 'seqOfDoc', internalType: 'uint64', type: 'uint64' },
              { name: 'creator', internalType: 'uint40', type: 'uint40' },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          { name: 'body', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newKeeper', internalType: 'address', type: 'address' }],
    name: 'handoverCenterKey',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'key', internalType: 'address', type: 'address' }],
    name: 'isKey',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'uint256', type: 'uint256' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
      { name: 'expireDate', internalType: 'uint256', type: 'uint256' },
      { name: 'counterLocker', internalType: 'address', type: 'address' },
      { name: 'payload', internalType: 'bytes', type: 'bytes' },
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'lockConsideration',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'uint256', type: 'uint256' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
      { name: 'expireDate', internalType: 'uint256', type: 'uint256' },
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'lockPoints',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'uint256', type: 'uint256' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
      { name: 'expireDate', internalType: 'uint256', type: 'uint256' },
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'mintAndLockPoints',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'uint256', type: 'uint256' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mintPoints',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
    ],
    name: 'pickupPoints',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'regUser',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'bKey', internalType: 'address', type: 'address' }],
    name: 'setBackupKey',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'snOfRule', internalType: 'bytes32', type: 'bytes32' }],
    name: 'setPlatformRule',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'snOfRoyalty', internalType: 'bytes32', type: 'bytes32' }],
    name: 'setRoyaltyRule',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'typeOfDoc', internalType: 'uint256', type: 'uint256' },
      { name: 'body', internalType: 'address', type: 'address' },
    ],
    name: 'setTemplate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'uint256', type: 'uint256' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferPoints',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'info', internalType: 'bytes32', type: 'bytes32' }],
    name: 'updateUserInfo',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'snOfDoc', internalType: 'bytes32', type: 'bytes32' }],
    name: 'verifyDoc',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'hashLock', internalType: 'bytes32', type: 'bytes32' }],
    name: 'withdrawPoints',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BMMKeeper
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const bmmKeeperABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetRoleAdmin',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'attitude', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'castVote',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'params', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'desHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'executor', internalType: 'uint256', type: 'uint256' },
      { name: 'proposer', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createAction',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'doc', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'executor', internalType: 'uint256', type: 'uint256' },
      { name: 'proposer', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createMotionToApproveDoc',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'nominator', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createMotionToRemoveOfficer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'delegate', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'entrustDelegaterForBoardMeeting',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'typeOfAction', internalType: 'uint256', type: 'uint256' },
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'params', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'desHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execAction',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDK',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isFinalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'candidate', internalType: 'uint256', type: 'uint256' },
      { name: 'nominator', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'nominateOfficer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'proposeMotionToBoard',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'takeBackKeys',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'voteCounting',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IBMMKeeper
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ibmmKeeperABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'attitude', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'castVote',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'params', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'desHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'executor', internalType: 'uint256', type: 'uint256' },
      { name: 'proposer', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createAction',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'doc', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'executor', internalType: 'uint256', type: 'uint256' },
      { name: 'proposer', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createMotionToApproveDoc',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'nominator', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createMotionToRemoveOfficer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'delegate', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'entrustDelegaterForBoardMeeting',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'typeOfAction', internalType: 'uint256', type: 'uint256' },
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'params', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'desHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execAction',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'candidate', internalType: 'uint256', type: 'uint256' },
      { name: 'nominator', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'nominateOfficer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'proposeMotionToBoard',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'voteCounting',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GMMKeeper
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const gmmKeeperABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetRoleAdmin',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'attitude', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'castVoteOfGM',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'params', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'desHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'executor', internalType: 'uint256', type: 'uint256' },
      { name: 'proposer', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createActionOfGM',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createMotionToRemoveDirector',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'delegate', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'entrustDelegaterForGeneralMeeting',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'typeOfAction', internalType: 'uint256', type: 'uint256' },
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'params', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'desHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execActionOfGM',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDK',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isFinalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'candidate', internalType: 'uint256', type: 'uint256' },
      { name: 'nominator', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'nominateDirector',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'doc', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'executor', internalType: 'uint256', type: 'uint256' },
      { name: 'proposer', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'proposeDocOfGM',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'proposeMotionToGeneralMeeting',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'takeBackKeys',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'voteCountingOfGM',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IROAKeeper
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iroaKeeperABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'docUrl', internalType: 'bytes32', type: 'bytes32' },
      { name: 'docHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'circulateIA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
    ],
    name: 'closeDeal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'version', internalType: 'uint256', type: 'uint256' },
      { name: 'primeKeyOfCaller', internalType: 'address', type: 'address' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createIA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'issueNewShare',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
      { name: 'closingDeadline', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'pushToCoffer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'signIA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'terminateDeal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferTargetShare',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IRODKeeper
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const irodKeeperABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quitPosition',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeDirector',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeOfficer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'takePosition',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'takeSeat',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IROCKeeper
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const irocKeeperABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'acceptSHA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sha', internalType: 'address', type: 'address' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'activateSHA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sha', internalType: 'address', type: 'address' },
      { name: 'docUrl', internalType: 'bytes32', type: 'bytes32' },
      { name: 'docHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'circulateSHA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'version', internalType: 'uint256', type: 'uint256' },
      { name: 'primeKeyOfCaller', internalType: 'address', type: 'address' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createSHA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sha', internalType: 'address', type: 'address' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'signSHA',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IGMMKeeper
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const igmmKeeperABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'attitude', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'castVoteOfGM',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'params', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'desHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'executor', internalType: 'uint256', type: 'uint256' },
      { name: 'proposer', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createActionOfGM',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createMotionToRemoveDirector',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'delegate', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'entrustDelegaterForGeneralMeeting',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'typeOfAction', internalType: 'uint256', type: 'uint256' },
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'params', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'desHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execActionOfGM',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'candidate', internalType: 'uint256', type: 'uint256' },
      { name: 'nominator', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'nominateDirector',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'doc', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'executor', internalType: 'uint256', type: 'uint256' },
      { name: 'proposer', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'proposeDocOfGM',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'proposeMotionToGeneralMeeting',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'voteCountingOfGM',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IROMKeeper
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iromKeeperABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseCapital',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
    ],
    name: 'requestPaidInCapital',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'max', internalType: 'uint256', type: 'uint256' }],
    name: 'setMaxQtyOfMembers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
      { name: 'expireDate', internalType: 'uint256', type: 'uint256' },
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'setPayInAmt',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawPayInAmt',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IROSKeeper
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const irosKeeperABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfSwap', internalType: 'bytes32', type: 'bytes32' },
      { name: 'rightholder', internalType: 'uint256', type: 'uint256' },
      { name: 'paidOfConsider', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createSwap',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfConsider', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfTarget', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'crystalizeSwap',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execSwap',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' },
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'lockSwap',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
    ],
    name: 'releaseSwap',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfTarget', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'requestToBuy',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeSwap',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'uint256', type: 'uint256' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferSwap',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ISHAKeeper
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ishaKeeperABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'acceptAlongDeal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'computeFirstRefusal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'dragAlong', internalType: 'bool', type: 'bool' },
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'execAlongRight',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'execAntiDilution',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfFRRule', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfRightholder', internalType: 'uint256', type: 'uint256' },
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'execFirstRefusal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'takeGiftShares',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IROPKeeper
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iropKeeperABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfPld', internalType: 'bytes32', type: 'bytes32' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
      { name: 'guaranteedAmt', internalType: 'uint256', type: 'uint256' },
      { name: 'execDays', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createPledge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfDeal', internalType: 'bytes32', type: 'bytes32' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'version', internalType: 'uint256', type: 'uint256' },
      { name: 'primeKeyOfCaller', internalType: 'address', type: 'address' },
      { name: 'buyer', internalType: 'uint256', type: 'uint256' },
      { name: 'groupOfBuyer', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execPledge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'extDays', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'extendPledge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'lockPledge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'refundDebt',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
    ],
    name: 'releasePledge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokePledge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'buyer', internalType: 'uint256', type: 'uint256' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferPledge',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ROAKeeper
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const roaKeeperABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetRoleAdmin',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'docUrl', internalType: 'bytes32', type: 'bytes32' },
      { name: 'docHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'circulateIA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
    ],
    name: 'closeDeal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'version', internalType: 'uint256', type: 'uint256' },
      { name: 'primeKeyOfCaller', internalType: 'address', type: 'address' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createIA',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDK',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isFinalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'issueNewShare',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
      { name: 'closingDeadline', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'pushToCoffer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'signIA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'takeBackKeys',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'terminateDeal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferTargetShare',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IROOKeeper
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const irooKeeperABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execOption',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfBrf', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execSwapOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfBrf', internalType: 'uint256', type: 'uint256' },
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'lockSwapOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfConsider', internalType: 'uint256', type: 'uint256' },
      { name: 'paidOfConsider', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfTarget', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'placeSwapOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfBrf', internalType: 'uint256', type: 'uint256' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
    ],
    name: 'releaseSwapOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfBrf', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeSwapOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'd1', internalType: 'uint256', type: 'uint256' },
      { name: 'd2', internalType: 'uint256', type: 'uint256' },
      { name: 'd3', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'updateOracle',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ROCKeeper
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const rocKeeperABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetRoleAdmin',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'acceptSHA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sha', internalType: 'address', type: 'address' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'activateSHA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sha', internalType: 'address', type: 'address' },
      { name: 'docUrl', internalType: 'bytes32', type: 'bytes32' },
      { name: 'docHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'circulateSHA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'version', internalType: 'uint256', type: 'uint256' },
      { name: 'primeKeyOfCaller', internalType: 'address', type: 'address' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createSHA',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDK',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isFinalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sha', internalType: 'address', type: 'address' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'signSHA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'takeBackKeys',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// RODKeeper
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const rodKeeperABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetRoleAdmin',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDK',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isFinalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quitPosition',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeDirector',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeOfficer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'takeBackKeys',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'takePosition',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'takeSeat',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ROOKeeper
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const rooKeeperABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetRoleAdmin',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execOption',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfBrf', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execSwapOrder',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDK',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isFinalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfBrf', internalType: 'uint256', type: 'uint256' },
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'lockSwapOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfConsider', internalType: 'uint256', type: 'uint256' },
      { name: 'paidOfConsider', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfTarget', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'placeSwapOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfBrf', internalType: 'uint256', type: 'uint256' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
    ],
    name: 'releaseSwapOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfBrf', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeSwapOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'takeBackKeys',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'd1', internalType: 'uint256', type: 'uint256' },
      { name: 'd2', internalType: 'uint256', type: 'uint256' },
      { name: 'd3', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'updateOracle',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ROPKeeper
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ropKeeperABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetRoleAdmin',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfPld', internalType: 'bytes32', type: 'bytes32' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
      { name: 'guaranteedAmt', internalType: 'uint256', type: 'uint256' },
      { name: 'execDays', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createPledge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfDeal', internalType: 'bytes32', type: 'bytes32' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'version', internalType: 'uint256', type: 'uint256' },
      { name: 'primeKeyOfCaller', internalType: 'address', type: 'address' },
      { name: 'buyer', internalType: 'uint256', type: 'uint256' },
      { name: 'groupOfBuyer', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execPledge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'extDays', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'extendPledge',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDK',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isFinalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'lockPledge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'refundDebt',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
    ],
    name: 'releasePledge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokePledge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'takeBackKeys',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'buyer', internalType: 'uint256', type: 'uint256' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferPledge',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ROSKeeper
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const rosKeeperABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetRoleAdmin',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfSwap', internalType: 'bytes32', type: 'bytes32' },
      { name: 'rightholder', internalType: 'uint256', type: 'uint256' },
      { name: 'paidOfConsider', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createSwap',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfConsider', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfTarget', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'crystalizeSwap',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execSwap',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDK',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isFinalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' },
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'lockSwap',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
    ],
    name: 'releaseSwap',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfTarget', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'requestToBuy',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeSwap',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'takeBackKeys',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'uint256', type: 'uint256' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferSwap',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SHAKeeper
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const shaKeeperABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetRoleAdmin',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'acceptAlongDeal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'computeFirstRefusal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'dragAlong', internalType: 'bool', type: 'bool' },
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'execAlongRight',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'execAntiDilution',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfFRRule', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfRightholder', internalType: 'uint256', type: 'uint256' },
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'execFirstRefusal',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDK',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isFinalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'takeBackKeys',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'takeGiftShares',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ROMKeeper
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const romKeeperABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetRoleAdmin',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseCapital',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDK',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isFinalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
    ],
    name: 'requestPaidInCapital',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'max', internalType: 'uint256', type: 'uint256' }],
    name: 'setMaxQtyOfMembers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
      { name: 'expireDate', internalType: 'uint256', type: 'uint256' },
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'setPayInAmt',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'takeBackKeys',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawPayInAmt',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IInvestmentAgreement
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iInvestmentAgreementABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfDeal',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'AddDeal',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'CirculateDoc' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'seq', internalType: 'uint256', type: 'uint256', indexed: true },
      {
        name: 'hashLock',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'closingDeadline',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ClearDealCP',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'seq', internalType: 'uint256', type: 'uint256', indexed: true },
      {
        name: 'hashKey',
        internalType: 'string',
        type: 'string',
        indexed: true,
      },
    ],
    name: 'CloseDeal',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'seq', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'TerminateDeal',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'beBuyer', internalType: 'bool', type: 'bool' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addBlank',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sn', internalType: 'bytes32', type: 'bytes32' },
      { name: 'buyer', internalType: 'uint256', type: 'uint256' },
      { name: 'groupOfBuyer', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addDeal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'circulateDoc',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'circulated',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seq', internalType: 'uint256', type: 'uint256' },
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
      { name: 'closingDeadline', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'clearDealCP',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seq', internalType: 'uint256', type: 'uint256' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
    ],
    name: 'closeDeal',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'counterOfClosedDeal',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'counterOfDeal',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seq', internalType: 'uint256', type: 'uint256' }],
    name: 'delDeal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seq', internalType: 'uint256', type: 'uint256' }],
    name: 'directCloseDeal',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'established',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'finalizeIA',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seq', internalType: 'uint256', type: 'uint256' }],
    name: 'getBodyOfDeal',
    outputs: [
      {
        name: '',
        internalType: 'struct DealsRepo.Body',
        type: 'tuple',
        components: [
          { name: 'buyer', internalType: 'uint40', type: 'uint40' },
          { name: 'groupOfBuyer', internalType: 'uint40', type: 'uint40' },
          { name: 'paid', internalType: 'uint64', type: 'uint64' },
          { name: 'par', internalType: 'uint64', type: 'uint64' },
          { name: 'state', internalType: 'uint8', type: 'uint8' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'argu', internalType: 'uint16', type: 'uint16' },
          { name: 'flag', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'initPage', internalType: 'bool', type: 'bool' }],
    name: 'getBuyers',
    outputs: [{ name: 'buyers', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCirculateDate',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getClosingDays',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getClosingDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seq', internalType: 'uint256', type: 'uint256' }],
    name: 'getDeal',
    outputs: [
      {
        name: '',
        internalType: 'struct DealsRepo.Deal',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct DealsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDeal', internalType: 'uint8', type: 'uint8' },
              { name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' },
              { name: 'preSeq', internalType: 'uint16', type: 'uint16' },
              { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seller', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              {
                name: 'closingDeadline',
                internalType: 'uint48',
                type: 'uint48',
              },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct DealsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'buyer', internalType: 'uint40', type: 'uint40' },
              { name: 'groupOfBuyer', internalType: 'uint40', type: 'uint40' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'flag', internalType: 'bool', type: 'bool' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seq', internalType: 'uint256', type: 'uint256' }],
    name: 'getHashLockOfDeal',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seq', internalType: 'uint256', type: 'uint256' }],
    name: 'getHeadOfDeal',
    outputs: [
      {
        name: '',
        internalType: 'struct DealsRepo.Head',
        type: 'tuple',
        components: [
          { name: 'typeOfDeal', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' },
          { name: 'preSeq', internalType: 'uint16', type: 'uint16' },
          { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
          { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
          { name: 'seller', internalType: 'uint40', type: 'uint40' },
          { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
          { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
          { name: 'closingDeadline', internalType: 'uint48', type: 'uint48' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'initPage', internalType: 'bool', type: 'bool' }],
    name: 'getParasOfPage',
    outputs: [
      {
        name: '',
        internalType: 'struct SigsRepo.Signature',
        type: 'tuple',
        components: [
          { name: 'signer', internalType: 'uint40', type: 'uint40' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'blocknumber', internalType: 'uint64', type: 'uint64' },
          { name: 'flag', internalType: 'bool', type: 'bool' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'arg', internalType: 'uint16', type: 'uint16' },
          { name: 'seq', internalType: 'uint16', type: 'uint16' },
          { name: 'attr', internalType: 'uint16', type: 'uint16' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getParties',
    outputs: [
      { name: 'parties', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'initPage', internalType: 'bool', type: 'bool' }],
    name: 'getSellers',
    outputs: [
      { name: 'sellers', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSeqList',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSigDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'initParty', internalType: 'bool', type: 'bool' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getSigOfParty',
    outputs: [
      { name: 'seqOfDeals', internalType: 'uint256[]', type: 'uint256[]' },
      {
        name: 'sig',
        internalType: 'struct SigsRepo.Signature',
        type: 'tuple',
        components: [
          { name: 'signer', internalType: 'uint40', type: 'uint40' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'blocknumber', internalType: 'uint64', type: 'uint64' },
          { name: 'flag', internalType: 'bool', type: 'bool' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'arg', internalType: 'uint16', type: 'uint16' },
          { name: 'seq', internalType: 'uint16', type: 'uint16' },
          { name: 'attr', internalType: 'uint16', type: 'uint16' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSigningDays',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'initPage', internalType: 'bool', type: 'bool' }],
    name: 'getSigsOfPage',
    outputs: [
      {
        name: 'sigsOfBuyer',
        internalType: 'struct SigsRepo.Signature[]',
        type: 'tuple[]',
        components: [
          { name: 'signer', internalType: 'uint40', type: 'uint40' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'blocknumber', internalType: 'uint64', type: 'uint64' },
          { name: 'flag', internalType: 'bool', type: 'bool' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'arg', internalType: 'uint16', type: 'uint16' },
          { name: 'seq', internalType: 'uint16', type: 'uint16' },
          { name: 'attr', internalType: 'uint16', type: 'uint16' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
      {
        name: 'sigsOfSeller',
        internalType: 'struct SigsRepo.Signature[]',
        type: 'tuple[]',
        components: [
          { name: 'signer', internalType: 'uint40', type: 'uint40' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'blocknumber', internalType: 'uint64', type: 'uint64' },
          { name: 'flag', internalType: 'bool', type: 'bool' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'arg', internalType: 'uint16', type: 'uint16' },
          { name: 'seq', internalType: 'uint16', type: 'uint16' },
          { name: 'attr', internalType: 'uint16', type: 'uint16' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTypeOfIA',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isBuyer',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seq', internalType: 'uint256', type: 'uint256' }],
    name: 'isDeal',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'isInitSigner',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'isParty',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isSeller',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'isSigner',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seq', internalType: 'uint256', type: 'uint256' }],
    name: 'lockDealSubject',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'deal',
        internalType: 'struct DealsRepo.Deal',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct DealsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDeal', internalType: 'uint8', type: 'uint8' },
              { name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' },
              { name: 'preSeq', internalType: 'uint16', type: 'uint16' },
              { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seller', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              {
                name: 'closingDeadline',
                internalType: 'uint48',
                type: 'uint48',
              },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct DealsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'buyer', internalType: 'uint40', type: 'uint40' },
              { name: 'groupOfBuyer', internalType: 'uint40', type: 'uint40' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'flag', internalType: 'bool', type: 'bool' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'regDeal',
    outputs: [{ name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'signer', internalType: 'uint256', type: 'uint256' },
      { name: 'sigDate', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'regSig',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seq', internalType: 'uint256', type: 'uint256' }],
    name: 'releaseDealSubject',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeBlank',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'signingDays', internalType: 'uint256', type: 'uint256' },
      { name: 'closingDays', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setTiming',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'signDoc',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seq', internalType: 'uint256', type: 'uint256' }],
    name: 'takeGift',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' }],
    name: 'terminateDeal',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BookOfShares
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const bookOfSharesABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'paid', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'DecreaseCleanPaid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'DeregisterShare',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'paid', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'IncreaseCleanPaid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'shareNumber',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'paid', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'par', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'IssueShare',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'PayInCapital',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'headSn',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'hashLock',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'SetPayInAmt',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetRoleAdmin',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'paid', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'par', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SubAmountFromShare',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'state',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'UpdateStateOfShare',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'WithdrawPayInAmt',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'counterOfClasses',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'counterOfShares',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseCapital',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseCleanPaid',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfShare', internalType: 'uint256', type: 'uint256' }],
    name: 'getBodyOfShare',
    outputs: [
      {
        name: 'body',
        internalType: 'struct SharesRepo.Body',
        type: 'tuple',
        components: [
          { name: 'payInDeadline', internalType: 'uint48', type: 'uint48' },
          { name: 'paid', internalType: 'uint64', type: 'uint64' },
          { name: 'par', internalType: 'uint64', type: 'uint64' },
          { name: 'cleanPaid', internalType: 'uint64', type: 'uint64' },
          { name: 'state', internalType: 'uint8', type: 'uint8' },
          { name: 'para', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDK',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfShare', internalType: 'uint256', type: 'uint256' }],
    name: 'getHeadOfShare',
    outputs: [
      {
        name: 'head',
        internalType: 'struct SharesRepo.Head',
        type: 'tuple',
        components: [
          { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
          { name: 'preSeq', internalType: 'uint32', type: 'uint32' },
          { name: 'class', internalType: 'uint16', type: 'uint16' },
          { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
          { name: 'shareholder', internalType: 'uint40', type: 'uint40' },
          { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
          { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'argu', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'hashLock', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getLocker',
    outputs: [
      {
        name: 'locker',
        internalType: 'struct LockersRepo.Locker',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct LockersRepo.Head',
            type: 'tuple',
            components: [
              { name: 'from', internalType: 'uint40', type: 'uint40' },
              { name: 'to', internalType: 'uint40', type: 'uint40' },
              { name: 'expireDate', internalType: 'uint48', type: 'uint48' },
              { name: 'value', internalType: 'uint128', type: 'uint128' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct LockersRepo.Body',
            type: 'tuple',
            components: [
              {
                name: 'counterLocker',
                internalType: 'address',
                type: 'address',
              },
              { name: 'payload', internalType: 'bytes', type: 'bytes' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getLocksList',
    outputs: [{ name: '', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfShare', internalType: 'uint256', type: 'uint256' }],
    name: 'getShare',
    outputs: [
      {
        name: 'share',
        internalType: 'struct SharesRepo.Share',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct SharesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'preSeq', internalType: 'uint32', type: 'uint32' },
              { name: 'class', internalType: 'uint16', type: 'uint16' },
              { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
              { name: 'shareholder', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct SharesRepo.Body',
            type: 'tuple',
            components: [
              { name: 'payInDeadline', internalType: 'uint48', type: 'uint48' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'cleanPaid', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint8', type: 'uint8' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'class', internalType: 'uint256', type: 'uint256' }],
    name: 'getSharesOfClass',
    outputs: [
      { name: 'seqList', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseCleanPaid',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isFinalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfShare', internalType: 'uint256', type: 'uint256' }],
    name: 'isShare',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'shareNumber', internalType: 'bytes32', type: 'bytes32' },
      { name: 'payInDeadline', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'issueShare',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'share',
        internalType: 'struct SharesRepo.Share',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct SharesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'preSeq', internalType: 'uint32', type: 'uint32' },
              { name: 'class', internalType: 'uint16', type: 'uint16' },
              { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
              { name: 'shareholder', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct SharesRepo.Body',
            type: 'tuple',
            components: [
              { name: 'payInDeadline', internalType: 'uint48', type: 'uint48' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'cleanPaid', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint8', type: 'uint8' },
            ],
          },
        ],
      },
    ],
    name: 'regShare',
    outputs: [
      {
        name: 'newShare',
        internalType: 'struct SharesRepo.Share',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct SharesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'preSeq', internalType: 'uint32', type: 'uint32' },
              { name: 'class', internalType: 'uint16', type: 'uint16' },
              { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
              { name: 'shareholder', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct SharesRepo.Body',
            type: 'tuple',
            components: [
              { name: 'payInDeadline', internalType: 'uint48', type: 'uint48' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'cleanPaid', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint8', type: 'uint8' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
    ],
    name: 'requestPaidInCapital',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
      { name: 'expireDate', internalType: 'uint256', type: 'uint256' },
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'setPayInAmt',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'takeBackKeys',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'uint256', type: 'uint256' },
      { name: 'priceOfPaid', internalType: 'uint256', type: 'uint256' },
      { name: 'priceOfPar', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferShare',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'state', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'updateStateOfShare',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawPayInAmt',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IBookOfShares
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iBookOfSharesABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'paid', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'DecreaseCleanPaid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'DeregisterShare',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'paid', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'IncreaseCleanPaid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'shareNumber',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'paid', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'par', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'IssueShare',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'PayInCapital',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'headSn',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'hashLock',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'SetPayInAmt',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'paid', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'par', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SubAmountFromShare',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'state',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'UpdateStateOfShare',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'WithdrawPayInAmt',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'counterOfClasses',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'counterOfShares',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseCapital',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseCleanPaid',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfShare', internalType: 'uint256', type: 'uint256' }],
    name: 'getBodyOfShare',
    outputs: [
      {
        name: 'body',
        internalType: 'struct SharesRepo.Body',
        type: 'tuple',
        components: [
          { name: 'payInDeadline', internalType: 'uint48', type: 'uint48' },
          { name: 'paid', internalType: 'uint64', type: 'uint64' },
          { name: 'par', internalType: 'uint64', type: 'uint64' },
          { name: 'cleanPaid', internalType: 'uint64', type: 'uint64' },
          { name: 'state', internalType: 'uint8', type: 'uint8' },
          { name: 'para', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfShare', internalType: 'uint256', type: 'uint256' }],
    name: 'getHeadOfShare',
    outputs: [
      {
        name: 'head',
        internalType: 'struct SharesRepo.Head',
        type: 'tuple',
        components: [
          { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
          { name: 'preSeq', internalType: 'uint32', type: 'uint32' },
          { name: 'class', internalType: 'uint16', type: 'uint16' },
          { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
          { name: 'shareholder', internalType: 'uint40', type: 'uint40' },
          { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
          { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'argu', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'hashLock', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getLocker',
    outputs: [
      {
        name: 'locker',
        internalType: 'struct LockersRepo.Locker',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct LockersRepo.Head',
            type: 'tuple',
            components: [
              { name: 'from', internalType: 'uint40', type: 'uint40' },
              { name: 'to', internalType: 'uint40', type: 'uint40' },
              { name: 'expireDate', internalType: 'uint48', type: 'uint48' },
              { name: 'value', internalType: 'uint128', type: 'uint128' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct LockersRepo.Body',
            type: 'tuple',
            components: [
              {
                name: 'counterLocker',
                internalType: 'address',
                type: 'address',
              },
              { name: 'payload', internalType: 'bytes', type: 'bytes' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getLocksList',
    outputs: [{ name: '', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfShare', internalType: 'uint256', type: 'uint256' }],
    name: 'getShare',
    outputs: [
      {
        name: 'share',
        internalType: 'struct SharesRepo.Share',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct SharesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'preSeq', internalType: 'uint32', type: 'uint32' },
              { name: 'class', internalType: 'uint16', type: 'uint16' },
              { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
              { name: 'shareholder', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct SharesRepo.Body',
            type: 'tuple',
            components: [
              { name: 'payInDeadline', internalType: 'uint48', type: 'uint48' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'cleanPaid', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint8', type: 'uint8' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'class', internalType: 'uint256', type: 'uint256' }],
    name: 'getSharesOfClass',
    outputs: [
      { name: 'seqList', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseCleanPaid',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfShare', internalType: 'uint256', type: 'uint256' }],
    name: 'isShare',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'shareNumber', internalType: 'bytes32', type: 'bytes32' },
      { name: 'payInDeadline', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'issueShare',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'share',
        internalType: 'struct SharesRepo.Share',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct SharesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'preSeq', internalType: 'uint32', type: 'uint32' },
              { name: 'class', internalType: 'uint16', type: 'uint16' },
              { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
              { name: 'shareholder', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct SharesRepo.Body',
            type: 'tuple',
            components: [
              { name: 'payInDeadline', internalType: 'uint48', type: 'uint48' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'cleanPaid', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint8', type: 'uint8' },
            ],
          },
        ],
      },
    ],
    name: 'regShare',
    outputs: [
      {
        name: 'newShare',
        internalType: 'struct SharesRepo.Share',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct SharesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'preSeq', internalType: 'uint32', type: 'uint32' },
              { name: 'class', internalType: 'uint16', type: 'uint16' },
              { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
              { name: 'shareholder', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct SharesRepo.Body',
            type: 'tuple',
            components: [
              { name: 'payInDeadline', internalType: 'uint48', type: 'uint48' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'cleanPaid', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint8', type: 'uint8' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
    ],
    name: 'requestPaidInCapital',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
      { name: 'expireDate', internalType: 'uint256', type: 'uint256' },
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'setPayInAmt',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'uint256', type: 'uint256' },
      { name: 'priceOfPaid', internalType: 'uint256', type: 'uint256' },
      { name: 'priceOfPar', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferShare',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'state', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'updateStateOfShare',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawPayInAmt',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IRegisterOfAgreements
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iRegisterOfAgreementsABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'seqOfDeal',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'AcceptAlongClaims',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'seqOfDeal',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'caller',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ClaimFirstRefusal',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'seqOfDeal',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ComputeFirstRefusal',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'snOfDTClaim',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'sigHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
    ],
    name: 'ExecAlongRight',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'body', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'state',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'UpdateStateOfFile',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'acceptAlongClaims',
    outputs: [
      {
        name: '',
        internalType: 'struct DTClaims.Claim[]',
        type: 'tuple[]',
        components: [
          { name: 'typeOfClaim', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
          { name: 'paid', internalType: 'uint64', type: 'uint64' },
          { name: 'par', internalType: 'uint64', type: 'uint64' },
          { name: 'claimer', internalType: 'uint40', type: 'uint40' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'ia', internalType: 'address', type: 'address' }],
    name: 'allClaimsAccepted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'ia', internalType: 'address', type: 'address' }],
    name: 'allDTClaimsAccepted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'ia', internalType: 'address', type: 'address' }],
    name: 'allFRClaimsAccepted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'body', internalType: 'address', type: 'address' },
      { name: 'signingDays', internalType: 'uint16', type: 'uint16' },
      { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
      {
        name: 'vr',
        internalType: 'struct RulesParser.VotingRule',
        type: 'tuple',
        components: [
          { name: 'seqOfRule', internalType: 'uint16', type: 'uint16' },
          { name: 'qtyOfSubRule', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfSubRule', internalType: 'uint8', type: 'uint8' },
          { name: 'authority', internalType: 'uint8', type: 'uint8' },
          { name: 'headRatio', internalType: 'uint16', type: 'uint16' },
          { name: 'amountRatio', internalType: 'uint16', type: 'uint16' },
          { name: 'onlyAttendance', internalType: 'bool', type: 'bool' },
          { name: 'impliedConsent', internalType: 'bool', type: 'bool' },
          { name: 'partyAsConsent', internalType: 'bool', type: 'bool' },
          { name: 'againstShallBuy', internalType: 'bool', type: 'bool' },
          { name: 'frExecDays', internalType: 'uint8', type: 'uint8' },
          { name: 'dtExecDays', internalType: 'uint8', type: 'uint8' },
          { name: 'dtConfirmDays', internalType: 'uint8', type: 'uint8' },
          { name: 'invExitDays', internalType: 'uint8', type: 'uint8' },
          { name: 'votePrepareDays', internalType: 'uint8', type: 'uint8' },
          { name: 'votingDays', internalType: 'uint8', type: 'uint8' },
          { name: 'execDaysForPutOpt', internalType: 'uint8', type: 'uint8' },
          { name: 'vetoers', internalType: 'uint40[2]', type: 'uint40[2]' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
        ],
      },
      { name: 'docUrl', internalType: 'bytes32', type: 'bytes32' },
      { name: 'docHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'circulateFile',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'claimFirstRefusal',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'closingDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'computeFirstRefusal',
    outputs: [
      {
        name: 'output',
        internalType: 'struct FRClaims.Claim[]',
        type: 'tuple[]',
        components: [
          { name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' },
          { name: 'claimer', internalType: 'uint40', type: 'uint40' },
          { name: 'weight', internalType: 'uint64', type: 'uint64' },
          { name: 'ratio', internalType: 'uint64', type: 'uint64' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'ia', internalType: 'address', type: 'address' }],
    name: 'createMockOfIA',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'dtExecDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'dragAlong', internalType: 'bool', type: 'bool' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'execAlongRight',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'execFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'frExecDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getDTClaimForShare',
    outputs: [
      {
        name: '',
        internalType: 'struct DTClaims.Claim',
        type: 'tuple',
        components: [
          { name: 'typeOfClaim', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
          { name: 'paid', internalType: 'uint64', type: 'uint64' },
          { name: 'par', internalType: 'uint64', type: 'uint64' },
          { name: 'claimer', internalType: 'uint40', type: 'uint40' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getDTClaimsOfDeal',
    outputs: [
      {
        name: '',
        internalType: 'struct DTClaims.Claim[]',
        type: 'tuple[]',
        components: [
          { name: 'typeOfClaim', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
          { name: 'paid', internalType: 'uint64', type: 'uint64' },
          { name: 'par', internalType: 'uint64', type: 'uint64' },
          { name: 'claimer', internalType: 'uint40', type: 'uint40' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getFRClaimsOfDeal',
    outputs: [
      {
        name: '',
        internalType: 'struct FRClaims.Claim[]',
        type: 'tuple[]',
        components: [
          { name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' },
          { name: 'claimer', internalType: 'uint40', type: 'uint40' },
          { name: 'weight', internalType: 'uint64', type: 'uint64' },
          { name: 'ratio', internalType: 'uint64', type: 'uint64' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'getFile',
    outputs: [
      {
        name: '',
        internalType: 'struct FilesRepo.File',
        type: 'tuple',
        components: [
          { name: 'snOfDoc', internalType: 'bytes32', type: 'bytes32' },
          {
            name: 'head',
            internalType: 'struct FilesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'circulateDate', internalType: 'uint48', type: 'uint48' },
              { name: 'signingDays', internalType: 'uint8', type: 'uint8' },
              { name: 'closingDays', internalType: 'uint8', type: 'uint8' },
              { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
              { name: 'frExecDays', internalType: 'uint8', type: 'uint8' },
              { name: 'dtExecDays', internalType: 'uint8', type: 'uint8' },
              { name: 'dtConfirmDays', internalType: 'uint8', type: 'uint8' },
              { name: 'proposeDate', internalType: 'uint48', type: 'uint48' },
              { name: 'invExitDays', internalType: 'uint8', type: 'uint8' },
              { name: 'votePrepareDays', internalType: 'uint8', type: 'uint8' },
              { name: 'votingDays', internalType: 'uint8', type: 'uint8' },
              {
                name: 'execDaysForPutOpt',
                internalType: 'uint8',
                type: 'uint8',
              },
              { name: 'seqOfMotion', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'ref',
            internalType: 'struct FilesRepo.Ref',
            type: 'tuple',
            components: [
              { name: 'docUrl', internalType: 'bytes32', type: 'bytes32' },
              { name: 'docHash', internalType: 'bytes32', type: 'bytes32' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getFilesList',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'getHeadOfFile',
    outputs: [
      {
        name: 'head',
        internalType: 'struct FilesRepo.Head',
        type: 'tuple',
        components: [
          { name: 'circulateDate', internalType: 'uint48', type: 'uint48' },
          { name: 'signingDays', internalType: 'uint8', type: 'uint8' },
          { name: 'closingDays', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
          { name: 'frExecDays', internalType: 'uint8', type: 'uint8' },
          { name: 'dtExecDays', internalType: 'uint8', type: 'uint8' },
          { name: 'dtConfirmDays', internalType: 'uint8', type: 'uint8' },
          { name: 'proposeDate', internalType: 'uint48', type: 'uint48' },
          { name: 'invExitDays', internalType: 'uint8', type: 'uint8' },
          { name: 'votePrepareDays', internalType: 'uint8', type: 'uint8' },
          { name: 'votingDays', internalType: 'uint8', type: 'uint8' },
          { name: 'execDaysForPutOpt', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfMotion', internalType: 'uint64', type: 'uint64' },
          { name: 'state', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'ia', internalType: 'address', type: 'address' }],
    name: 'getSubjectDealsOfDT',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'ia', internalType: 'address', type: 'address' }],
    name: 'getSubjectDealsOfFR',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasDTClaims',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasFRClaims',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isFRClaimer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'isRegistered',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'buyer', internalType: 'uint256', type: 'uint256' },
      { name: 'groupRep', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mockDealOfBuy',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seller', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mockDealOfSell',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mockResultsOfAcct',
    outputs: [
      { name: 'groupRep', internalType: 'uint40', type: 'uint40' },
      { name: 'ratio', internalType: 'uint16', type: 'uint16' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'ia', internalType: 'address', type: 'address' }],
    name: 'mockResultsOfIA',
    outputs: [
      { name: 'controllor', internalType: 'uint40', type: 'uint40' },
      { name: 'ratio', internalType: 'uint16', type: 'uint16' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'body', internalType: 'address', type: 'address' },
      { name: 'seqOfMotion', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'proposeFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'qtyOfFiles',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfDoc', internalType: 'bytes32', type: 'bytes32' },
      { name: 'body', internalType: 'address', type: 'address' },
    ],
    name: 'regFile',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'body', internalType: 'address', type: 'address' },
      { name: 'state', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setStateOfFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'signingDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'terminateFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'terminateStartpoint',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'body', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'voteCountingForFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'votingDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// InvestmentAgreement
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const investmentAgreementABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfDeal',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'AddDeal',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'CirculateDoc' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'seq', internalType: 'uint256', type: 'uint256', indexed: true },
      {
        name: 'hashLock',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'closingDeadline',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ClearDealCP',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'seq', internalType: 'uint256', type: 'uint256', indexed: true },
      {
        name: 'hashKey',
        internalType: 'string',
        type: 'string',
        indexed: true,
      },
    ],
    name: 'CloseDeal',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetRoleAdmin',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'seq', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'TerminateDeal',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'beBuyer', internalType: 'bool', type: 'bool' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addBlank',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sn', internalType: 'bytes32', type: 'bytes32' },
      { name: 'buyer', internalType: 'uint256', type: 'uint256' },
      { name: 'groupOfBuyer', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addDeal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'circulateDoc',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'circulated',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seq', internalType: 'uint256', type: 'uint256' },
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
      { name: 'closingDeadline', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'clearDealCP',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seq', internalType: 'uint256', type: 'uint256' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
    ],
    name: 'closeDeal',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'counterOfClosedDeal',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'counterOfDeal',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seq', internalType: 'uint256', type: 'uint256' }],
    name: 'delDeal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seq', internalType: 'uint256', type: 'uint256' }],
    name: 'directCloseDeal',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'established',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'finalizeIA',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seq', internalType: 'uint256', type: 'uint256' }],
    name: 'getBodyOfDeal',
    outputs: [
      {
        name: '',
        internalType: 'struct DealsRepo.Body',
        type: 'tuple',
        components: [
          { name: 'buyer', internalType: 'uint40', type: 'uint40' },
          { name: 'groupOfBuyer', internalType: 'uint40', type: 'uint40' },
          { name: 'paid', internalType: 'uint64', type: 'uint64' },
          { name: 'par', internalType: 'uint64', type: 'uint64' },
          { name: 'state', internalType: 'uint8', type: 'uint8' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'argu', internalType: 'uint16', type: 'uint16' },
          { name: 'flag', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'initPage', internalType: 'bool', type: 'bool' }],
    name: 'getBuyers',
    outputs: [{ name: 'buyers', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCirculateDate',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getClosingDays',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getClosingDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDK',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' }],
    name: 'getDeal',
    outputs: [
      {
        name: '',
        internalType: 'struct DealsRepo.Deal',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct DealsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDeal', internalType: 'uint8', type: 'uint8' },
              { name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' },
              { name: 'preSeq', internalType: 'uint16', type: 'uint16' },
              { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seller', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              {
                name: 'closingDeadline',
                internalType: 'uint48',
                type: 'uint48',
              },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct DealsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'buyer', internalType: 'uint40', type: 'uint40' },
              { name: 'groupOfBuyer', internalType: 'uint40', type: 'uint40' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'flag', internalType: 'bool', type: 'bool' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seq', internalType: 'uint256', type: 'uint256' }],
    name: 'getHashLockOfDeal',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seq', internalType: 'uint256', type: 'uint256' }],
    name: 'getHeadOfDeal',
    outputs: [
      {
        name: '',
        internalType: 'struct DealsRepo.Head',
        type: 'tuple',
        components: [
          { name: 'typeOfDeal', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' },
          { name: 'preSeq', internalType: 'uint16', type: 'uint16' },
          { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
          { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
          { name: 'seller', internalType: 'uint40', type: 'uint40' },
          { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
          { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
          { name: 'closingDeadline', internalType: 'uint48', type: 'uint48' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'initPage', internalType: 'bool', type: 'bool' }],
    name: 'getParasOfPage',
    outputs: [
      {
        name: '',
        internalType: 'struct SigsRepo.Signature',
        type: 'tuple',
        components: [
          { name: 'signer', internalType: 'uint40', type: 'uint40' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'blocknumber', internalType: 'uint64', type: 'uint64' },
          { name: 'flag', internalType: 'bool', type: 'bool' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'arg', internalType: 'uint16', type: 'uint16' },
          { name: 'seq', internalType: 'uint16', type: 'uint16' },
          { name: 'attr', internalType: 'uint16', type: 'uint16' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getParties',
    outputs: [
      { name: 'parties', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'initPage', internalType: 'bool', type: 'bool' }],
    name: 'getSellers',
    outputs: [
      { name: 'sellers', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSeqList',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSigDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getSigOfParty',
    outputs: [
      { name: 'seqOfDeals', internalType: 'uint256[]', type: 'uint256[]' },
      {
        name: 'sig',
        internalType: 'struct SigsRepo.Signature',
        type: 'tuple',
        components: [
          { name: 'signer', internalType: 'uint40', type: 'uint40' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'blocknumber', internalType: 'uint64', type: 'uint64' },
          { name: 'flag', internalType: 'bool', type: 'bool' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'arg', internalType: 'uint16', type: 'uint16' },
          { name: 'seq', internalType: 'uint16', type: 'uint16' },
          { name: 'attr', internalType: 'uint16', type: 'uint16' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSigningDays',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'initPage', internalType: 'bool', type: 'bool' }],
    name: 'getSigsOfPage',
    outputs: [
      {
        name: 'sigsOfBuyer',
        internalType: 'struct SigsRepo.Signature[]',
        type: 'tuple[]',
        components: [
          { name: 'signer', internalType: 'uint40', type: 'uint40' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'blocknumber', internalType: 'uint64', type: 'uint64' },
          { name: 'flag', internalType: 'bool', type: 'bool' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'arg', internalType: 'uint16', type: 'uint16' },
          { name: 'seq', internalType: 'uint16', type: 'uint16' },
          { name: 'attr', internalType: 'uint16', type: 'uint16' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
      {
        name: 'sigsOfSeller',
        internalType: 'struct SigsRepo.Signature[]',
        type: 'tuple[]',
        components: [
          { name: 'signer', internalType: 'uint40', type: 'uint40' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'blocknumber', internalType: 'uint64', type: 'uint64' },
          { name: 'flag', internalType: 'bool', type: 'bool' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'arg', internalType: 'uint16', type: 'uint16' },
          { name: 'seq', internalType: 'uint16', type: 'uint16' },
          { name: 'attr', internalType: 'uint16', type: 'uint16' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTypeOfIA',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isBuyer',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' }],
    name: 'isDeal',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isFinalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'isInitSigner',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'isParty',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isSeller',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'isSigner',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seq', internalType: 'uint256', type: 'uint256' }],
    name: 'lockDealSubject',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'deal',
        internalType: 'struct DealsRepo.Deal',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct DealsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDeal', internalType: 'uint8', type: 'uint8' },
              { name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' },
              { name: 'preSeq', internalType: 'uint16', type: 'uint16' },
              { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seller', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              {
                name: 'closingDeadline',
                internalType: 'uint48',
                type: 'uint48',
              },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct DealsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'buyer', internalType: 'uint40', type: 'uint40' },
              { name: 'groupOfBuyer', internalType: 'uint40', type: 'uint40' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'flag', internalType: 'bool', type: 'bool' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'regDeal',
    outputs: [{ name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'signer', internalType: 'uint256', type: 'uint256' },
      { name: 'sigDate', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'regSig',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seq', internalType: 'uint256', type: 'uint256' }],
    name: 'releaseDealSubject',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeBlank',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'signingDays', internalType: 'uint256', type: 'uint256' },
      { name: 'closingDays', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setTiming',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'signDoc',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'takeBackKeys',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seq', internalType: 'uint256', type: 'uint256' }],
    name: 'takeGift',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' }],
    name: 'terminateDeal',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IRegisterOfConstitution
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iRegisterOfConstitutionABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'pointer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'ChangePointer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'body', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'state',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'UpdateStateOfFile',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'changePointer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'body', internalType: 'address', type: 'address' },
      { name: 'signingDays', internalType: 'uint16', type: 'uint16' },
      { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
      {
        name: 'vr',
        internalType: 'struct RulesParser.VotingRule',
        type: 'tuple',
        components: [
          { name: 'seqOfRule', internalType: 'uint16', type: 'uint16' },
          { name: 'qtyOfSubRule', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfSubRule', internalType: 'uint8', type: 'uint8' },
          { name: 'authority', internalType: 'uint8', type: 'uint8' },
          { name: 'headRatio', internalType: 'uint16', type: 'uint16' },
          { name: 'amountRatio', internalType: 'uint16', type: 'uint16' },
          { name: 'onlyAttendance', internalType: 'bool', type: 'bool' },
          { name: 'impliedConsent', internalType: 'bool', type: 'bool' },
          { name: 'partyAsConsent', internalType: 'bool', type: 'bool' },
          { name: 'againstShallBuy', internalType: 'bool', type: 'bool' },
          { name: 'frExecDays', internalType: 'uint8', type: 'uint8' },
          { name: 'dtExecDays', internalType: 'uint8', type: 'uint8' },
          { name: 'dtConfirmDays', internalType: 'uint8', type: 'uint8' },
          { name: 'invExitDays', internalType: 'uint8', type: 'uint8' },
          { name: 'votePrepareDays', internalType: 'uint8', type: 'uint8' },
          { name: 'votingDays', internalType: 'uint8', type: 'uint8' },
          { name: 'execDaysForPutOpt', internalType: 'uint8', type: 'uint8' },
          { name: 'vetoers', internalType: 'uint40[2]', type: 'uint40[2]' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
        ],
      },
      { name: 'docUrl', internalType: 'bytes32', type: 'bytes32' },
      { name: 'docHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'circulateFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'closingDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'dtExecDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'execFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'frExecDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'getFile',
    outputs: [
      {
        name: '',
        internalType: 'struct FilesRepo.File',
        type: 'tuple',
        components: [
          { name: 'snOfDoc', internalType: 'bytes32', type: 'bytes32' },
          {
            name: 'head',
            internalType: 'struct FilesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'circulateDate', internalType: 'uint48', type: 'uint48' },
              { name: 'signingDays', internalType: 'uint8', type: 'uint8' },
              { name: 'closingDays', internalType: 'uint8', type: 'uint8' },
              { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
              { name: 'frExecDays', internalType: 'uint8', type: 'uint8' },
              { name: 'dtExecDays', internalType: 'uint8', type: 'uint8' },
              { name: 'dtConfirmDays', internalType: 'uint8', type: 'uint8' },
              { name: 'proposeDate', internalType: 'uint48', type: 'uint48' },
              { name: 'invExitDays', internalType: 'uint8', type: 'uint8' },
              { name: 'votePrepareDays', internalType: 'uint8', type: 'uint8' },
              { name: 'votingDays', internalType: 'uint8', type: 'uint8' },
              {
                name: 'execDaysForPutOpt',
                internalType: 'uint8',
                type: 'uint8',
              },
              { name: 'seqOfMotion', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'ref',
            internalType: 'struct FilesRepo.Ref',
            type: 'tuple',
            components: [
              { name: 'docUrl', internalType: 'bytes32', type: 'bytes32' },
              { name: 'docHash', internalType: 'bytes32', type: 'bytes32' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getFilesList',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'getHeadOfFile',
    outputs: [
      {
        name: 'head',
        internalType: 'struct FilesRepo.Head',
        type: 'tuple',
        components: [
          { name: 'circulateDate', internalType: 'uint48', type: 'uint48' },
          { name: 'signingDays', internalType: 'uint8', type: 'uint8' },
          { name: 'closingDays', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
          { name: 'frExecDays', internalType: 'uint8', type: 'uint8' },
          { name: 'dtExecDays', internalType: 'uint8', type: 'uint8' },
          { name: 'dtConfirmDays', internalType: 'uint8', type: 'uint8' },
          { name: 'proposeDate', internalType: 'uint48', type: 'uint48' },
          { name: 'invExitDays', internalType: 'uint8', type: 'uint8' },
          { name: 'votePrepareDays', internalType: 'uint8', type: 'uint8' },
          { name: 'votingDays', internalType: 'uint8', type: 'uint8' },
          { name: 'execDaysForPutOpt', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfMotion', internalType: 'uint64', type: 'uint64' },
          { name: 'state', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'isRegistered',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'pointer',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'body', internalType: 'address', type: 'address' },
      { name: 'seqOfMotion', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'proposeFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'qtyOfFiles',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfDoc', internalType: 'bytes32', type: 'bytes32' },
      { name: 'body', internalType: 'address', type: 'address' },
    ],
    name: 'regFile',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'body', internalType: 'address', type: 'address' },
      { name: 'state', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setStateOfFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'signingDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'terminateFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'terminateStartpoint',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'body', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'voteCountingForFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'votingDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// RegisterOfAgreements
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const registerOfAgreementsABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'seqOfDeal',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'AcceptAlongClaims',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'seqOfDeal',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'caller',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ClaimFirstRefusal',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'seqOfDeal',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ComputeFirstRefusal',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'snOfDTClaim',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'sigHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
    ],
    name: 'ExecAlongRight',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetRoleAdmin',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'body', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'state',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'UpdateStateOfFile',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'acceptAlongClaims',
    outputs: [
      {
        name: '',
        internalType: 'struct DTClaims.Claim[]',
        type: 'tuple[]',
        components: [
          { name: 'typeOfClaim', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
          { name: 'paid', internalType: 'uint64', type: 'uint64' },
          { name: 'par', internalType: 'uint64', type: 'uint64' },
          { name: 'claimer', internalType: 'uint40', type: 'uint40' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'ia', internalType: 'address', type: 'address' }],
    name: 'allClaimsAccepted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'ia', internalType: 'address', type: 'address' }],
    name: 'allDTClaimsAccepted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'ia', internalType: 'address', type: 'address' }],
    name: 'allFRClaimsAccepted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'body', internalType: 'address', type: 'address' },
      { name: 'signingDays', internalType: 'uint16', type: 'uint16' },
      { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
      {
        name: 'vr',
        internalType: 'struct RulesParser.VotingRule',
        type: 'tuple',
        components: [
          { name: 'seqOfRule', internalType: 'uint16', type: 'uint16' },
          { name: 'qtyOfSubRule', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfSubRule', internalType: 'uint8', type: 'uint8' },
          { name: 'authority', internalType: 'uint8', type: 'uint8' },
          { name: 'headRatio', internalType: 'uint16', type: 'uint16' },
          { name: 'amountRatio', internalType: 'uint16', type: 'uint16' },
          { name: 'onlyAttendance', internalType: 'bool', type: 'bool' },
          { name: 'impliedConsent', internalType: 'bool', type: 'bool' },
          { name: 'partyAsConsent', internalType: 'bool', type: 'bool' },
          { name: 'againstShallBuy', internalType: 'bool', type: 'bool' },
          { name: 'frExecDays', internalType: 'uint8', type: 'uint8' },
          { name: 'dtExecDays', internalType: 'uint8', type: 'uint8' },
          { name: 'dtConfirmDays', internalType: 'uint8', type: 'uint8' },
          { name: 'invExitDays', internalType: 'uint8', type: 'uint8' },
          { name: 'votePrepareDays', internalType: 'uint8', type: 'uint8' },
          { name: 'votingDays', internalType: 'uint8', type: 'uint8' },
          { name: 'execDaysForPutOpt', internalType: 'uint8', type: 'uint8' },
          { name: 'vetoers', internalType: 'uint40[2]', type: 'uint40[2]' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
        ],
      },
      { name: 'docUrl', internalType: 'bytes32', type: 'bytes32' },
      { name: 'docHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'circulateFile',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'claimFirstRefusal',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'closingDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'computeFirstRefusal',
    outputs: [
      {
        name: 'output',
        internalType: 'struct FRClaims.Claim[]',
        type: 'tuple[]',
        components: [
          { name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' },
          { name: 'claimer', internalType: 'uint40', type: 'uint40' },
          { name: 'weight', internalType: 'uint64', type: 'uint64' },
          { name: 'ratio', internalType: 'uint64', type: 'uint64' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'ia', internalType: 'address', type: 'address' }],
    name: 'createMockOfIA',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'dtExecDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'dragAlong', internalType: 'bool', type: 'bool' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'execAlongRight',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'execFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'frExecDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDK',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getDTClaimForShare',
    outputs: [
      {
        name: '',
        internalType: 'struct DTClaims.Claim',
        type: 'tuple',
        components: [
          { name: 'typeOfClaim', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
          { name: 'paid', internalType: 'uint64', type: 'uint64' },
          { name: 'par', internalType: 'uint64', type: 'uint64' },
          { name: 'claimer', internalType: 'uint40', type: 'uint40' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getDTClaimsOfDeal',
    outputs: [
      {
        name: '',
        internalType: 'struct DTClaims.Claim[]',
        type: 'tuple[]',
        components: [
          { name: 'typeOfClaim', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
          { name: 'paid', internalType: 'uint64', type: 'uint64' },
          { name: 'par', internalType: 'uint64', type: 'uint64' },
          { name: 'claimer', internalType: 'uint40', type: 'uint40' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getFRClaimsOfDeal',
    outputs: [
      {
        name: '',
        internalType: 'struct FRClaims.Claim[]',
        type: 'tuple[]',
        components: [
          { name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' },
          { name: 'claimer', internalType: 'uint40', type: 'uint40' },
          { name: 'weight', internalType: 'uint64', type: 'uint64' },
          { name: 'ratio', internalType: 'uint64', type: 'uint64' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'getFile',
    outputs: [
      {
        name: '',
        internalType: 'struct FilesRepo.File',
        type: 'tuple',
        components: [
          { name: 'snOfDoc', internalType: 'bytes32', type: 'bytes32' },
          {
            name: 'head',
            internalType: 'struct FilesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'circulateDate', internalType: 'uint48', type: 'uint48' },
              { name: 'signingDays', internalType: 'uint8', type: 'uint8' },
              { name: 'closingDays', internalType: 'uint8', type: 'uint8' },
              { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
              { name: 'frExecDays', internalType: 'uint8', type: 'uint8' },
              { name: 'dtExecDays', internalType: 'uint8', type: 'uint8' },
              { name: 'dtConfirmDays', internalType: 'uint8', type: 'uint8' },
              { name: 'proposeDate', internalType: 'uint48', type: 'uint48' },
              { name: 'invExitDays', internalType: 'uint8', type: 'uint8' },
              { name: 'votePrepareDays', internalType: 'uint8', type: 'uint8' },
              { name: 'votingDays', internalType: 'uint8', type: 'uint8' },
              {
                name: 'execDaysForPutOpt',
                internalType: 'uint8',
                type: 'uint8',
              },
              { name: 'seqOfMotion', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'ref',
            internalType: 'struct FilesRepo.Ref',
            type: 'tuple',
            components: [
              { name: 'docUrl', internalType: 'bytes32', type: 'bytes32' },
              { name: 'docHash', internalType: 'bytes32', type: 'bytes32' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getFilesList',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'getHeadOfFile',
    outputs: [
      {
        name: 'head',
        internalType: 'struct FilesRepo.Head',
        type: 'tuple',
        components: [
          { name: 'circulateDate', internalType: 'uint48', type: 'uint48' },
          { name: 'signingDays', internalType: 'uint8', type: 'uint8' },
          { name: 'closingDays', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
          { name: 'frExecDays', internalType: 'uint8', type: 'uint8' },
          { name: 'dtExecDays', internalType: 'uint8', type: 'uint8' },
          { name: 'dtConfirmDays', internalType: 'uint8', type: 'uint8' },
          { name: 'proposeDate', internalType: 'uint48', type: 'uint48' },
          { name: 'invExitDays', internalType: 'uint8', type: 'uint8' },
          { name: 'votePrepareDays', internalType: 'uint8', type: 'uint8' },
          { name: 'votingDays', internalType: 'uint8', type: 'uint8' },
          { name: 'execDaysForPutOpt', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfMotion', internalType: 'uint64', type: 'uint64' },
          { name: 'state', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'ia', internalType: 'address', type: 'address' }],
    name: 'getSubjectDealsOfDT',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'ia', internalType: 'address', type: 'address' }],
    name: 'getSubjectDealsOfFR',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasDTClaims',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasFRClaims',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isFRClaimer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isFinalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'isRegistered',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'buyer', internalType: 'uint256', type: 'uint256' },
      { name: 'groupRep', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mockDealOfBuy',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seller', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mockDealOfSell',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mockResultsOfAcct',
    outputs: [
      { name: 'groupRep', internalType: 'uint40', type: 'uint40' },
      { name: 'ratio', internalType: 'uint16', type: 'uint16' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'ia', internalType: 'address', type: 'address' }],
    name: 'mockResultsOfIA',
    outputs: [
      { name: 'controllor', internalType: 'uint40', type: 'uint40' },
      { name: 'ratio', internalType: 'uint16', type: 'uint16' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'body', internalType: 'address', type: 'address' },
      { name: 'seqOfMotion', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'proposeFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'qtyOfFiles',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfDoc', internalType: 'bytes32', type: 'bytes32' },
      { name: 'body', internalType: 'address', type: 'address' },
    ],
    name: 'regFile',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'body', internalType: 'address', type: 'address' },
      { name: 'state', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setStateOfFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'signingDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'takeBackKeys',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'terminateFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'terminateStartpoint',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'body', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'voteCountingForFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'votingDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IShareholdersAgreement
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iShareholdersAgreementABI = [
  { type: 'event', anonymous: false, inputs: [], name: 'CirculateDoc' },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'beBuyer', internalType: 'bool', type: 'bool' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addBlank',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'rule', internalType: 'bytes32', type: 'bytes32' }],
    name: 'addRule',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'circulateDoc',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'circulated',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'typeOfDoc', internalType: 'uint256', type: 'uint256' },
      { name: 'version', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createTerm',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'established',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'finalizeSHA',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'initPage', internalType: 'bool', type: 'bool' }],
    name: 'getBuyers',
    outputs: [{ name: 'buyers', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCirculateDate',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getClosingDays',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getClosingDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'initPage', internalType: 'bool', type: 'bool' }],
    name: 'getParasOfPage',
    outputs: [
      {
        name: '',
        internalType: 'struct SigsRepo.Signature',
        type: 'tuple',
        components: [
          { name: 'signer', internalType: 'uint40', type: 'uint40' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'blocknumber', internalType: 'uint64', type: 'uint64' },
          { name: 'flag', internalType: 'bool', type: 'bool' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'arg', internalType: 'uint16', type: 'uint16' },
          { name: 'seq', internalType: 'uint16', type: 'uint16' },
          { name: 'attr', internalType: 'uint16', type: 'uint16' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getParties',
    outputs: [
      { name: 'parties', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seq', internalType: 'uint256', type: 'uint256' }],
    name: 'getRule',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getRules',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'initPage', internalType: 'bool', type: 'bool' }],
    name: 'getSellers',
    outputs: [
      { name: 'sellers', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSigDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'initParty', internalType: 'bool', type: 'bool' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getSigOfParty',
    outputs: [
      { name: 'seqOfDeals', internalType: 'uint256[]', type: 'uint256[]' },
      {
        name: 'sig',
        internalType: 'struct SigsRepo.Signature',
        type: 'tuple',
        components: [
          { name: 'signer', internalType: 'uint40', type: 'uint40' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'blocknumber', internalType: 'uint64', type: 'uint64' },
          { name: 'flag', internalType: 'bool', type: 'bool' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'arg', internalType: 'uint16', type: 'uint16' },
          { name: 'seq', internalType: 'uint16', type: 'uint16' },
          { name: 'attr', internalType: 'uint16', type: 'uint16' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSigningDays',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'initPage', internalType: 'bool', type: 'bool' }],
    name: 'getSigsOfPage',
    outputs: [
      {
        name: 'sigsOfBuyer',
        internalType: 'struct SigsRepo.Signature[]',
        type: 'tuple[]',
        components: [
          { name: 'signer', internalType: 'uint40', type: 'uint40' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'blocknumber', internalType: 'uint64', type: 'uint64' },
          { name: 'flag', internalType: 'bool', type: 'bool' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'arg', internalType: 'uint16', type: 'uint16' },
          { name: 'seq', internalType: 'uint16', type: 'uint16' },
          { name: 'attr', internalType: 'uint16', type: 'uint16' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
      {
        name: 'sigsOfSeller',
        internalType: 'struct SigsRepo.Signature[]',
        type: 'tuple[]',
        components: [
          { name: 'signer', internalType: 'uint40', type: 'uint40' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'blocknumber', internalType: 'uint64', type: 'uint64' },
          { name: 'flag', internalType: 'bool', type: 'bool' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'arg', internalType: 'uint16', type: 'uint16' },
          { name: 'seq', internalType: 'uint16', type: 'uint16' },
          { name: 'attr', internalType: 'uint16', type: 'uint16' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'title', internalType: 'uint256', type: 'uint256' }],
    name: 'getTerm',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTitles',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seq', internalType: 'uint256', type: 'uint256' }],
    name: 'hasRule',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'title', internalType: 'uint256', type: 'uint256' }],
    name: 'hasTitle',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'initDefaultRules',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isBuyer',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'isInitSigner',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'isParty',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isSeller',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'isSigner',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'qtyOfRules',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'qtyOfTerms',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'signer', internalType: 'uint256', type: 'uint256' },
      { name: 'sigDate', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'regSig',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeBlank',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seq', internalType: 'uint256', type: 'uint256' }],
    name: 'removeRule',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'typeOfDoc', internalType: 'uint256', type: 'uint256' }],
    name: 'removeTerm',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'signingDays', internalType: 'uint256', type: 'uint256' },
      { name: 'closingDays', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setTiming',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'signDoc',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// RegisterOfConstitution
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const registerOfConstitutionABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'pointer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'ChangePointer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetRoleAdmin',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'body', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'state',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'UpdateStateOfFile',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'changePointer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'body', internalType: 'address', type: 'address' },
      { name: 'signingDays', internalType: 'uint16', type: 'uint16' },
      { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
      {
        name: 'vr',
        internalType: 'struct RulesParser.VotingRule',
        type: 'tuple',
        components: [
          { name: 'seqOfRule', internalType: 'uint16', type: 'uint16' },
          { name: 'qtyOfSubRule', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfSubRule', internalType: 'uint8', type: 'uint8' },
          { name: 'authority', internalType: 'uint8', type: 'uint8' },
          { name: 'headRatio', internalType: 'uint16', type: 'uint16' },
          { name: 'amountRatio', internalType: 'uint16', type: 'uint16' },
          { name: 'onlyAttendance', internalType: 'bool', type: 'bool' },
          { name: 'impliedConsent', internalType: 'bool', type: 'bool' },
          { name: 'partyAsConsent', internalType: 'bool', type: 'bool' },
          { name: 'againstShallBuy', internalType: 'bool', type: 'bool' },
          { name: 'frExecDays', internalType: 'uint8', type: 'uint8' },
          { name: 'dtExecDays', internalType: 'uint8', type: 'uint8' },
          { name: 'dtConfirmDays', internalType: 'uint8', type: 'uint8' },
          { name: 'invExitDays', internalType: 'uint8', type: 'uint8' },
          { name: 'votePrepareDays', internalType: 'uint8', type: 'uint8' },
          { name: 'votingDays', internalType: 'uint8', type: 'uint8' },
          { name: 'execDaysForPutOpt', internalType: 'uint8', type: 'uint8' },
          { name: 'vetoers', internalType: 'uint40[2]', type: 'uint40[2]' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
        ],
      },
      { name: 'docUrl', internalType: 'bytes32', type: 'bytes32' },
      { name: 'docHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'circulateFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'closingDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'dtExecDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'execFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'frExecDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDK',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'getFile',
    outputs: [
      {
        name: '',
        internalType: 'struct FilesRepo.File',
        type: 'tuple',
        components: [
          { name: 'snOfDoc', internalType: 'bytes32', type: 'bytes32' },
          {
            name: 'head',
            internalType: 'struct FilesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'circulateDate', internalType: 'uint48', type: 'uint48' },
              { name: 'signingDays', internalType: 'uint8', type: 'uint8' },
              { name: 'closingDays', internalType: 'uint8', type: 'uint8' },
              { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
              { name: 'frExecDays', internalType: 'uint8', type: 'uint8' },
              { name: 'dtExecDays', internalType: 'uint8', type: 'uint8' },
              { name: 'dtConfirmDays', internalType: 'uint8', type: 'uint8' },
              { name: 'proposeDate', internalType: 'uint48', type: 'uint48' },
              { name: 'invExitDays', internalType: 'uint8', type: 'uint8' },
              { name: 'votePrepareDays', internalType: 'uint8', type: 'uint8' },
              { name: 'votingDays', internalType: 'uint8', type: 'uint8' },
              {
                name: 'execDaysForPutOpt',
                internalType: 'uint8',
                type: 'uint8',
              },
              { name: 'seqOfMotion', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'ref',
            internalType: 'struct FilesRepo.Ref',
            type: 'tuple',
            components: [
              { name: 'docUrl', internalType: 'bytes32', type: 'bytes32' },
              { name: 'docHash', internalType: 'bytes32', type: 'bytes32' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getFilesList',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'getHeadOfFile',
    outputs: [
      {
        name: 'head',
        internalType: 'struct FilesRepo.Head',
        type: 'tuple',
        components: [
          { name: 'circulateDate', internalType: 'uint48', type: 'uint48' },
          { name: 'signingDays', internalType: 'uint8', type: 'uint8' },
          { name: 'closingDays', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
          { name: 'frExecDays', internalType: 'uint8', type: 'uint8' },
          { name: 'dtExecDays', internalType: 'uint8', type: 'uint8' },
          { name: 'dtConfirmDays', internalType: 'uint8', type: 'uint8' },
          { name: 'proposeDate', internalType: 'uint48', type: 'uint48' },
          { name: 'invExitDays', internalType: 'uint8', type: 'uint8' },
          { name: 'votePrepareDays', internalType: 'uint8', type: 'uint8' },
          { name: 'votingDays', internalType: 'uint8', type: 'uint8' },
          { name: 'execDaysForPutOpt', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfMotion', internalType: 'uint64', type: 'uint64' },
          { name: 'state', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isFinalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'isRegistered',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'pointer',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'body', internalType: 'address', type: 'address' },
      { name: 'seqOfMotion', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'proposeFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'qtyOfFiles',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfDoc', internalType: 'bytes32', type: 'bytes32' },
      { name: 'body', internalType: 'address', type: 'address' },
    ],
    name: 'regFile',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'body', internalType: 'address', type: 'address' },
      { name: 'state', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setStateOfFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'signingDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'takeBackKeys',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'terminateFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'terminateStartpoint',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'body', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'voteCountingForFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'votingDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ShareholdersAgreement
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const shareholdersAgreementABI = [
  { type: 'event', anonymous: false, inputs: [], name: 'CirculateDoc' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetRoleAdmin',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'beBuyer', internalType: 'bool', type: 'bool' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addBlank',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'rule', internalType: 'bytes32', type: 'bytes32' }],
    name: 'addRule',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'circulateDoc',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'circulated',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'title', internalType: 'uint256', type: 'uint256' },
      { name: 'version', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createTerm',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'established',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'finalizeSHA',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'initPage', internalType: 'bool', type: 'bool' }],
    name: 'getBuyers',
    outputs: [{ name: 'buyers', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCirculateDate',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getClosingDays',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getClosingDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDK',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'initPage', internalType: 'bool', type: 'bool' }],
    name: 'getParasOfPage',
    outputs: [
      {
        name: '',
        internalType: 'struct SigsRepo.Signature',
        type: 'tuple',
        components: [
          { name: 'signer', internalType: 'uint40', type: 'uint40' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'blocknumber', internalType: 'uint64', type: 'uint64' },
          { name: 'flag', internalType: 'bool', type: 'bool' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'arg', internalType: 'uint16', type: 'uint16' },
          { name: 'seq', internalType: 'uint16', type: 'uint16' },
          { name: 'attr', internalType: 'uint16', type: 'uint16' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getParties',
    outputs: [
      { name: 'parties', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seq', internalType: 'uint256', type: 'uint256' }],
    name: 'getRule',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getRules',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'initPage', internalType: 'bool', type: 'bool' }],
    name: 'getSellers',
    outputs: [
      { name: 'sellers', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSigDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getSigOfParty',
    outputs: [
      { name: 'seqOfDeals', internalType: 'uint256[]', type: 'uint256[]' },
      {
        name: 'sig',
        internalType: 'struct SigsRepo.Signature',
        type: 'tuple',
        components: [
          { name: 'signer', internalType: 'uint40', type: 'uint40' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'blocknumber', internalType: 'uint64', type: 'uint64' },
          { name: 'flag', internalType: 'bool', type: 'bool' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'arg', internalType: 'uint16', type: 'uint16' },
          { name: 'seq', internalType: 'uint16', type: 'uint16' },
          { name: 'attr', internalType: 'uint16', type: 'uint16' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSigningDays',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'initPage', internalType: 'bool', type: 'bool' }],
    name: 'getSigsOfPage',
    outputs: [
      {
        name: 'sigsOfBuyer',
        internalType: 'struct SigsRepo.Signature[]',
        type: 'tuple[]',
        components: [
          { name: 'signer', internalType: 'uint40', type: 'uint40' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'blocknumber', internalType: 'uint64', type: 'uint64' },
          { name: 'flag', internalType: 'bool', type: 'bool' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'arg', internalType: 'uint16', type: 'uint16' },
          { name: 'seq', internalType: 'uint16', type: 'uint16' },
          { name: 'attr', internalType: 'uint16', type: 'uint16' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
      {
        name: 'sigsOfSeller',
        internalType: 'struct SigsRepo.Signature[]',
        type: 'tuple[]',
        components: [
          { name: 'signer', internalType: 'uint40', type: 'uint40' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'blocknumber', internalType: 'uint64', type: 'uint64' },
          { name: 'flag', internalType: 'bool', type: 'bool' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'arg', internalType: 'uint16', type: 'uint16' },
          { name: 'seq', internalType: 'uint16', type: 'uint16' },
          { name: 'attr', internalType: 'uint16', type: 'uint16' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'title', internalType: 'uint256', type: 'uint256' }],
    name: 'getTerm',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTitles',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seq', internalType: 'uint256', type: 'uint256' }],
    name: 'hasRule',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'title', internalType: 'uint256', type: 'uint256' }],
    name: 'hasTitle',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'initDefaultRules',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isBuyer',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isFinalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'isInitSigner',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'isParty',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isSeller',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'isSigner',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'qtyOfRules',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'qtyOfTerms',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'signer', internalType: 'uint256', type: 'uint256' },
      { name: 'sigDate', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'regSig',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeBlank',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seq', internalType: 'uint256', type: 'uint256' }],
    name: 'removeRule',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'title', internalType: 'uint256', type: 'uint256' }],
    name: 'removeTerm',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'signingDays', internalType: 'uint256', type: 'uint256' },
      { name: 'closingDays', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setTiming',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'signDoc',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'takeBackKeys',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IRegisterOfDirectors
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iRegisterOfDirectorsABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'snOfPos',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'AddPosition',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfPos',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'caller',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'QuitPosition',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfPos',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'RemoveOfficer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfPos',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'RemovePosition',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfPos',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'caller',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'TakePosition',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'snOfPos', internalType: 'bytes32', type: 'bytes32' }],
    name: 'createPosition',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'getBoardSeatsOccupied',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDirectorsList',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDirectorsPosList',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'getFullPosInfoInHand',
    outputs: [
      {
        name: '',
        internalType: 'struct OfficersRepo.Position[]',
        type: 'tuple[]',
        components: [
          { name: 'title', internalType: 'uint16', type: 'uint16' },
          { name: 'seqOfPos', internalType: 'uint16', type: 'uint16' },
          { name: 'acct', internalType: 'uint40', type: 'uint40' },
          { name: 'nominator', internalType: 'uint40', type: 'uint40' },
          { name: 'startDate', internalType: 'uint48', type: 'uint48' },
          { name: 'endDate', internalType: 'uint48', type: 'uint48' },
          { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
          { name: 'titleOfNominator', internalType: 'uint16', type: 'uint16' },
          { name: 'argu', internalType: 'uint16', type: 'uint16' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getManagersList',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getManagersPosList',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getNumOfDirectors',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getNumOfManagers',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'getPosInHand',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfPos', internalType: 'uint256', type: 'uint256' }],
    name: 'getPosition',
    outputs: [
      {
        name: '',
        internalType: 'struct OfficersRepo.Position',
        type: 'tuple',
        components: [
          { name: 'title', internalType: 'uint16', type: 'uint16' },
          { name: 'seqOfPos', internalType: 'uint16', type: 'uint16' },
          { name: 'acct', internalType: 'uint40', type: 'uint40' },
          { name: 'nominator', internalType: 'uint40', type: 'uint40' },
          { name: 'startDate', internalType: 'uint48', type: 'uint48' },
          { name: 'endDate', internalType: 'uint48', type: 'uint48' },
          { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
          { name: 'titleOfNominator', internalType: 'uint16', type: 'uint16' },
          { name: 'argu', internalType: 'uint16', type: 'uint16' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasNominationRight',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasPosition',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
      { name: 'title', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasTitle',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'isDirector',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'isManager',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfPos', internalType: 'uint256', type: 'uint256' }],
    name: 'isOccupied',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfPos', internalType: 'uint256', type: 'uint256' }],
    name: 'posExist',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quitPosition',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfPos', internalType: 'uint256', type: 'uint256' }],
    name: 'removeOfficer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfPos', internalType: 'uint256', type: 'uint256' }],
    name: 'removePosition',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'takePosition',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'pos',
        internalType: 'struct OfficersRepo.Position',
        type: 'tuple',
        components: [
          { name: 'title', internalType: 'uint16', type: 'uint16' },
          { name: 'seqOfPos', internalType: 'uint16', type: 'uint16' },
          { name: 'acct', internalType: 'uint40', type: 'uint40' },
          { name: 'nominator', internalType: 'uint40', type: 'uint40' },
          { name: 'startDate', internalType: 'uint48', type: 'uint48' },
          { name: 'endDate', internalType: 'uint48', type: 'uint48' },
          { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
          { name: 'titleOfNominator', internalType: 'uint16', type: 'uint16' },
          { name: 'argu', internalType: 'uint16', type: 'uint16' },
        ],
      },
    ],
    name: 'updatePosition',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// RegisterOfDirectors
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const registerOfDirectorsABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'snOfPos',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'AddPosition',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfPos',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'caller',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'QuitPosition',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfPos',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'RemoveOfficer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfPos',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'RemovePosition',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetRoleAdmin',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfPos',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'caller',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'TakePosition',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'snOfPos', internalType: 'bytes32', type: 'bytes32' }],
    name: 'createPosition',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'getBoardSeatsOccupied',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDK',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDirectorsList',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDirectorsPosList',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'getFullPosInfoInHand',
    outputs: [
      {
        name: '',
        internalType: 'struct OfficersRepo.Position[]',
        type: 'tuple[]',
        components: [
          { name: 'title', internalType: 'uint16', type: 'uint16' },
          { name: 'seqOfPos', internalType: 'uint16', type: 'uint16' },
          { name: 'acct', internalType: 'uint40', type: 'uint40' },
          { name: 'nominator', internalType: 'uint40', type: 'uint40' },
          { name: 'startDate', internalType: 'uint48', type: 'uint48' },
          { name: 'endDate', internalType: 'uint48', type: 'uint48' },
          { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
          { name: 'titleOfNominator', internalType: 'uint16', type: 'uint16' },
          { name: 'argu', internalType: 'uint16', type: 'uint16' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getManagersList',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getManagersPosList',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getNumOfDirectors',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getNumOfManagers',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'getPosInHand',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfPos', internalType: 'uint256', type: 'uint256' }],
    name: 'getPosition',
    outputs: [
      {
        name: '',
        internalType: 'struct OfficersRepo.Position',
        type: 'tuple',
        components: [
          { name: 'title', internalType: 'uint16', type: 'uint16' },
          { name: 'seqOfPos', internalType: 'uint16', type: 'uint16' },
          { name: 'acct', internalType: 'uint40', type: 'uint40' },
          { name: 'nominator', internalType: 'uint40', type: 'uint40' },
          { name: 'startDate', internalType: 'uint48', type: 'uint48' },
          { name: 'endDate', internalType: 'uint48', type: 'uint48' },
          { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
          { name: 'titleOfNominator', internalType: 'uint16', type: 'uint16' },
          { name: 'argu', internalType: 'uint16', type: 'uint16' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasNominationRight',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasPosition',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
      { name: 'title', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasTitle',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'isDirector',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isFinalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'isManager',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfPos', internalType: 'uint256', type: 'uint256' }],
    name: 'isOccupied',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfPos', internalType: 'uint256', type: 'uint256' }],
    name: 'posExist',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quitPosition',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfPos', internalType: 'uint256', type: 'uint256' }],
    name: 'removeOfficer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfPos', internalType: 'uint256', type: 'uint256' }],
    name: 'removePosition',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'takeBackKeys',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'takePosition',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'pos',
        internalType: 'struct OfficersRepo.Position',
        type: 'tuple',
        components: [
          { name: 'title', internalType: 'uint16', type: 'uint16' },
          { name: 'seqOfPos', internalType: 'uint16', type: 'uint16' },
          { name: 'acct', internalType: 'uint40', type: 'uint40' },
          { name: 'nominator', internalType: 'uint40', type: 'uint40' },
          { name: 'startDate', internalType: 'uint48', type: 'uint48' },
          { name: 'endDate', internalType: 'uint48', type: 'uint48' },
          { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
          { name: 'titleOfNominator', internalType: 'uint16', type: 'uint16' },
          { name: 'argu', internalType: 'uint16', type: 'uint16' },
        ],
      },
    ],
    name: 'updatePosition',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IRegisterOfMembers
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iRegisterOfMembersABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
      {
        name: 'qtyOfMembers',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'AddMember',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'root', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'AddMemberToGroup',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'AddShareToMember',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'paid', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'par', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'CapDecrease',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'paid', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'par', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'CapIncrease',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'paid', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'par', internalType: 'uint256', type: 'uint256', indexed: true },
      {
        name: 'clean',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'increase', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ChangeAmtOfMember',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'orgRep',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'newRep',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ChangeGroupRep',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'root', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'RemoveMemberFromGroup',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'RemoveShareFromMember',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'basedOnPar', internalType: 'bool', type: 'bool', indexed: true },
    ],
    name: 'SetAmtBase',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'max', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetMaxQtyOfMembers',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'basedOnPar', internalType: 'bool', type: 'bool', indexed: true },
    ],
    name: 'SetVoteBase',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'addMember',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
      { name: 'root', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addMemberToGroup',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'share',
        internalType: 'struct SharesRepo.Share',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct SharesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'preSeq', internalType: 'uint32', type: 'uint32' },
              { name: 'class', internalType: 'uint16', type: 'uint16' },
              { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
              { name: 'shareholder', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct SharesRepo.Body',
            type: 'tuple',
            components: [
              { name: 'payInDeadline', internalType: 'uint48', type: 'uint48' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'cleanPaid', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint8', type: 'uint8' },
            ],
          },
        ],
      },
    ],
    name: 'addShareToMember',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'acct1', internalType: 'uint256', type: 'uint256' },
      { name: 'acct2', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'affiliated',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'basedOnPar',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'date', internalType: 'uint256', type: 'uint256' }],
    name: 'capAtDate',
    outputs: [
      {
        name: 'cap',
        internalType: 'struct Checkpoints.Checkpoint',
        type: 'tuple',
        components: [
          { name: 'timestamp', internalType: 'uint48', type: 'uint48' },
          { name: 'paid', internalType: 'uint64', type: 'uint64' },
          { name: 'par', internalType: 'uint64', type: 'uint64' },
          { name: 'cleanPaid', internalType: 'uint64', type: 'uint64' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'capDecrease',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'capIncrease',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
      { name: 'deltaPaid', internalType: 'uint256', type: 'uint256' },
      { name: 'deltaPar', internalType: 'uint256', type: 'uint256' },
      { name: 'deltaClean', internalType: 'uint256', type: 'uint256' },
      { name: 'decrease', internalType: 'bool', type: 'bool' },
    ],
    name: 'changeAmtOfMember',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'controllor',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'deepOfGroup',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'class', internalType: 'uint256', type: 'uint256' }],
    name: 'getMembersOfClass',
    outputs: [
      { name: 'members', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getNumOfMembers',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSnapshot',
    outputs: [
      {
        name: '',
        internalType: 'struct TopChain.Node[]',
        type: 'tuple[]',
        components: [
          { name: 'prev', internalType: 'uint40', type: 'uint40' },
          { name: 'next', internalType: 'uint40', type: 'uint40' },
          { name: 'ptr', internalType: 'uint40', type: 'uint40' },
          { name: 'amt', internalType: 'uint64', type: 'uint64' },
          { name: 'sum', internalType: 'uint64', type: 'uint64' },
          { name: 'cat', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'groupRep',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
      { name: 'class', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isClassMember',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'isGroupRep',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'isMember',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'sharenumber', internalType: 'bytes32', type: 'bytes32' }],
    name: 'isSNOfShare',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'maxQtyOfMembers',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'membersList',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'membersOfGroup',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ownersEquity',
    outputs: [
      {
        name: 'cap',
        internalType: 'struct Checkpoints.Checkpoint',
        type: 'tuple',
        components: [
          { name: 'timestamp', internalType: 'uint48', type: 'uint48' },
          { name: 'paid', internalType: 'uint64', type: 'uint64' },
          { name: 'par', internalType: 'uint64', type: 'uint64' },
          { name: 'cleanPaid', internalType: 'uint64', type: 'uint64' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'qtyOfGroups',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
      { name: 'root', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeMemberFromGroup',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'share',
        internalType: 'struct SharesRepo.Share',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct SharesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'preSeq', internalType: 'uint32', type: 'uint32' },
              { name: 'class', internalType: 'uint16', type: 'uint16' },
              { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
              { name: 'shareholder', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct SharesRepo.Body',
            type: 'tuple',
            components: [
              { name: 'payInDeadline', internalType: 'uint48', type: 'uint48' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'cleanPaid', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint8', type: 'uint8' },
            ],
          },
        ],
      },
    ],
    name: 'removeShareFromMember',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'basedOnPar', internalType: 'bool', type: 'bool' }],
    name: 'setAmtBase',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'max', internalType: 'uint256', type: 'uint256' }],
    name: 'setMaxQtyOfMembers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'onPar', internalType: 'bool', type: 'bool' }],
    name: 'setVoteBase',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'sharesClipOfMember',
    outputs: [
      {
        name: 'clip',
        internalType: 'struct Checkpoints.Checkpoint',
        type: 'tuple',
        components: [
          { name: 'timestamp', internalType: 'uint48', type: 'uint48' },
          { name: 'paid', internalType: 'uint64', type: 'uint64' },
          { name: 'par', internalType: 'uint64', type: 'uint64' },
          { name: 'cleanPaid', internalType: 'uint64', type: 'uint64' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'sharesInHand',
    outputs: [{ name: '', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'sharesList',
    outputs: [{ name: '', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalVotes',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
      { name: 'date', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'votesAtDate',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'votesInHand',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'votesOfController',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'votesOfGroup',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// RegisterOfMembers
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const registerOfMembersABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
      {
        name: 'qtyOfMembers',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'AddMember',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'root', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'AddMemberToGroup',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'AddShareToMember',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'paid', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'par', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'CapDecrease',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'paid', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'par', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'CapIncrease',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'paid', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'par', internalType: 'uint256', type: 'uint256', indexed: true },
      {
        name: 'clean',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'increase', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ChangeAmtOfMember',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'orgRep',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'newRep',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ChangeGroupRep',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'root', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'RemoveMemberFromGroup',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'RemoveShareFromMember',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'basedOnPar', internalType: 'bool', type: 'bool', indexed: true },
    ],
    name: 'SetAmtBase',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'max', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetMaxQtyOfMembers',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetRoleAdmin',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'basedOnPar', internalType: 'bool', type: 'bool', indexed: true },
    ],
    name: 'SetVoteBase',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'addMember',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
      { name: 'root', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addMemberToGroup',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'share',
        internalType: 'struct SharesRepo.Share',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct SharesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'preSeq', internalType: 'uint32', type: 'uint32' },
              { name: 'class', internalType: 'uint16', type: 'uint16' },
              { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
              { name: 'shareholder', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct SharesRepo.Body',
            type: 'tuple',
            components: [
              { name: 'payInDeadline', internalType: 'uint48', type: 'uint48' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'cleanPaid', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint8', type: 'uint8' },
            ],
          },
        ],
      },
    ],
    name: 'addShareToMember',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'acct1', internalType: 'uint256', type: 'uint256' },
      { name: 'acct2', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'affiliated',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'basedOnPar',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'date', internalType: 'uint256', type: 'uint256' }],
    name: 'capAtDate',
    outputs: [
      {
        name: 'cap',
        internalType: 'struct Checkpoints.Checkpoint',
        type: 'tuple',
        components: [
          { name: 'timestamp', internalType: 'uint48', type: 'uint48' },
          { name: 'paid', internalType: 'uint64', type: 'uint64' },
          { name: 'par', internalType: 'uint64', type: 'uint64' },
          { name: 'cleanPaid', internalType: 'uint64', type: 'uint64' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'capDecrease',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'capIncrease',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
      { name: 'deltaPaid', internalType: 'uint256', type: 'uint256' },
      { name: 'deltaPar', internalType: 'uint256', type: 'uint256' },
      { name: 'deltaClean', internalType: 'uint256', type: 'uint256' },
      { name: 'increase', internalType: 'bool', type: 'bool' },
    ],
    name: 'changeAmtOfMember',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'controllor',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'deepOfGroup',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDK',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'class', internalType: 'uint256', type: 'uint256' }],
    name: 'getMembersOfClass',
    outputs: [
      { name: 'members', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getNumOfMembers',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSnapshot',
    outputs: [
      {
        name: '',
        internalType: 'struct TopChain.Node[]',
        type: 'tuple[]',
        components: [
          { name: 'prev', internalType: 'uint40', type: 'uint40' },
          { name: 'next', internalType: 'uint40', type: 'uint40' },
          { name: 'ptr', internalType: 'uint40', type: 'uint40' },
          { name: 'amt', internalType: 'uint64', type: 'uint64' },
          { name: 'sum', internalType: 'uint64', type: 'uint64' },
          { name: 'cat', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'groupRep',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
      { name: 'class', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isClassMember',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isFinalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'isGroupRep',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'isMember',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'sharenumber', internalType: 'bytes32', type: 'bytes32' }],
    name: 'isSNOfShare',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'maxQtyOfMembers',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'membersList',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'membersOfGroup',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ownersEquity',
    outputs: [
      {
        name: 'cap',
        internalType: 'struct Checkpoints.Checkpoint',
        type: 'tuple',
        components: [
          { name: 'timestamp', internalType: 'uint48', type: 'uint48' },
          { name: 'paid', internalType: 'uint64', type: 'uint64' },
          { name: 'par', internalType: 'uint64', type: 'uint64' },
          { name: 'cleanPaid', internalType: 'uint64', type: 'uint64' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'qtyOfGroups',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
      { name: 'root', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeMemberFromGroup',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'share',
        internalType: 'struct SharesRepo.Share',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct SharesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'preSeq', internalType: 'uint32', type: 'uint32' },
              { name: 'class', internalType: 'uint16', type: 'uint16' },
              { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
              { name: 'shareholder', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct SharesRepo.Body',
            type: 'tuple',
            components: [
              { name: 'payInDeadline', internalType: 'uint48', type: 'uint48' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'cleanPaid', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint8', type: 'uint8' },
            ],
          },
        ],
      },
    ],
    name: 'removeShareFromMember',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'onPar', internalType: 'bool', type: 'bool' }],
    name: 'setAmtBase',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'max', internalType: 'uint256', type: 'uint256' }],
    name: 'setMaxQtyOfMembers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'onPar', internalType: 'bool', type: 'bool' }],
    name: 'setVoteBase',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'sharesClipOfMember',
    outputs: [
      {
        name: 'clip',
        internalType: 'struct Checkpoints.Checkpoint',
        type: 'tuple',
        components: [
          { name: 'timestamp', internalType: 'uint48', type: 'uint48' },
          { name: 'paid', internalType: 'uint64', type: 'uint64' },
          { name: 'par', internalType: 'uint64', type: 'uint64' },
          { name: 'cleanPaid', internalType: 'uint64', type: 'uint64' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'sharesInHand',
    outputs: [{ name: 'list', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'sharesList',
    outputs: [{ name: '', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'takeBackKeys',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalVotes',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
      { name: 'date', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'votesAtDate',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'votesInHand',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'votesOfController',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'votesOfGroup',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IRegisterOfOptions
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iRegisterOfOptionsABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfOpt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'obligor',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'AddObligorIntoOpt',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfOpt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'codeOfOpt',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'CreateOpt',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfOpt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ExecOpt',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfOpt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'issueDate',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'IssueOpt',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfOpt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'codeOfBrf',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'RegSwapOrder',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfOpt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'obligor',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'RemoveObligorFromOpt',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfOpt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'data1',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'data2',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'data3',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'UpdateOracle',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfOpt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'seqOfBrf',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'state',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'UpdateStateOfBrief',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'obligor', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addObligorIntoOption',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' }],
    name: 'counterOfBriefs',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'counterOfOptions',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sn', internalType: 'bytes32', type: 'bytes32' },
      { name: 'snOfCond', internalType: 'bytes32', type: 'bytes32' },
      { name: 'rightholder', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createOption',
    outputs: [
      {
        name: 'head',
        internalType: 'struct OptionsRepo.Head',
        type: 'tuple',
        components: [
          { name: 'seqOfOpt', internalType: 'uint32', type: 'uint32' },
          { name: 'typeOfOpt', internalType: 'uint8', type: 'uint8' },
          { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
          { name: 'rate', internalType: 'uint32', type: 'uint32' },
          { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
          { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
          { name: 'execDays', internalType: 'uint16', type: 'uint16' },
          { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
          { name: 'obligor', internalType: 'uint40', type: 'uint40' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfConsider', internalType: 'uint256', type: 'uint256' },
      { name: 'paidOfConsider', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfTarget', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createSwapOrder',
    outputs: [
      {
        name: 'swap',
        internalType: 'struct SwapsRepo.Swap',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct SwapsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfSwap', internalType: 'uint32', type: 'uint32' },
              { name: 'classOfTarget', internalType: 'uint16', type: 'uint16' },
              {
                name: 'classOfConsider',
                internalType: 'uint16',
                type: 'uint16',
              },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
              { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
              { name: 'obligor', internalType: 'uint40', type: 'uint40' },
              { name: 'rateOfSwap', internalType: 'uint32', type: 'uint32' },
              { name: 'para', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct SwapsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'rightholder', internalType: 'uint40', type: 'uint40' },
              { name: 'seqOfConsider', internalType: 'uint32', type: 'uint32' },
              {
                name: 'paidOfConsider',
                internalType: 'uint64',
                type: 'uint64',
              },
              { name: 'seqOfTarget', internalType: 'uint32', type: 'uint32' },
              { name: 'paidOfTarget', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' }],
    name: 'execOption',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' }],
    name: 'getAllBriefsOfOption',
    outputs: [
      {
        name: '',
        internalType: 'struct OptionsRepo.Brief[]',
        type: 'tuple[]',
        components: [
          { name: 'seqOfBrf', internalType: 'uint16', type: 'uint16' },
          { name: 'seqOfSwap', internalType: 'uint32', type: 'uint32' },
          { name: 'rateOfSwap', internalType: 'uint32', type: 'uint32' },
          { name: 'paidOfConsider', internalType: 'uint64', type: 'uint64' },
          { name: 'paidOfTarget', internalType: 'uint64', type: 'uint64' },
          { name: 'obligor', internalType: 'uint40', type: 'uint40' },
          { name: 'state', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAllOptions',
    outputs: [
      {
        name: '',
        internalType: 'struct OptionsRepo.Option[]',
        type: 'tuple[]',
        components: [
          {
            name: 'head',
            internalType: 'struct OptionsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfOpt', internalType: 'uint32', type: 'uint32' },
              { name: 'typeOfOpt', internalType: 'uint8', type: 'uint8' },
              { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
              { name: 'rate', internalType: 'uint32', type: 'uint32' },
              { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
              { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
              { name: 'execDays', internalType: 'uint16', type: 'uint16' },
              { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
              { name: 'obligor', internalType: 'uint40', type: 'uint40' },
            ],
          },
          {
            name: 'cond',
            internalType: 'struct CondsRepo.Cond',
            type: 'tuple',
            components: [
              { name: 'seqOfCond', internalType: 'uint32', type: 'uint32' },
              { name: 'logicOpr', internalType: 'uint8', type: 'uint8' },
              { name: 'compOpr1', internalType: 'uint8', type: 'uint8' },
              { name: 'para1', internalType: 'uint64', type: 'uint64' },
              { name: 'compOpr2', internalType: 'uint8', type: 'uint8' },
              { name: 'para2', internalType: 'uint64', type: 'uint64' },
              { name: 'compOpr3', internalType: 'uint8', type: 'uint8' },
              { name: 'para3', internalType: 'uint64', type: 'uint64' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct OptionsRepo.Body',
            type: 'tuple',
            components: [
              {
                name: 'closingDeadline',
                internalType: 'uint48',
                type: 'uint48',
              },
              { name: 'rightholder', internalType: 'uint40', type: 'uint40' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' }],
    name: 'getAllOraclesOfOption',
    outputs: [
      {
        name: '',
        internalType: 'struct Checkpoints.Checkpoint[]',
        type: 'tuple[]',
        components: [
          { name: 'timestamp', internalType: 'uint48', type: 'uint48' },
          { name: 'paid', internalType: 'uint64', type: 'uint64' },
          { name: 'par', internalType: 'uint64', type: 'uint64' },
          { name: 'cleanPaid', internalType: 'uint64', type: 'uint64' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfBrf', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getBrief',
    outputs: [
      {
        name: 'brf',
        internalType: 'struct OptionsRepo.Brief',
        type: 'tuple',
        components: [
          { name: 'seqOfBrf', internalType: 'uint16', type: 'uint16' },
          { name: 'seqOfSwap', internalType: 'uint32', type: 'uint32' },
          { name: 'rateOfSwap', internalType: 'uint32', type: 'uint32' },
          { name: 'paidOfConsider', internalType: 'uint64', type: 'uint64' },
          { name: 'paidOfTarget', internalType: 'uint64', type: 'uint64' },
          { name: 'obligor', internalType: 'uint40', type: 'uint40' },
          { name: 'state', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' }],
    name: 'getLatestOracle',
    outputs: [
      {
        name: '',
        internalType: 'struct Checkpoints.Checkpoint',
        type: 'tuple',
        components: [
          { name: 'timestamp', internalType: 'uint48', type: 'uint48' },
          { name: 'paid', internalType: 'uint64', type: 'uint64' },
          { name: 'par', internalType: 'uint64', type: 'uint64' },
          { name: 'cleanPaid', internalType: 'uint64', type: 'uint64' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' }],
    name: 'getObligorsOfOption',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' }],
    name: 'getOption',
    outputs: [
      {
        name: 'opt',
        internalType: 'struct OptionsRepo.Option',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct OptionsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfOpt', internalType: 'uint32', type: 'uint32' },
              { name: 'typeOfOpt', internalType: 'uint8', type: 'uint8' },
              { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
              { name: 'rate', internalType: 'uint32', type: 'uint32' },
              { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
              { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
              { name: 'execDays', internalType: 'uint16', type: 'uint16' },
              { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
              { name: 'obligor', internalType: 'uint40', type: 'uint40' },
            ],
          },
          {
            name: 'cond',
            internalType: 'struct CondsRepo.Cond',
            type: 'tuple',
            components: [
              { name: 'seqOfCond', internalType: 'uint32', type: 'uint32' },
              { name: 'logicOpr', internalType: 'uint8', type: 'uint8' },
              { name: 'compOpr1', internalType: 'uint8', type: 'uint8' },
              { name: 'para1', internalType: 'uint64', type: 'uint64' },
              { name: 'compOpr2', internalType: 'uint8', type: 'uint8' },
              { name: 'para2', internalType: 'uint64', type: 'uint64' },
              { name: 'compOpr3', internalType: 'uint8', type: 'uint8' },
              { name: 'para3', internalType: 'uint64', type: 'uint64' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct OptionsRepo.Body',
            type: 'tuple',
            components: [
              {
                name: 'closingDeadline',
                internalType: 'uint48',
                type: 'uint48',
              },
              { name: 'rightholder', internalType: 'uint40', type: 'uint40' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'date', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getOracleAtDate',
    outputs: [
      {
        name: '',
        internalType: 'struct Checkpoints.Checkpoint',
        type: 'tuple',
        components: [
          { name: 'timestamp', internalType: 'uint48', type: 'uint48' },
          { name: 'paid', internalType: 'uint64', type: 'uint64' },
          { name: 'par', internalType: 'uint64', type: 'uint64' },
          { name: 'cleanPaid', internalType: 'uint64', type: 'uint64' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isObligor',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' }],
    name: 'isOption',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isRightholder',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'opt',
        internalType: 'struct OptionsRepo.Option',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct OptionsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfOpt', internalType: 'uint32', type: 'uint32' },
              { name: 'typeOfOpt', internalType: 'uint8', type: 'uint8' },
              { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
              { name: 'rate', internalType: 'uint32', type: 'uint32' },
              { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
              { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
              { name: 'execDays', internalType: 'uint16', type: 'uint16' },
              { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
              { name: 'obligor', internalType: 'uint40', type: 'uint40' },
            ],
          },
          {
            name: 'cond',
            internalType: 'struct CondsRepo.Cond',
            type: 'tuple',
            components: [
              { name: 'seqOfCond', internalType: 'uint32', type: 'uint32' },
              { name: 'logicOpr', internalType: 'uint8', type: 'uint8' },
              { name: 'compOpr1', internalType: 'uint8', type: 'uint8' },
              { name: 'para1', internalType: 'uint64', type: 'uint64' },
              { name: 'compOpr2', internalType: 'uint8', type: 'uint8' },
              { name: 'para2', internalType: 'uint64', type: 'uint64' },
              { name: 'compOpr3', internalType: 'uint8', type: 'uint8' },
              { name: 'para3', internalType: 'uint64', type: 'uint64' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct OptionsRepo.Body',
            type: 'tuple',
            components: [
              {
                name: 'closingDeadline',
                internalType: 'uint48',
                type: 'uint48',
              },
              { name: 'rightholder', internalType: 'uint40', type: 'uint40' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
            ],
          },
        ],
      },
    ],
    name: 'issueOption',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'qtyOfOptions',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'opts', internalType: 'address', type: 'address' }],
    name: 'regOptionTerms',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      {
        name: 'swap',
        internalType: 'struct SwapsRepo.Swap',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct SwapsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfSwap', internalType: 'uint32', type: 'uint32' },
              { name: 'classOfTarget', internalType: 'uint16', type: 'uint16' },
              {
                name: 'classOfConsider',
                internalType: 'uint16',
                type: 'uint16',
              },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
              { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
              { name: 'obligor', internalType: 'uint40', type: 'uint40' },
              { name: 'rateOfSwap', internalType: 'uint32', type: 'uint32' },
              { name: 'para', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct SwapsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'rightholder', internalType: 'uint40', type: 'uint40' },
              { name: 'seqOfConsider', internalType: 'uint32', type: 'uint32' },
              {
                name: 'paidOfConsider',
                internalType: 'uint64',
                type: 'uint64',
              },
              { name: 'seqOfTarget', internalType: 'uint32', type: 'uint32' },
              { name: 'paidOfTarget', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'regSwapOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'obligor', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeObligorFromOption',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'd1', internalType: 'uint256', type: 'uint256' },
      { name: 'd2', internalType: 'uint256', type: 'uint256' },
      { name: 'd3', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'updateOracle',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfBrf', internalType: 'uint256', type: 'uint256' },
      { name: 'state', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'updateStateOfBrief',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// RegisterOfOptions
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const registerOfOptionsABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfOpt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'obligor',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'AddObligorIntoOpt',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfOpt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'codeOfOpt',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'CreateOpt',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfOpt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ExecOpt',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfOpt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'issueDate',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'IssueOpt',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfOpt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'codeOfBrf',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'RegSwapOrder',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfOpt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'obligor',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'RemoveObligorFromOpt',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetRoleAdmin',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfOpt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'data1',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'data2',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'data3',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'UpdateOracle',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfOpt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'seqOfBrf',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'state',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'UpdateStateOfBrief',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'obligor', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addObligorIntoOption',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' }],
    name: 'counterOfBriefs',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'counterOfOptions',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sn', internalType: 'bytes32', type: 'bytes32' },
      { name: 'snOfCond', internalType: 'bytes32', type: 'bytes32' },
      { name: 'rightholder', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createOption',
    outputs: [
      {
        name: 'head',
        internalType: 'struct OptionsRepo.Head',
        type: 'tuple',
        components: [
          { name: 'seqOfOpt', internalType: 'uint32', type: 'uint32' },
          { name: 'typeOfOpt', internalType: 'uint8', type: 'uint8' },
          { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
          { name: 'rate', internalType: 'uint32', type: 'uint32' },
          { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
          { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
          { name: 'execDays', internalType: 'uint16', type: 'uint16' },
          { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
          { name: 'obligor', internalType: 'uint40', type: 'uint40' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfConsider', internalType: 'uint256', type: 'uint256' },
      { name: 'paidOfConsider', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfTarget', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createSwapOrder',
    outputs: [
      {
        name: 'swap',
        internalType: 'struct SwapsRepo.Swap',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct SwapsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfSwap', internalType: 'uint32', type: 'uint32' },
              { name: 'classOfTarget', internalType: 'uint16', type: 'uint16' },
              {
                name: 'classOfConsider',
                internalType: 'uint16',
                type: 'uint16',
              },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
              { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
              { name: 'obligor', internalType: 'uint40', type: 'uint40' },
              { name: 'rateOfSwap', internalType: 'uint32', type: 'uint32' },
              { name: 'para', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct SwapsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'rightholder', internalType: 'uint40', type: 'uint40' },
              { name: 'seqOfConsider', internalType: 'uint32', type: 'uint32' },
              {
                name: 'paidOfConsider',
                internalType: 'uint64',
                type: 'uint64',
              },
              { name: 'seqOfTarget', internalType: 'uint32', type: 'uint32' },
              { name: 'paidOfTarget', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' }],
    name: 'execOption',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' }],
    name: 'getAllBriefsOfOption',
    outputs: [
      {
        name: '',
        internalType: 'struct OptionsRepo.Brief[]',
        type: 'tuple[]',
        components: [
          { name: 'seqOfBrf', internalType: 'uint16', type: 'uint16' },
          { name: 'seqOfSwap', internalType: 'uint32', type: 'uint32' },
          { name: 'rateOfSwap', internalType: 'uint32', type: 'uint32' },
          { name: 'paidOfConsider', internalType: 'uint64', type: 'uint64' },
          { name: 'paidOfTarget', internalType: 'uint64', type: 'uint64' },
          { name: 'obligor', internalType: 'uint40', type: 'uint40' },
          { name: 'state', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAllOptions',
    outputs: [
      {
        name: '',
        internalType: 'struct OptionsRepo.Option[]',
        type: 'tuple[]',
        components: [
          {
            name: 'head',
            internalType: 'struct OptionsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfOpt', internalType: 'uint32', type: 'uint32' },
              { name: 'typeOfOpt', internalType: 'uint8', type: 'uint8' },
              { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
              { name: 'rate', internalType: 'uint32', type: 'uint32' },
              { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
              { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
              { name: 'execDays', internalType: 'uint16', type: 'uint16' },
              { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
              { name: 'obligor', internalType: 'uint40', type: 'uint40' },
            ],
          },
          {
            name: 'cond',
            internalType: 'struct CondsRepo.Cond',
            type: 'tuple',
            components: [
              { name: 'seqOfCond', internalType: 'uint32', type: 'uint32' },
              { name: 'logicOpr', internalType: 'uint8', type: 'uint8' },
              { name: 'compOpr1', internalType: 'uint8', type: 'uint8' },
              { name: 'para1', internalType: 'uint64', type: 'uint64' },
              { name: 'compOpr2', internalType: 'uint8', type: 'uint8' },
              { name: 'para2', internalType: 'uint64', type: 'uint64' },
              { name: 'compOpr3', internalType: 'uint8', type: 'uint8' },
              { name: 'para3', internalType: 'uint64', type: 'uint64' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct OptionsRepo.Body',
            type: 'tuple',
            components: [
              {
                name: 'closingDeadline',
                internalType: 'uint48',
                type: 'uint48',
              },
              { name: 'rightholder', internalType: 'uint40', type: 'uint40' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' }],
    name: 'getAllOraclesOfOption',
    outputs: [
      {
        name: '',
        internalType: 'struct Checkpoints.Checkpoint[]',
        type: 'tuple[]',
        components: [
          { name: 'timestamp', internalType: 'uint48', type: 'uint48' },
          { name: 'paid', internalType: 'uint64', type: 'uint64' },
          { name: 'par', internalType: 'uint64', type: 'uint64' },
          { name: 'cleanPaid', internalType: 'uint64', type: 'uint64' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfBrf', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getBrief',
    outputs: [
      {
        name: 'brf',
        internalType: 'struct OptionsRepo.Brief',
        type: 'tuple',
        components: [
          { name: 'seqOfBrf', internalType: 'uint16', type: 'uint16' },
          { name: 'seqOfSwap', internalType: 'uint32', type: 'uint32' },
          { name: 'rateOfSwap', internalType: 'uint32', type: 'uint32' },
          { name: 'paidOfConsider', internalType: 'uint64', type: 'uint64' },
          { name: 'paidOfTarget', internalType: 'uint64', type: 'uint64' },
          { name: 'obligor', internalType: 'uint40', type: 'uint40' },
          { name: 'state', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDK',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' }],
    name: 'getLatestOracle',
    outputs: [
      {
        name: '',
        internalType: 'struct Checkpoints.Checkpoint',
        type: 'tuple',
        components: [
          { name: 'timestamp', internalType: 'uint48', type: 'uint48' },
          { name: 'paid', internalType: 'uint64', type: 'uint64' },
          { name: 'par', internalType: 'uint64', type: 'uint64' },
          { name: 'cleanPaid', internalType: 'uint64', type: 'uint64' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' }],
    name: 'getObligorsOfOption',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' }],
    name: 'getOption',
    outputs: [
      {
        name: 'opt',
        internalType: 'struct OptionsRepo.Option',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct OptionsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfOpt', internalType: 'uint32', type: 'uint32' },
              { name: 'typeOfOpt', internalType: 'uint8', type: 'uint8' },
              { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
              { name: 'rate', internalType: 'uint32', type: 'uint32' },
              { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
              { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
              { name: 'execDays', internalType: 'uint16', type: 'uint16' },
              { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
              { name: 'obligor', internalType: 'uint40', type: 'uint40' },
            ],
          },
          {
            name: 'cond',
            internalType: 'struct CondsRepo.Cond',
            type: 'tuple',
            components: [
              { name: 'seqOfCond', internalType: 'uint32', type: 'uint32' },
              { name: 'logicOpr', internalType: 'uint8', type: 'uint8' },
              { name: 'compOpr1', internalType: 'uint8', type: 'uint8' },
              { name: 'para1', internalType: 'uint64', type: 'uint64' },
              { name: 'compOpr2', internalType: 'uint8', type: 'uint8' },
              { name: 'para2', internalType: 'uint64', type: 'uint64' },
              { name: 'compOpr3', internalType: 'uint8', type: 'uint8' },
              { name: 'para3', internalType: 'uint64', type: 'uint64' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct OptionsRepo.Body',
            type: 'tuple',
            components: [
              {
                name: 'closingDeadline',
                internalType: 'uint48',
                type: 'uint48',
              },
              { name: 'rightholder', internalType: 'uint40', type: 'uint40' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'date', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getOracleAtDate',
    outputs: [
      {
        name: '',
        internalType: 'struct Checkpoints.Checkpoint',
        type: 'tuple',
        components: [
          { name: 'timestamp', internalType: 'uint48', type: 'uint48' },
          { name: 'paid', internalType: 'uint64', type: 'uint64' },
          { name: 'par', internalType: 'uint64', type: 'uint64' },
          { name: 'cleanPaid', internalType: 'uint64', type: 'uint64' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isFinalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isObligor',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' }],
    name: 'isOption',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isRightholder',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'opt',
        internalType: 'struct OptionsRepo.Option',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct OptionsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfOpt', internalType: 'uint32', type: 'uint32' },
              { name: 'typeOfOpt', internalType: 'uint8', type: 'uint8' },
              { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
              { name: 'rate', internalType: 'uint32', type: 'uint32' },
              { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
              { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
              { name: 'execDays', internalType: 'uint16', type: 'uint16' },
              { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
              { name: 'obligor', internalType: 'uint40', type: 'uint40' },
            ],
          },
          {
            name: 'cond',
            internalType: 'struct CondsRepo.Cond',
            type: 'tuple',
            components: [
              { name: 'seqOfCond', internalType: 'uint32', type: 'uint32' },
              { name: 'logicOpr', internalType: 'uint8', type: 'uint8' },
              { name: 'compOpr1', internalType: 'uint8', type: 'uint8' },
              { name: 'para1', internalType: 'uint64', type: 'uint64' },
              { name: 'compOpr2', internalType: 'uint8', type: 'uint8' },
              { name: 'para2', internalType: 'uint64', type: 'uint64' },
              { name: 'compOpr3', internalType: 'uint8', type: 'uint8' },
              { name: 'para3', internalType: 'uint64', type: 'uint64' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct OptionsRepo.Body',
            type: 'tuple',
            components: [
              {
                name: 'closingDeadline',
                internalType: 'uint48',
                type: 'uint48',
              },
              { name: 'rightholder', internalType: 'uint40', type: 'uint40' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
            ],
          },
        ],
      },
    ],
    name: 'issueOption',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'qtyOfOptions',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'opts', internalType: 'address', type: 'address' }],
    name: 'regOptionTerms',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      {
        name: 'swap',
        internalType: 'struct SwapsRepo.Swap',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct SwapsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfSwap', internalType: 'uint32', type: 'uint32' },
              { name: 'classOfTarget', internalType: 'uint16', type: 'uint16' },
              {
                name: 'classOfConsider',
                internalType: 'uint16',
                type: 'uint16',
              },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
              { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
              { name: 'obligor', internalType: 'uint40', type: 'uint40' },
              { name: 'rateOfSwap', internalType: 'uint32', type: 'uint32' },
              { name: 'para', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct SwapsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'rightholder', internalType: 'uint40', type: 'uint40' },
              { name: 'seqOfConsider', internalType: 'uint32', type: 'uint32' },
              {
                name: 'paidOfConsider',
                internalType: 'uint64',
                type: 'uint64',
              },
              { name: 'seqOfTarget', internalType: 'uint32', type: 'uint32' },
              { name: 'paidOfTarget', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'regSwapOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'obligor', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeObligorFromOption',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'takeBackKeys',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'd1', internalType: 'uint256', type: 'uint256' },
      { name: 'd2', internalType: 'uint256', type: 'uint256' },
      { name: 'd3', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'updateOracle',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfBrf', internalType: 'uint256', type: 'uint256' },
      { name: 'state', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'updateStateOfBrief',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IRegisterOfPledges
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iRegisterOfPledgesABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'seqOfPld',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'creditor',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'paid', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'par', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'CreatePledge',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'seqOfPld',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ExecPledge',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'seqOfPld',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'extDays',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ExtendPledge',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'seqOfPld',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'hashLock',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'LockPledge',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'seqOfPld',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'refundAmt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'RefundDebt',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'seqOfPld',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'hashKey',
        internalType: 'string',
        type: 'string',
        indexed: true,
      },
    ],
    name: 'ReleasePledge',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'seqOfPld',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'RevokePledge',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'seqOfPld',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'newSeqOfPld',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'buyer',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'paid',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'par', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'TransferPledge',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfShare', internalType: 'uint256', type: 'uint256' }],
    name: 'counterOfPledges',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfPld', internalType: 'bytes32', type: 'bytes32' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
      { name: 'guaranteedAmt', internalType: 'uint256', type: 'uint256' },
      { name: 'execDays', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createPledge',
    outputs: [
      {
        name: 'head',
        internalType: 'struct PledgesRepo.Head',
        type: 'tuple',
        components: [
          { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
          { name: 'seqOfPld', internalType: 'uint16', type: 'uint16' },
          { name: 'createDate', internalType: 'uint48', type: 'uint48' },
          { name: 'daysToMaturity', internalType: 'uint16', type: 'uint16' },
          { name: 'guaranteeDays', internalType: 'uint16', type: 'uint16' },
          { name: 'creditor', internalType: 'uint40', type: 'uint40' },
          { name: 'debtor', internalType: 'uint40', type: 'uint40' },
          { name: 'pledgor', internalType: 'uint40', type: 'uint40' },
          { name: 'state', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execPledge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'extDays', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'extendPledge',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAllPledges',
    outputs: [
      {
        name: '',
        internalType: 'struct PledgesRepo.Pledge[]',
        type: 'tuple[]',
        components: [
          {
            name: 'head',
            internalType: 'struct PledgesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seqOfPld', internalType: 'uint16', type: 'uint16' },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              {
                name: 'daysToMaturity',
                internalType: 'uint16',
                type: 'uint16',
              },
              { name: 'guaranteeDays', internalType: 'uint16', type: 'uint16' },
              { name: 'creditor', internalType: 'uint40', type: 'uint40' },
              { name: 'debtor', internalType: 'uint40', type: 'uint40' },
              { name: 'pledgor', internalType: 'uint40', type: 'uint40' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct PledgesRepo.Body',
            type: 'tuple',
            components: [
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'guaranteedAmt', internalType: 'uint64', type: 'uint64' },
              { name: 'preSeq', internalType: 'uint16', type: 'uint16' },
              { name: 'execDays', internalType: 'uint16', type: 'uint16' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPledge',
    outputs: [
      {
        name: '',
        internalType: 'struct PledgesRepo.Pledge',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct PledgesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seqOfPld', internalType: 'uint16', type: 'uint16' },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              {
                name: 'daysToMaturity',
                internalType: 'uint16',
                type: 'uint16',
              },
              { name: 'guaranteeDays', internalType: 'uint16', type: 'uint16' },
              { name: 'creditor', internalType: 'uint40', type: 'uint40' },
              { name: 'debtor', internalType: 'uint40', type: 'uint40' },
              { name: 'pledgor', internalType: 'uint40', type: 'uint40' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct PledgesRepo.Body',
            type: 'tuple',
            components: [
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'guaranteedAmt', internalType: 'uint64', type: 'uint64' },
              { name: 'preSeq', internalType: 'uint16', type: 'uint16' },
              { name: 'execDays', internalType: 'uint16', type: 'uint16' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfShare', internalType: 'uint256', type: 'uint256' }],
    name: 'getPledgesOfShare',
    outputs: [
      {
        name: '',
        internalType: 'struct PledgesRepo.Pledge[]',
        type: 'tuple[]',
        components: [
          {
            name: 'head',
            internalType: 'struct PledgesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seqOfPld', internalType: 'uint16', type: 'uint16' },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              {
                name: 'daysToMaturity',
                internalType: 'uint16',
                type: 'uint16',
              },
              { name: 'guaranteeDays', internalType: 'uint16', type: 'uint16' },
              { name: 'creditor', internalType: 'uint40', type: 'uint40' },
              { name: 'debtor', internalType: 'uint40', type: 'uint40' },
              { name: 'pledgor', internalType: 'uint40', type: 'uint40' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct PledgesRepo.Body',
            type: 'tuple',
            components: [
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'guaranteedAmt', internalType: 'uint64', type: 'uint64' },
              { name: 'preSeq', internalType: 'uint16', type: 'uint16' },
              { name: 'execDays', internalType: 'uint16', type: 'uint16' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSNList',
    outputs: [{ name: '', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isPledge',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'head',
        internalType: 'struct PledgesRepo.Head',
        type: 'tuple',
        components: [
          { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
          { name: 'seqOfPld', internalType: 'uint16', type: 'uint16' },
          { name: 'createDate', internalType: 'uint48', type: 'uint48' },
          { name: 'daysToMaturity', internalType: 'uint16', type: 'uint16' },
          { name: 'guaranteeDays', internalType: 'uint16', type: 'uint16' },
          { name: 'creditor', internalType: 'uint40', type: 'uint40' },
          { name: 'debtor', internalType: 'uint40', type: 'uint40' },
          { name: 'pledgor', internalType: 'uint40', type: 'uint40' },
          { name: 'state', internalType: 'uint8', type: 'uint8' },
        ],
      },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
      { name: 'guaranteedAmt', internalType: 'uint256', type: 'uint256' },
      { name: 'execDays', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'issuePledge',
    outputs: [
      {
        name: 'regHead',
        internalType: 'struct PledgesRepo.Head',
        type: 'tuple',
        components: [
          { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
          { name: 'seqOfPld', internalType: 'uint16', type: 'uint16' },
          { name: 'createDate', internalType: 'uint48', type: 'uint48' },
          { name: 'daysToMaturity', internalType: 'uint16', type: 'uint16' },
          { name: 'guaranteeDays', internalType: 'uint16', type: 'uint16' },
          { name: 'creditor', internalType: 'uint40', type: 'uint40' },
          { name: 'debtor', internalType: 'uint40', type: 'uint40' },
          { name: 'pledgor', internalType: 'uint40', type: 'uint40' },
          { name: 'state', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'lockPledge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'refundDebt',
    outputs: [
      {
        name: 'newPld',
        internalType: 'struct PledgesRepo.Pledge',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct PledgesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seqOfPld', internalType: 'uint16', type: 'uint16' },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              {
                name: 'daysToMaturity',
                internalType: 'uint16',
                type: 'uint16',
              },
              { name: 'guaranteeDays', internalType: 'uint16', type: 'uint16' },
              { name: 'creditor', internalType: 'uint40', type: 'uint40' },
              { name: 'debtor', internalType: 'uint40', type: 'uint40' },
              { name: 'pledgor', internalType: 'uint40', type: 'uint40' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct PledgesRepo.Body',
            type: 'tuple',
            components: [
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'guaranteedAmt', internalType: 'uint64', type: 'uint64' },
              { name: 'preSeq', internalType: 'uint16', type: 'uint16' },
              { name: 'execDays', internalType: 'uint16', type: 'uint16' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'pld',
        internalType: 'struct PledgesRepo.Pledge',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct PledgesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seqOfPld', internalType: 'uint16', type: 'uint16' },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              {
                name: 'daysToMaturity',
                internalType: 'uint16',
                type: 'uint16',
              },
              { name: 'guaranteeDays', internalType: 'uint16', type: 'uint16' },
              { name: 'creditor', internalType: 'uint40', type: 'uint40' },
              { name: 'debtor', internalType: 'uint40', type: 'uint40' },
              { name: 'pledgor', internalType: 'uint40', type: 'uint40' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct PledgesRepo.Body',
            type: 'tuple',
            components: [
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'guaranteedAmt', internalType: 'uint64', type: 'uint64' },
              { name: 'preSeq', internalType: 'uint16', type: 'uint16' },
              { name: 'execDays', internalType: 'uint16', type: 'uint16' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'regPledge',
    outputs: [
      {
        name: 'head',
        internalType: 'struct PledgesRepo.Head',
        type: 'tuple',
        components: [
          { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
          { name: 'seqOfPld', internalType: 'uint16', type: 'uint16' },
          { name: 'createDate', internalType: 'uint48', type: 'uint48' },
          { name: 'daysToMaturity', internalType: 'uint16', type: 'uint16' },
          { name: 'guaranteeDays', internalType: 'uint16', type: 'uint16' },
          { name: 'creditor', internalType: 'uint40', type: 'uint40' },
          { name: 'debtor', internalType: 'uint40', type: 'uint40' },
          { name: 'pledgor', internalType: 'uint40', type: 'uint40' },
          { name: 'state', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
    ],
    name: 'releasePledge',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokePledge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'buyer', internalType: 'uint256', type: 'uint256' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferPledge',
    outputs: [
      {
        name: 'newPld',
        internalType: 'struct PledgesRepo.Pledge',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct PledgesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seqOfPld', internalType: 'uint16', type: 'uint16' },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              {
                name: 'daysToMaturity',
                internalType: 'uint16',
                type: 'uint16',
              },
              { name: 'guaranteeDays', internalType: 'uint16', type: 'uint16' },
              { name: 'creditor', internalType: 'uint40', type: 'uint40' },
              { name: 'debtor', internalType: 'uint40', type: 'uint40' },
              { name: 'pledgor', internalType: 'uint40', type: 'uint40' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct PledgesRepo.Body',
            type: 'tuple',
            components: [
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'guaranteedAmt', internalType: 'uint64', type: 'uint64' },
              { name: 'preSeq', internalType: 'uint16', type: 'uint16' },
              { name: 'execDays', internalType: 'uint16', type: 'uint16' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// RegisterOfPledges
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const registerOfPledgesABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'seqOfPld',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'creditor',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'paid', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'par', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'CreatePledge',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'seqOfPld',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ExecPledge',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'seqOfPld',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'extDays',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ExtendPledge',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'seqOfPld',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'hashLock',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'LockPledge',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'seqOfPld',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'refundAmt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'RefundDebt',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'seqOfPld',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'hashKey',
        internalType: 'string',
        type: 'string',
        indexed: true,
      },
    ],
    name: 'ReleasePledge',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'seqOfPld',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'RevokePledge',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetRoleAdmin',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'seqOfPld',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'newSeqOfPld',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'buyer',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'paid',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'par', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'TransferPledge',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfShare', internalType: 'uint256', type: 'uint256' }],
    name: 'counterOfPledges',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfPld', internalType: 'bytes32', type: 'bytes32' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
      { name: 'guaranteedAmt', internalType: 'uint256', type: 'uint256' },
      { name: 'execDays', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createPledge',
    outputs: [
      {
        name: 'head',
        internalType: 'struct PledgesRepo.Head',
        type: 'tuple',
        components: [
          { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
          { name: 'seqOfPld', internalType: 'uint16', type: 'uint16' },
          { name: 'createDate', internalType: 'uint48', type: 'uint48' },
          { name: 'daysToMaturity', internalType: 'uint16', type: 'uint16' },
          { name: 'guaranteeDays', internalType: 'uint16', type: 'uint16' },
          { name: 'creditor', internalType: 'uint40', type: 'uint40' },
          { name: 'debtor', internalType: 'uint40', type: 'uint40' },
          { name: 'pledgor', internalType: 'uint40', type: 'uint40' },
          { name: 'state', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execPledge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'extDays', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'extendPledge',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAllPledges',
    outputs: [
      {
        name: '',
        internalType: 'struct PledgesRepo.Pledge[]',
        type: 'tuple[]',
        components: [
          {
            name: 'head',
            internalType: 'struct PledgesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seqOfPld', internalType: 'uint16', type: 'uint16' },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              {
                name: 'daysToMaturity',
                internalType: 'uint16',
                type: 'uint16',
              },
              { name: 'guaranteeDays', internalType: 'uint16', type: 'uint16' },
              { name: 'creditor', internalType: 'uint40', type: 'uint40' },
              { name: 'debtor', internalType: 'uint40', type: 'uint40' },
              { name: 'pledgor', internalType: 'uint40', type: 'uint40' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct PledgesRepo.Body',
            type: 'tuple',
            components: [
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'guaranteedAmt', internalType: 'uint64', type: 'uint64' },
              { name: 'preSeq', internalType: 'uint16', type: 'uint16' },
              { name: 'execDays', internalType: 'uint16', type: 'uint16' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDK',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPledge',
    outputs: [
      {
        name: '',
        internalType: 'struct PledgesRepo.Pledge',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct PledgesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seqOfPld', internalType: 'uint16', type: 'uint16' },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              {
                name: 'daysToMaturity',
                internalType: 'uint16',
                type: 'uint16',
              },
              { name: 'guaranteeDays', internalType: 'uint16', type: 'uint16' },
              { name: 'creditor', internalType: 'uint40', type: 'uint40' },
              { name: 'debtor', internalType: 'uint40', type: 'uint40' },
              { name: 'pledgor', internalType: 'uint40', type: 'uint40' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct PledgesRepo.Body',
            type: 'tuple',
            components: [
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'guaranteedAmt', internalType: 'uint64', type: 'uint64' },
              { name: 'preSeq', internalType: 'uint16', type: 'uint16' },
              { name: 'execDays', internalType: 'uint16', type: 'uint16' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfShare', internalType: 'uint256', type: 'uint256' }],
    name: 'getPledgesOfShare',
    outputs: [
      {
        name: '',
        internalType: 'struct PledgesRepo.Pledge[]',
        type: 'tuple[]',
        components: [
          {
            name: 'head',
            internalType: 'struct PledgesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seqOfPld', internalType: 'uint16', type: 'uint16' },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              {
                name: 'daysToMaturity',
                internalType: 'uint16',
                type: 'uint16',
              },
              { name: 'guaranteeDays', internalType: 'uint16', type: 'uint16' },
              { name: 'creditor', internalType: 'uint40', type: 'uint40' },
              { name: 'debtor', internalType: 'uint40', type: 'uint40' },
              { name: 'pledgor', internalType: 'uint40', type: 'uint40' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct PledgesRepo.Body',
            type: 'tuple',
            components: [
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'guaranteedAmt', internalType: 'uint64', type: 'uint64' },
              { name: 'preSeq', internalType: 'uint16', type: 'uint16' },
              { name: 'execDays', internalType: 'uint16', type: 'uint16' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSNList',
    outputs: [{ name: '', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isFinalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPledge', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isPledge',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'head',
        internalType: 'struct PledgesRepo.Head',
        type: 'tuple',
        components: [
          { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
          { name: 'seqOfPld', internalType: 'uint16', type: 'uint16' },
          { name: 'createDate', internalType: 'uint48', type: 'uint48' },
          { name: 'daysToMaturity', internalType: 'uint16', type: 'uint16' },
          { name: 'guaranteeDays', internalType: 'uint16', type: 'uint16' },
          { name: 'creditor', internalType: 'uint40', type: 'uint40' },
          { name: 'debtor', internalType: 'uint40', type: 'uint40' },
          { name: 'pledgor', internalType: 'uint40', type: 'uint40' },
          { name: 'state', internalType: 'uint8', type: 'uint8' },
        ],
      },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
      { name: 'guaranteedAmt', internalType: 'uint256', type: 'uint256' },
      { name: 'execDays', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'issuePledge',
    outputs: [
      {
        name: 'regHead',
        internalType: 'struct PledgesRepo.Head',
        type: 'tuple',
        components: [
          { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
          { name: 'seqOfPld', internalType: 'uint16', type: 'uint16' },
          { name: 'createDate', internalType: 'uint48', type: 'uint48' },
          { name: 'daysToMaturity', internalType: 'uint16', type: 'uint16' },
          { name: 'guaranteeDays', internalType: 'uint16', type: 'uint16' },
          { name: 'creditor', internalType: 'uint40', type: 'uint40' },
          { name: 'debtor', internalType: 'uint40', type: 'uint40' },
          { name: 'pledgor', internalType: 'uint40', type: 'uint40' },
          { name: 'state', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'lockPledge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'refundDebt',
    outputs: [
      {
        name: 'newPld',
        internalType: 'struct PledgesRepo.Pledge',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct PledgesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seqOfPld', internalType: 'uint16', type: 'uint16' },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              {
                name: 'daysToMaturity',
                internalType: 'uint16',
                type: 'uint16',
              },
              { name: 'guaranteeDays', internalType: 'uint16', type: 'uint16' },
              { name: 'creditor', internalType: 'uint40', type: 'uint40' },
              { name: 'debtor', internalType: 'uint40', type: 'uint40' },
              { name: 'pledgor', internalType: 'uint40', type: 'uint40' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct PledgesRepo.Body',
            type: 'tuple',
            components: [
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'guaranteedAmt', internalType: 'uint64', type: 'uint64' },
              { name: 'preSeq', internalType: 'uint16', type: 'uint16' },
              { name: 'execDays', internalType: 'uint16', type: 'uint16' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'pld',
        internalType: 'struct PledgesRepo.Pledge',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct PledgesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seqOfPld', internalType: 'uint16', type: 'uint16' },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              {
                name: 'daysToMaturity',
                internalType: 'uint16',
                type: 'uint16',
              },
              { name: 'guaranteeDays', internalType: 'uint16', type: 'uint16' },
              { name: 'creditor', internalType: 'uint40', type: 'uint40' },
              { name: 'debtor', internalType: 'uint40', type: 'uint40' },
              { name: 'pledgor', internalType: 'uint40', type: 'uint40' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct PledgesRepo.Body',
            type: 'tuple',
            components: [
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'guaranteedAmt', internalType: 'uint64', type: 'uint64' },
              { name: 'preSeq', internalType: 'uint16', type: 'uint16' },
              { name: 'execDays', internalType: 'uint16', type: 'uint16' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'regPledge',
    outputs: [
      {
        name: 'head',
        internalType: 'struct PledgesRepo.Head',
        type: 'tuple',
        components: [
          { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
          { name: 'seqOfPld', internalType: 'uint16', type: 'uint16' },
          { name: 'createDate', internalType: 'uint48', type: 'uint48' },
          { name: 'daysToMaturity', internalType: 'uint16', type: 'uint16' },
          { name: 'guaranteeDays', internalType: 'uint16', type: 'uint16' },
          { name: 'creditor', internalType: 'uint40', type: 'uint40' },
          { name: 'debtor', internalType: 'uint40', type: 'uint40' },
          { name: 'pledgor', internalType: 'uint40', type: 'uint40' },
          { name: 'state', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
    ],
    name: 'releasePledge',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokePledge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'takeBackKeys',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'buyer', internalType: 'uint256', type: 'uint256' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferPledge',
    outputs: [
      {
        name: 'newPld',
        internalType: 'struct PledgesRepo.Pledge',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct PledgesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seqOfPld', internalType: 'uint16', type: 'uint16' },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              {
                name: 'daysToMaturity',
                internalType: 'uint16',
                type: 'uint16',
              },
              { name: 'guaranteeDays', internalType: 'uint16', type: 'uint16' },
              { name: 'creditor', internalType: 'uint40', type: 'uint40' },
              { name: 'debtor', internalType: 'uint40', type: 'uint40' },
              { name: 'pledgor', internalType: 'uint40', type: 'uint40' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct PledgesRepo.Body',
            type: 'tuple',
            components: [
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'guaranteedAmt', internalType: 'uint64', type: 'uint64' },
              { name: 'preSeq', internalType: 'uint16', type: 'uint16' },
              { name: 'execDays', internalType: 'uint16', type: 'uint16' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IRegisterOfSwaps
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iRegisterOfSwapsABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfSwap',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'rightholder',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'obligor',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'paidOfConsider',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'rateOfSwap',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'CreateSwap',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfSwap',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'seqOfConsider',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'paidOfConsider',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'seqOfTarget',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'paidOfTarget',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'CrystalizeSwap',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfSwap',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ExecSwap',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfSwap',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'hashLock',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'LockSwap',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfSwap',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'hashKey',
        internalType: 'string',
        type: 'string',
        indexed: true,
      },
    ],
    name: 'ReleaseSwap',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfSwap',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'RevokeSwap',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'counterOfSwap',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfSwap', internalType: 'bytes32', type: 'bytes32' },
      { name: 'rightholder', internalType: 'uint256', type: 'uint256' },
      { name: 'paidOfConsider', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createSwap',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfConsider', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfTarget', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'crystalizeSwap',
    outputs: [
      {
        name: 'body',
        internalType: 'struct SwapsRepo.Body',
        type: 'tuple',
        components: [
          { name: 'rightholder', internalType: 'uint40', type: 'uint40' },
          { name: 'seqOfConsider', internalType: 'uint32', type: 'uint32' },
          { name: 'paidOfConsider', internalType: 'uint64', type: 'uint64' },
          { name: 'seqOfTarget', internalType: 'uint32', type: 'uint32' },
          { name: 'paidOfTarget', internalType: 'uint64', type: 'uint64' },
          { name: 'state', internalType: 'uint8', type: 'uint8' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' }],
    name: 'execSwap',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAllSwaps',
    outputs: [
      {
        name: '',
        internalType: 'struct SwapsRepo.Swap[]',
        type: 'tuple[]',
        components: [
          {
            name: 'head',
            internalType: 'struct SwapsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfSwap', internalType: 'uint32', type: 'uint32' },
              { name: 'classOfTarget', internalType: 'uint16', type: 'uint16' },
              {
                name: 'classOfConsider',
                internalType: 'uint16',
                type: 'uint16',
              },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
              { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
              { name: 'obligor', internalType: 'uint40', type: 'uint40' },
              { name: 'rateOfSwap', internalType: 'uint32', type: 'uint32' },
              { name: 'para', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct SwapsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'rightholder', internalType: 'uint40', type: 'uint40' },
              { name: 'seqOfConsider', internalType: 'uint32', type: 'uint32' },
              {
                name: 'paidOfConsider',
                internalType: 'uint64',
                type: 'uint64',
              },
              { name: 'seqOfTarget', internalType: 'uint32', type: 'uint32' },
              { name: 'paidOfTarget', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSNList',
    outputs: [{ name: '', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' }],
    name: 'getSwap',
    outputs: [
      {
        name: '',
        internalType: 'struct SwapsRepo.Swap',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct SwapsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfSwap', internalType: 'uint32', type: 'uint32' },
              { name: 'classOfTarget', internalType: 'uint16', type: 'uint16' },
              {
                name: 'classOfConsider',
                internalType: 'uint16',
                type: 'uint16',
              },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
              { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
              { name: 'obligor', internalType: 'uint40', type: 'uint40' },
              { name: 'rateOfSwap', internalType: 'uint32', type: 'uint32' },
              { name: 'para', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct SwapsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'rightholder', internalType: 'uint40', type: 'uint40' },
              { name: 'seqOfConsider', internalType: 'uint32', type: 'uint32' },
              {
                name: 'paidOfConsider',
                internalType: 'uint64',
                type: 'uint64',
              },
              { name: 'seqOfTarget', internalType: 'uint32', type: 'uint32' },
              { name: 'paidOfTarget', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'snOfSwap', internalType: 'bytes32', type: 'bytes32' }],
    name: 'isSwapSN',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' }],
    name: 'isSwapSeq',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'head',
        internalType: 'struct SwapsRepo.Head',
        type: 'tuple',
        components: [
          { name: 'seqOfSwap', internalType: 'uint32', type: 'uint32' },
          { name: 'classOfTarget', internalType: 'uint16', type: 'uint16' },
          { name: 'classOfConsider', internalType: 'uint16', type: 'uint16' },
          { name: 'createDate', internalType: 'uint48', type: 'uint48' },
          { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
          { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
          { name: 'obligor', internalType: 'uint40', type: 'uint40' },
          { name: 'rateOfSwap', internalType: 'uint32', type: 'uint32' },
          { name: 'para', internalType: 'uint8', type: 'uint8' },
        ],
      },
      { name: 'rightholder', internalType: 'uint256', type: 'uint256' },
      { name: 'paidOfConsider', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'issueSwap',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' },
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'lockSwap',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'swap',
        internalType: 'struct SwapsRepo.Swap',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct SwapsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfSwap', internalType: 'uint32', type: 'uint32' },
              { name: 'classOfTarget', internalType: 'uint16', type: 'uint16' },
              {
                name: 'classOfConsider',
                internalType: 'uint16',
                type: 'uint16',
              },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
              { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
              { name: 'obligor', internalType: 'uint40', type: 'uint40' },
              { name: 'rateOfSwap', internalType: 'uint32', type: 'uint32' },
              { name: 'para', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct SwapsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'rightholder', internalType: 'uint40', type: 'uint40' },
              { name: 'seqOfConsider', internalType: 'uint32', type: 'uint32' },
              {
                name: 'paidOfConsider',
                internalType: 'uint64',
                type: 'uint64',
              },
              { name: 'seqOfTarget', internalType: 'uint32', type: 'uint32' },
              { name: 'paidOfTarget', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'regSwap',
    outputs: [
      {
        name: 'newSwap',
        internalType: 'struct SwapsRepo.Swap',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct SwapsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfSwap', internalType: 'uint32', type: 'uint32' },
              { name: 'classOfTarget', internalType: 'uint16', type: 'uint16' },
              {
                name: 'classOfConsider',
                internalType: 'uint16',
                type: 'uint16',
              },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
              { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
              { name: 'obligor', internalType: 'uint40', type: 'uint40' },
              { name: 'rateOfSwap', internalType: 'uint32', type: 'uint32' },
              { name: 'para', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct SwapsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'rightholder', internalType: 'uint40', type: 'uint40' },
              { name: 'seqOfConsider', internalType: 'uint32', type: 'uint32' },
              {
                name: 'paidOfConsider',
                internalType: 'uint64',
                type: 'uint64',
              },
              { name: 'seqOfTarget', internalType: 'uint32', type: 'uint32' },
              { name: 'paidOfTarget', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
    ],
    name: 'releaseSwap',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' }],
    name: 'revokeSwap',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'uint256', type: 'uint256' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferSwap',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// RegisterOfSwaps
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const registerOfSwapsABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfSwap',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'rightholder',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'obligor',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'paidOfConsider',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'rateOfSwap',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'CreateSwap',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfSwap',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'seqOfConsider',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'paidOfConsider',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'seqOfTarget',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'paidOfTarget',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'CrystalizeSwap',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfSwap',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ExecSwap',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfSwap',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'hashLock',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'LockSwap',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfSwap',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'hashKey',
        internalType: 'string',
        type: 'string',
        indexed: true,
      },
    ],
    name: 'ReleaseSwap',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfSwap',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'RevokeSwap',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetRoleAdmin',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'counterOfSwap',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfSwap', internalType: 'bytes32', type: 'bytes32' },
      { name: 'rightholder', internalType: 'uint256', type: 'uint256' },
      { name: 'paidOfConsider', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createSwap',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfConsider', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfTarget', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'crystalizeSwap',
    outputs: [
      {
        name: 'body',
        internalType: 'struct SwapsRepo.Body',
        type: 'tuple',
        components: [
          { name: 'rightholder', internalType: 'uint40', type: 'uint40' },
          { name: 'seqOfConsider', internalType: 'uint32', type: 'uint32' },
          { name: 'paidOfConsider', internalType: 'uint64', type: 'uint64' },
          { name: 'seqOfTarget', internalType: 'uint32', type: 'uint32' },
          { name: 'paidOfTarget', internalType: 'uint64', type: 'uint64' },
          { name: 'state', internalType: 'uint8', type: 'uint8' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' }],
    name: 'execSwap',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAllSwaps',
    outputs: [
      {
        name: '',
        internalType: 'struct SwapsRepo.Swap[]',
        type: 'tuple[]',
        components: [
          {
            name: 'head',
            internalType: 'struct SwapsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfSwap', internalType: 'uint32', type: 'uint32' },
              { name: 'classOfTarget', internalType: 'uint16', type: 'uint16' },
              {
                name: 'classOfConsider',
                internalType: 'uint16',
                type: 'uint16',
              },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
              { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
              { name: 'obligor', internalType: 'uint40', type: 'uint40' },
              { name: 'rateOfSwap', internalType: 'uint32', type: 'uint32' },
              { name: 'para', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct SwapsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'rightholder', internalType: 'uint40', type: 'uint40' },
              { name: 'seqOfConsider', internalType: 'uint32', type: 'uint32' },
              {
                name: 'paidOfConsider',
                internalType: 'uint64',
                type: 'uint64',
              },
              { name: 'seqOfTarget', internalType: 'uint32', type: 'uint32' },
              { name: 'paidOfTarget', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDK',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSNList',
    outputs: [{ name: '', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' }],
    name: 'getSwap',
    outputs: [
      {
        name: '',
        internalType: 'struct SwapsRepo.Swap',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct SwapsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfSwap', internalType: 'uint32', type: 'uint32' },
              { name: 'classOfTarget', internalType: 'uint16', type: 'uint16' },
              {
                name: 'classOfConsider',
                internalType: 'uint16',
                type: 'uint16',
              },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
              { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
              { name: 'obligor', internalType: 'uint40', type: 'uint40' },
              { name: 'rateOfSwap', internalType: 'uint32', type: 'uint32' },
              { name: 'para', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct SwapsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'rightholder', internalType: 'uint40', type: 'uint40' },
              { name: 'seqOfConsider', internalType: 'uint32', type: 'uint32' },
              {
                name: 'paidOfConsider',
                internalType: 'uint64',
                type: 'uint64',
              },
              { name: 'seqOfTarget', internalType: 'uint32', type: 'uint32' },
              { name: 'paidOfTarget', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isFinalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'snOfSwap', internalType: 'bytes32', type: 'bytes32' }],
    name: 'isSwapSN',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' }],
    name: 'isSwapSeq',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'head',
        internalType: 'struct SwapsRepo.Head',
        type: 'tuple',
        components: [
          { name: 'seqOfSwap', internalType: 'uint32', type: 'uint32' },
          { name: 'classOfTarget', internalType: 'uint16', type: 'uint16' },
          { name: 'classOfConsider', internalType: 'uint16', type: 'uint16' },
          { name: 'createDate', internalType: 'uint48', type: 'uint48' },
          { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
          { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
          { name: 'obligor', internalType: 'uint40', type: 'uint40' },
          { name: 'rateOfSwap', internalType: 'uint32', type: 'uint32' },
          { name: 'para', internalType: 'uint8', type: 'uint8' },
        ],
      },
      { name: 'rightholder', internalType: 'uint256', type: 'uint256' },
      { name: 'paidOfConsider', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'issueSwap',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' },
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'lockSwap',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'swap',
        internalType: 'struct SwapsRepo.Swap',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct SwapsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfSwap', internalType: 'uint32', type: 'uint32' },
              { name: 'classOfTarget', internalType: 'uint16', type: 'uint16' },
              {
                name: 'classOfConsider',
                internalType: 'uint16',
                type: 'uint16',
              },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
              { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
              { name: 'obligor', internalType: 'uint40', type: 'uint40' },
              { name: 'rateOfSwap', internalType: 'uint32', type: 'uint32' },
              { name: 'para', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct SwapsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'rightholder', internalType: 'uint40', type: 'uint40' },
              { name: 'seqOfConsider', internalType: 'uint32', type: 'uint32' },
              {
                name: 'paidOfConsider',
                internalType: 'uint64',
                type: 'uint64',
              },
              { name: 'seqOfTarget', internalType: 'uint32', type: 'uint32' },
              { name: 'paidOfTarget', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'regSwap',
    outputs: [
      {
        name: 'newSwap',
        internalType: 'struct SwapsRepo.Swap',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct SwapsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfSwap', internalType: 'uint32', type: 'uint32' },
              { name: 'classOfTarget', internalType: 'uint16', type: 'uint16' },
              {
                name: 'classOfConsider',
                internalType: 'uint16',
                type: 'uint16',
              },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
              { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
              { name: 'obligor', internalType: 'uint40', type: 'uint40' },
              { name: 'rateOfSwap', internalType: 'uint32', type: 'uint32' },
              { name: 'para', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct SwapsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'rightholder', internalType: 'uint40', type: 'uint40' },
              { name: 'seqOfConsider', internalType: 'uint32', type: 'uint32' },
              {
                name: 'paidOfConsider',
                internalType: 'uint64',
                type: 'uint64',
              },
              { name: 'seqOfTarget', internalType: 'uint32', type: 'uint32' },
              { name: 'paidOfTarget', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
    ],
    name: 'releaseSwap',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' }],
    name: 'revokeSwap',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'takeBackKeys',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'uint256', type: 'uint256' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferSwap',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AccessControl
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const accessControlABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetRoleAdmin',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDK',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isFinalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'takeBackKeys',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IAccessControl
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iAccessControlABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetRoleAdmin',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDK',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isFinalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'keeper', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'takeBackKeys',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// FilesFolder
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const filesFolderABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetRoleAdmin',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'body', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'state',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'UpdateStateOfFile',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'body', internalType: 'address', type: 'address' },
      { name: 'signingDays', internalType: 'uint16', type: 'uint16' },
      { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
      {
        name: 'vr',
        internalType: 'struct RulesParser.VotingRule',
        type: 'tuple',
        components: [
          { name: 'seqOfRule', internalType: 'uint16', type: 'uint16' },
          { name: 'qtyOfSubRule', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfSubRule', internalType: 'uint8', type: 'uint8' },
          { name: 'authority', internalType: 'uint8', type: 'uint8' },
          { name: 'headRatio', internalType: 'uint16', type: 'uint16' },
          { name: 'amountRatio', internalType: 'uint16', type: 'uint16' },
          { name: 'onlyAttendance', internalType: 'bool', type: 'bool' },
          { name: 'impliedConsent', internalType: 'bool', type: 'bool' },
          { name: 'partyAsConsent', internalType: 'bool', type: 'bool' },
          { name: 'againstShallBuy', internalType: 'bool', type: 'bool' },
          { name: 'frExecDays', internalType: 'uint8', type: 'uint8' },
          { name: 'dtExecDays', internalType: 'uint8', type: 'uint8' },
          { name: 'dtConfirmDays', internalType: 'uint8', type: 'uint8' },
          { name: 'invExitDays', internalType: 'uint8', type: 'uint8' },
          { name: 'votePrepareDays', internalType: 'uint8', type: 'uint8' },
          { name: 'votingDays', internalType: 'uint8', type: 'uint8' },
          { name: 'execDaysForPutOpt', internalType: 'uint8', type: 'uint8' },
          { name: 'vetoers', internalType: 'uint40[2]', type: 'uint40[2]' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
        ],
      },
      { name: 'docUrl', internalType: 'bytes32', type: 'bytes32' },
      { name: 'docHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'circulateFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'closingDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'dtExecDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'execFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'frExecDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDK',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'getFile',
    outputs: [
      {
        name: '',
        internalType: 'struct FilesRepo.File',
        type: 'tuple',
        components: [
          { name: 'snOfDoc', internalType: 'bytes32', type: 'bytes32' },
          {
            name: 'head',
            internalType: 'struct FilesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'circulateDate', internalType: 'uint48', type: 'uint48' },
              { name: 'signingDays', internalType: 'uint8', type: 'uint8' },
              { name: 'closingDays', internalType: 'uint8', type: 'uint8' },
              { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
              { name: 'frExecDays', internalType: 'uint8', type: 'uint8' },
              { name: 'dtExecDays', internalType: 'uint8', type: 'uint8' },
              { name: 'dtConfirmDays', internalType: 'uint8', type: 'uint8' },
              { name: 'proposeDate', internalType: 'uint48', type: 'uint48' },
              { name: 'invExitDays', internalType: 'uint8', type: 'uint8' },
              { name: 'votePrepareDays', internalType: 'uint8', type: 'uint8' },
              { name: 'votingDays', internalType: 'uint8', type: 'uint8' },
              {
                name: 'execDaysForPutOpt',
                internalType: 'uint8',
                type: 'uint8',
              },
              { name: 'seqOfMotion', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'ref',
            internalType: 'struct FilesRepo.Ref',
            type: 'tuple',
            components: [
              { name: 'docUrl', internalType: 'bytes32', type: 'bytes32' },
              { name: 'docHash', internalType: 'bytes32', type: 'bytes32' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getFilesList',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'getHeadOfFile',
    outputs: [
      {
        name: 'head',
        internalType: 'struct FilesRepo.Head',
        type: 'tuple',
        components: [
          { name: 'circulateDate', internalType: 'uint48', type: 'uint48' },
          { name: 'signingDays', internalType: 'uint8', type: 'uint8' },
          { name: 'closingDays', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
          { name: 'frExecDays', internalType: 'uint8', type: 'uint8' },
          { name: 'dtExecDays', internalType: 'uint8', type: 'uint8' },
          { name: 'dtConfirmDays', internalType: 'uint8', type: 'uint8' },
          { name: 'proposeDate', internalType: 'uint48', type: 'uint48' },
          { name: 'invExitDays', internalType: 'uint8', type: 'uint8' },
          { name: 'votePrepareDays', internalType: 'uint8', type: 'uint8' },
          { name: 'votingDays', internalType: 'uint8', type: 'uint8' },
          { name: 'execDaysForPutOpt', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfMotion', internalType: 'uint64', type: 'uint64' },
          { name: 'state', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isFinalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'isRegistered',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'body', internalType: 'address', type: 'address' },
      { name: 'seqOfMotion', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'proposeFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'qtyOfFiles',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfDoc', internalType: 'bytes32', type: 'bytes32' },
      { name: 'body', internalType: 'address', type: 'address' },
    ],
    name: 'regFile',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'body', internalType: 'address', type: 'address' },
      { name: 'state', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setStateOfFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'signingDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'takeBackKeys',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'terminateFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'terminateStartpoint',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'body', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'voteCountingForFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'votingDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IFilesFolder
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iFilesFolderABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'body', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'state',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'UpdateStateOfFile',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'body', internalType: 'address', type: 'address' },
      { name: 'signingDays', internalType: 'uint16', type: 'uint16' },
      { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
      {
        name: 'vr',
        internalType: 'struct RulesParser.VotingRule',
        type: 'tuple',
        components: [
          { name: 'seqOfRule', internalType: 'uint16', type: 'uint16' },
          { name: 'qtyOfSubRule', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfSubRule', internalType: 'uint8', type: 'uint8' },
          { name: 'authority', internalType: 'uint8', type: 'uint8' },
          { name: 'headRatio', internalType: 'uint16', type: 'uint16' },
          { name: 'amountRatio', internalType: 'uint16', type: 'uint16' },
          { name: 'onlyAttendance', internalType: 'bool', type: 'bool' },
          { name: 'impliedConsent', internalType: 'bool', type: 'bool' },
          { name: 'partyAsConsent', internalType: 'bool', type: 'bool' },
          { name: 'againstShallBuy', internalType: 'bool', type: 'bool' },
          { name: 'frExecDays', internalType: 'uint8', type: 'uint8' },
          { name: 'dtExecDays', internalType: 'uint8', type: 'uint8' },
          { name: 'dtConfirmDays', internalType: 'uint8', type: 'uint8' },
          { name: 'invExitDays', internalType: 'uint8', type: 'uint8' },
          { name: 'votePrepareDays', internalType: 'uint8', type: 'uint8' },
          { name: 'votingDays', internalType: 'uint8', type: 'uint8' },
          { name: 'execDaysForPutOpt', internalType: 'uint8', type: 'uint8' },
          { name: 'vetoers', internalType: 'uint40[2]', type: 'uint40[2]' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
        ],
      },
      { name: 'docUrl', internalType: 'bytes32', type: 'bytes32' },
      { name: 'docHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'circulateFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'closingDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'dtExecDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'execFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'frExecDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'getFile',
    outputs: [
      {
        name: '',
        internalType: 'struct FilesRepo.File',
        type: 'tuple',
        components: [
          { name: 'snOfDoc', internalType: 'bytes32', type: 'bytes32' },
          {
            name: 'head',
            internalType: 'struct FilesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'circulateDate', internalType: 'uint48', type: 'uint48' },
              { name: 'signingDays', internalType: 'uint8', type: 'uint8' },
              { name: 'closingDays', internalType: 'uint8', type: 'uint8' },
              { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
              { name: 'frExecDays', internalType: 'uint8', type: 'uint8' },
              { name: 'dtExecDays', internalType: 'uint8', type: 'uint8' },
              { name: 'dtConfirmDays', internalType: 'uint8', type: 'uint8' },
              { name: 'proposeDate', internalType: 'uint48', type: 'uint48' },
              { name: 'invExitDays', internalType: 'uint8', type: 'uint8' },
              { name: 'votePrepareDays', internalType: 'uint8', type: 'uint8' },
              { name: 'votingDays', internalType: 'uint8', type: 'uint8' },
              {
                name: 'execDaysForPutOpt',
                internalType: 'uint8',
                type: 'uint8',
              },
              { name: 'seqOfMotion', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'ref',
            internalType: 'struct FilesRepo.Ref',
            type: 'tuple',
            components: [
              { name: 'docUrl', internalType: 'bytes32', type: 'bytes32' },
              { name: 'docHash', internalType: 'bytes32', type: 'bytes32' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getFilesList',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'getHeadOfFile',
    outputs: [
      {
        name: 'head',
        internalType: 'struct FilesRepo.Head',
        type: 'tuple',
        components: [
          { name: 'circulateDate', internalType: 'uint48', type: 'uint48' },
          { name: 'signingDays', internalType: 'uint8', type: 'uint8' },
          { name: 'closingDays', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
          { name: 'frExecDays', internalType: 'uint8', type: 'uint8' },
          { name: 'dtExecDays', internalType: 'uint8', type: 'uint8' },
          { name: 'dtConfirmDays', internalType: 'uint8', type: 'uint8' },
          { name: 'proposeDate', internalType: 'uint48', type: 'uint48' },
          { name: 'invExitDays', internalType: 'uint8', type: 'uint8' },
          { name: 'votePrepareDays', internalType: 'uint8', type: 'uint8' },
          { name: 'votingDays', internalType: 'uint8', type: 'uint8' },
          { name: 'execDaysForPutOpt', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfMotion', internalType: 'uint64', type: 'uint64' },
          { name: 'state', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'isRegistered',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'body', internalType: 'address', type: 'address' },
      { name: 'seqOfMotion', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'proposeFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'qtyOfFiles',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfDoc', internalType: 'bytes32', type: 'bytes32' },
      { name: 'body', internalType: 'address', type: 'address' },
    ],
    name: 'regFile',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'body', internalType: 'address', type: 'address' },
      { name: 'state', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setStateOfFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'signingDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'terminateFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'terminateStartpoint',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'body', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'voteCountingForFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'votingDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IMeetingMinutes
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iMeetingMinutesABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfMotion',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'caller',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'attitude',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'sigHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
    ],
    name: 'CastVoteInBoardMeeting',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfMotion',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'caller',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'attitude',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'sigHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
    ],
    name: 'CastVoteInGeneralMeeting',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'snOfMotion',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'contents',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'CreateMotion',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfMotion',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'delegate',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'principal',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'EntrustDelegate',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfMotion',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'caller',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ExecResolution',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfMotion',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'proposer',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ProposeMotionToBoard',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfMotion',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'proposer',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ProposeMotionToGeneralMeeting',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfMotion',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'result', internalType: 'uint8', type: 'uint8', indexed: true },
    ],
    name: 'VoteCounting',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'attitude', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'castVoteInBoardMeeting',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'attitude', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'castVoteInGeneralMeeting',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'params', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'desHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'executor', internalType: 'uint256', type: 'uint256' },
      { name: 'proposer', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createAction',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'doc', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'executor', internalType: 'uint256', type: 'uint256' },
      { name: 'proposer', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createMotionToApproveDoc',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'nominator', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createMotionToRemoveOfficer',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'delegate', internalType: 'uint256', type: 'uint256' },
      { name: 'principal', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'entrustDelegate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'params', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'desHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execAction',
    outputs: [{ name: 'contents', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'contents', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execResolution',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getBallot',
    outputs: [
      {
        name: '',
        internalType: 'struct BallotsBox.Ballot',
        type: 'tuple',
        components: [
          { name: 'acct', internalType: 'uint40', type: 'uint40' },
          { name: 'attitude', internalType: 'uint8', type: 'uint8' },
          { name: 'head', internalType: 'uint32', type: 'uint32' },
          { name: 'weight', internalType: 'uint64', type: 'uint64' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'blocknumber', internalType: 'uint64', type: 'uint64' },
          { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
          { name: 'principals', internalType: 'uint256[]', type: 'uint256[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'atti', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getCaseOfAttitude',
    outputs: [
      {
        name: '',
        internalType: 'struct BallotsBox.Case',
        type: 'tuple',
        components: [
          { name: 'sumOfHead', internalType: 'uint32', type: 'uint32' },
          { name: 'sumOfWeight', internalType: 'uint64', type: 'uint64' },
          { name: 'voters', internalType: 'uint256[]', type: 'uint256[]' },
          { name: 'principals', internalType: 'uint256[]', type: 'uint256[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getDelegateOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'getMotion',
    outputs: [
      {
        name: 'motion',
        internalType: 'struct MotionsRepo.Motion',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct MotionsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfMotion', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfMotion', internalType: 'uint64', type: 'uint64' },
              { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
              { name: 'creator', internalType: 'uint40', type: 'uint40' },
              { name: 'executor', internalType: 'uint40', type: 'uint40' },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'data', internalType: 'uint32', type: 'uint32' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct MotionsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'proposer', internalType: 'uint40', type: 'uint40' },
              { name: 'proposeDate', internalType: 'uint48', type: 'uint48' },
              { name: 'shareRegDate', internalType: 'uint48', type: 'uint48' },
              { name: 'voteStartDate', internalType: 'uint48', type: 'uint48' },
              { name: 'voteEndDate', internalType: 'uint48', type: 'uint48' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'votingRule',
            internalType: 'struct RulesParser.VotingRule',
            type: 'tuple',
            components: [
              { name: 'seqOfRule', internalType: 'uint16', type: 'uint16' },
              { name: 'qtyOfSubRule', internalType: 'uint8', type: 'uint8' },
              { name: 'seqOfSubRule', internalType: 'uint8', type: 'uint8' },
              { name: 'authority', internalType: 'uint8', type: 'uint8' },
              { name: 'headRatio', internalType: 'uint16', type: 'uint16' },
              { name: 'amountRatio', internalType: 'uint16', type: 'uint16' },
              { name: 'onlyAttendance', internalType: 'bool', type: 'bool' },
              { name: 'impliedConsent', internalType: 'bool', type: 'bool' },
              { name: 'partyAsConsent', internalType: 'bool', type: 'bool' },
              { name: 'againstShallBuy', internalType: 'bool', type: 'bool' },
              { name: 'frExecDays', internalType: 'uint8', type: 'uint8' },
              { name: 'dtExecDays', internalType: 'uint8', type: 'uint8' },
              { name: 'dtConfirmDays', internalType: 'uint8', type: 'uint8' },
              { name: 'invExitDays', internalType: 'uint8', type: 'uint8' },
              { name: 'votePrepareDays', internalType: 'uint8', type: 'uint8' },
              { name: 'votingDays', internalType: 'uint8', type: 'uint8' },
              {
                name: 'execDaysForPutOpt',
                internalType: 'uint8',
                type: 'uint8',
              },
              { name: 'vetoers', internalType: 'uint40[2]', type: 'uint40[2]' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          { name: 'contents', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSeqList',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getVoterOfDelegateMap',
    outputs: [
      {
        name: '',
        internalType: 'struct DelegateMap.Voter',
        type: 'tuple',
        components: [
          { name: 'delegate', internalType: 'uint40', type: 'uint40' },
          { name: 'weight', internalType: 'uint64', type: 'uint64' },
          { name: 'repWeight', internalType: 'uint64', type: 'uint64' },
          { name: 'repHead', internalType: 'uint32', type: 'uint32' },
          { name: 'principals', internalType: 'uint256[]', type: 'uint256[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'isPassed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'isProposed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isVoted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
      { name: 'atti', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isVotedFor',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'canidate', internalType: 'uint256', type: 'uint256' },
      { name: 'nominator', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'nominateOfficer',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'proposeMotionToBoard',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'proposer', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'proposeMotionToGeneralMeeting',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'flag0', internalType: 'bool', type: 'bool' },
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      {
        name: 'base',
        internalType: 'struct MotionsRepo.VoteCalBase',
        type: 'tuple',
        components: [
          { name: 'totalHead', internalType: 'uint32', type: 'uint32' },
          { name: 'totalWeight', internalType: 'uint64', type: 'uint64' },
          { name: 'supportHead', internalType: 'uint32', type: 'uint32' },
          { name: 'supportWeight', internalType: 'uint64', type: 'uint64' },
          { name: 'attendHeadRatio', internalType: 'uint16', type: 'uint16' },
          { name: 'attendWeightRatio', internalType: 'uint16', type: 'uint16' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'state', internalType: 'uint8', type: 'uint8' },
          { name: 'unaniConsent', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'voteCounting',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'voteEnded',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'voteStarted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ISigPage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iSigPageABI = [
  { type: 'event', anonymous: false, inputs: [], name: 'CirculateDoc' },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'beBuyer', internalType: 'bool', type: 'bool' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addBlank',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'circulateDoc',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'circulated',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'established',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'initPage', internalType: 'bool', type: 'bool' }],
    name: 'getBuyers',
    outputs: [{ name: 'buyers', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCirculateDate',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getClosingDays',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getClosingDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'initPage', internalType: 'bool', type: 'bool' }],
    name: 'getParasOfPage',
    outputs: [
      {
        name: '',
        internalType: 'struct SigsRepo.Signature',
        type: 'tuple',
        components: [
          { name: 'signer', internalType: 'uint40', type: 'uint40' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'blocknumber', internalType: 'uint64', type: 'uint64' },
          { name: 'flag', internalType: 'bool', type: 'bool' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'arg', internalType: 'uint16', type: 'uint16' },
          { name: 'seq', internalType: 'uint16', type: 'uint16' },
          { name: 'attr', internalType: 'uint16', type: 'uint16' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getParties',
    outputs: [
      { name: 'parties', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'initPage', internalType: 'bool', type: 'bool' }],
    name: 'getSellers',
    outputs: [
      { name: 'sellers', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSigDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'initParty', internalType: 'bool', type: 'bool' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getSigOfParty',
    outputs: [
      { name: 'seqOfDeals', internalType: 'uint256[]', type: 'uint256[]' },
      {
        name: 'sig',
        internalType: 'struct SigsRepo.Signature',
        type: 'tuple',
        components: [
          { name: 'signer', internalType: 'uint40', type: 'uint40' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'blocknumber', internalType: 'uint64', type: 'uint64' },
          { name: 'flag', internalType: 'bool', type: 'bool' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'arg', internalType: 'uint16', type: 'uint16' },
          { name: 'seq', internalType: 'uint16', type: 'uint16' },
          { name: 'attr', internalType: 'uint16', type: 'uint16' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSigningDays',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'initPage', internalType: 'bool', type: 'bool' }],
    name: 'getSigsOfPage',
    outputs: [
      {
        name: 'sigsOfBuyer',
        internalType: 'struct SigsRepo.Signature[]',
        type: 'tuple[]',
        components: [
          { name: 'signer', internalType: 'uint40', type: 'uint40' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'blocknumber', internalType: 'uint64', type: 'uint64' },
          { name: 'flag', internalType: 'bool', type: 'bool' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'arg', internalType: 'uint16', type: 'uint16' },
          { name: 'seq', internalType: 'uint16', type: 'uint16' },
          { name: 'attr', internalType: 'uint16', type: 'uint16' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
      {
        name: 'sigsOfSeller',
        internalType: 'struct SigsRepo.Signature[]',
        type: 'tuple[]',
        components: [
          { name: 'signer', internalType: 'uint40', type: 'uint40' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'blocknumber', internalType: 'uint64', type: 'uint64' },
          { name: 'flag', internalType: 'bool', type: 'bool' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'arg', internalType: 'uint16', type: 'uint16' },
          { name: 'seq', internalType: 'uint16', type: 'uint16' },
          { name: 'attr', internalType: 'uint16', type: 'uint16' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isBuyer',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'isInitSigner',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'isParty',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isSeller',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'isSigner',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'signer', internalType: 'uint256', type: 'uint256' },
      { name: 'sigDate', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'regSig',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeBlank',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'signingDays', internalType: 'uint256', type: 'uint256' },
      { name: 'closingDays', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setTiming',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'signDoc',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MeetingMinutes
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const meetingMinutesABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfMotion',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'caller',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'attitude',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'sigHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
    ],
    name: 'CastVoteInBoardMeeting',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfMotion',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'caller',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'attitude',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'sigHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
    ],
    name: 'CastVoteInGeneralMeeting',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'snOfMotion',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'contents',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'CreateMotion',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfMotion',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'delegate',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'principal',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'EntrustDelegate',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfMotion',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'caller',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ExecResolution',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfMotion',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'proposer',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ProposeMotionToBoard',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfMotion',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'proposer',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ProposeMotionToGeneralMeeting',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetRoleAdmin',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfMotion',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'result', internalType: 'uint8', type: 'uint8', indexed: true },
    ],
    name: 'VoteCounting',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'attitude', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'castVoteInBoardMeeting',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'attitude', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'castVoteInGeneralMeeting',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'params', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'desHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'executor', internalType: 'uint256', type: 'uint256' },
      { name: 'proposer', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createAction',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'doc', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'executor', internalType: 'uint256', type: 'uint256' },
      { name: 'proposer', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createMotionToApproveDoc',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'nominator', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createMotionToRemoveOfficer',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'delegate', internalType: 'uint256', type: 'uint256' },
      { name: 'principal', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'entrustDelegate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'params', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'desHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execAction',
    outputs: [{ name: 'contents', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'contents', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execResolution',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getBallot',
    outputs: [
      {
        name: '',
        internalType: 'struct BallotsBox.Ballot',
        type: 'tuple',
        components: [
          { name: 'acct', internalType: 'uint40', type: 'uint40' },
          { name: 'attitude', internalType: 'uint8', type: 'uint8' },
          { name: 'head', internalType: 'uint32', type: 'uint32' },
          { name: 'weight', internalType: 'uint64', type: 'uint64' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'blocknumber', internalType: 'uint64', type: 'uint64' },
          { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
          { name: 'principals', internalType: 'uint256[]', type: 'uint256[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'atti', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getCaseOfAttitude',
    outputs: [
      {
        name: '',
        internalType: 'struct BallotsBox.Case',
        type: 'tuple',
        components: [
          { name: 'sumOfHead', internalType: 'uint32', type: 'uint32' },
          { name: 'sumOfWeight', internalType: 'uint64', type: 'uint64' },
          { name: 'voters', internalType: 'uint256[]', type: 'uint256[]' },
          { name: 'principals', internalType: 'uint256[]', type: 'uint256[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDK',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getDelegateOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'getMotion',
    outputs: [
      {
        name: 'motion',
        internalType: 'struct MotionsRepo.Motion',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct MotionsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfMotion', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfMotion', internalType: 'uint64', type: 'uint64' },
              { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
              { name: 'creator', internalType: 'uint40', type: 'uint40' },
              { name: 'executor', internalType: 'uint40', type: 'uint40' },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'data', internalType: 'uint32', type: 'uint32' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct MotionsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'proposer', internalType: 'uint40', type: 'uint40' },
              { name: 'proposeDate', internalType: 'uint48', type: 'uint48' },
              { name: 'shareRegDate', internalType: 'uint48', type: 'uint48' },
              { name: 'voteStartDate', internalType: 'uint48', type: 'uint48' },
              { name: 'voteEndDate', internalType: 'uint48', type: 'uint48' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'votingRule',
            internalType: 'struct RulesParser.VotingRule',
            type: 'tuple',
            components: [
              { name: 'seqOfRule', internalType: 'uint16', type: 'uint16' },
              { name: 'qtyOfSubRule', internalType: 'uint8', type: 'uint8' },
              { name: 'seqOfSubRule', internalType: 'uint8', type: 'uint8' },
              { name: 'authority', internalType: 'uint8', type: 'uint8' },
              { name: 'headRatio', internalType: 'uint16', type: 'uint16' },
              { name: 'amountRatio', internalType: 'uint16', type: 'uint16' },
              { name: 'onlyAttendance', internalType: 'bool', type: 'bool' },
              { name: 'impliedConsent', internalType: 'bool', type: 'bool' },
              { name: 'partyAsConsent', internalType: 'bool', type: 'bool' },
              { name: 'againstShallBuy', internalType: 'bool', type: 'bool' },
              { name: 'frExecDays', internalType: 'uint8', type: 'uint8' },
              { name: 'dtExecDays', internalType: 'uint8', type: 'uint8' },
              { name: 'dtConfirmDays', internalType: 'uint8', type: 'uint8' },
              { name: 'invExitDays', internalType: 'uint8', type: 'uint8' },
              { name: 'votePrepareDays', internalType: 'uint8', type: 'uint8' },
              { name: 'votingDays', internalType: 'uint8', type: 'uint8' },
              {
                name: 'execDaysForPutOpt',
                internalType: 'uint8',
                type: 'uint8',
              },
              { name: 'vetoers', internalType: 'uint40[2]', type: 'uint40[2]' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          { name: 'contents', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSeqList',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getVoterOfDelegateMap',
    outputs: [
      {
        name: '',
        internalType: 'struct DelegateMap.Voter',
        type: 'tuple',
        components: [
          { name: 'delegate', internalType: 'uint40', type: 'uint40' },
          { name: 'weight', internalType: 'uint64', type: 'uint64' },
          { name: 'repWeight', internalType: 'uint64', type: 'uint64' },
          { name: 'repHead', internalType: 'uint32', type: 'uint32' },
          { name: 'principals', internalType: 'uint256[]', type: 'uint256[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isFinalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'isPassed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'isProposed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isVoted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
      { name: 'atti', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isVotedFor',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'candidate', internalType: 'uint256', type: 'uint256' },
      { name: 'nominator', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'nominateOfficer',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'proposeMotionToBoard',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'proposer', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'proposeMotionToGeneralMeeting',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'takeBackKeys',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'flag0', internalType: 'bool', type: 'bool' },
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      {
        name: 'base',
        internalType: 'struct MotionsRepo.VoteCalBase',
        type: 'tuple',
        components: [
          { name: 'totalHead', internalType: 'uint32', type: 'uint32' },
          { name: 'totalWeight', internalType: 'uint64', type: 'uint64' },
          { name: 'supportHead', internalType: 'uint32', type: 'uint32' },
          { name: 'supportWeight', internalType: 'uint64', type: 'uint64' },
          { name: 'attendHeadRatio', internalType: 'uint16', type: 'uint16' },
          { name: 'attendWeightRatio', internalType: 'uint16', type: 'uint16' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'state', internalType: 'uint8', type: 'uint8' },
          { name: 'unaniConsent', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'voteCounting',
    outputs: [{ name: 'result', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'voteEnded',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'voteStarted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SigPage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const sigPageABI = [
  { type: 'event', anonymous: false, inputs: [], name: 'CirculateDoc' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetRoleAdmin',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'beBuyer', internalType: 'bool', type: 'bool' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addBlank',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'circulateDoc',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'circulated',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'established',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'initPage', internalType: 'bool', type: 'bool' }],
    name: 'getBuyers',
    outputs: [{ name: 'buyers', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCirculateDate',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getClosingDays',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getClosingDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDK',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'initPage', internalType: 'bool', type: 'bool' }],
    name: 'getParasOfPage',
    outputs: [
      {
        name: '',
        internalType: 'struct SigsRepo.Signature',
        type: 'tuple',
        components: [
          { name: 'signer', internalType: 'uint40', type: 'uint40' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'blocknumber', internalType: 'uint64', type: 'uint64' },
          { name: 'flag', internalType: 'bool', type: 'bool' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'arg', internalType: 'uint16', type: 'uint16' },
          { name: 'seq', internalType: 'uint16', type: 'uint16' },
          { name: 'attr', internalType: 'uint16', type: 'uint16' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getParties',
    outputs: [
      { name: 'parties', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'initPage', internalType: 'bool', type: 'bool' }],
    name: 'getSellers',
    outputs: [
      { name: 'sellers', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSigDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getSigOfParty',
    outputs: [
      { name: 'seqOfDeals', internalType: 'uint256[]', type: 'uint256[]' },
      {
        name: 'sig',
        internalType: 'struct SigsRepo.Signature',
        type: 'tuple',
        components: [
          { name: 'signer', internalType: 'uint40', type: 'uint40' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'blocknumber', internalType: 'uint64', type: 'uint64' },
          { name: 'flag', internalType: 'bool', type: 'bool' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'arg', internalType: 'uint16', type: 'uint16' },
          { name: 'seq', internalType: 'uint16', type: 'uint16' },
          { name: 'attr', internalType: 'uint16', type: 'uint16' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSigningDays',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'initPage', internalType: 'bool', type: 'bool' }],
    name: 'getSigsOfPage',
    outputs: [
      {
        name: 'sigsOfBuyer',
        internalType: 'struct SigsRepo.Signature[]',
        type: 'tuple[]',
        components: [
          { name: 'signer', internalType: 'uint40', type: 'uint40' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'blocknumber', internalType: 'uint64', type: 'uint64' },
          { name: 'flag', internalType: 'bool', type: 'bool' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'arg', internalType: 'uint16', type: 'uint16' },
          { name: 'seq', internalType: 'uint16', type: 'uint16' },
          { name: 'attr', internalType: 'uint16', type: 'uint16' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
      {
        name: 'sigsOfSeller',
        internalType: 'struct SigsRepo.Signature[]',
        type: 'tuple[]',
        components: [
          { name: 'signer', internalType: 'uint40', type: 'uint40' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'blocknumber', internalType: 'uint64', type: 'uint64' },
          { name: 'flag', internalType: 'bool', type: 'bool' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'arg', internalType: 'uint16', type: 'uint16' },
          { name: 'seq', internalType: 'uint16', type: 'uint16' },
          { name: 'attr', internalType: 'uint16', type: 'uint16' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isBuyer',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isFinalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'isInitSigner',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'isParty',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isSeller',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'isSigner',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'signer', internalType: 'uint256', type: 'uint256' },
      { name: 'sigDate', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'regSig',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeBlank',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'signingDays', internalType: 'uint256', type: 'uint256' },
      { name: 'closingDays', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setTiming',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'signDoc',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'takeBackKeys',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ArrayUtils
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const arrayUtilsABI = [
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'arrA', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'arrB', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'combine',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'arrA', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'arrC', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'lenC', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'filter',
    outputs: [
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'arrA', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'arrB', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'fullyCoveredBy',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'arrA', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'arrB', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'merge',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'arrA', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'arrB', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'minus',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'arrA', internalType: 'uint256[]', type: 'uint256[]' }],
    name: 'refine',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'arrA', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'len', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'resize',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CondsRepo
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const condsRepoABI = [
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'compOpr', internalType: 'uint256', type: 'uint256' },
      { name: 'para', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'checkCond',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'cond',
        internalType: 'struct CondsRepo.Cond',
        type: 'tuple',
        components: [
          { name: 'seqOfCond', internalType: 'uint32', type: 'uint32' },
          { name: 'logicOpr', internalType: 'uint8', type: 'uint8' },
          { name: 'compOpr1', internalType: 'uint8', type: 'uint8' },
          { name: 'para1', internalType: 'uint64', type: 'uint64' },
          { name: 'compOpr2', internalType: 'uint8', type: 'uint8' },
          { name: 'para2', internalType: 'uint64', type: 'uint64' },
          { name: 'compOpr3', internalType: 'uint8', type: 'uint8' },
          { name: 'para3', internalType: 'uint64', type: 'uint64' },
        ],
      },
      { name: 'data1', internalType: 'uint256', type: 'uint256' },
      { name: 'data2', internalType: 'uint256', type: 'uint256' },
      { name: 'data3', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'checkCondsOfThree',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'cond',
        internalType: 'struct CondsRepo.Cond',
        type: 'tuple',
        components: [
          { name: 'seqOfCond', internalType: 'uint32', type: 'uint32' },
          { name: 'logicOpr', internalType: 'uint8', type: 'uint8' },
          { name: 'compOpr1', internalType: 'uint8', type: 'uint8' },
          { name: 'para1', internalType: 'uint64', type: 'uint64' },
          { name: 'compOpr2', internalType: 'uint8', type: 'uint8' },
          { name: 'para2', internalType: 'uint64', type: 'uint64' },
          { name: 'compOpr3', internalType: 'uint8', type: 'uint8' },
          { name: 'para3', internalType: 'uint64', type: 'uint64' },
        ],
      },
      { name: 'data1', internalType: 'uint256', type: 'uint256' },
      { name: 'data2', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'checkCondsOfTwo',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'cond',
        internalType: 'struct CondsRepo.Cond',
        type: 'tuple',
        components: [
          { name: 'seqOfCond', internalType: 'uint32', type: 'uint32' },
          { name: 'logicOpr', internalType: 'uint8', type: 'uint8' },
          { name: 'compOpr1', internalType: 'uint8', type: 'uint8' },
          { name: 'para1', internalType: 'uint64', type: 'uint64' },
          { name: 'compOpr2', internalType: 'uint8', type: 'uint8' },
          { name: 'para2', internalType: 'uint64', type: 'uint64' },
          { name: 'compOpr3', internalType: 'uint8', type: 'uint8' },
          { name: 'para3', internalType: 'uint64', type: 'uint64' },
        ],
      },
      { name: 'data', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'checkSoleCond',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'cond',
        internalType: 'struct CondsRepo.Cond',
        type: 'tuple',
        components: [
          { name: 'seqOfCond', internalType: 'uint32', type: 'uint32' },
          { name: 'logicOpr', internalType: 'uint8', type: 'uint8' },
          { name: 'compOpr1', internalType: 'uint8', type: 'uint8' },
          { name: 'para1', internalType: 'uint64', type: 'uint64' },
          { name: 'compOpr2', internalType: 'uint8', type: 'uint8' },
          { name: 'para2', internalType: 'uint64', type: 'uint64' },
          { name: 'compOpr3', internalType: 'uint8', type: 'uint8' },
          { name: 'para3', internalType: 'uint64', type: 'uint64' },
        ],
      },
    ],
    name: 'codifyCond',
    outputs: [{ name: 'sn', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'sn', internalType: 'bytes32', type: 'bytes32' }],
    name: 'snParser',
    outputs: [
      {
        name: 'cond',
        internalType: 'struct CondsRepo.Cond',
        type: 'tuple',
        components: [
          { name: 'seqOfCond', internalType: 'uint32', type: 'uint32' },
          { name: 'logicOpr', internalType: 'uint8', type: 'uint8' },
          { name: 'compOpr1', internalType: 'uint8', type: 'uint8' },
          { name: 'para1', internalType: 'uint64', type: 'uint64' },
          { name: 'compOpr2', internalType: 'uint8', type: 'uint8' },
          { name: 'para2', internalType: 'uint64', type: 'uint64' },
          { name: 'compOpr3', internalType: 'uint8', type: 'uint8' },
          { name: 'para3', internalType: 'uint64', type: 'uint64' },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DTClaims
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const dtClaimsABI = [
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'head',
        internalType: 'struct DTClaims.Head',
        type: 'tuple',
        components: [
          { name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' },
          { name: 'dragAlong', internalType: 'bool', type: 'bool' },
          { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
          { name: 'paid', internalType: 'uint64', type: 'uint64' },
          { name: 'par', internalType: 'uint64', type: 'uint64' },
          { name: 'caller', internalType: 'uint40', type: 'uint40' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'argu', internalType: 'uint16', type: 'uint16' },
        ],
      },
    ],
    name: 'codifyHead',
    outputs: [{ name: 'sn', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'sn', internalType: 'bytes32', type: 'bytes32' }],
    name: 'snParser',
    outputs: [
      {
        name: 'head',
        internalType: 'struct DTClaims.Head',
        type: 'tuple',
        components: [
          { name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' },
          { name: 'dragAlong', internalType: 'bool', type: 'bool' },
          { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
          { name: 'paid', internalType: 'uint64', type: 'uint64' },
          { name: 'par', internalType: 'uint64', type: 'uint64' },
          { name: 'caller', internalType: 'uint40', type: 'uint40' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'argu', internalType: 'uint16', type: 'uint16' },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DealsRepo
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const dealsRepoABI = [
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'head',
        internalType: 'struct DealsRepo.Head',
        type: 'tuple',
        components: [
          { name: 'typeOfDeal', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' },
          { name: 'preSeq', internalType: 'uint16', type: 'uint16' },
          { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
          { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
          { name: 'seller', internalType: 'uint40', type: 'uint40' },
          { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
          { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
          { name: 'closingDeadline', internalType: 'uint48', type: 'uint48' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
        ],
      },
    ],
    name: 'codifyHead',
    outputs: [{ name: 'sn', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'sn', internalType: 'bytes32', type: 'bytes32' }],
    name: 'snParser',
    outputs: [
      {
        name: 'head',
        internalType: 'struct DealsRepo.Head',
        type: 'tuple',
        components: [
          { name: 'typeOfDeal', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' },
          { name: 'preSeq', internalType: 'uint16', type: 'uint16' },
          { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
          { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
          { name: 'seller', internalType: 'uint40', type: 'uint40' },
          { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
          { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
          { name: 'closingDeadline', internalType: 'uint48', type: 'uint48' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DocsRepo
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const docsRepoABI = [
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'head',
        internalType: 'struct DocsRepo.Head',
        type: 'tuple',
        components: [
          { name: 'typeOfDoc', internalType: 'uint32', type: 'uint32' },
          { name: 'version', internalType: 'uint32', type: 'uint32' },
          { name: 'seqOfDoc', internalType: 'uint64', type: 'uint64' },
          { name: 'creator', internalType: 'uint40', type: 'uint40' },
          { name: 'createDate', internalType: 'uint48', type: 'uint48' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'argu', internalType: 'uint16', type: 'uint16' },
          { name: 'state', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
    name: 'codifyHead',
    outputs: [{ name: 'sn', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'sn', internalType: 'bytes32', type: 'bytes32' }],
    name: 'snParser',
    outputs: [
      {
        name: 'head',
        internalType: 'struct DocsRepo.Head',
        type: 'tuple',
        components: [
          { name: 'typeOfDoc', internalType: 'uint32', type: 'uint32' },
          { name: 'version', internalType: 'uint32', type: 'uint32' },
          { name: 'seqOfDoc', internalType: 'uint64', type: 'uint64' },
          { name: 'creator', internalType: 'uint40', type: 'uint40' },
          { name: 'createDate', internalType: 'uint48', type: 'uint48' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'argu', internalType: 'uint16', type: 'uint16' },
          { name: 'state', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// LockersRepo
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const lockersRepoABI = [
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'head',
        internalType: 'struct LockersRepo.Head',
        type: 'tuple',
        components: [
          { name: 'from', internalType: 'uint40', type: 'uint40' },
          { name: 'to', internalType: 'uint40', type: 'uint40' },
          { name: 'expireDate', internalType: 'uint48', type: 'uint48' },
          { name: 'value', internalType: 'uint128', type: 'uint128' },
        ],
      },
    ],
    name: 'codifyHead',
    outputs: [{ name: 'headSn', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'sn', internalType: 'bytes32', type: 'bytes32' }],
    name: 'headSnParser',
    outputs: [
      {
        name: 'head',
        internalType: 'struct LockersRepo.Head',
        type: 'tuple',
        components: [
          { name: 'from', internalType: 'uint40', type: 'uint40' },
          { name: 'to', internalType: 'uint40', type: 'uint40' },
          { name: 'expireDate', internalType: 'uint48', type: 'uint48' },
          { name: 'value', internalType: 'uint128', type: 'uint128' },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MotionsRepo
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const motionsRepoABI = [
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'head',
        internalType: 'struct MotionsRepo.Head',
        type: 'tuple',
        components: [
          { name: 'typeOfMotion', internalType: 'uint16', type: 'uint16' },
          { name: 'seqOfMotion', internalType: 'uint64', type: 'uint64' },
          { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
          { name: 'creator', internalType: 'uint40', type: 'uint40' },
          { name: 'executor', internalType: 'uint40', type: 'uint40' },
          { name: 'createDate', internalType: 'uint48', type: 'uint48' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
    name: 'codifyHead',
    outputs: [{ name: 'sn', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'sn', internalType: 'bytes32', type: 'bytes32' }],
    name: 'snParser',
    outputs: [
      {
        name: 'head',
        internalType: 'struct MotionsRepo.Head',
        type: 'tuple',
        components: [
          { name: 'typeOfMotion', internalType: 'uint16', type: 'uint16' },
          { name: 'seqOfMotion', internalType: 'uint64', type: 'uint64' },
          { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
          { name: 'creator', internalType: 'uint40', type: 'uint40' },
          { name: 'executor', internalType: 'uint40', type: 'uint40' },
          { name: 'createDate', internalType: 'uint48', type: 'uint48' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// OfficersRepo
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const officersRepoABI = [
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'position',
        internalType: 'struct OfficersRepo.Position',
        type: 'tuple',
        components: [
          { name: 'title', internalType: 'uint16', type: 'uint16' },
          { name: 'seqOfPos', internalType: 'uint16', type: 'uint16' },
          { name: 'acct', internalType: 'uint40', type: 'uint40' },
          { name: 'nominator', internalType: 'uint40', type: 'uint40' },
          { name: 'startDate', internalType: 'uint48', type: 'uint48' },
          { name: 'endDate', internalType: 'uint48', type: 'uint48' },
          { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
          { name: 'titleOfNominator', internalType: 'uint16', type: 'uint16' },
          { name: 'argu', internalType: 'uint16', type: 'uint16' },
        ],
      },
    ],
    name: 'codifyPosition',
    outputs: [{ name: 'sn', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'sn', internalType: 'bytes32', type: 'bytes32' }],
    name: 'snParser',
    outputs: [
      {
        name: 'position',
        internalType: 'struct OfficersRepo.Position',
        type: 'tuple',
        components: [
          { name: 'title', internalType: 'uint16', type: 'uint16' },
          { name: 'seqOfPos', internalType: 'uint16', type: 'uint16' },
          { name: 'acct', internalType: 'uint40', type: 'uint40' },
          { name: 'nominator', internalType: 'uint40', type: 'uint40' },
          { name: 'startDate', internalType: 'uint48', type: 'uint48' },
          { name: 'endDate', internalType: 'uint48', type: 'uint48' },
          { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
          { name: 'titleOfNominator', internalType: 'uint16', type: 'uint16' },
          { name: 'argu', internalType: 'uint16', type: 'uint16' },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// OptionsRepo
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const optionsRepoABI = [
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'brf',
        internalType: 'struct OptionsRepo.Brief',
        type: 'tuple',
        components: [
          { name: 'seqOfBrf', internalType: 'uint16', type: 'uint16' },
          { name: 'seqOfSwap', internalType: 'uint32', type: 'uint32' },
          { name: 'rateOfSwap', internalType: 'uint32', type: 'uint32' },
          { name: 'paidOfConsider', internalType: 'uint64', type: 'uint64' },
          { name: 'paidOfTarget', internalType: 'uint64', type: 'uint64' },
          { name: 'obligor', internalType: 'uint40', type: 'uint40' },
          { name: 'state', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
    name: 'codifyBrief',
    outputs: [{ name: 'sn', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'head',
        internalType: 'struct OptionsRepo.Head',
        type: 'tuple',
        components: [
          { name: 'seqOfOpt', internalType: 'uint32', type: 'uint32' },
          { name: 'typeOfOpt', internalType: 'uint8', type: 'uint8' },
          { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
          { name: 'rate', internalType: 'uint32', type: 'uint32' },
          { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
          { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
          { name: 'execDays', internalType: 'uint16', type: 'uint16' },
          { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
          { name: 'obligor', internalType: 'uint40', type: 'uint40' },
        ],
      },
    ],
    name: 'codifyHead',
    outputs: [{ name: 'sn', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'sn', internalType: 'bytes32', type: 'bytes32' }],
    name: 'snParser',
    outputs: [
      {
        name: 'head',
        internalType: 'struct OptionsRepo.Head',
        type: 'tuple',
        components: [
          { name: 'seqOfOpt', internalType: 'uint32', type: 'uint32' },
          { name: 'typeOfOpt', internalType: 'uint8', type: 'uint8' },
          { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
          { name: 'rate', internalType: 'uint32', type: 'uint32' },
          { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
          { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
          { name: 'execDays', internalType: 'uint16', type: 'uint16' },
          { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
          { name: 'obligor', internalType: 'uint40', type: 'uint40' },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PledgesRepo
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const pledgesRepoABI = [
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'head',
        internalType: 'struct PledgesRepo.Head',
        type: 'tuple',
        components: [
          { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
          { name: 'seqOfPld', internalType: 'uint16', type: 'uint16' },
          { name: 'createDate', internalType: 'uint48', type: 'uint48' },
          { name: 'daysToMaturity', internalType: 'uint16', type: 'uint16' },
          { name: 'guaranteeDays', internalType: 'uint16', type: 'uint16' },
          { name: 'creditor', internalType: 'uint40', type: 'uint40' },
          { name: 'debtor', internalType: 'uint40', type: 'uint40' },
          { name: 'pledgor', internalType: 'uint40', type: 'uint40' },
          { name: 'state', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
    name: 'codifyHead',
    outputs: [{ name: 'sn', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'sn', internalType: 'bytes32', type: 'bytes32' }],
    name: 'snParser',
    outputs: [
      {
        name: 'head',
        internalType: 'struct PledgesRepo.Head',
        type: 'tuple',
        components: [
          { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
          { name: 'seqOfPld', internalType: 'uint16', type: 'uint16' },
          { name: 'createDate', internalType: 'uint48', type: 'uint48' },
          { name: 'daysToMaturity', internalType: 'uint16', type: 'uint16' },
          { name: 'guaranteeDays', internalType: 'uint16', type: 'uint16' },
          { name: 'creditor', internalType: 'uint40', type: 'uint40' },
          { name: 'debtor', internalType: 'uint40', type: 'uint40' },
          { name: 'pledgor', internalType: 'uint40', type: 'uint40' },
          { name: 'state', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// RulesParser
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const rulesParserABI = [
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'sn', internalType: 'bytes32', type: 'bytes32' }],
    name: 'firstRefusalRuleParser',
    outputs: [
      {
        name: 'rule',
        internalType: 'struct RulesParser.FirstRefusalRule',
        type: 'tuple',
        components: [
          { name: 'seqOfRule', internalType: 'uint16', type: 'uint16' },
          { name: 'qtyOfSubRule', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfSubRule', internalType: 'uint8', type: 'uint8' },
          { name: 'typeOfDeal', internalType: 'uint8', type: 'uint8' },
          { name: 'membersEqual', internalType: 'bool', type: 'bool' },
          { name: 'proRata', internalType: 'bool', type: 'bool' },
          { name: 'basedOnPar', internalType: 'bool', type: 'bool' },
          {
            name: 'rightholders',
            internalType: 'uint40[4]',
            type: 'uint40[4]',
          },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'argu', internalType: 'uint16', type: 'uint16' },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'sn', internalType: 'bytes32', type: 'bytes32' }],
    name: 'governanceRuleParser',
    outputs: [
      {
        name: 'rule',
        internalType: 'struct RulesParser.GovernanceRule',
        type: 'tuple',
        components: [
          { name: 'seqOfRule', internalType: 'uint16', type: 'uint16' },
          { name: 'qtyOfSubRule', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfSubRule', internalType: 'uint8', type: 'uint8' },
          { name: 'basedOnPar', internalType: 'bool', type: 'bool' },
          {
            name: 'proposeWeightRatioOfGM',
            internalType: 'uint16',
            type: 'uint16',
          },
          {
            name: 'proposeHeadRatioOfMembers',
            internalType: 'uint16',
            type: 'uint16',
          },
          {
            name: 'proposeHeadRatioOfDirectorsInGM',
            internalType: 'uint16',
            type: 'uint16',
          },
          {
            name: 'proposeHeadRatioOfDirectorsInBoard',
            internalType: 'uint16',
            type: 'uint16',
          },
          { name: 'maxQtyOfMembers', internalType: 'uint16', type: 'uint16' },
          { name: 'quorumOfGM', internalType: 'uint16', type: 'uint16' },
          { name: 'maxNumOfDirectors', internalType: 'uint8', type: 'uint8' },
          { name: 'tenureMonOfBoard', internalType: 'uint16', type: 'uint16' },
          {
            name: 'quorumOfBoardMeeting',
            internalType: 'uint16',
            type: 'uint16',
          },
          { name: 'establishedDate', internalType: 'uint48', type: 'uint48' },
          { name: 'businessTermInYears', internalType: 'uint8', type: 'uint8' },
          { name: 'typeOfComp', internalType: 'uint8', type: 'uint8' },
          {
            name: 'annualPenaltyRateForLatePayInCap',
            internalType: 'uint16',
            type: 'uint16',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'sn', internalType: 'bytes32', type: 'bytes32' }],
    name: 'groupUpdateOrderParser',
    outputs: [
      {
        name: 'order',
        internalType: 'struct RulesParser.GroupUpdateOrder',
        type: 'tuple',
        components: [
          { name: 'seqOfRule', internalType: 'uint16', type: 'uint16' },
          { name: 'qtyOfSubRule', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfSubRule', internalType: 'uint8', type: 'uint8' },
          { name: 'addMember', internalType: 'bool', type: 'bool' },
          { name: 'groupRep', internalType: 'uint40', type: 'uint40' },
          { name: 'members', internalType: 'uint40[4]', type: 'uint40[4]' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'sn', internalType: 'bytes32', type: 'bytes32' }],
    name: 'linkRuleParser',
    outputs: [
      {
        name: 'rule',
        internalType: 'struct RulesParser.LinkRule',
        type: 'tuple',
        components: [
          { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
          { name: 'effectiveDays', internalType: 'uint16', type: 'uint16' },
          { name: 'triggerType', internalType: 'uint8', type: 'uint8' },
          {
            name: 'shareRatioThreshold',
            internalType: 'uint16',
            type: 'uint16',
          },
          { name: 'rate', internalType: 'uint32', type: 'uint32' },
          { name: 'proRata', internalType: 'bool', type: 'bool' },
          { name: 'seq', internalType: 'uint16', type: 'uint16' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'argu', internalType: 'uint16', type: 'uint16' },
          { name: 'ref', internalType: 'uint16', type: 'uint16' },
          { name: 'data', internalType: 'uint64', type: 'uint64' },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'sn', internalType: 'bytes32', type: 'bytes32' }],
    name: 'positionAllocateRuleParser',
    outputs: [
      {
        name: 'rule',
        internalType: 'struct RulesParser.PositionAllocateRule',
        type: 'tuple',
        components: [
          { name: 'seqOfRule', internalType: 'uint16', type: 'uint16' },
          { name: 'qtyOfSubRule', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfSubRule', internalType: 'uint8', type: 'uint8' },
          { name: 'removePos', internalType: 'bool', type: 'bool' },
          { name: 'seqOfPos', internalType: 'uint16', type: 'uint16' },
          { name: 'titleOfPos', internalType: 'uint16', type: 'uint16' },
          { name: 'nominator', internalType: 'uint40', type: 'uint40' },
          { name: 'titleOfNominator', internalType: 'uint16', type: 'uint16' },
          { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
          { name: 'endDate', internalType: 'uint48', type: 'uint48' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'argu', internalType: 'uint16', type: 'uint16' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'sn', internalType: 'bytes32', type: 'bytes32' }],
    name: 'votingRuleParser',
    outputs: [
      {
        name: 'rule',
        internalType: 'struct RulesParser.VotingRule',
        type: 'tuple',
        components: [
          { name: 'seqOfRule', internalType: 'uint16', type: 'uint16' },
          { name: 'qtyOfSubRule', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfSubRule', internalType: 'uint8', type: 'uint8' },
          { name: 'authority', internalType: 'uint8', type: 'uint8' },
          { name: 'headRatio', internalType: 'uint16', type: 'uint16' },
          { name: 'amountRatio', internalType: 'uint16', type: 'uint16' },
          { name: 'onlyAttendance', internalType: 'bool', type: 'bool' },
          { name: 'impliedConsent', internalType: 'bool', type: 'bool' },
          { name: 'partyAsConsent', internalType: 'bool', type: 'bool' },
          { name: 'againstShallBuy', internalType: 'bool', type: 'bool' },
          { name: 'frExecDays', internalType: 'uint8', type: 'uint8' },
          { name: 'dtExecDays', internalType: 'uint8', type: 'uint8' },
          { name: 'dtConfirmDays', internalType: 'uint8', type: 'uint8' },
          { name: 'invExitDays', internalType: 'uint8', type: 'uint8' },
          { name: 'votePrepareDays', internalType: 'uint8', type: 'uint8' },
          { name: 'votingDays', internalType: 'uint8', type: 'uint8' },
          { name: 'execDaysForPutOpt', internalType: 'uint8', type: 'uint8' },
          { name: 'vetoers', internalType: 'uint40[2]', type: 'uint40[2]' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SharesRepo
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const sharesRepoABI = [
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'head',
        internalType: 'struct SharesRepo.Head',
        type: 'tuple',
        components: [
          { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
          { name: 'preSeq', internalType: 'uint32', type: 'uint32' },
          { name: 'class', internalType: 'uint16', type: 'uint16' },
          { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
          { name: 'shareholder', internalType: 'uint40', type: 'uint40' },
          { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
          { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'argu', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
    name: 'codifyHead',
    outputs: [{ name: 'sn', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'sn', internalType: 'bytes32', type: 'bytes32' }],
    name: 'snParser',
    outputs: [
      {
        name: 'head',
        internalType: 'struct SharesRepo.Head',
        type: 'tuple',
        components: [
          { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
          { name: 'preSeq', internalType: 'uint32', type: 'uint32' },
          { name: 'class', internalType: 'uint16', type: 'uint16' },
          { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
          { name: 'shareholder', internalType: 'uint40', type: 'uint40' },
          { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
          { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'argu', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SwapsRepo
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const swapsRepoABI = [
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'head',
        internalType: 'struct SwapsRepo.Head',
        type: 'tuple',
        components: [
          { name: 'seqOfSwap', internalType: 'uint32', type: 'uint32' },
          { name: 'classOfTarget', internalType: 'uint16', type: 'uint16' },
          { name: 'classOfConsider', internalType: 'uint16', type: 'uint16' },
          { name: 'createDate', internalType: 'uint48', type: 'uint48' },
          { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
          { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
          { name: 'obligor', internalType: 'uint40', type: 'uint40' },
          { name: 'rateOfSwap', internalType: 'uint32', type: 'uint32' },
          { name: 'para', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
    name: 'codifyHead',
    outputs: [{ name: 'sn', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'sn', internalType: 'bytes32', type: 'bytes32' }],
    name: 'snParser',
    outputs: [
      {
        name: 'head',
        internalType: 'struct SwapsRepo.Head',
        type: 'tuple',
        components: [
          { name: 'seqOfSwap', internalType: 'uint32', type: 'uint32' },
          { name: 'classOfTarget', internalType: 'uint16', type: 'uint16' },
          { name: 'classOfConsider', internalType: 'uint16', type: 'uint16' },
          { name: 'createDate', internalType: 'uint48', type: 'uint48' },
          { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
          { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
          { name: 'obligor', internalType: 'uint40', type: 'uint40' },
          { name: 'rateOfSwap', internalType: 'uint32', type: 'uint32' },
          { name: 'para', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// UsersRepo
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const usersRepoABI = [
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'info', internalType: 'bytes32', type: 'bytes32' }],
    name: 'infoParser',
    outputs: [
      {
        name: '',
        internalType: 'struct UsersRepo.Key',
        type: 'tuple',
        components: [
          { name: 'pubKey', internalType: 'address', type: 'address' },
          { name: 'refund', internalType: 'uint16', type: 'uint16' },
          { name: 'discount', internalType: 'uint16', type: 'uint16' },
          { name: 'gift', internalType: 'uint32', type: 'uint32' },
          { name: 'coupon', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'sn', internalType: 'bytes32', type: 'bytes32' }],
    name: 'ruleParser',
    outputs: [
      {
        name: 'rule',
        internalType: 'struct UsersRepo.Rule',
        type: 'tuple',
        components: [
          { name: 'eoaRewards', internalType: 'uint32', type: 'uint32' },
          { name: 'coaRewards', internalType: 'uint32', type: 'uint32' },
          { name: 'ceiling', internalType: 'uint32', type: 'uint32' },
          { name: 'floor', internalType: 'uint32', type: 'uint32' },
          { name: 'rate', internalType: 'uint16', type: 'uint16' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'argu', internalType: 'uint16', type: 'uint16' },
          { name: 'seq', internalType: 'uint16', type: 'uint16' },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Alongs
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const alongsABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetRoleAdmin',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'rule', internalType: 'bytes32', type: 'bytes32' },
      { name: 'dragger', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addDragger',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'dragger', internalType: 'uint256', type: 'uint256' },
      { name: 'follower', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addFollower',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDK',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDraggers',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'dragger', internalType: 'uint256', type: 'uint256' }],
    name: 'getFollowers',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'dragger', internalType: 'uint256', type: 'uint256' }],
    name: 'getLinkRule',
    outputs: [
      {
        name: '',
        internalType: 'struct RulesParser.LinkRule',
        type: 'tuple',
        components: [
          { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
          { name: 'effectiveDays', internalType: 'uint16', type: 'uint16' },
          { name: 'triggerType', internalType: 'uint8', type: 'uint8' },
          {
            name: 'shareRatioThreshold',
            internalType: 'uint16',
            type: 'uint16',
          },
          { name: 'rate', internalType: 'uint32', type: 'uint32' },
          { name: 'proRata', internalType: 'bool', type: 'bool' },
          { name: 'seq', internalType: 'uint16', type: 'uint16' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'argu', internalType: 'uint16', type: 'uint16' },
          { name: 'ref', internalType: 'uint16', type: 'uint16' },
          { name: 'data', internalType: 'uint64', type: 'uint64' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'dragger', internalType: 'uint256', type: 'uint256' }],
    name: 'isDragger',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isFinalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'dragger', internalType: 'uint256', type: 'uint256' },
      { name: 'follower', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isFollower',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      {
        name: 'deal',
        internalType: 'struct DealsRepo.Deal',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct DealsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDeal', internalType: 'uint8', type: 'uint8' },
              { name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' },
              { name: 'preSeq', internalType: 'uint16', type: 'uint16' },
              { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seller', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              {
                name: 'closingDeadline',
                internalType: 'uint48',
                type: 'uint48',
              },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct DealsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'buyer', internalType: 'uint40', type: 'uint40' },
              { name: 'groupOfBuyer', internalType: 'uint40', type: 'uint40' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'flag', internalType: 'bool', type: 'bool' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'isTriggered',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'deal',
        internalType: 'struct DealsRepo.Deal',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct DealsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDeal', internalType: 'uint8', type: 'uint8' },
              { name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' },
              { name: 'preSeq', internalType: 'uint16', type: 'uint16' },
              { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seller', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              {
                name: 'closingDeadline',
                internalType: 'uint48',
                type: 'uint48',
              },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct DealsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'buyer', internalType: 'uint40', type: 'uint40' },
              { name: 'groupOfBuyer', internalType: 'uint40', type: 'uint40' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'flag', internalType: 'bool', type: 'bool' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'priceCheck',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'dragger', internalType: 'uint256', type: 'uint256' }],
    name: 'removeDragger',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'dragger', internalType: 'uint256', type: 'uint256' },
      { name: 'follower', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeFollower',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'takeBackKeys',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IAlongs
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iAlongsABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'rule', internalType: 'bytes32', type: 'bytes32' },
      { name: 'dragger', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addDragger',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'dragger', internalType: 'uint256', type: 'uint256' },
      { name: 'follower', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addFollower',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDraggers',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'dragger', internalType: 'uint256', type: 'uint256' }],
    name: 'getFollowers',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'dragger', internalType: 'uint256', type: 'uint256' }],
    name: 'getLinkRule',
    outputs: [
      {
        name: '',
        internalType: 'struct RulesParser.LinkRule',
        type: 'tuple',
        components: [
          { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
          { name: 'effectiveDays', internalType: 'uint16', type: 'uint16' },
          { name: 'triggerType', internalType: 'uint8', type: 'uint8' },
          {
            name: 'shareRatioThreshold',
            internalType: 'uint16',
            type: 'uint16',
          },
          { name: 'rate', internalType: 'uint32', type: 'uint32' },
          { name: 'proRata', internalType: 'bool', type: 'bool' },
          { name: 'seq', internalType: 'uint16', type: 'uint16' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'argu', internalType: 'uint16', type: 'uint16' },
          { name: 'ref', internalType: 'uint16', type: 'uint16' },
          { name: 'data', internalType: 'uint64', type: 'uint64' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'dragger', internalType: 'uint256', type: 'uint256' }],
    name: 'isDragger',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'dragger', internalType: 'uint256', type: 'uint256' },
      { name: 'follower', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isFollower',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      {
        name: 'deal',
        internalType: 'struct DealsRepo.Deal',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct DealsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDeal', internalType: 'uint8', type: 'uint8' },
              { name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' },
              { name: 'preSeq', internalType: 'uint16', type: 'uint16' },
              { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seller', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              {
                name: 'closingDeadline',
                internalType: 'uint48',
                type: 'uint48',
              },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct DealsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'buyer', internalType: 'uint40', type: 'uint40' },
              { name: 'groupOfBuyer', internalType: 'uint40', type: 'uint40' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'flag', internalType: 'bool', type: 'bool' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'isTriggered',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'deal',
        internalType: 'struct DealsRepo.Deal',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct DealsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDeal', internalType: 'uint8', type: 'uint8' },
              { name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' },
              { name: 'preSeq', internalType: 'uint16', type: 'uint16' },
              { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seller', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              {
                name: 'closingDeadline',
                internalType: 'uint48',
                type: 'uint48',
              },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct DealsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'buyer', internalType: 'uint40', type: 'uint40' },
              { name: 'groupOfBuyer', internalType: 'uint40', type: 'uint40' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'flag', internalType: 'bool', type: 'bool' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'priceCheck',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'dragger', internalType: 'uint256', type: 'uint256' }],
    name: 'removeDragger',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'dragger', internalType: 'uint256', type: 'uint256' },
      { name: 'follower', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeFollower',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AntiDilution
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const antiDilutionABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetRoleAdmin',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'class', internalType: 'uint256', type: 'uint256' },
      { name: 'price', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addBenchmark',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'class', internalType: 'uint256', type: 'uint256' },
      { name: 'obligor', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addObligor',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getClasses',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDK',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'class', internalType: 'uint256', type: 'uint256' }],
    name: 'getFloorPriceOfClass',
    outputs: [{ name: 'price', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getGiftPaid',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'class', internalType: 'uint256', type: 'uint256' }],
    name: 'getObligorsOfAD',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isFinalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'class', internalType: 'uint256', type: 'uint256' }],
    name: 'isMarked',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'class', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isObligor',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'deal',
        internalType: 'struct DealsRepo.Deal',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct DealsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDeal', internalType: 'uint8', type: 'uint8' },
              { name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' },
              { name: 'preSeq', internalType: 'uint16', type: 'uint16' },
              { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seller', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              {
                name: 'closingDeadline',
                internalType: 'uint48',
                type: 'uint48',
              },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct DealsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'buyer', internalType: 'uint40', type: 'uint40' },
              { name: 'groupOfBuyer', internalType: 'uint40', type: 'uint40' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'flag', internalType: 'bool', type: 'bool' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
      { name: 'class', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isTriggered',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'class', internalType: 'uint256', type: 'uint256' }],
    name: 'removeBenchmark',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'class', internalType: 'uint256', type: 'uint256' },
      { name: 'obligor', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeObligor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'takeBackKeys',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ILockUp
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iLockUpABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'keyholder', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addKeyholder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfShare', internalType: 'uint256', type: 'uint256' }],
    name: 'delLocker',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfShare', internalType: 'uint256', type: 'uint256' }],
    name: 'getLocker',
    outputs: [
      { name: 'dueDate', internalType: 'uint48', type: 'uint48' },
      { name: 'keyHolders', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      {
        name: 'deal',
        internalType: 'struct DealsRepo.Deal',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct DealsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDeal', internalType: 'uint8', type: 'uint8' },
              { name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' },
              { name: 'preSeq', internalType: 'uint16', type: 'uint16' },
              { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seller', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              {
                name: 'closingDeadline',
                internalType: 'uint48',
                type: 'uint48',
              },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct DealsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'buyer', internalType: 'uint40', type: 'uint40' },
              { name: 'groupOfBuyer', internalType: 'uint40', type: 'uint40' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'flag', internalType: 'bool', type: 'bool' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'isExempted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfShare', internalType: 'uint256', type: 'uint256' }],
    name: 'isLocked',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'deal',
        internalType: 'struct DealsRepo.Deal',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct DealsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDeal', internalType: 'uint8', type: 'uint8' },
              { name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' },
              { name: 'preSeq', internalType: 'uint16', type: 'uint16' },
              { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seller', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              {
                name: 'closingDeadline',
                internalType: 'uint48',
                type: 'uint48',
              },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct DealsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'buyer', internalType: 'uint40', type: 'uint40' },
              { name: 'groupOfBuyer', internalType: 'uint40', type: 'uint40' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'flag', internalType: 'bool', type: 'bool' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'isTriggered',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'lockedShares',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'keyholder', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeKeyholder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'dueDate', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setLocker',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IOptions
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iOptionsABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'obligor', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addObligorIntoOpt',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'counterOfOptions',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfOpt', internalType: 'bytes32', type: 'bytes32' },
      { name: 'snOfCond', internalType: 'bytes32', type: 'bytes32' },
      { name: 'rightholder', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createOption',
    outputs: [
      {
        name: 'head',
        internalType: 'struct OptionsRepo.Head',
        type: 'tuple',
        components: [
          { name: 'seqOfOpt', internalType: 'uint32', type: 'uint32' },
          { name: 'typeOfOpt', internalType: 'uint8', type: 'uint8' },
          { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
          { name: 'rate', internalType: 'uint32', type: 'uint32' },
          { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
          { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
          { name: 'execDays', internalType: 'uint16', type: 'uint16' },
          { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
          { name: 'obligor', internalType: 'uint40', type: 'uint40' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' }],
    name: 'delOption',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAllOptions',
    outputs: [
      {
        name: '',
        internalType: 'struct OptionsRepo.Option[]',
        type: 'tuple[]',
        components: [
          {
            name: 'head',
            internalType: 'struct OptionsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfOpt', internalType: 'uint32', type: 'uint32' },
              { name: 'typeOfOpt', internalType: 'uint8', type: 'uint8' },
              { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
              { name: 'rate', internalType: 'uint32', type: 'uint32' },
              { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
              { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
              { name: 'execDays', internalType: 'uint16', type: 'uint16' },
              { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
              { name: 'obligor', internalType: 'uint40', type: 'uint40' },
            ],
          },
          {
            name: 'cond',
            internalType: 'struct CondsRepo.Cond',
            type: 'tuple',
            components: [
              { name: 'seqOfCond', internalType: 'uint32', type: 'uint32' },
              { name: 'logicOpr', internalType: 'uint8', type: 'uint8' },
              { name: 'compOpr1', internalType: 'uint8', type: 'uint8' },
              { name: 'para1', internalType: 'uint64', type: 'uint64' },
              { name: 'compOpr2', internalType: 'uint8', type: 'uint8' },
              { name: 'para2', internalType: 'uint64', type: 'uint64' },
              { name: 'compOpr3', internalType: 'uint8', type: 'uint8' },
              { name: 'para3', internalType: 'uint64', type: 'uint64' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct OptionsRepo.Body',
            type: 'tuple',
            components: [
              {
                name: 'closingDeadline',
                internalType: 'uint48',
                type: 'uint48',
              },
              { name: 'rightholder', internalType: 'uint40', type: 'uint40' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' }],
    name: 'getObligorsOfOption',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' }],
    name: 'getOption',
    outputs: [
      {
        name: 'option',
        internalType: 'struct OptionsRepo.Option',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct OptionsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfOpt', internalType: 'uint32', type: 'uint32' },
              { name: 'typeOfOpt', internalType: 'uint8', type: 'uint8' },
              { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
              { name: 'rate', internalType: 'uint32', type: 'uint32' },
              { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
              { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
              { name: 'execDays', internalType: 'uint16', type: 'uint16' },
              { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
              { name: 'obligor', internalType: 'uint40', type: 'uint40' },
            ],
          },
          {
            name: 'cond',
            internalType: 'struct CondsRepo.Cond',
            type: 'tuple',
            components: [
              { name: 'seqOfCond', internalType: 'uint32', type: 'uint32' },
              { name: 'logicOpr', internalType: 'uint8', type: 'uint8' },
              { name: 'compOpr1', internalType: 'uint8', type: 'uint8' },
              { name: 'para1', internalType: 'uint64', type: 'uint64' },
              { name: 'compOpr2', internalType: 'uint8', type: 'uint8' },
              { name: 'para2', internalType: 'uint64', type: 'uint64' },
              { name: 'compOpr3', internalType: 'uint8', type: 'uint8' },
              { name: 'para3', internalType: 'uint64', type: 'uint64' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct OptionsRepo.Body',
            type: 'tuple',
            components: [
              {
                name: 'closingDeadline',
                internalType: 'uint48',
                type: 'uint48',
              },
              { name: 'rightholder', internalType: 'uint40', type: 'uint40' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSeqList',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isObligor',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' }],
    name: 'isOption',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'qtyOfOptions',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'obligor', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeObligorFromOpt',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IAntiDilution
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iAntiDilutionABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'class', internalType: 'uint256', type: 'uint256' },
      { name: 'price', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addBenchmark',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'class', internalType: 'uint256', type: 'uint256' },
      { name: 'obligor', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addObligor',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getClasses',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'class', internalType: 'uint256', type: 'uint256' }],
    name: 'getFloorPriceOfClass',
    outputs: [{ name: 'price', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getGiftPaid',
    outputs: [{ name: 'gift', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'class', internalType: 'uint256', type: 'uint256' }],
    name: 'getObligorsOfAD',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'class', internalType: 'uint256', type: 'uint256' }],
    name: 'isMarked',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'class', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isObligor',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'deal',
        internalType: 'struct DealsRepo.Deal',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct DealsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDeal', internalType: 'uint8', type: 'uint8' },
              { name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' },
              { name: 'preSeq', internalType: 'uint16', type: 'uint16' },
              { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seller', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              {
                name: 'closingDeadline',
                internalType: 'uint48',
                type: 'uint48',
              },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct DealsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'buyer', internalType: 'uint40', type: 'uint40' },
              { name: 'groupOfBuyer', internalType: 'uint40', type: 'uint40' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'flag', internalType: 'bool', type: 'bool' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isTriggered',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'class', internalType: 'uint256', type: 'uint256' }],
    name: 'removeBenchmark',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'class', internalType: 'uint256', type: 'uint256' },
      { name: 'obligor', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeObligor',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Options
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const optionsABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetRoleAdmin',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'obligor', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addObligorIntoOpt',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'counterOfOptions',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfOpt', internalType: 'bytes32', type: 'bytes32' },
      { name: 'snOfCond', internalType: 'bytes32', type: 'bytes32' },
      { name: 'rightholder', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createOption',
    outputs: [
      {
        name: 'head',
        internalType: 'struct OptionsRepo.Head',
        type: 'tuple',
        components: [
          { name: 'seqOfOpt', internalType: 'uint32', type: 'uint32' },
          { name: 'typeOfOpt', internalType: 'uint8', type: 'uint8' },
          { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
          { name: 'rate', internalType: 'uint32', type: 'uint32' },
          { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
          { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
          { name: 'execDays', internalType: 'uint16', type: 'uint16' },
          { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
          { name: 'obligor', internalType: 'uint40', type: 'uint40' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' }],
    name: 'delOption',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAllOptions',
    outputs: [
      {
        name: '',
        internalType: 'struct OptionsRepo.Option[]',
        type: 'tuple[]',
        components: [
          {
            name: 'head',
            internalType: 'struct OptionsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfOpt', internalType: 'uint32', type: 'uint32' },
              { name: 'typeOfOpt', internalType: 'uint8', type: 'uint8' },
              { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
              { name: 'rate', internalType: 'uint32', type: 'uint32' },
              { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
              { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
              { name: 'execDays', internalType: 'uint16', type: 'uint16' },
              { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
              { name: 'obligor', internalType: 'uint40', type: 'uint40' },
            ],
          },
          {
            name: 'cond',
            internalType: 'struct CondsRepo.Cond',
            type: 'tuple',
            components: [
              { name: 'seqOfCond', internalType: 'uint32', type: 'uint32' },
              { name: 'logicOpr', internalType: 'uint8', type: 'uint8' },
              { name: 'compOpr1', internalType: 'uint8', type: 'uint8' },
              { name: 'para1', internalType: 'uint64', type: 'uint64' },
              { name: 'compOpr2', internalType: 'uint8', type: 'uint8' },
              { name: 'para2', internalType: 'uint64', type: 'uint64' },
              { name: 'compOpr3', internalType: 'uint8', type: 'uint8' },
              { name: 'para3', internalType: 'uint64', type: 'uint64' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct OptionsRepo.Body',
            type: 'tuple',
            components: [
              {
                name: 'closingDeadline',
                internalType: 'uint48',
                type: 'uint48',
              },
              { name: 'rightholder', internalType: 'uint40', type: 'uint40' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDK',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' }],
    name: 'getObligorsOfOption',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' }],
    name: 'getOption',
    outputs: [
      {
        name: 'option',
        internalType: 'struct OptionsRepo.Option',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct OptionsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfOpt', internalType: 'uint32', type: 'uint32' },
              { name: 'typeOfOpt', internalType: 'uint8', type: 'uint8' },
              { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
              { name: 'rate', internalType: 'uint32', type: 'uint32' },
              { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
              { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
              { name: 'execDays', internalType: 'uint16', type: 'uint16' },
              { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
              { name: 'obligor', internalType: 'uint40', type: 'uint40' },
            ],
          },
          {
            name: 'cond',
            internalType: 'struct CondsRepo.Cond',
            type: 'tuple',
            components: [
              { name: 'seqOfCond', internalType: 'uint32', type: 'uint32' },
              { name: 'logicOpr', internalType: 'uint8', type: 'uint8' },
              { name: 'compOpr1', internalType: 'uint8', type: 'uint8' },
              { name: 'para1', internalType: 'uint64', type: 'uint64' },
              { name: 'compOpr2', internalType: 'uint8', type: 'uint8' },
              { name: 'para2', internalType: 'uint64', type: 'uint64' },
              { name: 'compOpr3', internalType: 'uint8', type: 'uint8' },
              { name: 'para3', internalType: 'uint64', type: 'uint64' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct OptionsRepo.Body',
            type: 'tuple',
            components: [
              {
                name: 'closingDeadline',
                internalType: 'uint48',
                type: 'uint48',
              },
              { name: 'rightholder', internalType: 'uint40', type: 'uint40' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSeqList',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isFinalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isObligor',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' }],
    name: 'isOption',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'qtyOfOptions',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'obligor', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeObligorFromOpt',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'takeBackKeys',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// LockUp
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const lockUpABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'acct', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetRoleAdmin',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'keyholder', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addKeyholder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfShare', internalType: 'uint256', type: 'uint256' }],
    name: 'delLocker',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDK',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfShare', internalType: 'uint256', type: 'uint256' }],
    name: 'getLocker',
    outputs: [
      { name: 'dueDate', internalType: 'uint48', type: 'uint48' },
      { name: 'keyHolders', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      {
        name: 'deal',
        internalType: 'struct DealsRepo.Deal',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct DealsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDeal', internalType: 'uint8', type: 'uint8' },
              { name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' },
              { name: 'preSeq', internalType: 'uint16', type: 'uint16' },
              { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seller', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              {
                name: 'closingDeadline',
                internalType: 'uint48',
                type: 'uint48',
              },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct DealsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'buyer', internalType: 'uint40', type: 'uint40' },
              { name: 'groupOfBuyer', internalType: 'uint40', type: 'uint40' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'flag', internalType: 'bool', type: 'bool' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'isExempted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isFinalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfShare', internalType: 'uint256', type: 'uint256' }],
    name: 'isLocked',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'deal',
        internalType: 'struct DealsRepo.Deal',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct DealsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDeal', internalType: 'uint8', type: 'uint8' },
              { name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' },
              { name: 'preSeq', internalType: 'uint16', type: 'uint16' },
              { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seller', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              {
                name: 'closingDeadline',
                internalType: 'uint48',
                type: 'uint48',
              },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct DealsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'buyer', internalType: 'uint40', type: 'uint40' },
              { name: 'groupOfBuyer', internalType: 'uint40', type: 'uint40' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'flag', internalType: 'bool', type: 'bool' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'isTriggered',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'lockedShares',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'keyholder', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeKeyholder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'dueDate', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setLocker',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'address', type: 'address' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'address', type: 'address' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'takeBackKeys',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link generalKeeperABI}__.
 */
export function useGeneralKeeper(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: generalKeeperABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link generalKeeperABI}__.
 */
export function useGeneralKeeperRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof generalKeeperABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof generalKeeperABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: generalKeeperABI,
    ...config,
  } as UseContractReadConfig<
    typeof generalKeeperABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"getBMM"`.
 */
export function useGeneralKeeperGetBmm<
  TSelectData = ReadContractResult<typeof generalKeeperABI, 'getBMM'>,
>(
  config: Omit<
    UseContractReadConfig<typeof generalKeeperABI, 'getBMM', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: generalKeeperABI,
    functionName: 'getBMM',
    ...config,
  } as UseContractReadConfig<typeof generalKeeperABI, 'getBMM', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"getBOS"`.
 */
export function useGeneralKeeperGetBos<
  TSelectData = ReadContractResult<typeof generalKeeperABI, 'getBOS'>,
>(
  config: Omit<
    UseContractReadConfig<typeof generalKeeperABI, 'getBOS', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: generalKeeperABI,
    functionName: 'getBOS',
    ...config,
  } as UseContractReadConfig<typeof generalKeeperABI, 'getBOS', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"getBook"`.
 */
export function useGeneralKeeperGetBook<
  TSelectData = ReadContractResult<typeof generalKeeperABI, 'getBook'>,
>(
  config: Omit<
    UseContractReadConfig<typeof generalKeeperABI, 'getBook', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: generalKeeperABI,
    functionName: 'getBook',
    ...config,
  } as UseContractReadConfig<typeof generalKeeperABI, 'getBook', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"getCompUser"`.
 */
export function useGeneralKeeperGetCompUser<
  TSelectData = ReadContractResult<typeof generalKeeperABI, 'getCompUser'>,
>(
  config: Omit<
    UseContractReadConfig<typeof generalKeeperABI, 'getCompUser', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: generalKeeperABI,
    functionName: 'getCompUser',
    ...config,
  } as UseContractReadConfig<
    typeof generalKeeperABI,
    'getCompUser',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"getDK"`.
 */
export function useGeneralKeeperGetDk<
  TSelectData = ReadContractResult<typeof generalKeeperABI, 'getDK'>,
>(
  config: Omit<
    UseContractReadConfig<typeof generalKeeperABI, 'getDK', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: generalKeeperABI,
    functionName: 'getDK',
    ...config,
  } as UseContractReadConfig<typeof generalKeeperABI, 'getDK', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"getGMM"`.
 */
export function useGeneralKeeperGetGmm<
  TSelectData = ReadContractResult<typeof generalKeeperABI, 'getGMM'>,
>(
  config: Omit<
    UseContractReadConfig<typeof generalKeeperABI, 'getGMM', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: generalKeeperABI,
    functionName: 'getGMM',
    ...config,
  } as UseContractReadConfig<typeof generalKeeperABI, 'getGMM', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"getKeeper"`.
 */
export function useGeneralKeeperGetKeeper<
  TSelectData = ReadContractResult<typeof generalKeeperABI, 'getKeeper'>,
>(
  config: Omit<
    UseContractReadConfig<typeof generalKeeperABI, 'getKeeper', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: generalKeeperABI,
    functionName: 'getKeeper',
    ...config,
  } as UseContractReadConfig<typeof generalKeeperABI, 'getKeeper', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"getOwner"`.
 */
export function useGeneralKeeperGetOwner<
  TSelectData = ReadContractResult<typeof generalKeeperABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof generalKeeperABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: generalKeeperABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<typeof generalKeeperABI, 'getOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"getROA"`.
 */
export function useGeneralKeeperGetRoa<
  TSelectData = ReadContractResult<typeof generalKeeperABI, 'getROA'>,
>(
  config: Omit<
    UseContractReadConfig<typeof generalKeeperABI, 'getROA', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: generalKeeperABI,
    functionName: 'getROA',
    ...config,
  } as UseContractReadConfig<typeof generalKeeperABI, 'getROA', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"getROC"`.
 */
export function useGeneralKeeperGetRoc<
  TSelectData = ReadContractResult<typeof generalKeeperABI, 'getROC'>,
>(
  config: Omit<
    UseContractReadConfig<typeof generalKeeperABI, 'getROC', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: generalKeeperABI,
    functionName: 'getROC',
    ...config,
  } as UseContractReadConfig<typeof generalKeeperABI, 'getROC', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"getROD"`.
 */
export function useGeneralKeeperGetRod<
  TSelectData = ReadContractResult<typeof generalKeeperABI, 'getROD'>,
>(
  config: Omit<
    UseContractReadConfig<typeof generalKeeperABI, 'getROD', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: generalKeeperABI,
    functionName: 'getROD',
    ...config,
  } as UseContractReadConfig<typeof generalKeeperABI, 'getROD', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"getROM"`.
 */
export function useGeneralKeeperGetRom<
  TSelectData = ReadContractResult<typeof generalKeeperABI, 'getROM'>,
>(
  config: Omit<
    UseContractReadConfig<typeof generalKeeperABI, 'getROM', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: generalKeeperABI,
    functionName: 'getROM',
    ...config,
  } as UseContractReadConfig<typeof generalKeeperABI, 'getROM', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"getROO"`.
 */
export function useGeneralKeeperGetRoo<
  TSelectData = ReadContractResult<typeof generalKeeperABI, 'getROO'>,
>(
  config: Omit<
    UseContractReadConfig<typeof generalKeeperABI, 'getROO', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: generalKeeperABI,
    functionName: 'getROO',
    ...config,
  } as UseContractReadConfig<typeof generalKeeperABI, 'getROO', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"getROP"`.
 */
export function useGeneralKeeperGetRop<
  TSelectData = ReadContractResult<typeof generalKeeperABI, 'getROP'>,
>(
  config: Omit<
    UseContractReadConfig<typeof generalKeeperABI, 'getROP', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: generalKeeperABI,
    functionName: 'getROP',
    ...config,
  } as UseContractReadConfig<typeof generalKeeperABI, 'getROP', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"getROS"`.
 */
export function useGeneralKeeperGetRos<
  TSelectData = ReadContractResult<typeof generalKeeperABI, 'getROS'>,
>(
  config: Omit<
    UseContractReadConfig<typeof generalKeeperABI, 'getROS', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: generalKeeperABI,
    functionName: 'getROS',
    ...config,
  } as UseContractReadConfig<typeof generalKeeperABI, 'getROS', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useGeneralKeeperGetRoleAdmin<
  TSelectData = ReadContractResult<typeof generalKeeperABI, 'getRoleAdmin'>,
>(
  config: Omit<
    UseContractReadConfig<typeof generalKeeperABI, 'getRoleAdmin', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: generalKeeperABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<
    typeof generalKeeperABI,
    'getRoleAdmin',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"getSHA"`.
 */
export function useGeneralKeeperGetSha<
  TSelectData = ReadContractResult<typeof generalKeeperABI, 'getSHA'>,
>(
  config: Omit<
    UseContractReadConfig<typeof generalKeeperABI, 'getSHA', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: generalKeeperABI,
    functionName: 'getSHA',
    ...config,
  } as UseContractReadConfig<typeof generalKeeperABI, 'getSHA', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"hasRole"`.
 */
export function useGeneralKeeperHasRole<
  TSelectData = ReadContractResult<typeof generalKeeperABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof generalKeeperABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: generalKeeperABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof generalKeeperABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"isFinalized"`.
 */
export function useGeneralKeeperIsFinalized<
  TSelectData = ReadContractResult<typeof generalKeeperABI, 'isFinalized'>,
>(
  config: Omit<
    UseContractReadConfig<typeof generalKeeperABI, 'isFinalized', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: generalKeeperABI,
    functionName: 'isFinalized',
    ...config,
  } as UseContractReadConfig<
    typeof generalKeeperABI,
    'isFinalized',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"isKeeper"`.
 */
export function useGeneralKeeperIsKeeper<
  TSelectData = ReadContractResult<typeof generalKeeperABI, 'isKeeper'>,
>(
  config: Omit<
    UseContractReadConfig<typeof generalKeeperABI, 'isKeeper', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: generalKeeperABI,
    functionName: 'isKeeper',
    ...config,
  } as UseContractReadConfig<typeof generalKeeperABI, 'isKeeper', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"nameOfCompany"`.
 */
export function useGeneralKeeperNameOfCompany<
  TSelectData = ReadContractResult<typeof generalKeeperABI, 'nameOfCompany'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof generalKeeperABI,
      'nameOfCompany',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: generalKeeperABI,
    functionName: 'nameOfCompany',
    ...config,
  } as UseContractReadConfig<
    typeof generalKeeperABI,
    'nameOfCompany',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"regNumOfCompany"`.
 */
export function useGeneralKeeperRegNumOfCompany<
  TSelectData = ReadContractResult<typeof generalKeeperABI, 'regNumOfCompany'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof generalKeeperABI,
      'regNumOfCompany',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: generalKeeperABI,
    functionName: 'regNumOfCompany',
    ...config,
  } as UseContractReadConfig<
    typeof generalKeeperABI,
    'regNumOfCompany',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"symbolOfCompany"`.
 */
export function useGeneralKeeperSymbolOfCompany<
  TSelectData = ReadContractResult<typeof generalKeeperABI, 'symbolOfCompany'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof generalKeeperABI,
      'symbolOfCompany',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: generalKeeperABI,
    functionName: 'symbolOfCompany',
    ...config,
  } as UseContractReadConfig<
    typeof generalKeeperABI,
    'symbolOfCompany',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__.
 */
export function useGeneralKeeperWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof generalKeeperABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, TFunctionName>({
    abi: generalKeeperABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useGeneralKeeperAbandonRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'abandonRole'
        >['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'abandonRole'> & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'abandonRole'>({
    abi: generalKeeperABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"acceptAlongDeal"`.
 */
export function useGeneralKeeperAcceptAlongDeal<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'acceptAlongDeal'
        >['abi'],
        'acceptAlongDeal'
      > & { functionName?: 'acceptAlongDeal' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'acceptAlongDeal'
      > & {
        abi?: never
        functionName?: 'acceptAlongDeal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'acceptAlongDeal'>({
    abi: generalKeeperABI,
    functionName: 'acceptAlongDeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"acceptSHA"`.
 */
export function useGeneralKeeperAcceptSha<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof generalKeeperABI, 'acceptSHA'>['abi'],
        'acceptSHA'
      > & { functionName?: 'acceptSHA' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'acceptSHA'> & {
        abi?: never
        functionName?: 'acceptSHA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'acceptSHA'>({
    abi: generalKeeperABI,
    functionName: 'acceptSHA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"activateSHA"`.
 */
export function useGeneralKeeperActivateSha<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'activateSHA'
        >['abi'],
        'activateSHA'
      > & { functionName?: 'activateSHA' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'activateSHA'> & {
        abi?: never
        functionName?: 'activateSHA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'activateSHA'>({
    abi: generalKeeperABI,
    functionName: 'activateSHA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"castVote"`.
 */
export function useGeneralKeeperCastVote<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof generalKeeperABI, 'castVote'>['abi'],
        'castVote'
      > & { functionName?: 'castVote' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'castVote'> & {
        abi?: never
        functionName?: 'castVote'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'castVote'>({
    abi: generalKeeperABI,
    functionName: 'castVote',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"castVoteOfGM"`.
 */
export function useGeneralKeeperCastVoteOfGm<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'castVoteOfGM'
        >['abi'],
        'castVoteOfGM'
      > & { functionName?: 'castVoteOfGM' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'castVoteOfGM'> & {
        abi?: never
        functionName?: 'castVoteOfGM'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'castVoteOfGM'>({
    abi: generalKeeperABI,
    functionName: 'castVoteOfGM',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"circulateIA"`.
 */
export function useGeneralKeeperCirculateIa<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'circulateIA'
        >['abi'],
        'circulateIA'
      > & { functionName?: 'circulateIA' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'circulateIA'> & {
        abi?: never
        functionName?: 'circulateIA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'circulateIA'>({
    abi: generalKeeperABI,
    functionName: 'circulateIA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"circulateSHA"`.
 */
export function useGeneralKeeperCirculateSha<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'circulateSHA'
        >['abi'],
        'circulateSHA'
      > & { functionName?: 'circulateSHA' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'circulateSHA'> & {
        abi?: never
        functionName?: 'circulateSHA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'circulateSHA'>({
    abi: generalKeeperABI,
    functionName: 'circulateSHA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"closeDeal"`.
 */
export function useGeneralKeeperCloseDeal<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof generalKeeperABI, 'closeDeal'>['abi'],
        'closeDeal'
      > & { functionName?: 'closeDeal' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'closeDeal'> & {
        abi?: never
        functionName?: 'closeDeal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'closeDeal'>({
    abi: generalKeeperABI,
    functionName: 'closeDeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"computeFirstRefusal"`.
 */
export function useGeneralKeeperComputeFirstRefusal<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'computeFirstRefusal'
        >['abi'],
        'computeFirstRefusal'
      > & { functionName?: 'computeFirstRefusal' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'computeFirstRefusal'
      > & {
        abi?: never
        functionName?: 'computeFirstRefusal'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof generalKeeperABI,
    'computeFirstRefusal'
  >({
    abi: generalKeeperABI,
    functionName: 'computeFirstRefusal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"createAction"`.
 */
export function useGeneralKeeperCreateAction<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'createAction'
        >['abi'],
        'createAction'
      > & { functionName?: 'createAction' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'createAction'> & {
        abi?: never
        functionName?: 'createAction'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'createAction'>({
    abi: generalKeeperABI,
    functionName: 'createAction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"createActionOfGM"`.
 */
export function useGeneralKeeperCreateActionOfGm<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'createActionOfGM'
        >['abi'],
        'createActionOfGM'
      > & { functionName?: 'createActionOfGM' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'createActionOfGM'
      > & {
        abi?: never
        functionName?: 'createActionOfGM'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'createActionOfGM'>({
    abi: generalKeeperABI,
    functionName: 'createActionOfGM',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"createCorpSeal"`.
 */
export function useGeneralKeeperCreateCorpSeal<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'createCorpSeal'
        >['abi'],
        'createCorpSeal'
      > & { functionName?: 'createCorpSeal' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'createCorpSeal'
      > & {
        abi?: never
        functionName?: 'createCorpSeal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'createCorpSeal'>({
    abi: generalKeeperABI,
    functionName: 'createCorpSeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"createIA"`.
 */
export function useGeneralKeeperCreateIa<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof generalKeeperABI, 'createIA'>['abi'],
        'createIA'
      > & { functionName?: 'createIA' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'createIA'> & {
        abi?: never
        functionName?: 'createIA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'createIA'>({
    abi: generalKeeperABI,
    functionName: 'createIA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"createMotionToApproveDoc"`.
 */
export function useGeneralKeeperCreateMotionToApproveDoc<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'createMotionToApproveDoc'
        >['abi'],
        'createMotionToApproveDoc'
      > & { functionName?: 'createMotionToApproveDoc' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'createMotionToApproveDoc'
      > & {
        abi?: never
        functionName?: 'createMotionToApproveDoc'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof generalKeeperABI,
    'createMotionToApproveDoc'
  >({
    abi: generalKeeperABI,
    functionName: 'createMotionToApproveDoc',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"createMotionToRemoveDirector"`.
 */
export function useGeneralKeeperCreateMotionToRemoveDirector<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'createMotionToRemoveDirector'
        >['abi'],
        'createMotionToRemoveDirector'
      > & { functionName?: 'createMotionToRemoveDirector' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'createMotionToRemoveDirector'
      > & {
        abi?: never
        functionName?: 'createMotionToRemoveDirector'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof generalKeeperABI,
    'createMotionToRemoveDirector'
  >({
    abi: generalKeeperABI,
    functionName: 'createMotionToRemoveDirector',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"createMotionToRemoveOfficer"`.
 */
export function useGeneralKeeperCreateMotionToRemoveOfficer<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'createMotionToRemoveOfficer'
        >['abi'],
        'createMotionToRemoveOfficer'
      > & { functionName?: 'createMotionToRemoveOfficer' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'createMotionToRemoveOfficer'
      > & {
        abi?: never
        functionName?: 'createMotionToRemoveOfficer'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof generalKeeperABI,
    'createMotionToRemoveOfficer'
  >({
    abi: generalKeeperABI,
    functionName: 'createMotionToRemoveOfficer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"createPledge"`.
 */
export function useGeneralKeeperCreatePledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'createPledge'
        >['abi'],
        'createPledge'
      > & { functionName?: 'createPledge' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'createPledge'> & {
        abi?: never
        functionName?: 'createPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'createPledge'>({
    abi: generalKeeperABI,
    functionName: 'createPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"createSHA"`.
 */
export function useGeneralKeeperCreateSha<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof generalKeeperABI, 'createSHA'>['abi'],
        'createSHA'
      > & { functionName?: 'createSHA' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'createSHA'> & {
        abi?: never
        functionName?: 'createSHA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'createSHA'>({
    abi: generalKeeperABI,
    functionName: 'createSHA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"decreaseCapital"`.
 */
export function useGeneralKeeperDecreaseCapital<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'decreaseCapital'
        >['abi'],
        'decreaseCapital'
      > & { functionName?: 'decreaseCapital' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'decreaseCapital'
      > & {
        abi?: never
        functionName?: 'decreaseCapital'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'decreaseCapital'>({
    abi: generalKeeperABI,
    functionName: 'decreaseCapital',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"entrustDelegaterForBoardMeeting"`.
 */
export function useGeneralKeeperEntrustDelegaterForBoardMeeting<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'entrustDelegaterForBoardMeeting'
        >['abi'],
        'entrustDelegaterForBoardMeeting'
      > & { functionName?: 'entrustDelegaterForBoardMeeting' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'entrustDelegaterForBoardMeeting'
      > & {
        abi?: never
        functionName?: 'entrustDelegaterForBoardMeeting'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof generalKeeperABI,
    'entrustDelegaterForBoardMeeting'
  >({
    abi: generalKeeperABI,
    functionName: 'entrustDelegaterForBoardMeeting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"entrustDelegaterForGeneralMeeting"`.
 */
export function useGeneralKeeperEntrustDelegaterForGeneralMeeting<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'entrustDelegaterForGeneralMeeting'
        >['abi'],
        'entrustDelegaterForGeneralMeeting'
      > & { functionName?: 'entrustDelegaterForGeneralMeeting' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'entrustDelegaterForGeneralMeeting'
      > & {
        abi?: never
        functionName?: 'entrustDelegaterForGeneralMeeting'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof generalKeeperABI,
    'entrustDelegaterForGeneralMeeting'
  >({
    abi: generalKeeperABI,
    functionName: 'entrustDelegaterForGeneralMeeting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"execAction"`.
 */
export function useGeneralKeeperExecAction<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'execAction'
        >['abi'],
        'execAction'
      > & { functionName?: 'execAction' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'execAction'> & {
        abi?: never
        functionName?: 'execAction'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'execAction'>({
    abi: generalKeeperABI,
    functionName: 'execAction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"execActionOfGM"`.
 */
export function useGeneralKeeperExecActionOfGm<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'execActionOfGM'
        >['abi'],
        'execActionOfGM'
      > & { functionName?: 'execActionOfGM' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'execActionOfGM'
      > & {
        abi?: never
        functionName?: 'execActionOfGM'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'execActionOfGM'>({
    abi: generalKeeperABI,
    functionName: 'execActionOfGM',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"execAntiDilution"`.
 */
export function useGeneralKeeperExecAntiDilution<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'execAntiDilution'
        >['abi'],
        'execAntiDilution'
      > & { functionName?: 'execAntiDilution' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'execAntiDilution'
      > & {
        abi?: never
        functionName?: 'execAntiDilution'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'execAntiDilution'>({
    abi: generalKeeperABI,
    functionName: 'execAntiDilution',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"execDragAlong"`.
 */
export function useGeneralKeeperExecDragAlong<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'execDragAlong'
        >['abi'],
        'execDragAlong'
      > & { functionName?: 'execDragAlong' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'execDragAlong'
      > & {
        abi?: never
        functionName?: 'execDragAlong'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'execDragAlong'>({
    abi: generalKeeperABI,
    functionName: 'execDragAlong',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"execFirstRefusal"`.
 */
export function useGeneralKeeperExecFirstRefusal<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'execFirstRefusal'
        >['abi'],
        'execFirstRefusal'
      > & { functionName?: 'execFirstRefusal' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'execFirstRefusal'
      > & {
        abi?: never
        functionName?: 'execFirstRefusal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'execFirstRefusal'>({
    abi: generalKeeperABI,
    functionName: 'execFirstRefusal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"execOption"`.
 */
export function useGeneralKeeperExecOption<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'execOption'
        >['abi'],
        'execOption'
      > & { functionName?: 'execOption' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'execOption'> & {
        abi?: never
        functionName?: 'execOption'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'execOption'>({
    abi: generalKeeperABI,
    functionName: 'execOption',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"execPledge"`.
 */
export function useGeneralKeeperExecPledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'execPledge'
        >['abi'],
        'execPledge'
      > & { functionName?: 'execPledge' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'execPledge'> & {
        abi?: never
        functionName?: 'execPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'execPledge'>({
    abi: generalKeeperABI,
    functionName: 'execPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"execSwapOrder"`.
 */
export function useGeneralKeeperExecSwapOrder<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'execSwapOrder'
        >['abi'],
        'execSwapOrder'
      > & { functionName?: 'execSwapOrder' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'execSwapOrder'
      > & {
        abi?: never
        functionName?: 'execSwapOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'execSwapOrder'>({
    abi: generalKeeperABI,
    functionName: 'execSwapOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"execTagAlong"`.
 */
export function useGeneralKeeperExecTagAlong<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'execTagAlong'
        >['abi'],
        'execTagAlong'
      > & { functionName?: 'execTagAlong' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'execTagAlong'> & {
        abi?: never
        functionName?: 'execTagAlong'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'execTagAlong'>({
    abi: generalKeeperABI,
    functionName: 'execTagAlong',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"extendPledge"`.
 */
export function useGeneralKeeperExtendPledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'extendPledge'
        >['abi'],
        'extendPledge'
      > & { functionName?: 'extendPledge' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'extendPledge'> & {
        abi?: never
        functionName?: 'extendPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'extendPledge'>({
    abi: generalKeeperABI,
    functionName: 'extendPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"fetchPoints"`.
 */
export function useGeneralKeeperFetchPoints<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'fetchPoints'
        >['abi'],
        'fetchPoints'
      > & { functionName?: 'fetchPoints' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'fetchPoints'> & {
        abi?: never
        functionName?: 'fetchPoints'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'fetchPoints'>({
    abi: generalKeeperABI,
    functionName: 'fetchPoints',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"grantRole"`.
 */
export function useGeneralKeeperGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof generalKeeperABI, 'grantRole'>['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'grantRole'>({
    abi: generalKeeperABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"init"`.
 */
export function useGeneralKeeperInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof generalKeeperABI, 'init'>['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'init'>({
    abi: generalKeeperABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"issueNewShare"`.
 */
export function useGeneralKeeperIssueNewShare<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'issueNewShare'
        >['abi'],
        'issueNewShare'
      > & { functionName?: 'issueNewShare' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'issueNewShare'
      > & {
        abi?: never
        functionName?: 'issueNewShare'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'issueNewShare'>({
    abi: generalKeeperABI,
    functionName: 'issueNewShare',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"lockContents"`.
 */
export function useGeneralKeeperLockContents<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'lockContents'
        >['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'lockContents'> & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'lockContents'>({
    abi: generalKeeperABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"lockPledge"`.
 */
export function useGeneralKeeperLockPledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'lockPledge'
        >['abi'],
        'lockPledge'
      > & { functionName?: 'lockPledge' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'lockPledge'> & {
        abi?: never
        functionName?: 'lockPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'lockPledge'>({
    abi: generalKeeperABI,
    functionName: 'lockPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"lockSwapOrder"`.
 */
export function useGeneralKeeperLockSwapOrder<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'lockSwapOrder'
        >['abi'],
        'lockSwapOrder'
      > & { functionName?: 'lockSwapOrder' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'lockSwapOrder'
      > & {
        abi?: never
        functionName?: 'lockSwapOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'lockSwapOrder'>({
    abi: generalKeeperABI,
    functionName: 'lockSwapOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"nominateDirector"`.
 */
export function useGeneralKeeperNominateDirector<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'nominateDirector'
        >['abi'],
        'nominateDirector'
      > & { functionName?: 'nominateDirector' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'nominateDirector'
      > & {
        abi?: never
        functionName?: 'nominateDirector'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'nominateDirector'>({
    abi: generalKeeperABI,
    functionName: 'nominateDirector',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"nominateOfficer"`.
 */
export function useGeneralKeeperNominateOfficer<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'nominateOfficer'
        >['abi'],
        'nominateOfficer'
      > & { functionName?: 'nominateOfficer' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'nominateOfficer'
      > & {
        abi?: never
        functionName?: 'nominateOfficer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'nominateOfficer'>({
    abi: generalKeeperABI,
    functionName: 'nominateOfficer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"placeSwapOrder"`.
 */
export function useGeneralKeeperPlaceSwapOrder<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'placeSwapOrder'
        >['abi'],
        'placeSwapOrder'
      > & { functionName?: 'placeSwapOrder' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'placeSwapOrder'
      > & {
        abi?: never
        functionName?: 'placeSwapOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'placeSwapOrder'>({
    abi: generalKeeperABI,
    functionName: 'placeSwapOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"proposeDocOfGM"`.
 */
export function useGeneralKeeperProposeDocOfGm<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'proposeDocOfGM'
        >['abi'],
        'proposeDocOfGM'
      > & { functionName?: 'proposeDocOfGM' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'proposeDocOfGM'
      > & {
        abi?: never
        functionName?: 'proposeDocOfGM'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'proposeDocOfGM'>({
    abi: generalKeeperABI,
    functionName: 'proposeDocOfGM',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"proposeMotionToBoard"`.
 */
export function useGeneralKeeperProposeMotionToBoard<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'proposeMotionToBoard'
        >['abi'],
        'proposeMotionToBoard'
      > & { functionName?: 'proposeMotionToBoard' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'proposeMotionToBoard'
      > & {
        abi?: never
        functionName?: 'proposeMotionToBoard'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof generalKeeperABI,
    'proposeMotionToBoard'
  >({
    abi: generalKeeperABI,
    functionName: 'proposeMotionToBoard',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"proposeMotionToGeneralMeeting"`.
 */
export function useGeneralKeeperProposeMotionToGeneralMeeting<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'proposeMotionToGeneralMeeting'
        >['abi'],
        'proposeMotionToGeneralMeeting'
      > & { functionName?: 'proposeMotionToGeneralMeeting' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'proposeMotionToGeneralMeeting'
      > & {
        abi?: never
        functionName?: 'proposeMotionToGeneralMeeting'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof generalKeeperABI,
    'proposeMotionToGeneralMeeting'
  >({
    abi: generalKeeperABI,
    functionName: 'proposeMotionToGeneralMeeting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"pushToCoffer"`.
 */
export function useGeneralKeeperPushToCoffer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'pushToCoffer'
        >['abi'],
        'pushToCoffer'
      > & { functionName?: 'pushToCoffer' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'pushToCoffer'> & {
        abi?: never
        functionName?: 'pushToCoffer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'pushToCoffer'>({
    abi: generalKeeperABI,
    functionName: 'pushToCoffer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"quitPosition"`.
 */
export function useGeneralKeeperQuitPosition<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'quitPosition'
        >['abi'],
        'quitPosition'
      > & { functionName?: 'quitPosition' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'quitPosition'> & {
        abi?: never
        functionName?: 'quitPosition'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'quitPosition'>({
    abi: generalKeeperABI,
    functionName: 'quitPosition',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"refundDebt"`.
 */
export function useGeneralKeeperRefundDebt<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'refundDebt'
        >['abi'],
        'refundDebt'
      > & { functionName?: 'refundDebt' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'refundDebt'> & {
        abi?: never
        functionName?: 'refundDebt'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'refundDebt'>({
    abi: generalKeeperABI,
    functionName: 'refundDebt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"regBook"`.
 */
export function useGeneralKeeperRegBook<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof generalKeeperABI, 'regBook'>['abi'],
        'regBook'
      > & { functionName?: 'regBook' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'regBook'> & {
        abi?: never
        functionName?: 'regBook'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'regBook'>({
    abi: generalKeeperABI,
    functionName: 'regBook',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"regKeeper"`.
 */
export function useGeneralKeeperRegKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof generalKeeperABI, 'regKeeper'>['abi'],
        'regKeeper'
      > & { functionName?: 'regKeeper' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'regKeeper'> & {
        abi?: never
        functionName?: 'regKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'regKeeper'>({
    abi: generalKeeperABI,
    functionName: 'regKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"releasePledge"`.
 */
export function useGeneralKeeperReleasePledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'releasePledge'
        >['abi'],
        'releasePledge'
      > & { functionName?: 'releasePledge' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'releasePledge'
      > & {
        abi?: never
        functionName?: 'releasePledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'releasePledge'>({
    abi: generalKeeperABI,
    functionName: 'releasePledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"releaseSwapOrder"`.
 */
export function useGeneralKeeperReleaseSwapOrder<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'releaseSwapOrder'
        >['abi'],
        'releaseSwapOrder'
      > & { functionName?: 'releaseSwapOrder' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'releaseSwapOrder'
      > & {
        abi?: never
        functionName?: 'releaseSwapOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'releaseSwapOrder'>({
    abi: generalKeeperABI,
    functionName: 'releaseSwapOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"removeDirector"`.
 */
export function useGeneralKeeperRemoveDirector<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'removeDirector'
        >['abi'],
        'removeDirector'
      > & { functionName?: 'removeDirector' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'removeDirector'
      > & {
        abi?: never
        functionName?: 'removeDirector'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'removeDirector'>({
    abi: generalKeeperABI,
    functionName: 'removeDirector',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"removeOfficer"`.
 */
export function useGeneralKeeperRemoveOfficer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'removeOfficer'
        >['abi'],
        'removeOfficer'
      > & { functionName?: 'removeOfficer' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'removeOfficer'
      > & {
        abi?: never
        functionName?: 'removeOfficer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'removeOfficer'>({
    abi: generalKeeperABI,
    functionName: 'removeOfficer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useGeneralKeeperRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'renounceRole'
        >['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'renounceRole'> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'renounceRole'>({
    abi: generalKeeperABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"requestPaidInCapital"`.
 */
export function useGeneralKeeperRequestPaidInCapital<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'requestPaidInCapital'
        >['abi'],
        'requestPaidInCapital'
      > & { functionName?: 'requestPaidInCapital' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'requestPaidInCapital'
      > & {
        abi?: never
        functionName?: 'requestPaidInCapital'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof generalKeeperABI,
    'requestPaidInCapital'
  >({
    abi: generalKeeperABI,
    functionName: 'requestPaidInCapital',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"requestToBuy"`.
 */
export function useGeneralKeeperRequestToBuy<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'requestToBuy'
        >['abi'],
        'requestToBuy'
      > & { functionName?: 'requestToBuy' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'requestToBuy'> & {
        abi?: never
        functionName?: 'requestToBuy'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'requestToBuy'>({
    abi: generalKeeperABI,
    functionName: 'requestToBuy',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"revokePledge"`.
 */
export function useGeneralKeeperRevokePledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'revokePledge'
        >['abi'],
        'revokePledge'
      > & { functionName?: 'revokePledge' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'revokePledge'> & {
        abi?: never
        functionName?: 'revokePledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'revokePledge'>({
    abi: generalKeeperABI,
    functionName: 'revokePledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useGeneralKeeperRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'revokeRole'
        >['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'revokeRole'>({
    abi: generalKeeperABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"revokeSwapOrder"`.
 */
export function useGeneralKeeperRevokeSwapOrder<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'revokeSwapOrder'
        >['abi'],
        'revokeSwapOrder'
      > & { functionName?: 'revokeSwapOrder' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'revokeSwapOrder'
      > & {
        abi?: never
        functionName?: 'revokeSwapOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'revokeSwapOrder'>({
    abi: generalKeeperABI,
    functionName: 'revokeSwapOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"setCompInfo"`.
 */
export function useGeneralKeeperSetCompInfo<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'setCompInfo'
        >['abi'],
        'setCompInfo'
      > & { functionName?: 'setCompInfo' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'setCompInfo'> & {
        abi?: never
        functionName?: 'setCompInfo'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'setCompInfo'>({
    abi: generalKeeperABI,
    functionName: 'setCompInfo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useGeneralKeeperSetDirectKeeper<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'setDirectKeeper'
        >['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'setDirectKeeper'
      > & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'setDirectKeeper'>({
    abi: generalKeeperABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"setMaxQtyOfMembers"`.
 */
export function useGeneralKeeperSetMaxQtyOfMembers<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'setMaxQtyOfMembers'
        >['abi'],
        'setMaxQtyOfMembers'
      > & { functionName?: 'setMaxQtyOfMembers' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'setMaxQtyOfMembers'
      > & {
        abi?: never
        functionName?: 'setMaxQtyOfMembers'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'setMaxQtyOfMembers'>(
    {
      abi: generalKeeperABI,
      functionName: 'setMaxQtyOfMembers',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"setOwner"`.
 */
export function useGeneralKeeperSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof generalKeeperABI, 'setOwner'>['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'setOwner'>({
    abi: generalKeeperABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"setPayInAmt"`.
 */
export function useGeneralKeeperSetPayInAmt<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'setPayInAmt'
        >['abi'],
        'setPayInAmt'
      > & { functionName?: 'setPayInAmt' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'setPayInAmt'> & {
        abi?: never
        functionName?: 'setPayInAmt'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'setPayInAmt'>({
    abi: generalKeeperABI,
    functionName: 'setPayInAmt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useGeneralKeeperSetRoleAdmin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'setRoleAdmin'
        >['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'setRoleAdmin'> & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'setRoleAdmin'>({
    abi: generalKeeperABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"signIA"`.
 */
export function useGeneralKeeperSignIa<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof generalKeeperABI, 'signIA'>['abi'],
        'signIA'
      > & { functionName?: 'signIA' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'signIA'> & {
        abi?: never
        functionName?: 'signIA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'signIA'>({
    abi: generalKeeperABI,
    functionName: 'signIA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"signSHA"`.
 */
export function useGeneralKeeperSignSha<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof generalKeeperABI, 'signSHA'>['abi'],
        'signSHA'
      > & { functionName?: 'signSHA' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'signSHA'> & {
        abi?: never
        functionName?: 'signSHA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'signSHA'>({
    abi: generalKeeperABI,
    functionName: 'signSHA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function useGeneralKeeperTakeBackKeys<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'takeBackKeys'
        >['abi'],
        'takeBackKeys'
      > & { functionName?: 'takeBackKeys' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'takeBackKeys'> & {
        abi?: never
        functionName?: 'takeBackKeys'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'takeBackKeys'>({
    abi: generalKeeperABI,
    functionName: 'takeBackKeys',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"takeGiftShares"`.
 */
export function useGeneralKeeperTakeGiftShares<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'takeGiftShares'
        >['abi'],
        'takeGiftShares'
      > & { functionName?: 'takeGiftShares' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'takeGiftShares'
      > & {
        abi?: never
        functionName?: 'takeGiftShares'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'takeGiftShares'>({
    abi: generalKeeperABI,
    functionName: 'takeGiftShares',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"takePosition"`.
 */
export function useGeneralKeeperTakePosition<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'takePosition'
        >['abi'],
        'takePosition'
      > & { functionName?: 'takePosition' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'takePosition'> & {
        abi?: never
        functionName?: 'takePosition'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'takePosition'>({
    abi: generalKeeperABI,
    functionName: 'takePosition',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"takeSeat"`.
 */
export function useGeneralKeeperTakeSeat<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof generalKeeperABI, 'takeSeat'>['abi'],
        'takeSeat'
      > & { functionName?: 'takeSeat' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'takeSeat'> & {
        abi?: never
        functionName?: 'takeSeat'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'takeSeat'>({
    abi: generalKeeperABI,
    functionName: 'takeSeat',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"terminateDeal"`.
 */
export function useGeneralKeeperTerminateDeal<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'terminateDeal'
        >['abi'],
        'terminateDeal'
      > & { functionName?: 'terminateDeal' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'terminateDeal'
      > & {
        abi?: never
        functionName?: 'terminateDeal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'terminateDeal'>({
    abi: generalKeeperABI,
    functionName: 'terminateDeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"transferPledge"`.
 */
export function useGeneralKeeperTransferPledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'transferPledge'
        >['abi'],
        'transferPledge'
      > & { functionName?: 'transferPledge' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'transferPledge'
      > & {
        abi?: never
        functionName?: 'transferPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'transferPledge'>({
    abi: generalKeeperABI,
    functionName: 'transferPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"transferTargetShare"`.
 */
export function useGeneralKeeperTransferTargetShare<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'transferTargetShare'
        >['abi'],
        'transferTargetShare'
      > & { functionName?: 'transferTargetShare' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'transferTargetShare'
      > & {
        abi?: never
        functionName?: 'transferTargetShare'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof generalKeeperABI,
    'transferTargetShare'
  >({
    abi: generalKeeperABI,
    functionName: 'transferTargetShare',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"updateOracle"`.
 */
export function useGeneralKeeperUpdateOracle<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'updateOracle'
        >['abi'],
        'updateOracle'
      > & { functionName?: 'updateOracle' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'updateOracle'> & {
        abi?: never
        functionName?: 'updateOracle'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'updateOracle'>({
    abi: generalKeeperABI,
    functionName: 'updateOracle',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"voteCounting"`.
 */
export function useGeneralKeeperVoteCounting<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'voteCounting'
        >['abi'],
        'voteCounting'
      > & { functionName?: 'voteCounting' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'voteCounting'> & {
        abi?: never
        functionName?: 'voteCounting'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'voteCounting'>({
    abi: generalKeeperABI,
    functionName: 'voteCounting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"voteCountingOfGM"`.
 */
export function useGeneralKeeperVoteCountingOfGm<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'voteCountingOfGM'
        >['abi'],
        'voteCountingOfGM'
      > & { functionName?: 'voteCountingOfGM' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'voteCountingOfGM'
      > & {
        abi?: never
        functionName?: 'voteCountingOfGM'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'voteCountingOfGM'>({
    abi: generalKeeperABI,
    functionName: 'voteCountingOfGM',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"withdrawPayInAmt"`.
 */
export function useGeneralKeeperWithdrawPayInAmt<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'withdrawPayInAmt'
        >['abi'],
        'withdrawPayInAmt'
      > & { functionName?: 'withdrawPayInAmt' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'withdrawPayInAmt'
      > & {
        abi?: never
        functionName?: 'withdrawPayInAmt'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'withdrawPayInAmt'>({
    abi: generalKeeperABI,
    functionName: 'withdrawPayInAmt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__.
 */
export function usePrepareGeneralKeeperWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareGeneralKeeperAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'abandonRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"acceptAlongDeal"`.
 */
export function usePrepareGeneralKeeperAcceptAlongDeal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'acceptAlongDeal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'acceptAlongDeal',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof generalKeeperABI,
    'acceptAlongDeal'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"acceptSHA"`.
 */
export function usePrepareGeneralKeeperAcceptSha(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'acceptSHA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'acceptSHA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'acceptSHA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"activateSHA"`.
 */
export function usePrepareGeneralKeeperActivateSha(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'activateSHA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'activateSHA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'activateSHA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"castVote"`.
 */
export function usePrepareGeneralKeeperCastVote(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'castVote'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'castVote',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'castVote'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"castVoteOfGM"`.
 */
export function usePrepareGeneralKeeperCastVoteOfGm(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'castVoteOfGM'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'castVoteOfGM',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'castVoteOfGM'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"circulateIA"`.
 */
export function usePrepareGeneralKeeperCirculateIa(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'circulateIA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'circulateIA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'circulateIA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"circulateSHA"`.
 */
export function usePrepareGeneralKeeperCirculateSha(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'circulateSHA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'circulateSHA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'circulateSHA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"closeDeal"`.
 */
export function usePrepareGeneralKeeperCloseDeal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'closeDeal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'closeDeal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'closeDeal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"computeFirstRefusal"`.
 */
export function usePrepareGeneralKeeperComputeFirstRefusal(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof generalKeeperABI,
      'computeFirstRefusal'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'computeFirstRefusal',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof generalKeeperABI,
    'computeFirstRefusal'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"createAction"`.
 */
export function usePrepareGeneralKeeperCreateAction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'createAction'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'createAction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'createAction'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"createActionOfGM"`.
 */
export function usePrepareGeneralKeeperCreateActionOfGm(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'createActionOfGM'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'createActionOfGM',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof generalKeeperABI,
    'createActionOfGM'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"createCorpSeal"`.
 */
export function usePrepareGeneralKeeperCreateCorpSeal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'createCorpSeal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'createCorpSeal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'createCorpSeal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"createIA"`.
 */
export function usePrepareGeneralKeeperCreateIa(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'createIA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'createIA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'createIA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"createMotionToApproveDoc"`.
 */
export function usePrepareGeneralKeeperCreateMotionToApproveDoc(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof generalKeeperABI,
      'createMotionToApproveDoc'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'createMotionToApproveDoc',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof generalKeeperABI,
    'createMotionToApproveDoc'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"createMotionToRemoveDirector"`.
 */
export function usePrepareGeneralKeeperCreateMotionToRemoveDirector(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof generalKeeperABI,
      'createMotionToRemoveDirector'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'createMotionToRemoveDirector',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof generalKeeperABI,
    'createMotionToRemoveDirector'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"createMotionToRemoveOfficer"`.
 */
export function usePrepareGeneralKeeperCreateMotionToRemoveOfficer(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof generalKeeperABI,
      'createMotionToRemoveOfficer'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'createMotionToRemoveOfficer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof generalKeeperABI,
    'createMotionToRemoveOfficer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"createPledge"`.
 */
export function usePrepareGeneralKeeperCreatePledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'createPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'createPledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'createPledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"createSHA"`.
 */
export function usePrepareGeneralKeeperCreateSha(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'createSHA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'createSHA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'createSHA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"decreaseCapital"`.
 */
export function usePrepareGeneralKeeperDecreaseCapital(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'decreaseCapital'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'decreaseCapital',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof generalKeeperABI,
    'decreaseCapital'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"entrustDelegaterForBoardMeeting"`.
 */
export function usePrepareGeneralKeeperEntrustDelegaterForBoardMeeting(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof generalKeeperABI,
      'entrustDelegaterForBoardMeeting'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'entrustDelegaterForBoardMeeting',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof generalKeeperABI,
    'entrustDelegaterForBoardMeeting'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"entrustDelegaterForGeneralMeeting"`.
 */
export function usePrepareGeneralKeeperEntrustDelegaterForGeneralMeeting(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof generalKeeperABI,
      'entrustDelegaterForGeneralMeeting'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'entrustDelegaterForGeneralMeeting',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof generalKeeperABI,
    'entrustDelegaterForGeneralMeeting'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"execAction"`.
 */
export function usePrepareGeneralKeeperExecAction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'execAction'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'execAction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'execAction'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"execActionOfGM"`.
 */
export function usePrepareGeneralKeeperExecActionOfGm(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'execActionOfGM'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'execActionOfGM',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'execActionOfGM'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"execAntiDilution"`.
 */
export function usePrepareGeneralKeeperExecAntiDilution(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'execAntiDilution'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'execAntiDilution',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof generalKeeperABI,
    'execAntiDilution'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"execDragAlong"`.
 */
export function usePrepareGeneralKeeperExecDragAlong(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'execDragAlong'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'execDragAlong',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'execDragAlong'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"execFirstRefusal"`.
 */
export function usePrepareGeneralKeeperExecFirstRefusal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'execFirstRefusal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'execFirstRefusal',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof generalKeeperABI,
    'execFirstRefusal'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"execOption"`.
 */
export function usePrepareGeneralKeeperExecOption(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'execOption'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'execOption',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'execOption'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"execPledge"`.
 */
export function usePrepareGeneralKeeperExecPledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'execPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'execPledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'execPledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"execSwapOrder"`.
 */
export function usePrepareGeneralKeeperExecSwapOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'execSwapOrder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'execSwapOrder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'execSwapOrder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"execTagAlong"`.
 */
export function usePrepareGeneralKeeperExecTagAlong(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'execTagAlong'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'execTagAlong',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'execTagAlong'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"extendPledge"`.
 */
export function usePrepareGeneralKeeperExtendPledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'extendPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'extendPledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'extendPledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"fetchPoints"`.
 */
export function usePrepareGeneralKeeperFetchPoints(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'fetchPoints'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'fetchPoints',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'fetchPoints'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareGeneralKeeperGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareGeneralKeeperInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"issueNewShare"`.
 */
export function usePrepareGeneralKeeperIssueNewShare(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'issueNewShare'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'issueNewShare',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'issueNewShare'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareGeneralKeeperLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'lockContents'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'lockContents'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"lockPledge"`.
 */
export function usePrepareGeneralKeeperLockPledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'lockPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'lockPledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'lockPledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"lockSwapOrder"`.
 */
export function usePrepareGeneralKeeperLockSwapOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'lockSwapOrder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'lockSwapOrder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'lockSwapOrder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"nominateDirector"`.
 */
export function usePrepareGeneralKeeperNominateDirector(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'nominateDirector'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'nominateDirector',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof generalKeeperABI,
    'nominateDirector'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"nominateOfficer"`.
 */
export function usePrepareGeneralKeeperNominateOfficer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'nominateOfficer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'nominateOfficer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof generalKeeperABI,
    'nominateOfficer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"placeSwapOrder"`.
 */
export function usePrepareGeneralKeeperPlaceSwapOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'placeSwapOrder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'placeSwapOrder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'placeSwapOrder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"proposeDocOfGM"`.
 */
export function usePrepareGeneralKeeperProposeDocOfGm(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'proposeDocOfGM'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'proposeDocOfGM',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'proposeDocOfGM'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"proposeMotionToBoard"`.
 */
export function usePrepareGeneralKeeperProposeMotionToBoard(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof generalKeeperABI,
      'proposeMotionToBoard'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'proposeMotionToBoard',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof generalKeeperABI,
    'proposeMotionToBoard'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"proposeMotionToGeneralMeeting"`.
 */
export function usePrepareGeneralKeeperProposeMotionToGeneralMeeting(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof generalKeeperABI,
      'proposeMotionToGeneralMeeting'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'proposeMotionToGeneralMeeting',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof generalKeeperABI,
    'proposeMotionToGeneralMeeting'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"pushToCoffer"`.
 */
export function usePrepareGeneralKeeperPushToCoffer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'pushToCoffer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'pushToCoffer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'pushToCoffer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"quitPosition"`.
 */
export function usePrepareGeneralKeeperQuitPosition(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'quitPosition'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'quitPosition',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'quitPosition'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"refundDebt"`.
 */
export function usePrepareGeneralKeeperRefundDebt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'refundDebt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'refundDebt',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'refundDebt'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"regBook"`.
 */
export function usePrepareGeneralKeeperRegBook(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'regBook'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'regBook',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'regBook'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"regKeeper"`.
 */
export function usePrepareGeneralKeeperRegKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'regKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'regKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'regKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"releasePledge"`.
 */
export function usePrepareGeneralKeeperReleasePledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'releasePledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'releasePledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'releasePledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"releaseSwapOrder"`.
 */
export function usePrepareGeneralKeeperReleaseSwapOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'releaseSwapOrder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'releaseSwapOrder',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof generalKeeperABI,
    'releaseSwapOrder'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"removeDirector"`.
 */
export function usePrepareGeneralKeeperRemoveDirector(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'removeDirector'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'removeDirector',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'removeDirector'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"removeOfficer"`.
 */
export function usePrepareGeneralKeeperRemoveOfficer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'removeOfficer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'removeOfficer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'removeOfficer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareGeneralKeeperRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"requestPaidInCapital"`.
 */
export function usePrepareGeneralKeeperRequestPaidInCapital(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof generalKeeperABI,
      'requestPaidInCapital'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'requestPaidInCapital',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof generalKeeperABI,
    'requestPaidInCapital'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"requestToBuy"`.
 */
export function usePrepareGeneralKeeperRequestToBuy(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'requestToBuy'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'requestToBuy',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'requestToBuy'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"revokePledge"`.
 */
export function usePrepareGeneralKeeperRevokePledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'revokePledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'revokePledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'revokePledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareGeneralKeeperRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"revokeSwapOrder"`.
 */
export function usePrepareGeneralKeeperRevokeSwapOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'revokeSwapOrder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'revokeSwapOrder',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof generalKeeperABI,
    'revokeSwapOrder'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"setCompInfo"`.
 */
export function usePrepareGeneralKeeperSetCompInfo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'setCompInfo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'setCompInfo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'setCompInfo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareGeneralKeeperSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'setDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof generalKeeperABI,
    'setDirectKeeper'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"setMaxQtyOfMembers"`.
 */
export function usePrepareGeneralKeeperSetMaxQtyOfMembers(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof generalKeeperABI,
      'setMaxQtyOfMembers'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'setMaxQtyOfMembers',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof generalKeeperABI,
    'setMaxQtyOfMembers'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareGeneralKeeperSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"setPayInAmt"`.
 */
export function usePrepareGeneralKeeperSetPayInAmt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'setPayInAmt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'setPayInAmt',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'setPayInAmt'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareGeneralKeeperSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'setRoleAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'setRoleAdmin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"signIA"`.
 */
export function usePrepareGeneralKeeperSignIa(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'signIA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'signIA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'signIA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"signSHA"`.
 */
export function usePrepareGeneralKeeperSignSha(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'signSHA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'signSHA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'signSHA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function usePrepareGeneralKeeperTakeBackKeys(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'takeBackKeys'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'takeBackKeys',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'takeBackKeys'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"takeGiftShares"`.
 */
export function usePrepareGeneralKeeperTakeGiftShares(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'takeGiftShares'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'takeGiftShares',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'takeGiftShares'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"takePosition"`.
 */
export function usePrepareGeneralKeeperTakePosition(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'takePosition'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'takePosition',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'takePosition'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"takeSeat"`.
 */
export function usePrepareGeneralKeeperTakeSeat(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'takeSeat'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'takeSeat',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'takeSeat'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"terminateDeal"`.
 */
export function usePrepareGeneralKeeperTerminateDeal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'terminateDeal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'terminateDeal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'terminateDeal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"transferPledge"`.
 */
export function usePrepareGeneralKeeperTransferPledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'transferPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'transferPledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'transferPledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"transferTargetShare"`.
 */
export function usePrepareGeneralKeeperTransferTargetShare(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof generalKeeperABI,
      'transferTargetShare'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'transferTargetShare',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof generalKeeperABI,
    'transferTargetShare'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"updateOracle"`.
 */
export function usePrepareGeneralKeeperUpdateOracle(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'updateOracle'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'updateOracle',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'updateOracle'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"voteCounting"`.
 */
export function usePrepareGeneralKeeperVoteCounting(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'voteCounting'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'voteCounting',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'voteCounting'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"voteCountingOfGM"`.
 */
export function usePrepareGeneralKeeperVoteCountingOfGm(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'voteCountingOfGM'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'voteCountingOfGM',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof generalKeeperABI,
    'voteCountingOfGM'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"withdrawPayInAmt"`.
 */
export function usePrepareGeneralKeeperWithdrawPayInAmt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'withdrawPayInAmt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'withdrawPayInAmt',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof generalKeeperABI,
    'withdrawPayInAmt'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link generalKeeperABI}__.
 */
export function useGeneralKeeperEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof generalKeeperABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: generalKeeperABI,
    ...config,
  } as UseContractEventConfig<typeof generalKeeperABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link generalKeeperABI}__ and `eventName` set to `"ExecAction"`.
 */
export function useGeneralKeeperExecActionEvent(
  config: Omit<
    UseContractEventConfig<typeof generalKeeperABI, 'ExecAction'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: generalKeeperABI,
    eventName: 'ExecAction',
    ...config,
  } as UseContractEventConfig<typeof generalKeeperABI, 'ExecAction'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link generalKeeperABI}__ and `eventName` set to `"Init"`.
 */
export function useGeneralKeeperInitEvent(
  config: Omit<
    UseContractEventConfig<typeof generalKeeperABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: generalKeeperABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof generalKeeperABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link generalKeeperABI}__ and `eventName` set to `"LockContents"`.
 */
export function useGeneralKeeperLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof generalKeeperABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: generalKeeperABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof generalKeeperABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link generalKeeperABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useGeneralKeeperSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof generalKeeperABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: generalKeeperABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof generalKeeperABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link generalKeeperABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useGeneralKeeperSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof generalKeeperABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: generalKeeperABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof generalKeeperABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link generalKeeperABI}__ and `eventName` set to `"SetRoleAdmin"`.
 */
export function useGeneralKeeperSetRoleAdminEvent(
  config: Omit<
    UseContractEventConfig<typeof generalKeeperABI, 'SetRoleAdmin'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: generalKeeperABI,
    eventName: 'SetRoleAdmin',
    ...config,
  } as UseContractEventConfig<typeof generalKeeperABI, 'SetRoleAdmin'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iRegCenterABI}__.
 */
export function useIRegCenter(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iRegCenterABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegCenterABI}__.
 */
export function useIRegCenterRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iRegCenterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRegCenterABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegCenterABI,
    ...config,
  } as UseContractReadConfig<typeof iRegCenterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"counterOfDocs"`.
 */
export function useIRegCenterCounterOfDocs<
  TSelectData = ReadContractResult<typeof iRegCenterABI, 'counterOfDocs'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRegCenterABI, 'counterOfDocs', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegCenterABI,
    functionName: 'counterOfDocs',
    ...config,
  } as UseContractReadConfig<
    typeof iRegCenterABI,
    'counterOfDocs',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"counterOfTypes"`.
 */
export function useIRegCenterCounterOfTypes<
  TSelectData = ReadContractResult<typeof iRegCenterABI, 'counterOfTypes'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRegCenterABI, 'counterOfTypes', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegCenterABI,
    functionName: 'counterOfTypes',
    ...config,
  } as UseContractReadConfig<
    typeof iRegCenterABI,
    'counterOfTypes',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"counterOfUsers"`.
 */
export function useIRegCenterCounterOfUsers<
  TSelectData = ReadContractResult<typeof iRegCenterABI, 'counterOfUsers'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRegCenterABI, 'counterOfUsers', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegCenterABI,
    functionName: 'counterOfUsers',
    ...config,
  } as UseContractReadConfig<
    typeof iRegCenterABI,
    'counterOfUsers',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"counterOfVersions"`.
 */
export function useIRegCenterCounterOfVersions<
  TSelectData = ReadContractResult<typeof iRegCenterABI, 'counterOfVersions'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegCenterABI,
      'counterOfVersions',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegCenterABI,
    functionName: 'counterOfVersions',
    ...config,
  } as UseContractReadConfig<
    typeof iRegCenterABI,
    'counterOfVersions',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"getBookeeper"`.
 */
export function useIRegCenterGetBookeeper<
  TSelectData = ReadContractResult<typeof iRegCenterABI, 'getBookeeper'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRegCenterABI, 'getBookeeper', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegCenterABI,
    functionName: 'getBookeeper',
    ...config,
  } as UseContractReadConfig<typeof iRegCenterABI, 'getBookeeper', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"getDoc"`.
 */
export function useIRegCenterGetDoc<
  TSelectData = ReadContractResult<typeof iRegCenterABI, 'getDoc'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRegCenterABI, 'getDoc', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegCenterABI,
    functionName: 'getDoc',
    ...config,
  } as UseContractReadConfig<typeof iRegCenterABI, 'getDoc', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"getDocByUserNo"`.
 */
export function useIRegCenterGetDocByUserNo<
  TSelectData = ReadContractResult<typeof iRegCenterABI, 'getDocByUserNo'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRegCenterABI, 'getDocByUserNo', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegCenterABI,
    functionName: 'getDocByUserNo',
    ...config,
  } as UseContractReadConfig<
    typeof iRegCenterABI,
    'getDocByUserNo',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"getDocsList"`.
 */
export function useIRegCenterGetDocsList<
  TSelectData = ReadContractResult<typeof iRegCenterABI, 'getDocsList'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRegCenterABI, 'getDocsList', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegCenterABI,
    functionName: 'getDocsList',
    ...config,
  } as UseContractReadConfig<typeof iRegCenterABI, 'getDocsList', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"getLocker"`.
 */
export function useIRegCenterGetLocker<
  TSelectData = ReadContractResult<typeof iRegCenterABI, 'getLocker'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRegCenterABI, 'getLocker', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegCenterABI,
    functionName: 'getLocker',
    ...config,
  } as UseContractReadConfig<typeof iRegCenterABI, 'getLocker', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"getLocksList"`.
 */
export function useIRegCenterGetLocksList<
  TSelectData = ReadContractResult<typeof iRegCenterABI, 'getLocksList'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRegCenterABI, 'getLocksList', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegCenterABI,
    functionName: 'getLocksList',
    ...config,
  } as UseContractReadConfig<typeof iRegCenterABI, 'getLocksList', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"getOwner"`.
 */
export function useIRegCenterGetOwner<
  TSelectData = ReadContractResult<typeof iRegCenterABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRegCenterABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegCenterABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<typeof iRegCenterABI, 'getOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"getRoyaltyRule"`.
 */
export function useIRegCenterGetRoyaltyRule<
  TSelectData = ReadContractResult<typeof iRegCenterABI, 'getRoyaltyRule'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRegCenterABI, 'getRoyaltyRule', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegCenterABI,
    functionName: 'getRoyaltyRule',
    ...config,
  } as UseContractReadConfig<
    typeof iRegCenterABI,
    'getRoyaltyRule',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"getUser"`.
 */
export function useIRegCenterGetUser<
  TSelectData = ReadContractResult<typeof iRegCenterABI, 'getUser'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRegCenterABI, 'getUser', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegCenterABI,
    functionName: 'getUser',
    ...config,
  } as UseContractReadConfig<typeof iRegCenterABI, 'getUser', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"getVersionsList"`.
 */
export function useIRegCenterGetVersionsList<
  TSelectData = ReadContractResult<typeof iRegCenterABI, 'getVersionsList'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRegCenterABI, 'getVersionsList', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegCenterABI,
    functionName: 'getVersionsList',
    ...config,
  } as UseContractReadConfig<
    typeof iRegCenterABI,
    'getVersionsList',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"isKey"`.
 */
export function useIRegCenterIsKey<
  TSelectData = ReadContractResult<typeof iRegCenterABI, 'isKey'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRegCenterABI, 'isKey', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegCenterABI,
    functionName: 'isKey',
    ...config,
  } as UseContractReadConfig<typeof iRegCenterABI, 'isKey', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"verifyDoc"`.
 */
export function useIRegCenterVerifyDoc<
  TSelectData = ReadContractResult<typeof iRegCenterABI, 'verifyDoc'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRegCenterABI, 'verifyDoc', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegCenterABI,
    functionName: 'verifyDoc',
    ...config,
  } as UseContractReadConfig<typeof iRegCenterABI, 'verifyDoc', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegCenterABI}__.
 */
export function useIRegCenterWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iRegCenterABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iRegCenterABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegCenterABI, TFunctionName>({
    abi: iRegCenterABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"createComp"`.
 */
export function useIRegCenterCreateComp<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iRegCenterABI, 'createComp'>['abi'],
        'createComp'
      > & { functionName?: 'createComp' }
    : UseContractWriteConfig<TMode, typeof iRegCenterABI, 'createComp'> & {
        abi?: never
        functionName?: 'createComp'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegCenterABI, 'createComp'>({
    abi: iRegCenterABI,
    functionName: 'createComp',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"createDoc"`.
 */
export function useIRegCenterCreateDoc<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iRegCenterABI, 'createDoc'>['abi'],
        'createDoc'
      > & { functionName?: 'createDoc' }
    : UseContractWriteConfig<TMode, typeof iRegCenterABI, 'createDoc'> & {
        abi?: never
        functionName?: 'createDoc'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegCenterABI, 'createDoc'>({
    abi: iRegCenterABI,
    functionName: 'createDoc',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"getMyUserNo"`.
 */
export function useIRegCenterGetMyUserNo<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iRegCenterABI, 'getMyUserNo'>['abi'],
        'getMyUserNo'
      > & { functionName?: 'getMyUserNo' }
    : UseContractWriteConfig<TMode, typeof iRegCenterABI, 'getMyUserNo'> & {
        abi?: never
        functionName?: 'getMyUserNo'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegCenterABI, 'getMyUserNo'>({
    abi: iRegCenterABI,
    functionName: 'getMyUserNo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"getPlatformRule"`.
 */
export function useIRegCenterGetPlatformRule<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegCenterABI,
          'getPlatformRule'
        >['abi'],
        'getPlatformRule'
      > & { functionName?: 'getPlatformRule' }
    : UseContractWriteConfig<TMode, typeof iRegCenterABI, 'getPlatformRule'> & {
        abi?: never
        functionName?: 'getPlatformRule'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegCenterABI, 'getPlatformRule'>({
    abi: iRegCenterABI,
    functionName: 'getPlatformRule',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"getUserNo"`.
 */
export function useIRegCenterGetUserNo<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iRegCenterABI, 'getUserNo'>['abi'],
        'getUserNo'
      > & { functionName?: 'getUserNo' }
    : UseContractWriteConfig<TMode, typeof iRegCenterABI, 'getUserNo'> & {
        abi?: never
        functionName?: 'getUserNo'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegCenterABI, 'getUserNo'>({
    abi: iRegCenterABI,
    functionName: 'getUserNo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"handoverCenterKey"`.
 */
export function useIRegCenterHandoverCenterKey<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegCenterABI,
          'handoverCenterKey'
        >['abi'],
        'handoverCenterKey'
      > & { functionName?: 'handoverCenterKey' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegCenterABI,
        'handoverCenterKey'
      > & {
        abi?: never
        functionName?: 'handoverCenterKey'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegCenterABI, 'handoverCenterKey'>({
    abi: iRegCenterABI,
    functionName: 'handoverCenterKey',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"lockConsideration"`.
 */
export function useIRegCenterLockConsideration<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegCenterABI,
          'lockConsideration'
        >['abi'],
        'lockConsideration'
      > & { functionName?: 'lockConsideration' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegCenterABI,
        'lockConsideration'
      > & {
        abi?: never
        functionName?: 'lockConsideration'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegCenterABI, 'lockConsideration'>({
    abi: iRegCenterABI,
    functionName: 'lockConsideration',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"lockPoints"`.
 */
export function useIRegCenterLockPoints<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iRegCenterABI, 'lockPoints'>['abi'],
        'lockPoints'
      > & { functionName?: 'lockPoints' }
    : UseContractWriteConfig<TMode, typeof iRegCenterABI, 'lockPoints'> & {
        abi?: never
        functionName?: 'lockPoints'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegCenterABI, 'lockPoints'>({
    abi: iRegCenterABI,
    functionName: 'lockPoints',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"mintAndLockPoints"`.
 */
export function useIRegCenterMintAndLockPoints<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegCenterABI,
          'mintAndLockPoints'
        >['abi'],
        'mintAndLockPoints'
      > & { functionName?: 'mintAndLockPoints' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegCenterABI,
        'mintAndLockPoints'
      > & {
        abi?: never
        functionName?: 'mintAndLockPoints'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegCenterABI, 'mintAndLockPoints'>({
    abi: iRegCenterABI,
    functionName: 'mintAndLockPoints',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"mintPoints"`.
 */
export function useIRegCenterMintPoints<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iRegCenterABI, 'mintPoints'>['abi'],
        'mintPoints'
      > & { functionName?: 'mintPoints' }
    : UseContractWriteConfig<TMode, typeof iRegCenterABI, 'mintPoints'> & {
        abi?: never
        functionName?: 'mintPoints'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegCenterABI, 'mintPoints'>({
    abi: iRegCenterABI,
    functionName: 'mintPoints',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"pickupPoints"`.
 */
export function useIRegCenterPickupPoints<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iRegCenterABI, 'pickupPoints'>['abi'],
        'pickupPoints'
      > & { functionName?: 'pickupPoints' }
    : UseContractWriteConfig<TMode, typeof iRegCenterABI, 'pickupPoints'> & {
        abi?: never
        functionName?: 'pickupPoints'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegCenterABI, 'pickupPoints'>({
    abi: iRegCenterABI,
    functionName: 'pickupPoints',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"regUser"`.
 */
export function useIRegCenterRegUser<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iRegCenterABI, 'regUser'>['abi'],
        'regUser'
      > & { functionName?: 'regUser' }
    : UseContractWriteConfig<TMode, typeof iRegCenterABI, 'regUser'> & {
        abi?: never
        functionName?: 'regUser'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegCenterABI, 'regUser'>({
    abi: iRegCenterABI,
    functionName: 'regUser',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"setBackupKey"`.
 */
export function useIRegCenterSetBackupKey<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iRegCenterABI, 'setBackupKey'>['abi'],
        'setBackupKey'
      > & { functionName?: 'setBackupKey' }
    : UseContractWriteConfig<TMode, typeof iRegCenterABI, 'setBackupKey'> & {
        abi?: never
        functionName?: 'setBackupKey'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegCenterABI, 'setBackupKey'>({
    abi: iRegCenterABI,
    functionName: 'setBackupKey',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"setPlatformRule"`.
 */
export function useIRegCenterSetPlatformRule<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegCenterABI,
          'setPlatformRule'
        >['abi'],
        'setPlatformRule'
      > & { functionName?: 'setPlatformRule' }
    : UseContractWriteConfig<TMode, typeof iRegCenterABI, 'setPlatformRule'> & {
        abi?: never
        functionName?: 'setPlatformRule'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegCenterABI, 'setPlatformRule'>({
    abi: iRegCenterABI,
    functionName: 'setPlatformRule',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"setRoyaltyRule"`.
 */
export function useIRegCenterSetRoyaltyRule<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegCenterABI,
          'setRoyaltyRule'
        >['abi'],
        'setRoyaltyRule'
      > & { functionName?: 'setRoyaltyRule' }
    : UseContractWriteConfig<TMode, typeof iRegCenterABI, 'setRoyaltyRule'> & {
        abi?: never
        functionName?: 'setRoyaltyRule'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegCenterABI, 'setRoyaltyRule'>({
    abi: iRegCenterABI,
    functionName: 'setRoyaltyRule',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"setTemplate"`.
 */
export function useIRegCenterSetTemplate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iRegCenterABI, 'setTemplate'>['abi'],
        'setTemplate'
      > & { functionName?: 'setTemplate' }
    : UseContractWriteConfig<TMode, typeof iRegCenterABI, 'setTemplate'> & {
        abi?: never
        functionName?: 'setTemplate'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegCenterABI, 'setTemplate'>({
    abi: iRegCenterABI,
    functionName: 'setTemplate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useIRegCenterTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegCenterABI,
          'transferOwnership'
        >['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegCenterABI,
        'transferOwnership'
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegCenterABI, 'transferOwnership'>({
    abi: iRegCenterABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"transferPoints"`.
 */
export function useIRegCenterTransferPoints<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegCenterABI,
          'transferPoints'
        >['abi'],
        'transferPoints'
      > & { functionName?: 'transferPoints' }
    : UseContractWriteConfig<TMode, typeof iRegCenterABI, 'transferPoints'> & {
        abi?: never
        functionName?: 'transferPoints'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegCenterABI, 'transferPoints'>({
    abi: iRegCenterABI,
    functionName: 'transferPoints',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"updateUserInfo"`.
 */
export function useIRegCenterUpdateUserInfo<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegCenterABI,
          'updateUserInfo'
        >['abi'],
        'updateUserInfo'
      > & { functionName?: 'updateUserInfo' }
    : UseContractWriteConfig<TMode, typeof iRegCenterABI, 'updateUserInfo'> & {
        abi?: never
        functionName?: 'updateUserInfo'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegCenterABI, 'updateUserInfo'>({
    abi: iRegCenterABI,
    functionName: 'updateUserInfo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"withdrawPoints"`.
 */
export function useIRegCenterWithdrawPoints<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegCenterABI,
          'withdrawPoints'
        >['abi'],
        'withdrawPoints'
      > & { functionName?: 'withdrawPoints' }
    : UseContractWriteConfig<TMode, typeof iRegCenterABI, 'withdrawPoints'> & {
        abi?: never
        functionName?: 'withdrawPoints'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegCenterABI, 'withdrawPoints'>({
    abi: iRegCenterABI,
    functionName: 'withdrawPoints',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegCenterABI}__.
 */
export function usePrepareIRegCenterWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegCenterABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegCenterABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegCenterABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"createComp"`.
 */
export function usePrepareIRegCenterCreateComp(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegCenterABI, 'createComp'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegCenterABI,
    functionName: 'createComp',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegCenterABI, 'createComp'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"createDoc"`.
 */
export function usePrepareIRegCenterCreateDoc(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegCenterABI, 'createDoc'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegCenterABI,
    functionName: 'createDoc',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegCenterABI, 'createDoc'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"getMyUserNo"`.
 */
export function usePrepareIRegCenterGetMyUserNo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegCenterABI, 'getMyUserNo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegCenterABI,
    functionName: 'getMyUserNo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegCenterABI, 'getMyUserNo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"getPlatformRule"`.
 */
export function usePrepareIRegCenterGetPlatformRule(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegCenterABI, 'getPlatformRule'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegCenterABI,
    functionName: 'getPlatformRule',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegCenterABI, 'getPlatformRule'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"getUserNo"`.
 */
export function usePrepareIRegCenterGetUserNo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegCenterABI, 'getUserNo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegCenterABI,
    functionName: 'getUserNo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegCenterABI, 'getUserNo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"handoverCenterKey"`.
 */
export function usePrepareIRegCenterHandoverCenterKey(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegCenterABI, 'handoverCenterKey'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegCenterABI,
    functionName: 'handoverCenterKey',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegCenterABI, 'handoverCenterKey'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"lockConsideration"`.
 */
export function usePrepareIRegCenterLockConsideration(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegCenterABI, 'lockConsideration'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegCenterABI,
    functionName: 'lockConsideration',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegCenterABI, 'lockConsideration'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"lockPoints"`.
 */
export function usePrepareIRegCenterLockPoints(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegCenterABI, 'lockPoints'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegCenterABI,
    functionName: 'lockPoints',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegCenterABI, 'lockPoints'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"mintAndLockPoints"`.
 */
export function usePrepareIRegCenterMintAndLockPoints(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegCenterABI, 'mintAndLockPoints'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegCenterABI,
    functionName: 'mintAndLockPoints',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegCenterABI, 'mintAndLockPoints'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"mintPoints"`.
 */
export function usePrepareIRegCenterMintPoints(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegCenterABI, 'mintPoints'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegCenterABI,
    functionName: 'mintPoints',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegCenterABI, 'mintPoints'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"pickupPoints"`.
 */
export function usePrepareIRegCenterPickupPoints(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegCenterABI, 'pickupPoints'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegCenterABI,
    functionName: 'pickupPoints',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegCenterABI, 'pickupPoints'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"regUser"`.
 */
export function usePrepareIRegCenterRegUser(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegCenterABI, 'regUser'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegCenterABI,
    functionName: 'regUser',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegCenterABI, 'regUser'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"setBackupKey"`.
 */
export function usePrepareIRegCenterSetBackupKey(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegCenterABI, 'setBackupKey'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegCenterABI,
    functionName: 'setBackupKey',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegCenterABI, 'setBackupKey'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"setPlatformRule"`.
 */
export function usePrepareIRegCenterSetPlatformRule(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegCenterABI, 'setPlatformRule'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegCenterABI,
    functionName: 'setPlatformRule',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegCenterABI, 'setPlatformRule'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"setRoyaltyRule"`.
 */
export function usePrepareIRegCenterSetRoyaltyRule(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegCenterABI, 'setRoyaltyRule'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegCenterABI,
    functionName: 'setRoyaltyRule',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegCenterABI, 'setRoyaltyRule'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"setTemplate"`.
 */
export function usePrepareIRegCenterSetTemplate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegCenterABI, 'setTemplate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegCenterABI,
    functionName: 'setTemplate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegCenterABI, 'setTemplate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareIRegCenterTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegCenterABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegCenterABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegCenterABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"transferPoints"`.
 */
export function usePrepareIRegCenterTransferPoints(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegCenterABI, 'transferPoints'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegCenterABI,
    functionName: 'transferPoints',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegCenterABI, 'transferPoints'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"updateUserInfo"`.
 */
export function usePrepareIRegCenterUpdateUserInfo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegCenterABI, 'updateUserInfo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegCenterABI,
    functionName: 'updateUserInfo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegCenterABI, 'updateUserInfo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"withdrawPoints"`.
 */
export function usePrepareIRegCenterWithdrawPoints(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegCenterABI, 'withdrawPoints'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegCenterABI,
    functionName: 'withdrawPoints',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegCenterABI, 'withdrawPoints'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegCenterABI}__.
 */
export function useIRegCenterEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iRegCenterABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegCenterABI,
    ...config,
  } as UseContractEventConfig<typeof iRegCenterABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegCenterABI}__ and `eventName` set to `"CreateDoc"`.
 */
export function useIRegCenterCreateDocEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegCenterABI, 'CreateDoc'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegCenterABI,
    eventName: 'CreateDoc',
    ...config,
  } as UseContractEventConfig<typeof iRegCenterABI, 'CreateDoc'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegCenterABI}__ and `eventName` set to `"LockConsideration"`.
 */
export function useIRegCenterLockConsiderationEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegCenterABI, 'LockConsideration'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegCenterABI,
    eventName: 'LockConsideration',
    ...config,
  } as UseContractEventConfig<typeof iRegCenterABI, 'LockConsideration'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegCenterABI}__ and `eventName` set to `"LockPoints"`.
 */
export function useIRegCenterLockPointsEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegCenterABI, 'LockPoints'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegCenterABI,
    eventName: 'LockPoints',
    ...config,
  } as UseContractEventConfig<typeof iRegCenterABI, 'LockPoints'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegCenterABI}__ and `eventName` set to `"MintPoints"`.
 */
export function useIRegCenterMintPointsEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegCenterABI, 'MintPoints'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegCenterABI,
    eventName: 'MintPoints',
    ...config,
  } as UseContractEventConfig<typeof iRegCenterABI, 'MintPoints'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegCenterABI}__ and `eventName` set to `"PickupConsideration"`.
 */
export function useIRegCenterPickupConsiderationEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegCenterABI, 'PickupConsideration'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegCenterABI,
    eventName: 'PickupConsideration',
    ...config,
  } as UseContractEventConfig<typeof iRegCenterABI, 'PickupConsideration'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegCenterABI}__ and `eventName` set to `"PickupPoints"`.
 */
export function useIRegCenterPickupPointsEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegCenterABI, 'PickupPoints'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegCenterABI,
    eventName: 'PickupPoints',
    ...config,
  } as UseContractEventConfig<typeof iRegCenterABI, 'PickupPoints'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegCenterABI}__ and `eventName` set to `"SetPlatformRule"`.
 */
export function useIRegCenterSetPlatformRuleEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegCenterABI, 'SetPlatformRule'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegCenterABI,
    eventName: 'SetPlatformRule',
    ...config,
  } as UseContractEventConfig<typeof iRegCenterABI, 'SetPlatformRule'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegCenterABI}__ and `eventName` set to `"SetTemplate"`.
 */
export function useIRegCenterSetTemplateEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegCenterABI, 'SetTemplate'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegCenterABI,
    eventName: 'SetTemplate',
    ...config,
  } as UseContractEventConfig<typeof iRegCenterABI, 'SetTemplate'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegCenterABI}__ and `eventName` set to `"TransferOwnership"`.
 */
export function useIRegCenterTransferOwnershipEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegCenterABI, 'TransferOwnership'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegCenterABI,
    eventName: 'TransferOwnership',
    ...config,
  } as UseContractEventConfig<typeof iRegCenterABI, 'TransferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegCenterABI}__ and `eventName` set to `"TransferPoints"`.
 */
export function useIRegCenterTransferPointsEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegCenterABI, 'TransferPoints'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegCenterABI,
    eventName: 'TransferPoints',
    ...config,
  } as UseContractEventConfig<typeof iRegCenterABI, 'TransferPoints'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegCenterABI}__ and `eventName` set to `"TurnOverCenterKey"`.
 */
export function useIRegCenterTurnOverCenterKeyEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegCenterABI, 'TurnOverCenterKey'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegCenterABI,
    eventName: 'TurnOverCenterKey',
    ...config,
  } as UseContractEventConfig<typeof iRegCenterABI, 'TurnOverCenterKey'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegCenterABI}__ and `eventName` set to `"WithdrawPoints"`.
 */
export function useIRegCenterWithdrawPointsEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegCenterABI, 'WithdrawPoints'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegCenterABI,
    eventName: 'WithdrawPoints',
    ...config,
  } as UseContractEventConfig<typeof iRegCenterABI, 'WithdrawPoints'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iGeneralKeeperABI}__.
 */
export function useIGeneralKeeper(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iGeneralKeeperABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGeneralKeeperABI}__.
 */
export function useIGeneralKeeperRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iGeneralKeeperABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGeneralKeeperABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iGeneralKeeperABI,
    ...config,
  } as UseContractReadConfig<
    typeof iGeneralKeeperABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"getBMM"`.
 */
export function useIGeneralKeeperGetBmm<
  TSelectData = ReadContractResult<typeof iGeneralKeeperABI, 'getBMM'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGeneralKeeperABI, 'getBMM', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGeneralKeeperABI,
    functionName: 'getBMM',
    ...config,
  } as UseContractReadConfig<typeof iGeneralKeeperABI, 'getBMM', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"getBOS"`.
 */
export function useIGeneralKeeperGetBos<
  TSelectData = ReadContractResult<typeof iGeneralKeeperABI, 'getBOS'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGeneralKeeperABI, 'getBOS', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGeneralKeeperABI,
    functionName: 'getBOS',
    ...config,
  } as UseContractReadConfig<typeof iGeneralKeeperABI, 'getBOS', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"getBook"`.
 */
export function useIGeneralKeeperGetBook<
  TSelectData = ReadContractResult<typeof iGeneralKeeperABI, 'getBook'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGeneralKeeperABI, 'getBook', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGeneralKeeperABI,
    functionName: 'getBook',
    ...config,
  } as UseContractReadConfig<typeof iGeneralKeeperABI, 'getBook', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"getCompUser"`.
 */
export function useIGeneralKeeperGetCompUser<
  TSelectData = ReadContractResult<typeof iGeneralKeeperABI, 'getCompUser'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGeneralKeeperABI, 'getCompUser', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGeneralKeeperABI,
    functionName: 'getCompUser',
    ...config,
  } as UseContractReadConfig<
    typeof iGeneralKeeperABI,
    'getCompUser',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"getGMM"`.
 */
export function useIGeneralKeeperGetGmm<
  TSelectData = ReadContractResult<typeof iGeneralKeeperABI, 'getGMM'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGeneralKeeperABI, 'getGMM', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGeneralKeeperABI,
    functionName: 'getGMM',
    ...config,
  } as UseContractReadConfig<typeof iGeneralKeeperABI, 'getGMM', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"getKeeper"`.
 */
export function useIGeneralKeeperGetKeeper<
  TSelectData = ReadContractResult<typeof iGeneralKeeperABI, 'getKeeper'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGeneralKeeperABI, 'getKeeper', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGeneralKeeperABI,
    functionName: 'getKeeper',
    ...config,
  } as UseContractReadConfig<
    typeof iGeneralKeeperABI,
    'getKeeper',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"getROA"`.
 */
export function useIGeneralKeeperGetRoa<
  TSelectData = ReadContractResult<typeof iGeneralKeeperABI, 'getROA'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGeneralKeeperABI, 'getROA', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGeneralKeeperABI,
    functionName: 'getROA',
    ...config,
  } as UseContractReadConfig<typeof iGeneralKeeperABI, 'getROA', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"getROC"`.
 */
export function useIGeneralKeeperGetRoc<
  TSelectData = ReadContractResult<typeof iGeneralKeeperABI, 'getROC'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGeneralKeeperABI, 'getROC', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGeneralKeeperABI,
    functionName: 'getROC',
    ...config,
  } as UseContractReadConfig<typeof iGeneralKeeperABI, 'getROC', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"getROD"`.
 */
export function useIGeneralKeeperGetRod<
  TSelectData = ReadContractResult<typeof iGeneralKeeperABI, 'getROD'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGeneralKeeperABI, 'getROD', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGeneralKeeperABI,
    functionName: 'getROD',
    ...config,
  } as UseContractReadConfig<typeof iGeneralKeeperABI, 'getROD', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"getROM"`.
 */
export function useIGeneralKeeperGetRom<
  TSelectData = ReadContractResult<typeof iGeneralKeeperABI, 'getROM'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGeneralKeeperABI, 'getROM', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGeneralKeeperABI,
    functionName: 'getROM',
    ...config,
  } as UseContractReadConfig<typeof iGeneralKeeperABI, 'getROM', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"getROO"`.
 */
export function useIGeneralKeeperGetRoo<
  TSelectData = ReadContractResult<typeof iGeneralKeeperABI, 'getROO'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGeneralKeeperABI, 'getROO', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGeneralKeeperABI,
    functionName: 'getROO',
    ...config,
  } as UseContractReadConfig<typeof iGeneralKeeperABI, 'getROO', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"getROP"`.
 */
export function useIGeneralKeeperGetRop<
  TSelectData = ReadContractResult<typeof iGeneralKeeperABI, 'getROP'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGeneralKeeperABI, 'getROP', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGeneralKeeperABI,
    functionName: 'getROP',
    ...config,
  } as UseContractReadConfig<typeof iGeneralKeeperABI, 'getROP', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"getROS"`.
 */
export function useIGeneralKeeperGetRos<
  TSelectData = ReadContractResult<typeof iGeneralKeeperABI, 'getROS'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGeneralKeeperABI, 'getROS', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGeneralKeeperABI,
    functionName: 'getROS',
    ...config,
  } as UseContractReadConfig<typeof iGeneralKeeperABI, 'getROS', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"getSHA"`.
 */
export function useIGeneralKeeperGetSha<
  TSelectData = ReadContractResult<typeof iGeneralKeeperABI, 'getSHA'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGeneralKeeperABI, 'getSHA', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGeneralKeeperABI,
    functionName: 'getSHA',
    ...config,
  } as UseContractReadConfig<typeof iGeneralKeeperABI, 'getSHA', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"isKeeper"`.
 */
export function useIGeneralKeeperIsKeeper<
  TSelectData = ReadContractResult<typeof iGeneralKeeperABI, 'isKeeper'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGeneralKeeperABI, 'isKeeper', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGeneralKeeperABI,
    functionName: 'isKeeper',
    ...config,
  } as UseContractReadConfig<typeof iGeneralKeeperABI, 'isKeeper', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__.
 */
export function useIGeneralKeeperWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iGeneralKeeperABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iGeneralKeeperABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, TFunctionName>({
    abi: iGeneralKeeperABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"acceptAlongDeal"`.
 */
export function useIGeneralKeeperAcceptAlongDeal<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'acceptAlongDeal'
        >['abi'],
        'acceptAlongDeal'
      > & { functionName?: 'acceptAlongDeal' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'acceptAlongDeal'
      > & {
        abi?: never
        functionName?: 'acceptAlongDeal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'acceptAlongDeal'>({
    abi: iGeneralKeeperABI,
    functionName: 'acceptAlongDeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"acceptSHA"`.
 */
export function useIGeneralKeeperAcceptSha<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'acceptSHA'
        >['abi'],
        'acceptSHA'
      > & { functionName?: 'acceptSHA' }
    : UseContractWriteConfig<TMode, typeof iGeneralKeeperABI, 'acceptSHA'> & {
        abi?: never
        functionName?: 'acceptSHA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'acceptSHA'>({
    abi: iGeneralKeeperABI,
    functionName: 'acceptSHA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"activateSHA"`.
 */
export function useIGeneralKeeperActivateSha<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'activateSHA'
        >['abi'],
        'activateSHA'
      > & { functionName?: 'activateSHA' }
    : UseContractWriteConfig<TMode, typeof iGeneralKeeperABI, 'activateSHA'> & {
        abi?: never
        functionName?: 'activateSHA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'activateSHA'>({
    abi: iGeneralKeeperABI,
    functionName: 'activateSHA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"castVote"`.
 */
export function useIGeneralKeeperCastVote<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iGeneralKeeperABI, 'castVote'>['abi'],
        'castVote'
      > & { functionName?: 'castVote' }
    : UseContractWriteConfig<TMode, typeof iGeneralKeeperABI, 'castVote'> & {
        abi?: never
        functionName?: 'castVote'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'castVote'>({
    abi: iGeneralKeeperABI,
    functionName: 'castVote',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"castVoteOfGM"`.
 */
export function useIGeneralKeeperCastVoteOfGm<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'castVoteOfGM'
        >['abi'],
        'castVoteOfGM'
      > & { functionName?: 'castVoteOfGM' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'castVoteOfGM'
      > & {
        abi?: never
        functionName?: 'castVoteOfGM'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'castVoteOfGM'>({
    abi: iGeneralKeeperABI,
    functionName: 'castVoteOfGM',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"circulateIA"`.
 */
export function useIGeneralKeeperCirculateIa<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'circulateIA'
        >['abi'],
        'circulateIA'
      > & { functionName?: 'circulateIA' }
    : UseContractWriteConfig<TMode, typeof iGeneralKeeperABI, 'circulateIA'> & {
        abi?: never
        functionName?: 'circulateIA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'circulateIA'>({
    abi: iGeneralKeeperABI,
    functionName: 'circulateIA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"circulateSHA"`.
 */
export function useIGeneralKeeperCirculateSha<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'circulateSHA'
        >['abi'],
        'circulateSHA'
      > & { functionName?: 'circulateSHA' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'circulateSHA'
      > & {
        abi?: never
        functionName?: 'circulateSHA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'circulateSHA'>({
    abi: iGeneralKeeperABI,
    functionName: 'circulateSHA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"closeDeal"`.
 */
export function useIGeneralKeeperCloseDeal<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'closeDeal'
        >['abi'],
        'closeDeal'
      > & { functionName?: 'closeDeal' }
    : UseContractWriteConfig<TMode, typeof iGeneralKeeperABI, 'closeDeal'> & {
        abi?: never
        functionName?: 'closeDeal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'closeDeal'>({
    abi: iGeneralKeeperABI,
    functionName: 'closeDeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"computeFirstRefusal"`.
 */
export function useIGeneralKeeperComputeFirstRefusal<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'computeFirstRefusal'
        >['abi'],
        'computeFirstRefusal'
      > & { functionName?: 'computeFirstRefusal' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'computeFirstRefusal'
      > & {
        abi?: never
        functionName?: 'computeFirstRefusal'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iGeneralKeeperABI,
    'computeFirstRefusal'
  >({
    abi: iGeneralKeeperABI,
    functionName: 'computeFirstRefusal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"createAction"`.
 */
export function useIGeneralKeeperCreateAction<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'createAction'
        >['abi'],
        'createAction'
      > & { functionName?: 'createAction' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'createAction'
      > & {
        abi?: never
        functionName?: 'createAction'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'createAction'>({
    abi: iGeneralKeeperABI,
    functionName: 'createAction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"createActionOfGM"`.
 */
export function useIGeneralKeeperCreateActionOfGm<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'createActionOfGM'
        >['abi'],
        'createActionOfGM'
      > & { functionName?: 'createActionOfGM' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'createActionOfGM'
      > & {
        abi?: never
        functionName?: 'createActionOfGM'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'createActionOfGM'>({
    abi: iGeneralKeeperABI,
    functionName: 'createActionOfGM',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"createCorpSeal"`.
 */
export function useIGeneralKeeperCreateCorpSeal<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'createCorpSeal'
        >['abi'],
        'createCorpSeal'
      > & { functionName?: 'createCorpSeal' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'createCorpSeal'
      > & {
        abi?: never
        functionName?: 'createCorpSeal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'createCorpSeal'>({
    abi: iGeneralKeeperABI,
    functionName: 'createCorpSeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"createIA"`.
 */
export function useIGeneralKeeperCreateIa<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iGeneralKeeperABI, 'createIA'>['abi'],
        'createIA'
      > & { functionName?: 'createIA' }
    : UseContractWriteConfig<TMode, typeof iGeneralKeeperABI, 'createIA'> & {
        abi?: never
        functionName?: 'createIA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'createIA'>({
    abi: iGeneralKeeperABI,
    functionName: 'createIA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"createMotionToApproveDoc"`.
 */
export function useIGeneralKeeperCreateMotionToApproveDoc<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'createMotionToApproveDoc'
        >['abi'],
        'createMotionToApproveDoc'
      > & { functionName?: 'createMotionToApproveDoc' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'createMotionToApproveDoc'
      > & {
        abi?: never
        functionName?: 'createMotionToApproveDoc'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iGeneralKeeperABI,
    'createMotionToApproveDoc'
  >({
    abi: iGeneralKeeperABI,
    functionName: 'createMotionToApproveDoc',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"createMotionToRemoveDirector"`.
 */
export function useIGeneralKeeperCreateMotionToRemoveDirector<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'createMotionToRemoveDirector'
        >['abi'],
        'createMotionToRemoveDirector'
      > & { functionName?: 'createMotionToRemoveDirector' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'createMotionToRemoveDirector'
      > & {
        abi?: never
        functionName?: 'createMotionToRemoveDirector'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iGeneralKeeperABI,
    'createMotionToRemoveDirector'
  >({
    abi: iGeneralKeeperABI,
    functionName: 'createMotionToRemoveDirector',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"createMotionToRemoveOfficer"`.
 */
export function useIGeneralKeeperCreateMotionToRemoveOfficer<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'createMotionToRemoveOfficer'
        >['abi'],
        'createMotionToRemoveOfficer'
      > & { functionName?: 'createMotionToRemoveOfficer' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'createMotionToRemoveOfficer'
      > & {
        abi?: never
        functionName?: 'createMotionToRemoveOfficer'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iGeneralKeeperABI,
    'createMotionToRemoveOfficer'
  >({
    abi: iGeneralKeeperABI,
    functionName: 'createMotionToRemoveOfficer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"createPledge"`.
 */
export function useIGeneralKeeperCreatePledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'createPledge'
        >['abi'],
        'createPledge'
      > & { functionName?: 'createPledge' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'createPledge'
      > & {
        abi?: never
        functionName?: 'createPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'createPledge'>({
    abi: iGeneralKeeperABI,
    functionName: 'createPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"createSHA"`.
 */
export function useIGeneralKeeperCreateSha<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'createSHA'
        >['abi'],
        'createSHA'
      > & { functionName?: 'createSHA' }
    : UseContractWriteConfig<TMode, typeof iGeneralKeeperABI, 'createSHA'> & {
        abi?: never
        functionName?: 'createSHA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'createSHA'>({
    abi: iGeneralKeeperABI,
    functionName: 'createSHA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"decreaseCapital"`.
 */
export function useIGeneralKeeperDecreaseCapital<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'decreaseCapital'
        >['abi'],
        'decreaseCapital'
      > & { functionName?: 'decreaseCapital' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'decreaseCapital'
      > & {
        abi?: never
        functionName?: 'decreaseCapital'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'decreaseCapital'>({
    abi: iGeneralKeeperABI,
    functionName: 'decreaseCapital',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"entrustDelegaterForBoardMeeting"`.
 */
export function useIGeneralKeeperEntrustDelegaterForBoardMeeting<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'entrustDelegaterForBoardMeeting'
        >['abi'],
        'entrustDelegaterForBoardMeeting'
      > & { functionName?: 'entrustDelegaterForBoardMeeting' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'entrustDelegaterForBoardMeeting'
      > & {
        abi?: never
        functionName?: 'entrustDelegaterForBoardMeeting'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iGeneralKeeperABI,
    'entrustDelegaterForBoardMeeting'
  >({
    abi: iGeneralKeeperABI,
    functionName: 'entrustDelegaterForBoardMeeting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"entrustDelegaterForGeneralMeeting"`.
 */
export function useIGeneralKeeperEntrustDelegaterForGeneralMeeting<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'entrustDelegaterForGeneralMeeting'
        >['abi'],
        'entrustDelegaterForGeneralMeeting'
      > & { functionName?: 'entrustDelegaterForGeneralMeeting' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'entrustDelegaterForGeneralMeeting'
      > & {
        abi?: never
        functionName?: 'entrustDelegaterForGeneralMeeting'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iGeneralKeeperABI,
    'entrustDelegaterForGeneralMeeting'
  >({
    abi: iGeneralKeeperABI,
    functionName: 'entrustDelegaterForGeneralMeeting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"execAction"`.
 */
export function useIGeneralKeeperExecAction<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'execAction'
        >['abi'],
        'execAction'
      > & { functionName?: 'execAction' }
    : UseContractWriteConfig<TMode, typeof iGeneralKeeperABI, 'execAction'> & {
        abi?: never
        functionName?: 'execAction'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'execAction'>({
    abi: iGeneralKeeperABI,
    functionName: 'execAction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"execActionOfGM"`.
 */
export function useIGeneralKeeperExecActionOfGm<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'execActionOfGM'
        >['abi'],
        'execActionOfGM'
      > & { functionName?: 'execActionOfGM' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'execActionOfGM'
      > & {
        abi?: never
        functionName?: 'execActionOfGM'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'execActionOfGM'>({
    abi: iGeneralKeeperABI,
    functionName: 'execActionOfGM',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"execAntiDilution"`.
 */
export function useIGeneralKeeperExecAntiDilution<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'execAntiDilution'
        >['abi'],
        'execAntiDilution'
      > & { functionName?: 'execAntiDilution' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'execAntiDilution'
      > & {
        abi?: never
        functionName?: 'execAntiDilution'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'execAntiDilution'>({
    abi: iGeneralKeeperABI,
    functionName: 'execAntiDilution',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"execDragAlong"`.
 */
export function useIGeneralKeeperExecDragAlong<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'execDragAlong'
        >['abi'],
        'execDragAlong'
      > & { functionName?: 'execDragAlong' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'execDragAlong'
      > & {
        abi?: never
        functionName?: 'execDragAlong'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'execDragAlong'>({
    abi: iGeneralKeeperABI,
    functionName: 'execDragAlong',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"execFirstRefusal"`.
 */
export function useIGeneralKeeperExecFirstRefusal<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'execFirstRefusal'
        >['abi'],
        'execFirstRefusal'
      > & { functionName?: 'execFirstRefusal' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'execFirstRefusal'
      > & {
        abi?: never
        functionName?: 'execFirstRefusal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'execFirstRefusal'>({
    abi: iGeneralKeeperABI,
    functionName: 'execFirstRefusal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"execOption"`.
 */
export function useIGeneralKeeperExecOption<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'execOption'
        >['abi'],
        'execOption'
      > & { functionName?: 'execOption' }
    : UseContractWriteConfig<TMode, typeof iGeneralKeeperABI, 'execOption'> & {
        abi?: never
        functionName?: 'execOption'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'execOption'>({
    abi: iGeneralKeeperABI,
    functionName: 'execOption',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"execPledge"`.
 */
export function useIGeneralKeeperExecPledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'execPledge'
        >['abi'],
        'execPledge'
      > & { functionName?: 'execPledge' }
    : UseContractWriteConfig<TMode, typeof iGeneralKeeperABI, 'execPledge'> & {
        abi?: never
        functionName?: 'execPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'execPledge'>({
    abi: iGeneralKeeperABI,
    functionName: 'execPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"execSwapOrder"`.
 */
export function useIGeneralKeeperExecSwapOrder<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'execSwapOrder'
        >['abi'],
        'execSwapOrder'
      > & { functionName?: 'execSwapOrder' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'execSwapOrder'
      > & {
        abi?: never
        functionName?: 'execSwapOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'execSwapOrder'>({
    abi: iGeneralKeeperABI,
    functionName: 'execSwapOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"execTagAlong"`.
 */
export function useIGeneralKeeperExecTagAlong<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'execTagAlong'
        >['abi'],
        'execTagAlong'
      > & { functionName?: 'execTagAlong' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'execTagAlong'
      > & {
        abi?: never
        functionName?: 'execTagAlong'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'execTagAlong'>({
    abi: iGeneralKeeperABI,
    functionName: 'execTagAlong',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"extendPledge"`.
 */
export function useIGeneralKeeperExtendPledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'extendPledge'
        >['abi'],
        'extendPledge'
      > & { functionName?: 'extendPledge' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'extendPledge'
      > & {
        abi?: never
        functionName?: 'extendPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'extendPledge'>({
    abi: iGeneralKeeperABI,
    functionName: 'extendPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"fetchPoints"`.
 */
export function useIGeneralKeeperFetchPoints<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'fetchPoints'
        >['abi'],
        'fetchPoints'
      > & { functionName?: 'fetchPoints' }
    : UseContractWriteConfig<TMode, typeof iGeneralKeeperABI, 'fetchPoints'> & {
        abi?: never
        functionName?: 'fetchPoints'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'fetchPoints'>({
    abi: iGeneralKeeperABI,
    functionName: 'fetchPoints',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"issueNewShare"`.
 */
export function useIGeneralKeeperIssueNewShare<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'issueNewShare'
        >['abi'],
        'issueNewShare'
      > & { functionName?: 'issueNewShare' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'issueNewShare'
      > & {
        abi?: never
        functionName?: 'issueNewShare'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'issueNewShare'>({
    abi: iGeneralKeeperABI,
    functionName: 'issueNewShare',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"lockPledge"`.
 */
export function useIGeneralKeeperLockPledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'lockPledge'
        >['abi'],
        'lockPledge'
      > & { functionName?: 'lockPledge' }
    : UseContractWriteConfig<TMode, typeof iGeneralKeeperABI, 'lockPledge'> & {
        abi?: never
        functionName?: 'lockPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'lockPledge'>({
    abi: iGeneralKeeperABI,
    functionName: 'lockPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"lockSwapOrder"`.
 */
export function useIGeneralKeeperLockSwapOrder<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'lockSwapOrder'
        >['abi'],
        'lockSwapOrder'
      > & { functionName?: 'lockSwapOrder' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'lockSwapOrder'
      > & {
        abi?: never
        functionName?: 'lockSwapOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'lockSwapOrder'>({
    abi: iGeneralKeeperABI,
    functionName: 'lockSwapOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"nominateDirector"`.
 */
export function useIGeneralKeeperNominateDirector<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'nominateDirector'
        >['abi'],
        'nominateDirector'
      > & { functionName?: 'nominateDirector' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'nominateDirector'
      > & {
        abi?: never
        functionName?: 'nominateDirector'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'nominateDirector'>({
    abi: iGeneralKeeperABI,
    functionName: 'nominateDirector',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"nominateOfficer"`.
 */
export function useIGeneralKeeperNominateOfficer<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'nominateOfficer'
        >['abi'],
        'nominateOfficer'
      > & { functionName?: 'nominateOfficer' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'nominateOfficer'
      > & {
        abi?: never
        functionName?: 'nominateOfficer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'nominateOfficer'>({
    abi: iGeneralKeeperABI,
    functionName: 'nominateOfficer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"placeSwapOrder"`.
 */
export function useIGeneralKeeperPlaceSwapOrder<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'placeSwapOrder'
        >['abi'],
        'placeSwapOrder'
      > & { functionName?: 'placeSwapOrder' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'placeSwapOrder'
      > & {
        abi?: never
        functionName?: 'placeSwapOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'placeSwapOrder'>({
    abi: iGeneralKeeperABI,
    functionName: 'placeSwapOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"proposeDocOfGM"`.
 */
export function useIGeneralKeeperProposeDocOfGm<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'proposeDocOfGM'
        >['abi'],
        'proposeDocOfGM'
      > & { functionName?: 'proposeDocOfGM' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'proposeDocOfGM'
      > & {
        abi?: never
        functionName?: 'proposeDocOfGM'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'proposeDocOfGM'>({
    abi: iGeneralKeeperABI,
    functionName: 'proposeDocOfGM',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"proposeMotionToBoard"`.
 */
export function useIGeneralKeeperProposeMotionToBoard<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'proposeMotionToBoard'
        >['abi'],
        'proposeMotionToBoard'
      > & { functionName?: 'proposeMotionToBoard' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'proposeMotionToBoard'
      > & {
        abi?: never
        functionName?: 'proposeMotionToBoard'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iGeneralKeeperABI,
    'proposeMotionToBoard'
  >({
    abi: iGeneralKeeperABI,
    functionName: 'proposeMotionToBoard',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"proposeMotionToGeneralMeeting"`.
 */
export function useIGeneralKeeperProposeMotionToGeneralMeeting<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'proposeMotionToGeneralMeeting'
        >['abi'],
        'proposeMotionToGeneralMeeting'
      > & { functionName?: 'proposeMotionToGeneralMeeting' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'proposeMotionToGeneralMeeting'
      > & {
        abi?: never
        functionName?: 'proposeMotionToGeneralMeeting'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iGeneralKeeperABI,
    'proposeMotionToGeneralMeeting'
  >({
    abi: iGeneralKeeperABI,
    functionName: 'proposeMotionToGeneralMeeting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"pushToCoffer"`.
 */
export function useIGeneralKeeperPushToCoffer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'pushToCoffer'
        >['abi'],
        'pushToCoffer'
      > & { functionName?: 'pushToCoffer' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'pushToCoffer'
      > & {
        abi?: never
        functionName?: 'pushToCoffer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'pushToCoffer'>({
    abi: iGeneralKeeperABI,
    functionName: 'pushToCoffer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"quitPosition"`.
 */
export function useIGeneralKeeperQuitPosition<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'quitPosition'
        >['abi'],
        'quitPosition'
      > & { functionName?: 'quitPosition' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'quitPosition'
      > & {
        abi?: never
        functionName?: 'quitPosition'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'quitPosition'>({
    abi: iGeneralKeeperABI,
    functionName: 'quitPosition',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"refundDebt"`.
 */
export function useIGeneralKeeperRefundDebt<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'refundDebt'
        >['abi'],
        'refundDebt'
      > & { functionName?: 'refundDebt' }
    : UseContractWriteConfig<TMode, typeof iGeneralKeeperABI, 'refundDebt'> & {
        abi?: never
        functionName?: 'refundDebt'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'refundDebt'>({
    abi: iGeneralKeeperABI,
    functionName: 'refundDebt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"regBook"`.
 */
export function useIGeneralKeeperRegBook<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iGeneralKeeperABI, 'regBook'>['abi'],
        'regBook'
      > & { functionName?: 'regBook' }
    : UseContractWriteConfig<TMode, typeof iGeneralKeeperABI, 'regBook'> & {
        abi?: never
        functionName?: 'regBook'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'regBook'>({
    abi: iGeneralKeeperABI,
    functionName: 'regBook',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"regKeeper"`.
 */
export function useIGeneralKeeperRegKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'regKeeper'
        >['abi'],
        'regKeeper'
      > & { functionName?: 'regKeeper' }
    : UseContractWriteConfig<TMode, typeof iGeneralKeeperABI, 'regKeeper'> & {
        abi?: never
        functionName?: 'regKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'regKeeper'>({
    abi: iGeneralKeeperABI,
    functionName: 'regKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"releasePledge"`.
 */
export function useIGeneralKeeperReleasePledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'releasePledge'
        >['abi'],
        'releasePledge'
      > & { functionName?: 'releasePledge' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'releasePledge'
      > & {
        abi?: never
        functionName?: 'releasePledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'releasePledge'>({
    abi: iGeneralKeeperABI,
    functionName: 'releasePledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"releaseSwapOrder"`.
 */
export function useIGeneralKeeperReleaseSwapOrder<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'releaseSwapOrder'
        >['abi'],
        'releaseSwapOrder'
      > & { functionName?: 'releaseSwapOrder' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'releaseSwapOrder'
      > & {
        abi?: never
        functionName?: 'releaseSwapOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'releaseSwapOrder'>({
    abi: iGeneralKeeperABI,
    functionName: 'releaseSwapOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"removeDirector"`.
 */
export function useIGeneralKeeperRemoveDirector<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'removeDirector'
        >['abi'],
        'removeDirector'
      > & { functionName?: 'removeDirector' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'removeDirector'
      > & {
        abi?: never
        functionName?: 'removeDirector'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'removeDirector'>({
    abi: iGeneralKeeperABI,
    functionName: 'removeDirector',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"removeOfficer"`.
 */
export function useIGeneralKeeperRemoveOfficer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'removeOfficer'
        >['abi'],
        'removeOfficer'
      > & { functionName?: 'removeOfficer' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'removeOfficer'
      > & {
        abi?: never
        functionName?: 'removeOfficer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'removeOfficer'>({
    abi: iGeneralKeeperABI,
    functionName: 'removeOfficer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"requestPaidInCapital"`.
 */
export function useIGeneralKeeperRequestPaidInCapital<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'requestPaidInCapital'
        >['abi'],
        'requestPaidInCapital'
      > & { functionName?: 'requestPaidInCapital' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'requestPaidInCapital'
      > & {
        abi?: never
        functionName?: 'requestPaidInCapital'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iGeneralKeeperABI,
    'requestPaidInCapital'
  >({
    abi: iGeneralKeeperABI,
    functionName: 'requestPaidInCapital',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"requestToBuy"`.
 */
export function useIGeneralKeeperRequestToBuy<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'requestToBuy'
        >['abi'],
        'requestToBuy'
      > & { functionName?: 'requestToBuy' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'requestToBuy'
      > & {
        abi?: never
        functionName?: 'requestToBuy'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'requestToBuy'>({
    abi: iGeneralKeeperABI,
    functionName: 'requestToBuy',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"revokePledge"`.
 */
export function useIGeneralKeeperRevokePledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'revokePledge'
        >['abi'],
        'revokePledge'
      > & { functionName?: 'revokePledge' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'revokePledge'
      > & {
        abi?: never
        functionName?: 'revokePledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'revokePledge'>({
    abi: iGeneralKeeperABI,
    functionName: 'revokePledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"revokeSwapOrder"`.
 */
export function useIGeneralKeeperRevokeSwapOrder<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'revokeSwapOrder'
        >['abi'],
        'revokeSwapOrder'
      > & { functionName?: 'revokeSwapOrder' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'revokeSwapOrder'
      > & {
        abi?: never
        functionName?: 'revokeSwapOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'revokeSwapOrder'>({
    abi: iGeneralKeeperABI,
    functionName: 'revokeSwapOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"setCompInfo"`.
 */
export function useIGeneralKeeperSetCompInfo<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'setCompInfo'
        >['abi'],
        'setCompInfo'
      > & { functionName?: 'setCompInfo' }
    : UseContractWriteConfig<TMode, typeof iGeneralKeeperABI, 'setCompInfo'> & {
        abi?: never
        functionName?: 'setCompInfo'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'setCompInfo'>({
    abi: iGeneralKeeperABI,
    functionName: 'setCompInfo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"setMaxQtyOfMembers"`.
 */
export function useIGeneralKeeperSetMaxQtyOfMembers<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'setMaxQtyOfMembers'
        >['abi'],
        'setMaxQtyOfMembers'
      > & { functionName?: 'setMaxQtyOfMembers' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'setMaxQtyOfMembers'
      > & {
        abi?: never
        functionName?: 'setMaxQtyOfMembers'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iGeneralKeeperABI,
    'setMaxQtyOfMembers'
  >({
    abi: iGeneralKeeperABI,
    functionName: 'setMaxQtyOfMembers',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"setPayInAmt"`.
 */
export function useIGeneralKeeperSetPayInAmt<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'setPayInAmt'
        >['abi'],
        'setPayInAmt'
      > & { functionName?: 'setPayInAmt' }
    : UseContractWriteConfig<TMode, typeof iGeneralKeeperABI, 'setPayInAmt'> & {
        abi?: never
        functionName?: 'setPayInAmt'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'setPayInAmt'>({
    abi: iGeneralKeeperABI,
    functionName: 'setPayInAmt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"signIA"`.
 */
export function useIGeneralKeeperSignIa<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iGeneralKeeperABI, 'signIA'>['abi'],
        'signIA'
      > & { functionName?: 'signIA' }
    : UseContractWriteConfig<TMode, typeof iGeneralKeeperABI, 'signIA'> & {
        abi?: never
        functionName?: 'signIA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'signIA'>({
    abi: iGeneralKeeperABI,
    functionName: 'signIA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"signSHA"`.
 */
export function useIGeneralKeeperSignSha<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iGeneralKeeperABI, 'signSHA'>['abi'],
        'signSHA'
      > & { functionName?: 'signSHA' }
    : UseContractWriteConfig<TMode, typeof iGeneralKeeperABI, 'signSHA'> & {
        abi?: never
        functionName?: 'signSHA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'signSHA'>({
    abi: iGeneralKeeperABI,
    functionName: 'signSHA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"takeGiftShares"`.
 */
export function useIGeneralKeeperTakeGiftShares<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'takeGiftShares'
        >['abi'],
        'takeGiftShares'
      > & { functionName?: 'takeGiftShares' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'takeGiftShares'
      > & {
        abi?: never
        functionName?: 'takeGiftShares'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'takeGiftShares'>({
    abi: iGeneralKeeperABI,
    functionName: 'takeGiftShares',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"takePosition"`.
 */
export function useIGeneralKeeperTakePosition<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'takePosition'
        >['abi'],
        'takePosition'
      > & { functionName?: 'takePosition' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'takePosition'
      > & {
        abi?: never
        functionName?: 'takePosition'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'takePosition'>({
    abi: iGeneralKeeperABI,
    functionName: 'takePosition',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"takeSeat"`.
 */
export function useIGeneralKeeperTakeSeat<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iGeneralKeeperABI, 'takeSeat'>['abi'],
        'takeSeat'
      > & { functionName?: 'takeSeat' }
    : UseContractWriteConfig<TMode, typeof iGeneralKeeperABI, 'takeSeat'> & {
        abi?: never
        functionName?: 'takeSeat'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'takeSeat'>({
    abi: iGeneralKeeperABI,
    functionName: 'takeSeat',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"terminateDeal"`.
 */
export function useIGeneralKeeperTerminateDeal<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'terminateDeal'
        >['abi'],
        'terminateDeal'
      > & { functionName?: 'terminateDeal' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'terminateDeal'
      > & {
        abi?: never
        functionName?: 'terminateDeal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'terminateDeal'>({
    abi: iGeneralKeeperABI,
    functionName: 'terminateDeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"transferPledge"`.
 */
export function useIGeneralKeeperTransferPledge<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'transferPledge'
        >['abi'],
        'transferPledge'
      > & { functionName?: 'transferPledge' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'transferPledge'
      > & {
        abi?: never
        functionName?: 'transferPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'transferPledge'>({
    abi: iGeneralKeeperABI,
    functionName: 'transferPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"transferTargetShare"`.
 */
export function useIGeneralKeeperTransferTargetShare<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'transferTargetShare'
        >['abi'],
        'transferTargetShare'
      > & { functionName?: 'transferTargetShare' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'transferTargetShare'
      > & {
        abi?: never
        functionName?: 'transferTargetShare'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iGeneralKeeperABI,
    'transferTargetShare'
  >({
    abi: iGeneralKeeperABI,
    functionName: 'transferTargetShare',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"updateOracle"`.
 */
export function useIGeneralKeeperUpdateOracle<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'updateOracle'
        >['abi'],
        'updateOracle'
      > & { functionName?: 'updateOracle' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'updateOracle'
      > & {
        abi?: never
        functionName?: 'updateOracle'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'updateOracle'>({
    abi: iGeneralKeeperABI,
    functionName: 'updateOracle',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"voteCounting"`.
 */
export function useIGeneralKeeperVoteCounting<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'voteCounting'
        >['abi'],
        'voteCounting'
      > & { functionName?: 'voteCounting' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'voteCounting'
      > & {
        abi?: never
        functionName?: 'voteCounting'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'voteCounting'>({
    abi: iGeneralKeeperABI,
    functionName: 'voteCounting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"voteCountingOfGM"`.
 */
export function useIGeneralKeeperVoteCountingOfGm<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'voteCountingOfGM'
        >['abi'],
        'voteCountingOfGM'
      > & { functionName?: 'voteCountingOfGM' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'voteCountingOfGM'
      > & {
        abi?: never
        functionName?: 'voteCountingOfGM'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'voteCountingOfGM'>({
    abi: iGeneralKeeperABI,
    functionName: 'voteCountingOfGM',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"withdrawPayInAmt"`.
 */
export function useIGeneralKeeperWithdrawPayInAmt<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'withdrawPayInAmt'
        >['abi'],
        'withdrawPayInAmt'
      > & { functionName?: 'withdrawPayInAmt' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'withdrawPayInAmt'
      > & {
        abi?: never
        functionName?: 'withdrawPayInAmt'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'withdrawPayInAmt'>({
    abi: iGeneralKeeperABI,
    functionName: 'withdrawPayInAmt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__.
 */
export function usePrepareIGeneralKeeperWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"acceptAlongDeal"`.
 */
export function usePrepareIGeneralKeeperAcceptAlongDeal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'acceptAlongDeal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'acceptAlongDeal',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'acceptAlongDeal'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"acceptSHA"`.
 */
export function usePrepareIGeneralKeeperAcceptSha(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'acceptSHA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'acceptSHA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'acceptSHA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"activateSHA"`.
 */
export function usePrepareIGeneralKeeperActivateSha(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'activateSHA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'activateSHA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'activateSHA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"castVote"`.
 */
export function usePrepareIGeneralKeeperCastVote(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'castVote'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'castVote',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'castVote'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"castVoteOfGM"`.
 */
export function usePrepareIGeneralKeeperCastVoteOfGm(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'castVoteOfGM'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'castVoteOfGM',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'castVoteOfGM'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"circulateIA"`.
 */
export function usePrepareIGeneralKeeperCirculateIa(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'circulateIA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'circulateIA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'circulateIA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"circulateSHA"`.
 */
export function usePrepareIGeneralKeeperCirculateSha(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'circulateSHA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'circulateSHA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'circulateSHA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"closeDeal"`.
 */
export function usePrepareIGeneralKeeperCloseDeal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'closeDeal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'closeDeal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'closeDeal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"computeFirstRefusal"`.
 */
export function usePrepareIGeneralKeeperComputeFirstRefusal(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iGeneralKeeperABI,
      'computeFirstRefusal'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'computeFirstRefusal',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'computeFirstRefusal'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"createAction"`.
 */
export function usePrepareIGeneralKeeperCreateAction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'createAction'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'createAction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'createAction'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"createActionOfGM"`.
 */
export function usePrepareIGeneralKeeperCreateActionOfGm(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'createActionOfGM'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'createActionOfGM',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'createActionOfGM'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"createCorpSeal"`.
 */
export function usePrepareIGeneralKeeperCreateCorpSeal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'createCorpSeal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'createCorpSeal',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'createCorpSeal'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"createIA"`.
 */
export function usePrepareIGeneralKeeperCreateIa(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'createIA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'createIA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'createIA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"createMotionToApproveDoc"`.
 */
export function usePrepareIGeneralKeeperCreateMotionToApproveDoc(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iGeneralKeeperABI,
      'createMotionToApproveDoc'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'createMotionToApproveDoc',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'createMotionToApproveDoc'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"createMotionToRemoveDirector"`.
 */
export function usePrepareIGeneralKeeperCreateMotionToRemoveDirector(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iGeneralKeeperABI,
      'createMotionToRemoveDirector'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'createMotionToRemoveDirector',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'createMotionToRemoveDirector'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"createMotionToRemoveOfficer"`.
 */
export function usePrepareIGeneralKeeperCreateMotionToRemoveOfficer(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iGeneralKeeperABI,
      'createMotionToRemoveOfficer'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'createMotionToRemoveOfficer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'createMotionToRemoveOfficer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"createPledge"`.
 */
export function usePrepareIGeneralKeeperCreatePledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'createPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'createPledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'createPledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"createSHA"`.
 */
export function usePrepareIGeneralKeeperCreateSha(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'createSHA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'createSHA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'createSHA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"decreaseCapital"`.
 */
export function usePrepareIGeneralKeeperDecreaseCapital(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'decreaseCapital'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'decreaseCapital',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'decreaseCapital'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"entrustDelegaterForBoardMeeting"`.
 */
export function usePrepareIGeneralKeeperEntrustDelegaterForBoardMeeting(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iGeneralKeeperABI,
      'entrustDelegaterForBoardMeeting'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'entrustDelegaterForBoardMeeting',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'entrustDelegaterForBoardMeeting'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"entrustDelegaterForGeneralMeeting"`.
 */
export function usePrepareIGeneralKeeperEntrustDelegaterForGeneralMeeting(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iGeneralKeeperABI,
      'entrustDelegaterForGeneralMeeting'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'entrustDelegaterForGeneralMeeting',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'entrustDelegaterForGeneralMeeting'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"execAction"`.
 */
export function usePrepareIGeneralKeeperExecAction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'execAction'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'execAction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'execAction'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"execActionOfGM"`.
 */
export function usePrepareIGeneralKeeperExecActionOfGm(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'execActionOfGM'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'execActionOfGM',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'execActionOfGM'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"execAntiDilution"`.
 */
export function usePrepareIGeneralKeeperExecAntiDilution(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'execAntiDilution'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'execAntiDilution',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'execAntiDilution'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"execDragAlong"`.
 */
export function usePrepareIGeneralKeeperExecDragAlong(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'execDragAlong'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'execDragAlong',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'execDragAlong'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"execFirstRefusal"`.
 */
export function usePrepareIGeneralKeeperExecFirstRefusal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'execFirstRefusal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'execFirstRefusal',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'execFirstRefusal'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"execOption"`.
 */
export function usePrepareIGeneralKeeperExecOption(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'execOption'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'execOption',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'execOption'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"execPledge"`.
 */
export function usePrepareIGeneralKeeperExecPledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'execPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'execPledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'execPledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"execSwapOrder"`.
 */
export function usePrepareIGeneralKeeperExecSwapOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'execSwapOrder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'execSwapOrder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'execSwapOrder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"execTagAlong"`.
 */
export function usePrepareIGeneralKeeperExecTagAlong(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'execTagAlong'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'execTagAlong',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'execTagAlong'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"extendPledge"`.
 */
export function usePrepareIGeneralKeeperExtendPledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'extendPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'extendPledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'extendPledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"fetchPoints"`.
 */
export function usePrepareIGeneralKeeperFetchPoints(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'fetchPoints'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'fetchPoints',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'fetchPoints'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"issueNewShare"`.
 */
export function usePrepareIGeneralKeeperIssueNewShare(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'issueNewShare'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'issueNewShare',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'issueNewShare'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"lockPledge"`.
 */
export function usePrepareIGeneralKeeperLockPledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'lockPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'lockPledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'lockPledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"lockSwapOrder"`.
 */
export function usePrepareIGeneralKeeperLockSwapOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'lockSwapOrder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'lockSwapOrder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'lockSwapOrder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"nominateDirector"`.
 */
export function usePrepareIGeneralKeeperNominateDirector(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'nominateDirector'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'nominateDirector',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'nominateDirector'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"nominateOfficer"`.
 */
export function usePrepareIGeneralKeeperNominateOfficer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'nominateOfficer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'nominateOfficer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'nominateOfficer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"placeSwapOrder"`.
 */
export function usePrepareIGeneralKeeperPlaceSwapOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'placeSwapOrder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'placeSwapOrder',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'placeSwapOrder'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"proposeDocOfGM"`.
 */
export function usePrepareIGeneralKeeperProposeDocOfGm(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'proposeDocOfGM'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'proposeDocOfGM',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'proposeDocOfGM'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"proposeMotionToBoard"`.
 */
export function usePrepareIGeneralKeeperProposeMotionToBoard(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iGeneralKeeperABI,
      'proposeMotionToBoard'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'proposeMotionToBoard',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'proposeMotionToBoard'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"proposeMotionToGeneralMeeting"`.
 */
export function usePrepareIGeneralKeeperProposeMotionToGeneralMeeting(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iGeneralKeeperABI,
      'proposeMotionToGeneralMeeting'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'proposeMotionToGeneralMeeting',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'proposeMotionToGeneralMeeting'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"pushToCoffer"`.
 */
export function usePrepareIGeneralKeeperPushToCoffer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'pushToCoffer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'pushToCoffer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'pushToCoffer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"quitPosition"`.
 */
export function usePrepareIGeneralKeeperQuitPosition(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'quitPosition'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'quitPosition',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'quitPosition'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"refundDebt"`.
 */
export function usePrepareIGeneralKeeperRefundDebt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'refundDebt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'refundDebt',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'refundDebt'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"regBook"`.
 */
export function usePrepareIGeneralKeeperRegBook(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'regBook'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'regBook',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'regBook'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"regKeeper"`.
 */
export function usePrepareIGeneralKeeperRegKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'regKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'regKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'regKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"releasePledge"`.
 */
export function usePrepareIGeneralKeeperReleasePledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'releasePledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'releasePledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'releasePledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"releaseSwapOrder"`.
 */
export function usePrepareIGeneralKeeperReleaseSwapOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'releaseSwapOrder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'releaseSwapOrder',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'releaseSwapOrder'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"removeDirector"`.
 */
export function usePrepareIGeneralKeeperRemoveDirector(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'removeDirector'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'removeDirector',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'removeDirector'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"removeOfficer"`.
 */
export function usePrepareIGeneralKeeperRemoveOfficer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'removeOfficer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'removeOfficer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'removeOfficer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"requestPaidInCapital"`.
 */
export function usePrepareIGeneralKeeperRequestPaidInCapital(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iGeneralKeeperABI,
      'requestPaidInCapital'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'requestPaidInCapital',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'requestPaidInCapital'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"requestToBuy"`.
 */
export function usePrepareIGeneralKeeperRequestToBuy(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'requestToBuy'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'requestToBuy',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'requestToBuy'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"revokePledge"`.
 */
export function usePrepareIGeneralKeeperRevokePledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'revokePledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'revokePledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'revokePledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"revokeSwapOrder"`.
 */
export function usePrepareIGeneralKeeperRevokeSwapOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'revokeSwapOrder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'revokeSwapOrder',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'revokeSwapOrder'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"setCompInfo"`.
 */
export function usePrepareIGeneralKeeperSetCompInfo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'setCompInfo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'setCompInfo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'setCompInfo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"setMaxQtyOfMembers"`.
 */
export function usePrepareIGeneralKeeperSetMaxQtyOfMembers(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iGeneralKeeperABI,
      'setMaxQtyOfMembers'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'setMaxQtyOfMembers',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'setMaxQtyOfMembers'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"setPayInAmt"`.
 */
export function usePrepareIGeneralKeeperSetPayInAmt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'setPayInAmt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'setPayInAmt',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'setPayInAmt'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"signIA"`.
 */
export function usePrepareIGeneralKeeperSignIa(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'signIA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'signIA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'signIA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"signSHA"`.
 */
export function usePrepareIGeneralKeeperSignSha(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'signSHA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'signSHA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'signSHA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"takeGiftShares"`.
 */
export function usePrepareIGeneralKeeperTakeGiftShares(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'takeGiftShares'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'takeGiftShares',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'takeGiftShares'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"takePosition"`.
 */
export function usePrepareIGeneralKeeperTakePosition(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'takePosition'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'takePosition',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'takePosition'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"takeSeat"`.
 */
export function usePrepareIGeneralKeeperTakeSeat(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'takeSeat'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'takeSeat',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'takeSeat'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"terminateDeal"`.
 */
export function usePrepareIGeneralKeeperTerminateDeal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'terminateDeal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'terminateDeal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'terminateDeal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"transferPledge"`.
 */
export function usePrepareIGeneralKeeperTransferPledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'transferPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'transferPledge',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'transferPledge'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"transferTargetShare"`.
 */
export function usePrepareIGeneralKeeperTransferTargetShare(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iGeneralKeeperABI,
      'transferTargetShare'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'transferTargetShare',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'transferTargetShare'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"updateOracle"`.
 */
export function usePrepareIGeneralKeeperUpdateOracle(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'updateOracle'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'updateOracle',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'updateOracle'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"voteCounting"`.
 */
export function usePrepareIGeneralKeeperVoteCounting(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'voteCounting'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'voteCounting',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'voteCounting'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"voteCountingOfGM"`.
 */
export function usePrepareIGeneralKeeperVoteCountingOfGm(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'voteCountingOfGM'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'voteCountingOfGM',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'voteCountingOfGM'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"withdrawPayInAmt"`.
 */
export function usePrepareIGeneralKeeperWithdrawPayInAmt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'withdrawPayInAmt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'withdrawPayInAmt',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'withdrawPayInAmt'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iGeneralKeeperABI}__.
 */
export function useIGeneralKeeperEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iGeneralKeeperABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iGeneralKeeperABI,
    ...config,
  } as UseContractEventConfig<typeof iGeneralKeeperABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `eventName` set to `"ExecAction"`.
 */
export function useIGeneralKeeperExecActionEvent(
  config: Omit<
    UseContractEventConfig<typeof iGeneralKeeperABI, 'ExecAction'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iGeneralKeeperABI,
    eventName: 'ExecAction',
    ...config,
  } as UseContractEventConfig<typeof iGeneralKeeperABI, 'ExecAction'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link regCenterABI}__.
 */
export function useRegCenter(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: regCenterABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link regCenterABI}__.
 */
export function useRegCenterRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof regCenterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof regCenterABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: regCenterABI,
    ...config,
  } as UseContractReadConfig<typeof regCenterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"counterOfDocs"`.
 */
export function useRegCenterCounterOfDocs<
  TSelectData = ReadContractResult<typeof regCenterABI, 'counterOfDocs'>,
>(
  config: Omit<
    UseContractReadConfig<typeof regCenterABI, 'counterOfDocs', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: regCenterABI,
    functionName: 'counterOfDocs',
    ...config,
  } as UseContractReadConfig<typeof regCenterABI, 'counterOfDocs', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"counterOfTypes"`.
 */
export function useRegCenterCounterOfTypes<
  TSelectData = ReadContractResult<typeof regCenterABI, 'counterOfTypes'>,
>(
  config: Omit<
    UseContractReadConfig<typeof regCenterABI, 'counterOfTypes', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: regCenterABI,
    functionName: 'counterOfTypes',
    ...config,
  } as UseContractReadConfig<
    typeof regCenterABI,
    'counterOfTypes',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"counterOfUsers"`.
 */
export function useRegCenterCounterOfUsers<
  TSelectData = ReadContractResult<typeof regCenterABI, 'counterOfUsers'>,
>(
  config: Omit<
    UseContractReadConfig<typeof regCenterABI, 'counterOfUsers', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: regCenterABI,
    functionName: 'counterOfUsers',
    ...config,
  } as UseContractReadConfig<
    typeof regCenterABI,
    'counterOfUsers',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"counterOfVersions"`.
 */
export function useRegCenterCounterOfVersions<
  TSelectData = ReadContractResult<typeof regCenterABI, 'counterOfVersions'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof regCenterABI,
      'counterOfVersions',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: regCenterABI,
    functionName: 'counterOfVersions',
    ...config,
  } as UseContractReadConfig<
    typeof regCenterABI,
    'counterOfVersions',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"getBookeeper"`.
 */
export function useRegCenterGetBookeeper<
  TSelectData = ReadContractResult<typeof regCenterABI, 'getBookeeper'>,
>(
  config: Omit<
    UseContractReadConfig<typeof regCenterABI, 'getBookeeper', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: regCenterABI,
    functionName: 'getBookeeper',
    ...config,
  } as UseContractReadConfig<typeof regCenterABI, 'getBookeeper', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"getDoc"`.
 */
export function useRegCenterGetDoc<
  TSelectData = ReadContractResult<typeof regCenterABI, 'getDoc'>,
>(
  config: Omit<
    UseContractReadConfig<typeof regCenterABI, 'getDoc', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: regCenterABI,
    functionName: 'getDoc',
    ...config,
  } as UseContractReadConfig<typeof regCenterABI, 'getDoc', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"getDocByUserNo"`.
 */
export function useRegCenterGetDocByUserNo<
  TSelectData = ReadContractResult<typeof regCenterABI, 'getDocByUserNo'>,
>(
  config: Omit<
    UseContractReadConfig<typeof regCenterABI, 'getDocByUserNo', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: regCenterABI,
    functionName: 'getDocByUserNo',
    ...config,
  } as UseContractReadConfig<
    typeof regCenterABI,
    'getDocByUserNo',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"getDocsList"`.
 */
export function useRegCenterGetDocsList<
  TSelectData = ReadContractResult<typeof regCenterABI, 'getDocsList'>,
>(
  config: Omit<
    UseContractReadConfig<typeof regCenterABI, 'getDocsList', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: regCenterABI,
    functionName: 'getDocsList',
    ...config,
  } as UseContractReadConfig<typeof regCenterABI, 'getDocsList', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"getLocker"`.
 */
export function useRegCenterGetLocker<
  TSelectData = ReadContractResult<typeof regCenterABI, 'getLocker'>,
>(
  config: Omit<
    UseContractReadConfig<typeof regCenterABI, 'getLocker', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: regCenterABI,
    functionName: 'getLocker',
    ...config,
  } as UseContractReadConfig<typeof regCenterABI, 'getLocker', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"getLocksList"`.
 */
export function useRegCenterGetLocksList<
  TSelectData = ReadContractResult<typeof regCenterABI, 'getLocksList'>,
>(
  config: Omit<
    UseContractReadConfig<typeof regCenterABI, 'getLocksList', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: regCenterABI,
    functionName: 'getLocksList',
    ...config,
  } as UseContractReadConfig<typeof regCenterABI, 'getLocksList', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"getMyUserNo"`.
 */
export function useRegCenterGetMyUserNo<
  TSelectData = ReadContractResult<typeof regCenterABI, 'getMyUserNo'>,
>(
  config: Omit<
    UseContractReadConfig<typeof regCenterABI, 'getMyUserNo', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: regCenterABI,
    functionName: 'getMyUserNo',
    ...config,
  } as UseContractReadConfig<typeof regCenterABI, 'getMyUserNo', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"getOwner"`.
 */
export function useRegCenterGetOwner<
  TSelectData = ReadContractResult<typeof regCenterABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof regCenterABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: regCenterABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<typeof regCenterABI, 'getOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"getPlatformRule"`.
 */
export function useRegCenterGetPlatformRule<
  TSelectData = ReadContractResult<typeof regCenterABI, 'getPlatformRule'>,
>(
  config: Omit<
    UseContractReadConfig<typeof regCenterABI, 'getPlatformRule', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: regCenterABI,
    functionName: 'getPlatformRule',
    ...config,
  } as UseContractReadConfig<
    typeof regCenterABI,
    'getPlatformRule',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"getRoyaltyRule"`.
 */
export function useRegCenterGetRoyaltyRule<
  TSelectData = ReadContractResult<typeof regCenterABI, 'getRoyaltyRule'>,
>(
  config: Omit<
    UseContractReadConfig<typeof regCenterABI, 'getRoyaltyRule', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: regCenterABI,
    functionName: 'getRoyaltyRule',
    ...config,
  } as UseContractReadConfig<
    typeof regCenterABI,
    'getRoyaltyRule',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"getUser"`.
 */
export function useRegCenterGetUser<
  TSelectData = ReadContractResult<typeof regCenterABI, 'getUser'>,
>(
  config: Omit<
    UseContractReadConfig<typeof regCenterABI, 'getUser', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: regCenterABI,
    functionName: 'getUser',
    ...config,
  } as UseContractReadConfig<typeof regCenterABI, 'getUser', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"getVersionsList"`.
 */
export function useRegCenterGetVersionsList<
  TSelectData = ReadContractResult<typeof regCenterABI, 'getVersionsList'>,
>(
  config: Omit<
    UseContractReadConfig<typeof regCenterABI, 'getVersionsList', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: regCenterABI,
    functionName: 'getVersionsList',
    ...config,
  } as UseContractReadConfig<
    typeof regCenterABI,
    'getVersionsList',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"isKey"`.
 */
export function useRegCenterIsKey<
  TSelectData = ReadContractResult<typeof regCenterABI, 'isKey'>,
>(
  config: Omit<
    UseContractReadConfig<typeof regCenterABI, 'isKey', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: regCenterABI,
    functionName: 'isKey',
    ...config,
  } as UseContractReadConfig<typeof regCenterABI, 'isKey', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"verifyDoc"`.
 */
export function useRegCenterVerifyDoc<
  TSelectData = ReadContractResult<typeof regCenterABI, 'verifyDoc'>,
>(
  config: Omit<
    UseContractReadConfig<typeof regCenterABI, 'verifyDoc', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: regCenterABI,
    functionName: 'verifyDoc',
    ...config,
  } as UseContractReadConfig<typeof regCenterABI, 'verifyDoc', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link regCenterABI}__.
 */
export function useRegCenterWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof regCenterABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof regCenterABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof regCenterABI, TFunctionName>({
    abi: regCenterABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"createComp"`.
 */
export function useRegCenterCreateComp<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof regCenterABI, 'createComp'>['abi'],
        'createComp'
      > & { functionName?: 'createComp' }
    : UseContractWriteConfig<TMode, typeof regCenterABI, 'createComp'> & {
        abi?: never
        functionName?: 'createComp'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof regCenterABI, 'createComp'>({
    abi: regCenterABI,
    functionName: 'createComp',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"createDoc"`.
 */
export function useRegCenterCreateDoc<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof regCenterABI, 'createDoc'>['abi'],
        'createDoc'
      > & { functionName?: 'createDoc' }
    : UseContractWriteConfig<TMode, typeof regCenterABI, 'createDoc'> & {
        abi?: never
        functionName?: 'createDoc'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof regCenterABI, 'createDoc'>({
    abi: regCenterABI,
    functionName: 'createDoc',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"getUserNo"`.
 */
export function useRegCenterGetUserNo<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof regCenterABI, 'getUserNo'>['abi'],
        'getUserNo'
      > & { functionName?: 'getUserNo' }
    : UseContractWriteConfig<TMode, typeof regCenterABI, 'getUserNo'> & {
        abi?: never
        functionName?: 'getUserNo'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof regCenterABI, 'getUserNo'>({
    abi: regCenterABI,
    functionName: 'getUserNo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"handoverCenterKey"`.
 */
export function useRegCenterHandoverCenterKey<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof regCenterABI,
          'handoverCenterKey'
        >['abi'],
        'handoverCenterKey'
      > & { functionName?: 'handoverCenterKey' }
    : UseContractWriteConfig<
        TMode,
        typeof regCenterABI,
        'handoverCenterKey'
      > & {
        abi?: never
        functionName?: 'handoverCenterKey'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof regCenterABI, 'handoverCenterKey'>({
    abi: regCenterABI,
    functionName: 'handoverCenterKey',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"lockConsideration"`.
 */
export function useRegCenterLockConsideration<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof regCenterABI,
          'lockConsideration'
        >['abi'],
        'lockConsideration'
      > & { functionName?: 'lockConsideration' }
    : UseContractWriteConfig<
        TMode,
        typeof regCenterABI,
        'lockConsideration'
      > & {
        abi?: never
        functionName?: 'lockConsideration'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof regCenterABI, 'lockConsideration'>({
    abi: regCenterABI,
    functionName: 'lockConsideration',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"lockPoints"`.
 */
export function useRegCenterLockPoints<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof regCenterABI, 'lockPoints'>['abi'],
        'lockPoints'
      > & { functionName?: 'lockPoints' }
    : UseContractWriteConfig<TMode, typeof regCenterABI, 'lockPoints'> & {
        abi?: never
        functionName?: 'lockPoints'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof regCenterABI, 'lockPoints'>({
    abi: regCenterABI,
    functionName: 'lockPoints',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"mintAndLockPoints"`.
 */
export function useRegCenterMintAndLockPoints<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof regCenterABI,
          'mintAndLockPoints'
        >['abi'],
        'mintAndLockPoints'
      > & { functionName?: 'mintAndLockPoints' }
    : UseContractWriteConfig<
        TMode,
        typeof regCenterABI,
        'mintAndLockPoints'
      > & {
        abi?: never
        functionName?: 'mintAndLockPoints'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof regCenterABI, 'mintAndLockPoints'>({
    abi: regCenterABI,
    functionName: 'mintAndLockPoints',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"mintPoints"`.
 */
export function useRegCenterMintPoints<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof regCenterABI, 'mintPoints'>['abi'],
        'mintPoints'
      > & { functionName?: 'mintPoints' }
    : UseContractWriteConfig<TMode, typeof regCenterABI, 'mintPoints'> & {
        abi?: never
        functionName?: 'mintPoints'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof regCenterABI, 'mintPoints'>({
    abi: regCenterABI,
    functionName: 'mintPoints',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"pickupPoints"`.
 */
export function useRegCenterPickupPoints<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof regCenterABI, 'pickupPoints'>['abi'],
        'pickupPoints'
      > & { functionName?: 'pickupPoints' }
    : UseContractWriteConfig<TMode, typeof regCenterABI, 'pickupPoints'> & {
        abi?: never
        functionName?: 'pickupPoints'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof regCenterABI, 'pickupPoints'>({
    abi: regCenterABI,
    functionName: 'pickupPoints',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"regUser"`.
 */
export function useRegCenterRegUser<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof regCenterABI, 'regUser'>['abi'],
        'regUser'
      > & { functionName?: 'regUser' }
    : UseContractWriteConfig<TMode, typeof regCenterABI, 'regUser'> & {
        abi?: never
        functionName?: 'regUser'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof regCenterABI, 'regUser'>({
    abi: regCenterABI,
    functionName: 'regUser',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"setBackupKey"`.
 */
export function useRegCenterSetBackupKey<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof regCenterABI, 'setBackupKey'>['abi'],
        'setBackupKey'
      > & { functionName?: 'setBackupKey' }
    : UseContractWriteConfig<TMode, typeof regCenterABI, 'setBackupKey'> & {
        abi?: never
        functionName?: 'setBackupKey'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof regCenterABI, 'setBackupKey'>({
    abi: regCenterABI,
    functionName: 'setBackupKey',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"setPlatformRule"`.
 */
export function useRegCenterSetPlatformRule<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof regCenterABI,
          'setPlatformRule'
        >['abi'],
        'setPlatformRule'
      > & { functionName?: 'setPlatformRule' }
    : UseContractWriteConfig<TMode, typeof regCenterABI, 'setPlatformRule'> & {
        abi?: never
        functionName?: 'setPlatformRule'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof regCenterABI, 'setPlatformRule'>({
    abi: regCenterABI,
    functionName: 'setPlatformRule',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"setRoyaltyRule"`.
 */
export function useRegCenterSetRoyaltyRule<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof regCenterABI,
          'setRoyaltyRule'
        >['abi'],
        'setRoyaltyRule'
      > & { functionName?: 'setRoyaltyRule' }
    : UseContractWriteConfig<TMode, typeof regCenterABI, 'setRoyaltyRule'> & {
        abi?: never
        functionName?: 'setRoyaltyRule'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof regCenterABI, 'setRoyaltyRule'>({
    abi: regCenterABI,
    functionName: 'setRoyaltyRule',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"setTemplate"`.
 */
export function useRegCenterSetTemplate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof regCenterABI, 'setTemplate'>['abi'],
        'setTemplate'
      > & { functionName?: 'setTemplate' }
    : UseContractWriteConfig<TMode, typeof regCenterABI, 'setTemplate'> & {
        abi?: never
        functionName?: 'setTemplate'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof regCenterABI, 'setTemplate'>({
    abi: regCenterABI,
    functionName: 'setTemplate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useRegCenterTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof regCenterABI,
          'transferOwnership'
        >['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        TMode,
        typeof regCenterABI,
        'transferOwnership'
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof regCenterABI, 'transferOwnership'>({
    abi: regCenterABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"transferPoints"`.
 */
export function useRegCenterTransferPoints<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof regCenterABI,
          'transferPoints'
        >['abi'],
        'transferPoints'
      > & { functionName?: 'transferPoints' }
    : UseContractWriteConfig<TMode, typeof regCenterABI, 'transferPoints'> & {
        abi?: never
        functionName?: 'transferPoints'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof regCenterABI, 'transferPoints'>({
    abi: regCenterABI,
    functionName: 'transferPoints',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"updateUserInfo"`.
 */
export function useRegCenterUpdateUserInfo<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof regCenterABI,
          'updateUserInfo'
        >['abi'],
        'updateUserInfo'
      > & { functionName?: 'updateUserInfo' }
    : UseContractWriteConfig<TMode, typeof regCenterABI, 'updateUserInfo'> & {
        abi?: never
        functionName?: 'updateUserInfo'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof regCenterABI, 'updateUserInfo'>({
    abi: regCenterABI,
    functionName: 'updateUserInfo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"withdrawPoints"`.
 */
export function useRegCenterWithdrawPoints<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof regCenterABI,
          'withdrawPoints'
        >['abi'],
        'withdrawPoints'
      > & { functionName?: 'withdrawPoints' }
    : UseContractWriteConfig<TMode, typeof regCenterABI, 'withdrawPoints'> & {
        abi?: never
        functionName?: 'withdrawPoints'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof regCenterABI, 'withdrawPoints'>({
    abi: regCenterABI,
    functionName: 'withdrawPoints',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link regCenterABI}__.
 */
export function usePrepareRegCenterWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof regCenterABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: regCenterABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof regCenterABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"createComp"`.
 */
export function usePrepareRegCenterCreateComp(
  config: Omit<
    UsePrepareContractWriteConfig<typeof regCenterABI, 'createComp'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: regCenterABI,
    functionName: 'createComp',
    ...config,
  } as UsePrepareContractWriteConfig<typeof regCenterABI, 'createComp'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"createDoc"`.
 */
export function usePrepareRegCenterCreateDoc(
  config: Omit<
    UsePrepareContractWriteConfig<typeof regCenterABI, 'createDoc'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: regCenterABI,
    functionName: 'createDoc',
    ...config,
  } as UsePrepareContractWriteConfig<typeof regCenterABI, 'createDoc'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"getUserNo"`.
 */
export function usePrepareRegCenterGetUserNo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof regCenterABI, 'getUserNo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: regCenterABI,
    functionName: 'getUserNo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof regCenterABI, 'getUserNo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"handoverCenterKey"`.
 */
export function usePrepareRegCenterHandoverCenterKey(
  config: Omit<
    UsePrepareContractWriteConfig<typeof regCenterABI, 'handoverCenterKey'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: regCenterABI,
    functionName: 'handoverCenterKey',
    ...config,
  } as UsePrepareContractWriteConfig<typeof regCenterABI, 'handoverCenterKey'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"lockConsideration"`.
 */
export function usePrepareRegCenterLockConsideration(
  config: Omit<
    UsePrepareContractWriteConfig<typeof regCenterABI, 'lockConsideration'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: regCenterABI,
    functionName: 'lockConsideration',
    ...config,
  } as UsePrepareContractWriteConfig<typeof regCenterABI, 'lockConsideration'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"lockPoints"`.
 */
export function usePrepareRegCenterLockPoints(
  config: Omit<
    UsePrepareContractWriteConfig<typeof regCenterABI, 'lockPoints'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: regCenterABI,
    functionName: 'lockPoints',
    ...config,
  } as UsePrepareContractWriteConfig<typeof regCenterABI, 'lockPoints'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"mintAndLockPoints"`.
 */
export function usePrepareRegCenterMintAndLockPoints(
  config: Omit<
    UsePrepareContractWriteConfig<typeof regCenterABI, 'mintAndLockPoints'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: regCenterABI,
    functionName: 'mintAndLockPoints',
    ...config,
  } as UsePrepareContractWriteConfig<typeof regCenterABI, 'mintAndLockPoints'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"mintPoints"`.
 */
export function usePrepareRegCenterMintPoints(
  config: Omit<
    UsePrepareContractWriteConfig<typeof regCenterABI, 'mintPoints'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: regCenterABI,
    functionName: 'mintPoints',
    ...config,
  } as UsePrepareContractWriteConfig<typeof regCenterABI, 'mintPoints'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"pickupPoints"`.
 */
export function usePrepareRegCenterPickupPoints(
  config: Omit<
    UsePrepareContractWriteConfig<typeof regCenterABI, 'pickupPoints'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: regCenterABI,
    functionName: 'pickupPoints',
    ...config,
  } as UsePrepareContractWriteConfig<typeof regCenterABI, 'pickupPoints'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"regUser"`.
 */
export function usePrepareRegCenterRegUser(
  config: Omit<
    UsePrepareContractWriteConfig<typeof regCenterABI, 'regUser'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: regCenterABI,
    functionName: 'regUser',
    ...config,
  } as UsePrepareContractWriteConfig<typeof regCenterABI, 'regUser'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"setBackupKey"`.
 */
export function usePrepareRegCenterSetBackupKey(
  config: Omit<
    UsePrepareContractWriteConfig<typeof regCenterABI, 'setBackupKey'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: regCenterABI,
    functionName: 'setBackupKey',
    ...config,
  } as UsePrepareContractWriteConfig<typeof regCenterABI, 'setBackupKey'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"setPlatformRule"`.
 */
export function usePrepareRegCenterSetPlatformRule(
  config: Omit<
    UsePrepareContractWriteConfig<typeof regCenterABI, 'setPlatformRule'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: regCenterABI,
    functionName: 'setPlatformRule',
    ...config,
  } as UsePrepareContractWriteConfig<typeof regCenterABI, 'setPlatformRule'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"setRoyaltyRule"`.
 */
export function usePrepareRegCenterSetRoyaltyRule(
  config: Omit<
    UsePrepareContractWriteConfig<typeof regCenterABI, 'setRoyaltyRule'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: regCenterABI,
    functionName: 'setRoyaltyRule',
    ...config,
  } as UsePrepareContractWriteConfig<typeof regCenterABI, 'setRoyaltyRule'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"setTemplate"`.
 */
export function usePrepareRegCenterSetTemplate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof regCenterABI, 'setTemplate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: regCenterABI,
    functionName: 'setTemplate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof regCenterABI, 'setTemplate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareRegCenterTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof regCenterABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: regCenterABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof regCenterABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"transferPoints"`.
 */
export function usePrepareRegCenterTransferPoints(
  config: Omit<
    UsePrepareContractWriteConfig<typeof regCenterABI, 'transferPoints'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: regCenterABI,
    functionName: 'transferPoints',
    ...config,
  } as UsePrepareContractWriteConfig<typeof regCenterABI, 'transferPoints'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"updateUserInfo"`.
 */
export function usePrepareRegCenterUpdateUserInfo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof regCenterABI, 'updateUserInfo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: regCenterABI,
    functionName: 'updateUserInfo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof regCenterABI, 'updateUserInfo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"withdrawPoints"`.
 */
export function usePrepareRegCenterWithdrawPoints(
  config: Omit<
    UsePrepareContractWriteConfig<typeof regCenterABI, 'withdrawPoints'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: regCenterABI,
    functionName: 'withdrawPoints',
    ...config,
  } as UsePrepareContractWriteConfig<typeof regCenterABI, 'withdrawPoints'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link regCenterABI}__.
 */
export function useRegCenterEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof regCenterABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: regCenterABI,
    ...config,
  } as UseContractEventConfig<typeof regCenterABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link regCenterABI}__ and `eventName` set to `"CreateDoc"`.
 */
export function useRegCenterCreateDocEvent(
  config: Omit<
    UseContractEventConfig<typeof regCenterABI, 'CreateDoc'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: regCenterABI,
    eventName: 'CreateDoc',
    ...config,
  } as UseContractEventConfig<typeof regCenterABI, 'CreateDoc'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link regCenterABI}__ and `eventName` set to `"LockConsideration"`.
 */
export function useRegCenterLockConsiderationEvent(
  config: Omit<
    UseContractEventConfig<typeof regCenterABI, 'LockConsideration'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: regCenterABI,
    eventName: 'LockConsideration',
    ...config,
  } as UseContractEventConfig<typeof regCenterABI, 'LockConsideration'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link regCenterABI}__ and `eventName` set to `"LockPoints"`.
 */
export function useRegCenterLockPointsEvent(
  config: Omit<
    UseContractEventConfig<typeof regCenterABI, 'LockPoints'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: regCenterABI,
    eventName: 'LockPoints',
    ...config,
  } as UseContractEventConfig<typeof regCenterABI, 'LockPoints'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link regCenterABI}__ and `eventName` set to `"MintPoints"`.
 */
export function useRegCenterMintPointsEvent(
  config: Omit<
    UseContractEventConfig<typeof regCenterABI, 'MintPoints'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: regCenterABI,
    eventName: 'MintPoints',
    ...config,
  } as UseContractEventConfig<typeof regCenterABI, 'MintPoints'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link regCenterABI}__ and `eventName` set to `"PickupConsideration"`.
 */
export function useRegCenterPickupConsiderationEvent(
  config: Omit<
    UseContractEventConfig<typeof regCenterABI, 'PickupConsideration'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: regCenterABI,
    eventName: 'PickupConsideration',
    ...config,
  } as UseContractEventConfig<typeof regCenterABI, 'PickupConsideration'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link regCenterABI}__ and `eventName` set to `"PickupPoints"`.
 */
export function useRegCenterPickupPointsEvent(
  config: Omit<
    UseContractEventConfig<typeof regCenterABI, 'PickupPoints'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: regCenterABI,
    eventName: 'PickupPoints',
    ...config,
  } as UseContractEventConfig<typeof regCenterABI, 'PickupPoints'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link regCenterABI}__ and `eventName` set to `"SetPlatformRule"`.
 */
export function useRegCenterSetPlatformRuleEvent(
  config: Omit<
    UseContractEventConfig<typeof regCenterABI, 'SetPlatformRule'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: regCenterABI,
    eventName: 'SetPlatformRule',
    ...config,
  } as UseContractEventConfig<typeof regCenterABI, 'SetPlatformRule'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link regCenterABI}__ and `eventName` set to `"SetTemplate"`.
 */
export function useRegCenterSetTemplateEvent(
  config: Omit<
    UseContractEventConfig<typeof regCenterABI, 'SetTemplate'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: regCenterABI,
    eventName: 'SetTemplate',
    ...config,
  } as UseContractEventConfig<typeof regCenterABI, 'SetTemplate'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link regCenterABI}__ and `eventName` set to `"TransferOwnership"`.
 */
export function useRegCenterTransferOwnershipEvent(
  config: Omit<
    UseContractEventConfig<typeof regCenterABI, 'TransferOwnership'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: regCenterABI,
    eventName: 'TransferOwnership',
    ...config,
  } as UseContractEventConfig<typeof regCenterABI, 'TransferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link regCenterABI}__ and `eventName` set to `"TransferPoints"`.
 */
export function useRegCenterTransferPointsEvent(
  config: Omit<
    UseContractEventConfig<typeof regCenterABI, 'TransferPoints'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: regCenterABI,
    eventName: 'TransferPoints',
    ...config,
  } as UseContractEventConfig<typeof regCenterABI, 'TransferPoints'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link regCenterABI}__ and `eventName` set to `"TurnOverCenterKey"`.
 */
export function useRegCenterTurnOverCenterKeyEvent(
  config: Omit<
    UseContractEventConfig<typeof regCenterABI, 'TurnOverCenterKey'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: regCenterABI,
    eventName: 'TurnOverCenterKey',
    ...config,
  } as UseContractEventConfig<typeof regCenterABI, 'TurnOverCenterKey'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link regCenterABI}__ and `eventName` set to `"WithdrawPoints"`.
 */
export function useRegCenterWithdrawPointsEvent(
  config: Omit<
    UseContractEventConfig<typeof regCenterABI, 'WithdrawPoints'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: regCenterABI,
    eventName: 'WithdrawPoints',
    ...config,
  } as UseContractEventConfig<typeof regCenterABI, 'WithdrawPoints'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link bmmKeeperABI}__.
 */
export function useBmmKeeper(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: bmmKeeperABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bmmKeeperABI}__.
 */
export function useBmmKeeperRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof bmmKeeperABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof bmmKeeperABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: bmmKeeperABI,
    ...config,
  } as UseContractReadConfig<typeof bmmKeeperABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bmmKeeperABI}__ and `functionName` set to `"getDK"`.
 */
export function useBmmKeeperGetDk<
  TSelectData = ReadContractResult<typeof bmmKeeperABI, 'getDK'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bmmKeeperABI, 'getDK', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bmmKeeperABI,
    functionName: 'getDK',
    ...config,
  } as UseContractReadConfig<typeof bmmKeeperABI, 'getDK', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bmmKeeperABI}__ and `functionName` set to `"getOwner"`.
 */
export function useBmmKeeperGetOwner<
  TSelectData = ReadContractResult<typeof bmmKeeperABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bmmKeeperABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bmmKeeperABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<typeof bmmKeeperABI, 'getOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bmmKeeperABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useBmmKeeperGetRoleAdmin<
  TSelectData = ReadContractResult<typeof bmmKeeperABI, 'getRoleAdmin'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bmmKeeperABI, 'getRoleAdmin', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bmmKeeperABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<typeof bmmKeeperABI, 'getRoleAdmin', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bmmKeeperABI}__ and `functionName` set to `"hasRole"`.
 */
export function useBmmKeeperHasRole<
  TSelectData = ReadContractResult<typeof bmmKeeperABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bmmKeeperABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bmmKeeperABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof bmmKeeperABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bmmKeeperABI}__ and `functionName` set to `"isFinalized"`.
 */
export function useBmmKeeperIsFinalized<
  TSelectData = ReadContractResult<typeof bmmKeeperABI, 'isFinalized'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bmmKeeperABI, 'isFinalized', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bmmKeeperABI,
    functionName: 'isFinalized',
    ...config,
  } as UseContractReadConfig<typeof bmmKeeperABI, 'isFinalized', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bmmKeeperABI}__.
 */
export function useBmmKeeperWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bmmKeeperABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof bmmKeeperABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bmmKeeperABI, TFunctionName>({
    abi: bmmKeeperABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bmmKeeperABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useBmmKeeperAbandonRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bmmKeeperABI, 'abandonRole'>['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<TMode, typeof bmmKeeperABI, 'abandonRole'> & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bmmKeeperABI, 'abandonRole'>({
    abi: bmmKeeperABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bmmKeeperABI}__ and `functionName` set to `"castVote"`.
 */
export function useBmmKeeperCastVote<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bmmKeeperABI, 'castVote'>['abi'],
        'castVote'
      > & { functionName?: 'castVote' }
    : UseContractWriteConfig<TMode, typeof bmmKeeperABI, 'castVote'> & {
        abi?: never
        functionName?: 'castVote'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bmmKeeperABI, 'castVote'>({
    abi: bmmKeeperABI,
    functionName: 'castVote',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bmmKeeperABI}__ and `functionName` set to `"createAction"`.
 */
export function useBmmKeeperCreateAction<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bmmKeeperABI, 'createAction'>['abi'],
        'createAction'
      > & { functionName?: 'createAction' }
    : UseContractWriteConfig<TMode, typeof bmmKeeperABI, 'createAction'> & {
        abi?: never
        functionName?: 'createAction'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bmmKeeperABI, 'createAction'>({
    abi: bmmKeeperABI,
    functionName: 'createAction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bmmKeeperABI}__ and `functionName` set to `"createMotionToApproveDoc"`.
 */
export function useBmmKeeperCreateMotionToApproveDoc<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bmmKeeperABI,
          'createMotionToApproveDoc'
        >['abi'],
        'createMotionToApproveDoc'
      > & { functionName?: 'createMotionToApproveDoc' }
    : UseContractWriteConfig<
        TMode,
        typeof bmmKeeperABI,
        'createMotionToApproveDoc'
      > & {
        abi?: never
        functionName?: 'createMotionToApproveDoc'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof bmmKeeperABI,
    'createMotionToApproveDoc'
  >({
    abi: bmmKeeperABI,
    functionName: 'createMotionToApproveDoc',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bmmKeeperABI}__ and `functionName` set to `"createMotionToRemoveOfficer"`.
 */
export function useBmmKeeperCreateMotionToRemoveOfficer<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bmmKeeperABI,
          'createMotionToRemoveOfficer'
        >['abi'],
        'createMotionToRemoveOfficer'
      > & { functionName?: 'createMotionToRemoveOfficer' }
    : UseContractWriteConfig<
        TMode,
        typeof bmmKeeperABI,
        'createMotionToRemoveOfficer'
      > & {
        abi?: never
        functionName?: 'createMotionToRemoveOfficer'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof bmmKeeperABI,
    'createMotionToRemoveOfficer'
  >({
    abi: bmmKeeperABI,
    functionName: 'createMotionToRemoveOfficer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bmmKeeperABI}__ and `functionName` set to `"entrustDelegaterForBoardMeeting"`.
 */
export function useBmmKeeperEntrustDelegaterForBoardMeeting<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bmmKeeperABI,
          'entrustDelegaterForBoardMeeting'
        >['abi'],
        'entrustDelegaterForBoardMeeting'
      > & { functionName?: 'entrustDelegaterForBoardMeeting' }
    : UseContractWriteConfig<
        TMode,
        typeof bmmKeeperABI,
        'entrustDelegaterForBoardMeeting'
      > & {
        abi?: never
        functionName?: 'entrustDelegaterForBoardMeeting'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof bmmKeeperABI,
    'entrustDelegaterForBoardMeeting'
  >({
    abi: bmmKeeperABI,
    functionName: 'entrustDelegaterForBoardMeeting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bmmKeeperABI}__ and `functionName` set to `"execAction"`.
 */
export function useBmmKeeperExecAction<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bmmKeeperABI, 'execAction'>['abi'],
        'execAction'
      > & { functionName?: 'execAction' }
    : UseContractWriteConfig<TMode, typeof bmmKeeperABI, 'execAction'> & {
        abi?: never
        functionName?: 'execAction'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bmmKeeperABI, 'execAction'>({
    abi: bmmKeeperABI,
    functionName: 'execAction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bmmKeeperABI}__ and `functionName` set to `"grantRole"`.
 */
export function useBmmKeeperGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bmmKeeperABI, 'grantRole'>['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof bmmKeeperABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bmmKeeperABI, 'grantRole'>({
    abi: bmmKeeperABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bmmKeeperABI}__ and `functionName` set to `"init"`.
 */
export function useBmmKeeperInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bmmKeeperABI, 'init'>['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof bmmKeeperABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bmmKeeperABI, 'init'>({
    abi: bmmKeeperABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bmmKeeperABI}__ and `functionName` set to `"lockContents"`.
 */
export function useBmmKeeperLockContents<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bmmKeeperABI, 'lockContents'>['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<TMode, typeof bmmKeeperABI, 'lockContents'> & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bmmKeeperABI, 'lockContents'>({
    abi: bmmKeeperABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bmmKeeperABI}__ and `functionName` set to `"nominateOfficer"`.
 */
export function useBmmKeeperNominateOfficer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bmmKeeperABI,
          'nominateOfficer'
        >['abi'],
        'nominateOfficer'
      > & { functionName?: 'nominateOfficer' }
    : UseContractWriteConfig<TMode, typeof bmmKeeperABI, 'nominateOfficer'> & {
        abi?: never
        functionName?: 'nominateOfficer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bmmKeeperABI, 'nominateOfficer'>({
    abi: bmmKeeperABI,
    functionName: 'nominateOfficer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bmmKeeperABI}__ and `functionName` set to `"proposeMotionToBoard"`.
 */
export function useBmmKeeperProposeMotionToBoard<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bmmKeeperABI,
          'proposeMotionToBoard'
        >['abi'],
        'proposeMotionToBoard'
      > & { functionName?: 'proposeMotionToBoard' }
    : UseContractWriteConfig<
        TMode,
        typeof bmmKeeperABI,
        'proposeMotionToBoard'
      > & {
        abi?: never
        functionName?: 'proposeMotionToBoard'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bmmKeeperABI, 'proposeMotionToBoard'>({
    abi: bmmKeeperABI,
    functionName: 'proposeMotionToBoard',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bmmKeeperABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useBmmKeeperRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bmmKeeperABI, 'renounceRole'>['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<TMode, typeof bmmKeeperABI, 'renounceRole'> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bmmKeeperABI, 'renounceRole'>({
    abi: bmmKeeperABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bmmKeeperABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useBmmKeeperRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bmmKeeperABI, 'revokeRole'>['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof bmmKeeperABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bmmKeeperABI, 'revokeRole'>({
    abi: bmmKeeperABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bmmKeeperABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useBmmKeeperSetDirectKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bmmKeeperABI,
          'setDirectKeeper'
        >['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<TMode, typeof bmmKeeperABI, 'setDirectKeeper'> & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bmmKeeperABI, 'setDirectKeeper'>({
    abi: bmmKeeperABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bmmKeeperABI}__ and `functionName` set to `"setOwner"`.
 */
export function useBmmKeeperSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bmmKeeperABI, 'setOwner'>['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof bmmKeeperABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bmmKeeperABI, 'setOwner'>({
    abi: bmmKeeperABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bmmKeeperABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useBmmKeeperSetRoleAdmin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bmmKeeperABI, 'setRoleAdmin'>['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<TMode, typeof bmmKeeperABI, 'setRoleAdmin'> & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bmmKeeperABI, 'setRoleAdmin'>({
    abi: bmmKeeperABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bmmKeeperABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function useBmmKeeperTakeBackKeys<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bmmKeeperABI, 'takeBackKeys'>['abi'],
        'takeBackKeys'
      > & { functionName?: 'takeBackKeys' }
    : UseContractWriteConfig<TMode, typeof bmmKeeperABI, 'takeBackKeys'> & {
        abi?: never
        functionName?: 'takeBackKeys'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bmmKeeperABI, 'takeBackKeys'>({
    abi: bmmKeeperABI,
    functionName: 'takeBackKeys',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bmmKeeperABI}__ and `functionName` set to `"voteCounting"`.
 */
export function useBmmKeeperVoteCounting<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bmmKeeperABI, 'voteCounting'>['abi'],
        'voteCounting'
      > & { functionName?: 'voteCounting' }
    : UseContractWriteConfig<TMode, typeof bmmKeeperABI, 'voteCounting'> & {
        abi?: never
        functionName?: 'voteCounting'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bmmKeeperABI, 'voteCounting'>({
    abi: bmmKeeperABI,
    functionName: 'voteCounting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bmmKeeperABI}__.
 */
export function usePrepareBmmKeeperWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bmmKeeperABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bmmKeeperABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof bmmKeeperABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bmmKeeperABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareBmmKeeperAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bmmKeeperABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bmmKeeperABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bmmKeeperABI, 'abandonRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bmmKeeperABI}__ and `functionName` set to `"castVote"`.
 */
export function usePrepareBmmKeeperCastVote(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bmmKeeperABI, 'castVote'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bmmKeeperABI,
    functionName: 'castVote',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bmmKeeperABI, 'castVote'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bmmKeeperABI}__ and `functionName` set to `"createAction"`.
 */
export function usePrepareBmmKeeperCreateAction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bmmKeeperABI, 'createAction'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bmmKeeperABI,
    functionName: 'createAction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bmmKeeperABI, 'createAction'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bmmKeeperABI}__ and `functionName` set to `"createMotionToApproveDoc"`.
 */
export function usePrepareBmmKeeperCreateMotionToApproveDoc(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof bmmKeeperABI,
      'createMotionToApproveDoc'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bmmKeeperABI,
    functionName: 'createMotionToApproveDoc',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bmmKeeperABI,
    'createMotionToApproveDoc'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bmmKeeperABI}__ and `functionName` set to `"createMotionToRemoveOfficer"`.
 */
export function usePrepareBmmKeeperCreateMotionToRemoveOfficer(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof bmmKeeperABI,
      'createMotionToRemoveOfficer'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bmmKeeperABI,
    functionName: 'createMotionToRemoveOfficer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bmmKeeperABI,
    'createMotionToRemoveOfficer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bmmKeeperABI}__ and `functionName` set to `"entrustDelegaterForBoardMeeting"`.
 */
export function usePrepareBmmKeeperEntrustDelegaterForBoardMeeting(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof bmmKeeperABI,
      'entrustDelegaterForBoardMeeting'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bmmKeeperABI,
    functionName: 'entrustDelegaterForBoardMeeting',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bmmKeeperABI,
    'entrustDelegaterForBoardMeeting'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bmmKeeperABI}__ and `functionName` set to `"execAction"`.
 */
export function usePrepareBmmKeeperExecAction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bmmKeeperABI, 'execAction'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bmmKeeperABI,
    functionName: 'execAction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bmmKeeperABI, 'execAction'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bmmKeeperABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareBmmKeeperGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bmmKeeperABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bmmKeeperABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bmmKeeperABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bmmKeeperABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareBmmKeeperInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bmmKeeperABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bmmKeeperABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bmmKeeperABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bmmKeeperABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareBmmKeeperLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bmmKeeperABI, 'lockContents'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bmmKeeperABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bmmKeeperABI, 'lockContents'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bmmKeeperABI}__ and `functionName` set to `"nominateOfficer"`.
 */
export function usePrepareBmmKeeperNominateOfficer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bmmKeeperABI, 'nominateOfficer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bmmKeeperABI,
    functionName: 'nominateOfficer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bmmKeeperABI, 'nominateOfficer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bmmKeeperABI}__ and `functionName` set to `"proposeMotionToBoard"`.
 */
export function usePrepareBmmKeeperProposeMotionToBoard(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bmmKeeperABI, 'proposeMotionToBoard'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bmmKeeperABI,
    functionName: 'proposeMotionToBoard',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bmmKeeperABI,
    'proposeMotionToBoard'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bmmKeeperABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareBmmKeeperRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bmmKeeperABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bmmKeeperABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bmmKeeperABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bmmKeeperABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareBmmKeeperRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bmmKeeperABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bmmKeeperABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bmmKeeperABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bmmKeeperABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareBmmKeeperSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bmmKeeperABI, 'setDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bmmKeeperABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bmmKeeperABI, 'setDirectKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bmmKeeperABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareBmmKeeperSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bmmKeeperABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bmmKeeperABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bmmKeeperABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bmmKeeperABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareBmmKeeperSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bmmKeeperABI, 'setRoleAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bmmKeeperABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bmmKeeperABI, 'setRoleAdmin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bmmKeeperABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function usePrepareBmmKeeperTakeBackKeys(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bmmKeeperABI, 'takeBackKeys'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bmmKeeperABI,
    functionName: 'takeBackKeys',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bmmKeeperABI, 'takeBackKeys'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bmmKeeperABI}__ and `functionName` set to `"voteCounting"`.
 */
export function usePrepareBmmKeeperVoteCounting(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bmmKeeperABI, 'voteCounting'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bmmKeeperABI,
    functionName: 'voteCounting',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bmmKeeperABI, 'voteCounting'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bmmKeeperABI}__.
 */
export function useBmmKeeperEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof bmmKeeperABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: bmmKeeperABI,
    ...config,
  } as UseContractEventConfig<typeof bmmKeeperABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bmmKeeperABI}__ and `eventName` set to `"Init"`.
 */
export function useBmmKeeperInitEvent(
  config: Omit<
    UseContractEventConfig<typeof bmmKeeperABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bmmKeeperABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof bmmKeeperABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bmmKeeperABI}__ and `eventName` set to `"LockContents"`.
 */
export function useBmmKeeperLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof bmmKeeperABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bmmKeeperABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof bmmKeeperABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bmmKeeperABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useBmmKeeperSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof bmmKeeperABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bmmKeeperABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof bmmKeeperABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bmmKeeperABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useBmmKeeperSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof bmmKeeperABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bmmKeeperABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof bmmKeeperABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bmmKeeperABI}__ and `eventName` set to `"SetRoleAdmin"`.
 */
export function useBmmKeeperSetRoleAdminEvent(
  config: Omit<
    UseContractEventConfig<typeof bmmKeeperABI, 'SetRoleAdmin'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bmmKeeperABI,
    eventName: 'SetRoleAdmin',
    ...config,
  } as UseContractEventConfig<typeof bmmKeeperABI, 'SetRoleAdmin'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ibmmKeeperABI}__.
 */
export function useIbmmKeeper(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: ibmmKeeperABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibmmKeeperABI}__.
 */
export function useIbmmKeeperWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ibmmKeeperABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ibmmKeeperABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ibmmKeeperABI, TFunctionName>({
    abi: ibmmKeeperABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibmmKeeperABI}__ and `functionName` set to `"castVote"`.
 */
export function useIbmmKeeperCastVote<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ibmmKeeperABI, 'castVote'>['abi'],
        'castVote'
      > & { functionName?: 'castVote' }
    : UseContractWriteConfig<TMode, typeof ibmmKeeperABI, 'castVote'> & {
        abi?: never
        functionName?: 'castVote'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ibmmKeeperABI, 'castVote'>({
    abi: ibmmKeeperABI,
    functionName: 'castVote',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibmmKeeperABI}__ and `functionName` set to `"createAction"`.
 */
export function useIbmmKeeperCreateAction<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ibmmKeeperABI, 'createAction'>['abi'],
        'createAction'
      > & { functionName?: 'createAction' }
    : UseContractWriteConfig<TMode, typeof ibmmKeeperABI, 'createAction'> & {
        abi?: never
        functionName?: 'createAction'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ibmmKeeperABI, 'createAction'>({
    abi: ibmmKeeperABI,
    functionName: 'createAction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibmmKeeperABI}__ and `functionName` set to `"createMotionToApproveDoc"`.
 */
export function useIbmmKeeperCreateMotionToApproveDoc<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ibmmKeeperABI,
          'createMotionToApproveDoc'
        >['abi'],
        'createMotionToApproveDoc'
      > & { functionName?: 'createMotionToApproveDoc' }
    : UseContractWriteConfig<
        TMode,
        typeof ibmmKeeperABI,
        'createMotionToApproveDoc'
      > & {
        abi?: never
        functionName?: 'createMotionToApproveDoc'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ibmmKeeperABI,
    'createMotionToApproveDoc'
  >({
    abi: ibmmKeeperABI,
    functionName: 'createMotionToApproveDoc',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibmmKeeperABI}__ and `functionName` set to `"createMotionToRemoveOfficer"`.
 */
export function useIbmmKeeperCreateMotionToRemoveOfficer<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ibmmKeeperABI,
          'createMotionToRemoveOfficer'
        >['abi'],
        'createMotionToRemoveOfficer'
      > & { functionName?: 'createMotionToRemoveOfficer' }
    : UseContractWriteConfig<
        TMode,
        typeof ibmmKeeperABI,
        'createMotionToRemoveOfficer'
      > & {
        abi?: never
        functionName?: 'createMotionToRemoveOfficer'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ibmmKeeperABI,
    'createMotionToRemoveOfficer'
  >({
    abi: ibmmKeeperABI,
    functionName: 'createMotionToRemoveOfficer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibmmKeeperABI}__ and `functionName` set to `"entrustDelegaterForBoardMeeting"`.
 */
export function useIbmmKeeperEntrustDelegaterForBoardMeeting<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ibmmKeeperABI,
          'entrustDelegaterForBoardMeeting'
        >['abi'],
        'entrustDelegaterForBoardMeeting'
      > & { functionName?: 'entrustDelegaterForBoardMeeting' }
    : UseContractWriteConfig<
        TMode,
        typeof ibmmKeeperABI,
        'entrustDelegaterForBoardMeeting'
      > & {
        abi?: never
        functionName?: 'entrustDelegaterForBoardMeeting'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ibmmKeeperABI,
    'entrustDelegaterForBoardMeeting'
  >({
    abi: ibmmKeeperABI,
    functionName: 'entrustDelegaterForBoardMeeting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibmmKeeperABI}__ and `functionName` set to `"execAction"`.
 */
export function useIbmmKeeperExecAction<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ibmmKeeperABI, 'execAction'>['abi'],
        'execAction'
      > & { functionName?: 'execAction' }
    : UseContractWriteConfig<TMode, typeof ibmmKeeperABI, 'execAction'> & {
        abi?: never
        functionName?: 'execAction'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ibmmKeeperABI, 'execAction'>({
    abi: ibmmKeeperABI,
    functionName: 'execAction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibmmKeeperABI}__ and `functionName` set to `"nominateOfficer"`.
 */
export function useIbmmKeeperNominateOfficer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ibmmKeeperABI,
          'nominateOfficer'
        >['abi'],
        'nominateOfficer'
      > & { functionName?: 'nominateOfficer' }
    : UseContractWriteConfig<TMode, typeof ibmmKeeperABI, 'nominateOfficer'> & {
        abi?: never
        functionName?: 'nominateOfficer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ibmmKeeperABI, 'nominateOfficer'>({
    abi: ibmmKeeperABI,
    functionName: 'nominateOfficer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibmmKeeperABI}__ and `functionName` set to `"proposeMotionToBoard"`.
 */
export function useIbmmKeeperProposeMotionToBoard<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ibmmKeeperABI,
          'proposeMotionToBoard'
        >['abi'],
        'proposeMotionToBoard'
      > & { functionName?: 'proposeMotionToBoard' }
    : UseContractWriteConfig<
        TMode,
        typeof ibmmKeeperABI,
        'proposeMotionToBoard'
      > & {
        abi?: never
        functionName?: 'proposeMotionToBoard'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ibmmKeeperABI, 'proposeMotionToBoard'>({
    abi: ibmmKeeperABI,
    functionName: 'proposeMotionToBoard',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibmmKeeperABI}__ and `functionName` set to `"voteCounting"`.
 */
export function useIbmmKeeperVoteCounting<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ibmmKeeperABI, 'voteCounting'>['abi'],
        'voteCounting'
      > & { functionName?: 'voteCounting' }
    : UseContractWriteConfig<TMode, typeof ibmmKeeperABI, 'voteCounting'> & {
        abi?: never
        functionName?: 'voteCounting'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ibmmKeeperABI, 'voteCounting'>({
    abi: ibmmKeeperABI,
    functionName: 'voteCounting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibmmKeeperABI}__.
 */
export function usePrepareIbmmKeeperWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ibmmKeeperABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibmmKeeperABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ibmmKeeperABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibmmKeeperABI}__ and `functionName` set to `"castVote"`.
 */
export function usePrepareIbmmKeeperCastVote(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ibmmKeeperABI, 'castVote'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibmmKeeperABI,
    functionName: 'castVote',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ibmmKeeperABI, 'castVote'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibmmKeeperABI}__ and `functionName` set to `"createAction"`.
 */
export function usePrepareIbmmKeeperCreateAction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ibmmKeeperABI, 'createAction'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibmmKeeperABI,
    functionName: 'createAction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ibmmKeeperABI, 'createAction'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibmmKeeperABI}__ and `functionName` set to `"createMotionToApproveDoc"`.
 */
export function usePrepareIbmmKeeperCreateMotionToApproveDoc(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ibmmKeeperABI,
      'createMotionToApproveDoc'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibmmKeeperABI,
    functionName: 'createMotionToApproveDoc',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ibmmKeeperABI,
    'createMotionToApproveDoc'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibmmKeeperABI}__ and `functionName` set to `"createMotionToRemoveOfficer"`.
 */
export function usePrepareIbmmKeeperCreateMotionToRemoveOfficer(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ibmmKeeperABI,
      'createMotionToRemoveOfficer'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibmmKeeperABI,
    functionName: 'createMotionToRemoveOfficer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ibmmKeeperABI,
    'createMotionToRemoveOfficer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibmmKeeperABI}__ and `functionName` set to `"entrustDelegaterForBoardMeeting"`.
 */
export function usePrepareIbmmKeeperEntrustDelegaterForBoardMeeting(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ibmmKeeperABI,
      'entrustDelegaterForBoardMeeting'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibmmKeeperABI,
    functionName: 'entrustDelegaterForBoardMeeting',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ibmmKeeperABI,
    'entrustDelegaterForBoardMeeting'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibmmKeeperABI}__ and `functionName` set to `"execAction"`.
 */
export function usePrepareIbmmKeeperExecAction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ibmmKeeperABI, 'execAction'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibmmKeeperABI,
    functionName: 'execAction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ibmmKeeperABI, 'execAction'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibmmKeeperABI}__ and `functionName` set to `"nominateOfficer"`.
 */
export function usePrepareIbmmKeeperNominateOfficer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ibmmKeeperABI, 'nominateOfficer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibmmKeeperABI,
    functionName: 'nominateOfficer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ibmmKeeperABI, 'nominateOfficer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibmmKeeperABI}__ and `functionName` set to `"proposeMotionToBoard"`.
 */
export function usePrepareIbmmKeeperProposeMotionToBoard(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ibmmKeeperABI, 'proposeMotionToBoard'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibmmKeeperABI,
    functionName: 'proposeMotionToBoard',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ibmmKeeperABI,
    'proposeMotionToBoard'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibmmKeeperABI}__ and `functionName` set to `"voteCounting"`.
 */
export function usePrepareIbmmKeeperVoteCounting(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ibmmKeeperABI, 'voteCounting'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibmmKeeperABI,
    functionName: 'voteCounting',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ibmmKeeperABI, 'voteCounting'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link gmmKeeperABI}__.
 */
export function useGmmKeeper(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: gmmKeeperABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gmmKeeperABI}__.
 */
export function useGmmKeeperRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof gmmKeeperABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof gmmKeeperABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: gmmKeeperABI,
    ...config,
  } as UseContractReadConfig<typeof gmmKeeperABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gmmKeeperABI}__ and `functionName` set to `"getDK"`.
 */
export function useGmmKeeperGetDk<
  TSelectData = ReadContractResult<typeof gmmKeeperABI, 'getDK'>,
>(
  config: Omit<
    UseContractReadConfig<typeof gmmKeeperABI, 'getDK', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: gmmKeeperABI,
    functionName: 'getDK',
    ...config,
  } as UseContractReadConfig<typeof gmmKeeperABI, 'getDK', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gmmKeeperABI}__ and `functionName` set to `"getOwner"`.
 */
export function useGmmKeeperGetOwner<
  TSelectData = ReadContractResult<typeof gmmKeeperABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof gmmKeeperABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: gmmKeeperABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<typeof gmmKeeperABI, 'getOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gmmKeeperABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useGmmKeeperGetRoleAdmin<
  TSelectData = ReadContractResult<typeof gmmKeeperABI, 'getRoleAdmin'>,
>(
  config: Omit<
    UseContractReadConfig<typeof gmmKeeperABI, 'getRoleAdmin', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: gmmKeeperABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<typeof gmmKeeperABI, 'getRoleAdmin', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gmmKeeperABI}__ and `functionName` set to `"hasRole"`.
 */
export function useGmmKeeperHasRole<
  TSelectData = ReadContractResult<typeof gmmKeeperABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof gmmKeeperABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: gmmKeeperABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof gmmKeeperABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gmmKeeperABI}__ and `functionName` set to `"isFinalized"`.
 */
export function useGmmKeeperIsFinalized<
  TSelectData = ReadContractResult<typeof gmmKeeperABI, 'isFinalized'>,
>(
  config: Omit<
    UseContractReadConfig<typeof gmmKeeperABI, 'isFinalized', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: gmmKeeperABI,
    functionName: 'isFinalized',
    ...config,
  } as UseContractReadConfig<typeof gmmKeeperABI, 'isFinalized', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gmmKeeperABI}__.
 */
export function useGmmKeeperWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof gmmKeeperABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof gmmKeeperABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof gmmKeeperABI, TFunctionName>({
    abi: gmmKeeperABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gmmKeeperABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useGmmKeeperAbandonRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof gmmKeeperABI, 'abandonRole'>['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<TMode, typeof gmmKeeperABI, 'abandonRole'> & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof gmmKeeperABI, 'abandonRole'>({
    abi: gmmKeeperABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gmmKeeperABI}__ and `functionName` set to `"castVoteOfGM"`.
 */
export function useGmmKeeperCastVoteOfGm<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof gmmKeeperABI, 'castVoteOfGM'>['abi'],
        'castVoteOfGM'
      > & { functionName?: 'castVoteOfGM' }
    : UseContractWriteConfig<TMode, typeof gmmKeeperABI, 'castVoteOfGM'> & {
        abi?: never
        functionName?: 'castVoteOfGM'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof gmmKeeperABI, 'castVoteOfGM'>({
    abi: gmmKeeperABI,
    functionName: 'castVoteOfGM',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gmmKeeperABI}__ and `functionName` set to `"createActionOfGM"`.
 */
export function useGmmKeeperCreateActionOfGm<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof gmmKeeperABI,
          'createActionOfGM'
        >['abi'],
        'createActionOfGM'
      > & { functionName?: 'createActionOfGM' }
    : UseContractWriteConfig<TMode, typeof gmmKeeperABI, 'createActionOfGM'> & {
        abi?: never
        functionName?: 'createActionOfGM'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof gmmKeeperABI, 'createActionOfGM'>({
    abi: gmmKeeperABI,
    functionName: 'createActionOfGM',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gmmKeeperABI}__ and `functionName` set to `"createMotionToRemoveDirector"`.
 */
export function useGmmKeeperCreateMotionToRemoveDirector<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof gmmKeeperABI,
          'createMotionToRemoveDirector'
        >['abi'],
        'createMotionToRemoveDirector'
      > & { functionName?: 'createMotionToRemoveDirector' }
    : UseContractWriteConfig<
        TMode,
        typeof gmmKeeperABI,
        'createMotionToRemoveDirector'
      > & {
        abi?: never
        functionName?: 'createMotionToRemoveDirector'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof gmmKeeperABI,
    'createMotionToRemoveDirector'
  >({
    abi: gmmKeeperABI,
    functionName: 'createMotionToRemoveDirector',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gmmKeeperABI}__ and `functionName` set to `"entrustDelegaterForGeneralMeeting"`.
 */
export function useGmmKeeperEntrustDelegaterForGeneralMeeting<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof gmmKeeperABI,
          'entrustDelegaterForGeneralMeeting'
        >['abi'],
        'entrustDelegaterForGeneralMeeting'
      > & { functionName?: 'entrustDelegaterForGeneralMeeting' }
    : UseContractWriteConfig<
        TMode,
        typeof gmmKeeperABI,
        'entrustDelegaterForGeneralMeeting'
      > & {
        abi?: never
        functionName?: 'entrustDelegaterForGeneralMeeting'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof gmmKeeperABI,
    'entrustDelegaterForGeneralMeeting'
  >({
    abi: gmmKeeperABI,
    functionName: 'entrustDelegaterForGeneralMeeting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gmmKeeperABI}__ and `functionName` set to `"execActionOfGM"`.
 */
export function useGmmKeeperExecActionOfGm<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof gmmKeeperABI,
          'execActionOfGM'
        >['abi'],
        'execActionOfGM'
      > & { functionName?: 'execActionOfGM' }
    : UseContractWriteConfig<TMode, typeof gmmKeeperABI, 'execActionOfGM'> & {
        abi?: never
        functionName?: 'execActionOfGM'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof gmmKeeperABI, 'execActionOfGM'>({
    abi: gmmKeeperABI,
    functionName: 'execActionOfGM',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gmmKeeperABI}__ and `functionName` set to `"grantRole"`.
 */
export function useGmmKeeperGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof gmmKeeperABI, 'grantRole'>['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof gmmKeeperABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof gmmKeeperABI, 'grantRole'>({
    abi: gmmKeeperABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gmmKeeperABI}__ and `functionName` set to `"init"`.
 */
export function useGmmKeeperInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof gmmKeeperABI, 'init'>['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof gmmKeeperABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof gmmKeeperABI, 'init'>({
    abi: gmmKeeperABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gmmKeeperABI}__ and `functionName` set to `"lockContents"`.
 */
export function useGmmKeeperLockContents<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof gmmKeeperABI, 'lockContents'>['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<TMode, typeof gmmKeeperABI, 'lockContents'> & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof gmmKeeperABI, 'lockContents'>({
    abi: gmmKeeperABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gmmKeeperABI}__ and `functionName` set to `"nominateDirector"`.
 */
export function useGmmKeeperNominateDirector<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof gmmKeeperABI,
          'nominateDirector'
        >['abi'],
        'nominateDirector'
      > & { functionName?: 'nominateDirector' }
    : UseContractWriteConfig<TMode, typeof gmmKeeperABI, 'nominateDirector'> & {
        abi?: never
        functionName?: 'nominateDirector'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof gmmKeeperABI, 'nominateDirector'>({
    abi: gmmKeeperABI,
    functionName: 'nominateDirector',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gmmKeeperABI}__ and `functionName` set to `"proposeDocOfGM"`.
 */
export function useGmmKeeperProposeDocOfGm<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof gmmKeeperABI,
          'proposeDocOfGM'
        >['abi'],
        'proposeDocOfGM'
      > & { functionName?: 'proposeDocOfGM' }
    : UseContractWriteConfig<TMode, typeof gmmKeeperABI, 'proposeDocOfGM'> & {
        abi?: never
        functionName?: 'proposeDocOfGM'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof gmmKeeperABI, 'proposeDocOfGM'>({
    abi: gmmKeeperABI,
    functionName: 'proposeDocOfGM',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gmmKeeperABI}__ and `functionName` set to `"proposeMotionToGeneralMeeting"`.
 */
export function useGmmKeeperProposeMotionToGeneralMeeting<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof gmmKeeperABI,
          'proposeMotionToGeneralMeeting'
        >['abi'],
        'proposeMotionToGeneralMeeting'
      > & { functionName?: 'proposeMotionToGeneralMeeting' }
    : UseContractWriteConfig<
        TMode,
        typeof gmmKeeperABI,
        'proposeMotionToGeneralMeeting'
      > & {
        abi?: never
        functionName?: 'proposeMotionToGeneralMeeting'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof gmmKeeperABI,
    'proposeMotionToGeneralMeeting'
  >({
    abi: gmmKeeperABI,
    functionName: 'proposeMotionToGeneralMeeting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gmmKeeperABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useGmmKeeperRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof gmmKeeperABI, 'renounceRole'>['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<TMode, typeof gmmKeeperABI, 'renounceRole'> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof gmmKeeperABI, 'renounceRole'>({
    abi: gmmKeeperABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gmmKeeperABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useGmmKeeperRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof gmmKeeperABI, 'revokeRole'>['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof gmmKeeperABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof gmmKeeperABI, 'revokeRole'>({
    abi: gmmKeeperABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gmmKeeperABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useGmmKeeperSetDirectKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof gmmKeeperABI,
          'setDirectKeeper'
        >['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<TMode, typeof gmmKeeperABI, 'setDirectKeeper'> & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof gmmKeeperABI, 'setDirectKeeper'>({
    abi: gmmKeeperABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gmmKeeperABI}__ and `functionName` set to `"setOwner"`.
 */
export function useGmmKeeperSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof gmmKeeperABI, 'setOwner'>['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof gmmKeeperABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof gmmKeeperABI, 'setOwner'>({
    abi: gmmKeeperABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gmmKeeperABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useGmmKeeperSetRoleAdmin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof gmmKeeperABI, 'setRoleAdmin'>['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<TMode, typeof gmmKeeperABI, 'setRoleAdmin'> & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof gmmKeeperABI, 'setRoleAdmin'>({
    abi: gmmKeeperABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gmmKeeperABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function useGmmKeeperTakeBackKeys<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof gmmKeeperABI, 'takeBackKeys'>['abi'],
        'takeBackKeys'
      > & { functionName?: 'takeBackKeys' }
    : UseContractWriteConfig<TMode, typeof gmmKeeperABI, 'takeBackKeys'> & {
        abi?: never
        functionName?: 'takeBackKeys'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof gmmKeeperABI, 'takeBackKeys'>({
    abi: gmmKeeperABI,
    functionName: 'takeBackKeys',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gmmKeeperABI}__ and `functionName` set to `"voteCountingOfGM"`.
 */
export function useGmmKeeperVoteCountingOfGm<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof gmmKeeperABI,
          'voteCountingOfGM'
        >['abi'],
        'voteCountingOfGM'
      > & { functionName?: 'voteCountingOfGM' }
    : UseContractWriteConfig<TMode, typeof gmmKeeperABI, 'voteCountingOfGM'> & {
        abi?: never
        functionName?: 'voteCountingOfGM'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof gmmKeeperABI, 'voteCountingOfGM'>({
    abi: gmmKeeperABI,
    functionName: 'voteCountingOfGM',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gmmKeeperABI}__.
 */
export function usePrepareGmmKeeperWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gmmKeeperABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: gmmKeeperABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof gmmKeeperABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gmmKeeperABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareGmmKeeperAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gmmKeeperABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: gmmKeeperABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof gmmKeeperABI, 'abandonRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gmmKeeperABI}__ and `functionName` set to `"castVoteOfGM"`.
 */
export function usePrepareGmmKeeperCastVoteOfGm(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gmmKeeperABI, 'castVoteOfGM'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: gmmKeeperABI,
    functionName: 'castVoteOfGM',
    ...config,
  } as UsePrepareContractWriteConfig<typeof gmmKeeperABI, 'castVoteOfGM'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gmmKeeperABI}__ and `functionName` set to `"createActionOfGM"`.
 */
export function usePrepareGmmKeeperCreateActionOfGm(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gmmKeeperABI, 'createActionOfGM'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: gmmKeeperABI,
    functionName: 'createActionOfGM',
    ...config,
  } as UsePrepareContractWriteConfig<typeof gmmKeeperABI, 'createActionOfGM'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gmmKeeperABI}__ and `functionName` set to `"createMotionToRemoveDirector"`.
 */
export function usePrepareGmmKeeperCreateMotionToRemoveDirector(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof gmmKeeperABI,
      'createMotionToRemoveDirector'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: gmmKeeperABI,
    functionName: 'createMotionToRemoveDirector',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof gmmKeeperABI,
    'createMotionToRemoveDirector'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gmmKeeperABI}__ and `functionName` set to `"entrustDelegaterForGeneralMeeting"`.
 */
export function usePrepareGmmKeeperEntrustDelegaterForGeneralMeeting(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof gmmKeeperABI,
      'entrustDelegaterForGeneralMeeting'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: gmmKeeperABI,
    functionName: 'entrustDelegaterForGeneralMeeting',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof gmmKeeperABI,
    'entrustDelegaterForGeneralMeeting'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gmmKeeperABI}__ and `functionName` set to `"execActionOfGM"`.
 */
export function usePrepareGmmKeeperExecActionOfGm(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gmmKeeperABI, 'execActionOfGM'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: gmmKeeperABI,
    functionName: 'execActionOfGM',
    ...config,
  } as UsePrepareContractWriteConfig<typeof gmmKeeperABI, 'execActionOfGM'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gmmKeeperABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareGmmKeeperGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gmmKeeperABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: gmmKeeperABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof gmmKeeperABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gmmKeeperABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareGmmKeeperInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gmmKeeperABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: gmmKeeperABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof gmmKeeperABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gmmKeeperABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareGmmKeeperLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gmmKeeperABI, 'lockContents'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: gmmKeeperABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<typeof gmmKeeperABI, 'lockContents'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gmmKeeperABI}__ and `functionName` set to `"nominateDirector"`.
 */
export function usePrepareGmmKeeperNominateDirector(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gmmKeeperABI, 'nominateDirector'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: gmmKeeperABI,
    functionName: 'nominateDirector',
    ...config,
  } as UsePrepareContractWriteConfig<typeof gmmKeeperABI, 'nominateDirector'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gmmKeeperABI}__ and `functionName` set to `"proposeDocOfGM"`.
 */
export function usePrepareGmmKeeperProposeDocOfGm(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gmmKeeperABI, 'proposeDocOfGM'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: gmmKeeperABI,
    functionName: 'proposeDocOfGM',
    ...config,
  } as UsePrepareContractWriteConfig<typeof gmmKeeperABI, 'proposeDocOfGM'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gmmKeeperABI}__ and `functionName` set to `"proposeMotionToGeneralMeeting"`.
 */
export function usePrepareGmmKeeperProposeMotionToGeneralMeeting(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof gmmKeeperABI,
      'proposeMotionToGeneralMeeting'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: gmmKeeperABI,
    functionName: 'proposeMotionToGeneralMeeting',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof gmmKeeperABI,
    'proposeMotionToGeneralMeeting'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gmmKeeperABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareGmmKeeperRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gmmKeeperABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: gmmKeeperABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof gmmKeeperABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gmmKeeperABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareGmmKeeperRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gmmKeeperABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: gmmKeeperABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof gmmKeeperABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gmmKeeperABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareGmmKeeperSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gmmKeeperABI, 'setDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: gmmKeeperABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof gmmKeeperABI, 'setDirectKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gmmKeeperABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareGmmKeeperSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gmmKeeperABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: gmmKeeperABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof gmmKeeperABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gmmKeeperABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareGmmKeeperSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gmmKeeperABI, 'setRoleAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: gmmKeeperABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof gmmKeeperABI, 'setRoleAdmin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gmmKeeperABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function usePrepareGmmKeeperTakeBackKeys(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gmmKeeperABI, 'takeBackKeys'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: gmmKeeperABI,
    functionName: 'takeBackKeys',
    ...config,
  } as UsePrepareContractWriteConfig<typeof gmmKeeperABI, 'takeBackKeys'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gmmKeeperABI}__ and `functionName` set to `"voteCountingOfGM"`.
 */
export function usePrepareGmmKeeperVoteCountingOfGm(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gmmKeeperABI, 'voteCountingOfGM'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: gmmKeeperABI,
    functionName: 'voteCountingOfGM',
    ...config,
  } as UsePrepareContractWriteConfig<typeof gmmKeeperABI, 'voteCountingOfGM'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gmmKeeperABI}__.
 */
export function useGmmKeeperEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof gmmKeeperABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: gmmKeeperABI,
    ...config,
  } as UseContractEventConfig<typeof gmmKeeperABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gmmKeeperABI}__ and `eventName` set to `"Init"`.
 */
export function useGmmKeeperInitEvent(
  config: Omit<
    UseContractEventConfig<typeof gmmKeeperABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: gmmKeeperABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof gmmKeeperABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gmmKeeperABI}__ and `eventName` set to `"LockContents"`.
 */
export function useGmmKeeperLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof gmmKeeperABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: gmmKeeperABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof gmmKeeperABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gmmKeeperABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useGmmKeeperSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof gmmKeeperABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: gmmKeeperABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof gmmKeeperABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gmmKeeperABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useGmmKeeperSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof gmmKeeperABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: gmmKeeperABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof gmmKeeperABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gmmKeeperABI}__ and `eventName` set to `"SetRoleAdmin"`.
 */
export function useGmmKeeperSetRoleAdminEvent(
  config: Omit<
    UseContractEventConfig<typeof gmmKeeperABI, 'SetRoleAdmin'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: gmmKeeperABI,
    eventName: 'SetRoleAdmin',
    ...config,
  } as UseContractEventConfig<typeof gmmKeeperABI, 'SetRoleAdmin'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iroaKeeperABI}__.
 */
export function useIroaKeeper(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iroaKeeperABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iroaKeeperABI}__.
 */
export function useIroaKeeperWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iroaKeeperABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iroaKeeperABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iroaKeeperABI, TFunctionName>({
    abi: iroaKeeperABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iroaKeeperABI}__ and `functionName` set to `"circulateIA"`.
 */
export function useIroaKeeperCirculateIa<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iroaKeeperABI, 'circulateIA'>['abi'],
        'circulateIA'
      > & { functionName?: 'circulateIA' }
    : UseContractWriteConfig<TMode, typeof iroaKeeperABI, 'circulateIA'> & {
        abi?: never
        functionName?: 'circulateIA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iroaKeeperABI, 'circulateIA'>({
    abi: iroaKeeperABI,
    functionName: 'circulateIA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iroaKeeperABI}__ and `functionName` set to `"closeDeal"`.
 */
export function useIroaKeeperCloseDeal<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iroaKeeperABI, 'closeDeal'>['abi'],
        'closeDeal'
      > & { functionName?: 'closeDeal' }
    : UseContractWriteConfig<TMode, typeof iroaKeeperABI, 'closeDeal'> & {
        abi?: never
        functionName?: 'closeDeal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iroaKeeperABI, 'closeDeal'>({
    abi: iroaKeeperABI,
    functionName: 'closeDeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iroaKeeperABI}__ and `functionName` set to `"createIA"`.
 */
export function useIroaKeeperCreateIa<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iroaKeeperABI, 'createIA'>['abi'],
        'createIA'
      > & { functionName?: 'createIA' }
    : UseContractWriteConfig<TMode, typeof iroaKeeperABI, 'createIA'> & {
        abi?: never
        functionName?: 'createIA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iroaKeeperABI, 'createIA'>({
    abi: iroaKeeperABI,
    functionName: 'createIA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iroaKeeperABI}__ and `functionName` set to `"issueNewShare"`.
 */
export function useIroaKeeperIssueNewShare<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iroaKeeperABI,
          'issueNewShare'
        >['abi'],
        'issueNewShare'
      > & { functionName?: 'issueNewShare' }
    : UseContractWriteConfig<TMode, typeof iroaKeeperABI, 'issueNewShare'> & {
        abi?: never
        functionName?: 'issueNewShare'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iroaKeeperABI, 'issueNewShare'>({
    abi: iroaKeeperABI,
    functionName: 'issueNewShare',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iroaKeeperABI}__ and `functionName` set to `"pushToCoffer"`.
 */
export function useIroaKeeperPushToCoffer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iroaKeeperABI, 'pushToCoffer'>['abi'],
        'pushToCoffer'
      > & { functionName?: 'pushToCoffer' }
    : UseContractWriteConfig<TMode, typeof iroaKeeperABI, 'pushToCoffer'> & {
        abi?: never
        functionName?: 'pushToCoffer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iroaKeeperABI, 'pushToCoffer'>({
    abi: iroaKeeperABI,
    functionName: 'pushToCoffer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iroaKeeperABI}__ and `functionName` set to `"signIA"`.
 */
export function useIroaKeeperSignIa<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iroaKeeperABI, 'signIA'>['abi'],
        'signIA'
      > & { functionName?: 'signIA' }
    : UseContractWriteConfig<TMode, typeof iroaKeeperABI, 'signIA'> & {
        abi?: never
        functionName?: 'signIA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iroaKeeperABI, 'signIA'>({
    abi: iroaKeeperABI,
    functionName: 'signIA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iroaKeeperABI}__ and `functionName` set to `"terminateDeal"`.
 */
export function useIroaKeeperTerminateDeal<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iroaKeeperABI,
          'terminateDeal'
        >['abi'],
        'terminateDeal'
      > & { functionName?: 'terminateDeal' }
    : UseContractWriteConfig<TMode, typeof iroaKeeperABI, 'terminateDeal'> & {
        abi?: never
        functionName?: 'terminateDeal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iroaKeeperABI, 'terminateDeal'>({
    abi: iroaKeeperABI,
    functionName: 'terminateDeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iroaKeeperABI}__ and `functionName` set to `"transferTargetShare"`.
 */
export function useIroaKeeperTransferTargetShare<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iroaKeeperABI,
          'transferTargetShare'
        >['abi'],
        'transferTargetShare'
      > & { functionName?: 'transferTargetShare' }
    : UseContractWriteConfig<
        TMode,
        typeof iroaKeeperABI,
        'transferTargetShare'
      > & {
        abi?: never
        functionName?: 'transferTargetShare'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iroaKeeperABI, 'transferTargetShare'>({
    abi: iroaKeeperABI,
    functionName: 'transferTargetShare',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iroaKeeperABI}__.
 */
export function usePrepareIroaKeeperWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iroaKeeperABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iroaKeeperABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iroaKeeperABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iroaKeeperABI}__ and `functionName` set to `"circulateIA"`.
 */
export function usePrepareIroaKeeperCirculateIa(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iroaKeeperABI, 'circulateIA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iroaKeeperABI,
    functionName: 'circulateIA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iroaKeeperABI, 'circulateIA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iroaKeeperABI}__ and `functionName` set to `"closeDeal"`.
 */
export function usePrepareIroaKeeperCloseDeal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iroaKeeperABI, 'closeDeal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iroaKeeperABI,
    functionName: 'closeDeal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iroaKeeperABI, 'closeDeal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iroaKeeperABI}__ and `functionName` set to `"createIA"`.
 */
export function usePrepareIroaKeeperCreateIa(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iroaKeeperABI, 'createIA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iroaKeeperABI,
    functionName: 'createIA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iroaKeeperABI, 'createIA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iroaKeeperABI}__ and `functionName` set to `"issueNewShare"`.
 */
export function usePrepareIroaKeeperIssueNewShare(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iroaKeeperABI, 'issueNewShare'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iroaKeeperABI,
    functionName: 'issueNewShare',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iroaKeeperABI, 'issueNewShare'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iroaKeeperABI}__ and `functionName` set to `"pushToCoffer"`.
 */
export function usePrepareIroaKeeperPushToCoffer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iroaKeeperABI, 'pushToCoffer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iroaKeeperABI,
    functionName: 'pushToCoffer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iroaKeeperABI, 'pushToCoffer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iroaKeeperABI}__ and `functionName` set to `"signIA"`.
 */
export function usePrepareIroaKeeperSignIa(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iroaKeeperABI, 'signIA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iroaKeeperABI,
    functionName: 'signIA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iroaKeeperABI, 'signIA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iroaKeeperABI}__ and `functionName` set to `"terminateDeal"`.
 */
export function usePrepareIroaKeeperTerminateDeal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iroaKeeperABI, 'terminateDeal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iroaKeeperABI,
    functionName: 'terminateDeal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iroaKeeperABI, 'terminateDeal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iroaKeeperABI}__ and `functionName` set to `"transferTargetShare"`.
 */
export function usePrepareIroaKeeperTransferTargetShare(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iroaKeeperABI, 'transferTargetShare'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iroaKeeperABI,
    functionName: 'transferTargetShare',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iroaKeeperABI,
    'transferTargetShare'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link irodKeeperABI}__.
 */
export function useIrodKeeper(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: irodKeeperABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link irodKeeperABI}__.
 */
export function useIrodKeeperWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof irodKeeperABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof irodKeeperABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof irodKeeperABI, TFunctionName>({
    abi: irodKeeperABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link irodKeeperABI}__ and `functionName` set to `"quitPosition"`.
 */
export function useIrodKeeperQuitPosition<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof irodKeeperABI, 'quitPosition'>['abi'],
        'quitPosition'
      > & { functionName?: 'quitPosition' }
    : UseContractWriteConfig<TMode, typeof irodKeeperABI, 'quitPosition'> & {
        abi?: never
        functionName?: 'quitPosition'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof irodKeeperABI, 'quitPosition'>({
    abi: irodKeeperABI,
    functionName: 'quitPosition',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link irodKeeperABI}__ and `functionName` set to `"removeDirector"`.
 */
export function useIrodKeeperRemoveDirector<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof irodKeeperABI,
          'removeDirector'
        >['abi'],
        'removeDirector'
      > & { functionName?: 'removeDirector' }
    : UseContractWriteConfig<TMode, typeof irodKeeperABI, 'removeDirector'> & {
        abi?: never
        functionName?: 'removeDirector'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof irodKeeperABI, 'removeDirector'>({
    abi: irodKeeperABI,
    functionName: 'removeDirector',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link irodKeeperABI}__ and `functionName` set to `"removeOfficer"`.
 */
export function useIrodKeeperRemoveOfficer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof irodKeeperABI,
          'removeOfficer'
        >['abi'],
        'removeOfficer'
      > & { functionName?: 'removeOfficer' }
    : UseContractWriteConfig<TMode, typeof irodKeeperABI, 'removeOfficer'> & {
        abi?: never
        functionName?: 'removeOfficer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof irodKeeperABI, 'removeOfficer'>({
    abi: irodKeeperABI,
    functionName: 'removeOfficer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link irodKeeperABI}__ and `functionName` set to `"takePosition"`.
 */
export function useIrodKeeperTakePosition<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof irodKeeperABI, 'takePosition'>['abi'],
        'takePosition'
      > & { functionName?: 'takePosition' }
    : UseContractWriteConfig<TMode, typeof irodKeeperABI, 'takePosition'> & {
        abi?: never
        functionName?: 'takePosition'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof irodKeeperABI, 'takePosition'>({
    abi: irodKeeperABI,
    functionName: 'takePosition',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link irodKeeperABI}__ and `functionName` set to `"takeSeat"`.
 */
export function useIrodKeeperTakeSeat<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof irodKeeperABI, 'takeSeat'>['abi'],
        'takeSeat'
      > & { functionName?: 'takeSeat' }
    : UseContractWriteConfig<TMode, typeof irodKeeperABI, 'takeSeat'> & {
        abi?: never
        functionName?: 'takeSeat'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof irodKeeperABI, 'takeSeat'>({
    abi: irodKeeperABI,
    functionName: 'takeSeat',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link irodKeeperABI}__.
 */
export function usePrepareIrodKeeperWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof irodKeeperABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: irodKeeperABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof irodKeeperABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link irodKeeperABI}__ and `functionName` set to `"quitPosition"`.
 */
export function usePrepareIrodKeeperQuitPosition(
  config: Omit<
    UsePrepareContractWriteConfig<typeof irodKeeperABI, 'quitPosition'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: irodKeeperABI,
    functionName: 'quitPosition',
    ...config,
  } as UsePrepareContractWriteConfig<typeof irodKeeperABI, 'quitPosition'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link irodKeeperABI}__ and `functionName` set to `"removeDirector"`.
 */
export function usePrepareIrodKeeperRemoveDirector(
  config: Omit<
    UsePrepareContractWriteConfig<typeof irodKeeperABI, 'removeDirector'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: irodKeeperABI,
    functionName: 'removeDirector',
    ...config,
  } as UsePrepareContractWriteConfig<typeof irodKeeperABI, 'removeDirector'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link irodKeeperABI}__ and `functionName` set to `"removeOfficer"`.
 */
export function usePrepareIrodKeeperRemoveOfficer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof irodKeeperABI, 'removeOfficer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: irodKeeperABI,
    functionName: 'removeOfficer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof irodKeeperABI, 'removeOfficer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link irodKeeperABI}__ and `functionName` set to `"takePosition"`.
 */
export function usePrepareIrodKeeperTakePosition(
  config: Omit<
    UsePrepareContractWriteConfig<typeof irodKeeperABI, 'takePosition'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: irodKeeperABI,
    functionName: 'takePosition',
    ...config,
  } as UsePrepareContractWriteConfig<typeof irodKeeperABI, 'takePosition'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link irodKeeperABI}__ and `functionName` set to `"takeSeat"`.
 */
export function usePrepareIrodKeeperTakeSeat(
  config: Omit<
    UsePrepareContractWriteConfig<typeof irodKeeperABI, 'takeSeat'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: irodKeeperABI,
    functionName: 'takeSeat',
    ...config,
  } as UsePrepareContractWriteConfig<typeof irodKeeperABI, 'takeSeat'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link irocKeeperABI}__.
 */
export function useIrocKeeper(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: irocKeeperABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link irocKeeperABI}__.
 */
export function useIrocKeeperWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof irocKeeperABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof irocKeeperABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof irocKeeperABI, TFunctionName>({
    abi: irocKeeperABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link irocKeeperABI}__ and `functionName` set to `"acceptSHA"`.
 */
export function useIrocKeeperAcceptSha<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof irocKeeperABI, 'acceptSHA'>['abi'],
        'acceptSHA'
      > & { functionName?: 'acceptSHA' }
    : UseContractWriteConfig<TMode, typeof irocKeeperABI, 'acceptSHA'> & {
        abi?: never
        functionName?: 'acceptSHA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof irocKeeperABI, 'acceptSHA'>({
    abi: irocKeeperABI,
    functionName: 'acceptSHA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link irocKeeperABI}__ and `functionName` set to `"activateSHA"`.
 */
export function useIrocKeeperActivateSha<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof irocKeeperABI, 'activateSHA'>['abi'],
        'activateSHA'
      > & { functionName?: 'activateSHA' }
    : UseContractWriteConfig<TMode, typeof irocKeeperABI, 'activateSHA'> & {
        abi?: never
        functionName?: 'activateSHA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof irocKeeperABI, 'activateSHA'>({
    abi: irocKeeperABI,
    functionName: 'activateSHA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link irocKeeperABI}__ and `functionName` set to `"circulateSHA"`.
 */
export function useIrocKeeperCirculateSha<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof irocKeeperABI, 'circulateSHA'>['abi'],
        'circulateSHA'
      > & { functionName?: 'circulateSHA' }
    : UseContractWriteConfig<TMode, typeof irocKeeperABI, 'circulateSHA'> & {
        abi?: never
        functionName?: 'circulateSHA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof irocKeeperABI, 'circulateSHA'>({
    abi: irocKeeperABI,
    functionName: 'circulateSHA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link irocKeeperABI}__ and `functionName` set to `"createSHA"`.
 */
export function useIrocKeeperCreateSha<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof irocKeeperABI, 'createSHA'>['abi'],
        'createSHA'
      > & { functionName?: 'createSHA' }
    : UseContractWriteConfig<TMode, typeof irocKeeperABI, 'createSHA'> & {
        abi?: never
        functionName?: 'createSHA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof irocKeeperABI, 'createSHA'>({
    abi: irocKeeperABI,
    functionName: 'createSHA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link irocKeeperABI}__ and `functionName` set to `"signSHA"`.
 */
export function useIrocKeeperSignSha<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof irocKeeperABI, 'signSHA'>['abi'],
        'signSHA'
      > & { functionName?: 'signSHA' }
    : UseContractWriteConfig<TMode, typeof irocKeeperABI, 'signSHA'> & {
        abi?: never
        functionName?: 'signSHA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof irocKeeperABI, 'signSHA'>({
    abi: irocKeeperABI,
    functionName: 'signSHA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link irocKeeperABI}__.
 */
export function usePrepareIrocKeeperWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof irocKeeperABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: irocKeeperABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof irocKeeperABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link irocKeeperABI}__ and `functionName` set to `"acceptSHA"`.
 */
export function usePrepareIrocKeeperAcceptSha(
  config: Omit<
    UsePrepareContractWriteConfig<typeof irocKeeperABI, 'acceptSHA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: irocKeeperABI,
    functionName: 'acceptSHA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof irocKeeperABI, 'acceptSHA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link irocKeeperABI}__ and `functionName` set to `"activateSHA"`.
 */
export function usePrepareIrocKeeperActivateSha(
  config: Omit<
    UsePrepareContractWriteConfig<typeof irocKeeperABI, 'activateSHA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: irocKeeperABI,
    functionName: 'activateSHA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof irocKeeperABI, 'activateSHA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link irocKeeperABI}__ and `functionName` set to `"circulateSHA"`.
 */
export function usePrepareIrocKeeperCirculateSha(
  config: Omit<
    UsePrepareContractWriteConfig<typeof irocKeeperABI, 'circulateSHA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: irocKeeperABI,
    functionName: 'circulateSHA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof irocKeeperABI, 'circulateSHA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link irocKeeperABI}__ and `functionName` set to `"createSHA"`.
 */
export function usePrepareIrocKeeperCreateSha(
  config: Omit<
    UsePrepareContractWriteConfig<typeof irocKeeperABI, 'createSHA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: irocKeeperABI,
    functionName: 'createSHA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof irocKeeperABI, 'createSHA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link irocKeeperABI}__ and `functionName` set to `"signSHA"`.
 */
export function usePrepareIrocKeeperSignSha(
  config: Omit<
    UsePrepareContractWriteConfig<typeof irocKeeperABI, 'signSHA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: irocKeeperABI,
    functionName: 'signSHA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof irocKeeperABI, 'signSHA'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link igmmKeeperABI}__.
 */
export function useIgmmKeeper(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: igmmKeeperABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link igmmKeeperABI}__.
 */
export function useIgmmKeeperWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof igmmKeeperABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof igmmKeeperABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof igmmKeeperABI, TFunctionName>({
    abi: igmmKeeperABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link igmmKeeperABI}__ and `functionName` set to `"castVoteOfGM"`.
 */
export function useIgmmKeeperCastVoteOfGm<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof igmmKeeperABI, 'castVoteOfGM'>['abi'],
        'castVoteOfGM'
      > & { functionName?: 'castVoteOfGM' }
    : UseContractWriteConfig<TMode, typeof igmmKeeperABI, 'castVoteOfGM'> & {
        abi?: never
        functionName?: 'castVoteOfGM'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof igmmKeeperABI, 'castVoteOfGM'>({
    abi: igmmKeeperABI,
    functionName: 'castVoteOfGM',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link igmmKeeperABI}__ and `functionName` set to `"createActionOfGM"`.
 */
export function useIgmmKeeperCreateActionOfGm<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof igmmKeeperABI,
          'createActionOfGM'
        >['abi'],
        'createActionOfGM'
      > & { functionName?: 'createActionOfGM' }
    : UseContractWriteConfig<
        TMode,
        typeof igmmKeeperABI,
        'createActionOfGM'
      > & {
        abi?: never
        functionName?: 'createActionOfGM'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof igmmKeeperABI, 'createActionOfGM'>({
    abi: igmmKeeperABI,
    functionName: 'createActionOfGM',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link igmmKeeperABI}__ and `functionName` set to `"createMotionToRemoveDirector"`.
 */
export function useIgmmKeeperCreateMotionToRemoveDirector<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof igmmKeeperABI,
          'createMotionToRemoveDirector'
        >['abi'],
        'createMotionToRemoveDirector'
      > & { functionName?: 'createMotionToRemoveDirector' }
    : UseContractWriteConfig<
        TMode,
        typeof igmmKeeperABI,
        'createMotionToRemoveDirector'
      > & {
        abi?: never
        functionName?: 'createMotionToRemoveDirector'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof igmmKeeperABI,
    'createMotionToRemoveDirector'
  >({
    abi: igmmKeeperABI,
    functionName: 'createMotionToRemoveDirector',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link igmmKeeperABI}__ and `functionName` set to `"entrustDelegaterForGeneralMeeting"`.
 */
export function useIgmmKeeperEntrustDelegaterForGeneralMeeting<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof igmmKeeperABI,
          'entrustDelegaterForGeneralMeeting'
        >['abi'],
        'entrustDelegaterForGeneralMeeting'
      > & { functionName?: 'entrustDelegaterForGeneralMeeting' }
    : UseContractWriteConfig<
        TMode,
        typeof igmmKeeperABI,
        'entrustDelegaterForGeneralMeeting'
      > & {
        abi?: never
        functionName?: 'entrustDelegaterForGeneralMeeting'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof igmmKeeperABI,
    'entrustDelegaterForGeneralMeeting'
  >({
    abi: igmmKeeperABI,
    functionName: 'entrustDelegaterForGeneralMeeting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link igmmKeeperABI}__ and `functionName` set to `"execActionOfGM"`.
 */
export function useIgmmKeeperExecActionOfGm<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof igmmKeeperABI,
          'execActionOfGM'
        >['abi'],
        'execActionOfGM'
      > & { functionName?: 'execActionOfGM' }
    : UseContractWriteConfig<TMode, typeof igmmKeeperABI, 'execActionOfGM'> & {
        abi?: never
        functionName?: 'execActionOfGM'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof igmmKeeperABI, 'execActionOfGM'>({
    abi: igmmKeeperABI,
    functionName: 'execActionOfGM',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link igmmKeeperABI}__ and `functionName` set to `"nominateDirector"`.
 */
export function useIgmmKeeperNominateDirector<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof igmmKeeperABI,
          'nominateDirector'
        >['abi'],
        'nominateDirector'
      > & { functionName?: 'nominateDirector' }
    : UseContractWriteConfig<
        TMode,
        typeof igmmKeeperABI,
        'nominateDirector'
      > & {
        abi?: never
        functionName?: 'nominateDirector'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof igmmKeeperABI, 'nominateDirector'>({
    abi: igmmKeeperABI,
    functionName: 'nominateDirector',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link igmmKeeperABI}__ and `functionName` set to `"proposeDocOfGM"`.
 */
export function useIgmmKeeperProposeDocOfGm<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof igmmKeeperABI,
          'proposeDocOfGM'
        >['abi'],
        'proposeDocOfGM'
      > & { functionName?: 'proposeDocOfGM' }
    : UseContractWriteConfig<TMode, typeof igmmKeeperABI, 'proposeDocOfGM'> & {
        abi?: never
        functionName?: 'proposeDocOfGM'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof igmmKeeperABI, 'proposeDocOfGM'>({
    abi: igmmKeeperABI,
    functionName: 'proposeDocOfGM',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link igmmKeeperABI}__ and `functionName` set to `"proposeMotionToGeneralMeeting"`.
 */
export function useIgmmKeeperProposeMotionToGeneralMeeting<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof igmmKeeperABI,
          'proposeMotionToGeneralMeeting'
        >['abi'],
        'proposeMotionToGeneralMeeting'
      > & { functionName?: 'proposeMotionToGeneralMeeting' }
    : UseContractWriteConfig<
        TMode,
        typeof igmmKeeperABI,
        'proposeMotionToGeneralMeeting'
      > & {
        abi?: never
        functionName?: 'proposeMotionToGeneralMeeting'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof igmmKeeperABI,
    'proposeMotionToGeneralMeeting'
  >({
    abi: igmmKeeperABI,
    functionName: 'proposeMotionToGeneralMeeting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link igmmKeeperABI}__ and `functionName` set to `"voteCountingOfGM"`.
 */
export function useIgmmKeeperVoteCountingOfGm<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof igmmKeeperABI,
          'voteCountingOfGM'
        >['abi'],
        'voteCountingOfGM'
      > & { functionName?: 'voteCountingOfGM' }
    : UseContractWriteConfig<
        TMode,
        typeof igmmKeeperABI,
        'voteCountingOfGM'
      > & {
        abi?: never
        functionName?: 'voteCountingOfGM'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof igmmKeeperABI, 'voteCountingOfGM'>({
    abi: igmmKeeperABI,
    functionName: 'voteCountingOfGM',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link igmmKeeperABI}__.
 */
export function usePrepareIgmmKeeperWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof igmmKeeperABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: igmmKeeperABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof igmmKeeperABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link igmmKeeperABI}__ and `functionName` set to `"castVoteOfGM"`.
 */
export function usePrepareIgmmKeeperCastVoteOfGm(
  config: Omit<
    UsePrepareContractWriteConfig<typeof igmmKeeperABI, 'castVoteOfGM'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: igmmKeeperABI,
    functionName: 'castVoteOfGM',
    ...config,
  } as UsePrepareContractWriteConfig<typeof igmmKeeperABI, 'castVoteOfGM'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link igmmKeeperABI}__ and `functionName` set to `"createActionOfGM"`.
 */
export function usePrepareIgmmKeeperCreateActionOfGm(
  config: Omit<
    UsePrepareContractWriteConfig<typeof igmmKeeperABI, 'createActionOfGM'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: igmmKeeperABI,
    functionName: 'createActionOfGM',
    ...config,
  } as UsePrepareContractWriteConfig<typeof igmmKeeperABI, 'createActionOfGM'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link igmmKeeperABI}__ and `functionName` set to `"createMotionToRemoveDirector"`.
 */
export function usePrepareIgmmKeeperCreateMotionToRemoveDirector(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof igmmKeeperABI,
      'createMotionToRemoveDirector'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: igmmKeeperABI,
    functionName: 'createMotionToRemoveDirector',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof igmmKeeperABI,
    'createMotionToRemoveDirector'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link igmmKeeperABI}__ and `functionName` set to `"entrustDelegaterForGeneralMeeting"`.
 */
export function usePrepareIgmmKeeperEntrustDelegaterForGeneralMeeting(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof igmmKeeperABI,
      'entrustDelegaterForGeneralMeeting'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: igmmKeeperABI,
    functionName: 'entrustDelegaterForGeneralMeeting',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof igmmKeeperABI,
    'entrustDelegaterForGeneralMeeting'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link igmmKeeperABI}__ and `functionName` set to `"execActionOfGM"`.
 */
export function usePrepareIgmmKeeperExecActionOfGm(
  config: Omit<
    UsePrepareContractWriteConfig<typeof igmmKeeperABI, 'execActionOfGM'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: igmmKeeperABI,
    functionName: 'execActionOfGM',
    ...config,
  } as UsePrepareContractWriteConfig<typeof igmmKeeperABI, 'execActionOfGM'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link igmmKeeperABI}__ and `functionName` set to `"nominateDirector"`.
 */
export function usePrepareIgmmKeeperNominateDirector(
  config: Omit<
    UsePrepareContractWriteConfig<typeof igmmKeeperABI, 'nominateDirector'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: igmmKeeperABI,
    functionName: 'nominateDirector',
    ...config,
  } as UsePrepareContractWriteConfig<typeof igmmKeeperABI, 'nominateDirector'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link igmmKeeperABI}__ and `functionName` set to `"proposeDocOfGM"`.
 */
export function usePrepareIgmmKeeperProposeDocOfGm(
  config: Omit<
    UsePrepareContractWriteConfig<typeof igmmKeeperABI, 'proposeDocOfGM'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: igmmKeeperABI,
    functionName: 'proposeDocOfGM',
    ...config,
  } as UsePrepareContractWriteConfig<typeof igmmKeeperABI, 'proposeDocOfGM'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link igmmKeeperABI}__ and `functionName` set to `"proposeMotionToGeneralMeeting"`.
 */
export function usePrepareIgmmKeeperProposeMotionToGeneralMeeting(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof igmmKeeperABI,
      'proposeMotionToGeneralMeeting'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: igmmKeeperABI,
    functionName: 'proposeMotionToGeneralMeeting',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof igmmKeeperABI,
    'proposeMotionToGeneralMeeting'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link igmmKeeperABI}__ and `functionName` set to `"voteCountingOfGM"`.
 */
export function usePrepareIgmmKeeperVoteCountingOfGm(
  config: Omit<
    UsePrepareContractWriteConfig<typeof igmmKeeperABI, 'voteCountingOfGM'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: igmmKeeperABI,
    functionName: 'voteCountingOfGM',
    ...config,
  } as UsePrepareContractWriteConfig<typeof igmmKeeperABI, 'voteCountingOfGM'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iromKeeperABI}__.
 */
export function useIromKeeper(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iromKeeperABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iromKeeperABI}__.
 */
export function useIromKeeperWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iromKeeperABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iromKeeperABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iromKeeperABI, TFunctionName>({
    abi: iromKeeperABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iromKeeperABI}__ and `functionName` set to `"decreaseCapital"`.
 */
export function useIromKeeperDecreaseCapital<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iromKeeperABI,
          'decreaseCapital'
        >['abi'],
        'decreaseCapital'
      > & { functionName?: 'decreaseCapital' }
    : UseContractWriteConfig<TMode, typeof iromKeeperABI, 'decreaseCapital'> & {
        abi?: never
        functionName?: 'decreaseCapital'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iromKeeperABI, 'decreaseCapital'>({
    abi: iromKeeperABI,
    functionName: 'decreaseCapital',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iromKeeperABI}__ and `functionName` set to `"requestPaidInCapital"`.
 */
export function useIromKeeperRequestPaidInCapital<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iromKeeperABI,
          'requestPaidInCapital'
        >['abi'],
        'requestPaidInCapital'
      > & { functionName?: 'requestPaidInCapital' }
    : UseContractWriteConfig<
        TMode,
        typeof iromKeeperABI,
        'requestPaidInCapital'
      > & {
        abi?: never
        functionName?: 'requestPaidInCapital'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iromKeeperABI, 'requestPaidInCapital'>({
    abi: iromKeeperABI,
    functionName: 'requestPaidInCapital',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iromKeeperABI}__ and `functionName` set to `"setMaxQtyOfMembers"`.
 */
export function useIromKeeperSetMaxQtyOfMembers<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iromKeeperABI,
          'setMaxQtyOfMembers'
        >['abi'],
        'setMaxQtyOfMembers'
      > & { functionName?: 'setMaxQtyOfMembers' }
    : UseContractWriteConfig<
        TMode,
        typeof iromKeeperABI,
        'setMaxQtyOfMembers'
      > & {
        abi?: never
        functionName?: 'setMaxQtyOfMembers'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iromKeeperABI, 'setMaxQtyOfMembers'>({
    abi: iromKeeperABI,
    functionName: 'setMaxQtyOfMembers',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iromKeeperABI}__ and `functionName` set to `"setPayInAmt"`.
 */
export function useIromKeeperSetPayInAmt<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iromKeeperABI, 'setPayInAmt'>['abi'],
        'setPayInAmt'
      > & { functionName?: 'setPayInAmt' }
    : UseContractWriteConfig<TMode, typeof iromKeeperABI, 'setPayInAmt'> & {
        abi?: never
        functionName?: 'setPayInAmt'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iromKeeperABI, 'setPayInAmt'>({
    abi: iromKeeperABI,
    functionName: 'setPayInAmt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iromKeeperABI}__ and `functionName` set to `"withdrawPayInAmt"`.
 */
export function useIromKeeperWithdrawPayInAmt<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iromKeeperABI,
          'withdrawPayInAmt'
        >['abi'],
        'withdrawPayInAmt'
      > & { functionName?: 'withdrawPayInAmt' }
    : UseContractWriteConfig<
        TMode,
        typeof iromKeeperABI,
        'withdrawPayInAmt'
      > & {
        abi?: never
        functionName?: 'withdrawPayInAmt'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iromKeeperABI, 'withdrawPayInAmt'>({
    abi: iromKeeperABI,
    functionName: 'withdrawPayInAmt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iromKeeperABI}__.
 */
export function usePrepareIromKeeperWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iromKeeperABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iromKeeperABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iromKeeperABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iromKeeperABI}__ and `functionName` set to `"decreaseCapital"`.
 */
export function usePrepareIromKeeperDecreaseCapital(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iromKeeperABI, 'decreaseCapital'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iromKeeperABI,
    functionName: 'decreaseCapital',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iromKeeperABI, 'decreaseCapital'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iromKeeperABI}__ and `functionName` set to `"requestPaidInCapital"`.
 */
export function usePrepareIromKeeperRequestPaidInCapital(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iromKeeperABI, 'requestPaidInCapital'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iromKeeperABI,
    functionName: 'requestPaidInCapital',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iromKeeperABI,
    'requestPaidInCapital'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iromKeeperABI}__ and `functionName` set to `"setMaxQtyOfMembers"`.
 */
export function usePrepareIromKeeperSetMaxQtyOfMembers(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iromKeeperABI, 'setMaxQtyOfMembers'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iromKeeperABI,
    functionName: 'setMaxQtyOfMembers',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iromKeeperABI,
    'setMaxQtyOfMembers'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iromKeeperABI}__ and `functionName` set to `"setPayInAmt"`.
 */
export function usePrepareIromKeeperSetPayInAmt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iromKeeperABI, 'setPayInAmt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iromKeeperABI,
    functionName: 'setPayInAmt',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iromKeeperABI, 'setPayInAmt'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iromKeeperABI}__ and `functionName` set to `"withdrawPayInAmt"`.
 */
export function usePrepareIromKeeperWithdrawPayInAmt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iromKeeperABI, 'withdrawPayInAmt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iromKeeperABI,
    functionName: 'withdrawPayInAmt',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iromKeeperABI, 'withdrawPayInAmt'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link irosKeeperABI}__.
 */
export function useIrosKeeper(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: irosKeeperABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link irosKeeperABI}__.
 */
export function useIrosKeeperWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof irosKeeperABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof irosKeeperABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof irosKeeperABI, TFunctionName>({
    abi: irosKeeperABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link irosKeeperABI}__ and `functionName` set to `"createSwap"`.
 */
export function useIrosKeeperCreateSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof irosKeeperABI, 'createSwap'>['abi'],
        'createSwap'
      > & { functionName?: 'createSwap' }
    : UseContractWriteConfig<TMode, typeof irosKeeperABI, 'createSwap'> & {
        abi?: never
        functionName?: 'createSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof irosKeeperABI, 'createSwap'>({
    abi: irosKeeperABI,
    functionName: 'createSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link irosKeeperABI}__ and `functionName` set to `"crystalizeSwap"`.
 */
export function useIrosKeeperCrystalizeSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof irosKeeperABI,
          'crystalizeSwap'
        >['abi'],
        'crystalizeSwap'
      > & { functionName?: 'crystalizeSwap' }
    : UseContractWriteConfig<TMode, typeof irosKeeperABI, 'crystalizeSwap'> & {
        abi?: never
        functionName?: 'crystalizeSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof irosKeeperABI, 'crystalizeSwap'>({
    abi: irosKeeperABI,
    functionName: 'crystalizeSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link irosKeeperABI}__ and `functionName` set to `"execSwap"`.
 */
export function useIrosKeeperExecSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof irosKeeperABI, 'execSwap'>['abi'],
        'execSwap'
      > & { functionName?: 'execSwap' }
    : UseContractWriteConfig<TMode, typeof irosKeeperABI, 'execSwap'> & {
        abi?: never
        functionName?: 'execSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof irosKeeperABI, 'execSwap'>({
    abi: irosKeeperABI,
    functionName: 'execSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link irosKeeperABI}__ and `functionName` set to `"lockSwap"`.
 */
export function useIrosKeeperLockSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof irosKeeperABI, 'lockSwap'>['abi'],
        'lockSwap'
      > & { functionName?: 'lockSwap' }
    : UseContractWriteConfig<TMode, typeof irosKeeperABI, 'lockSwap'> & {
        abi?: never
        functionName?: 'lockSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof irosKeeperABI, 'lockSwap'>({
    abi: irosKeeperABI,
    functionName: 'lockSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link irosKeeperABI}__ and `functionName` set to `"releaseSwap"`.
 */
export function useIrosKeeperReleaseSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof irosKeeperABI, 'releaseSwap'>['abi'],
        'releaseSwap'
      > & { functionName?: 'releaseSwap' }
    : UseContractWriteConfig<TMode, typeof irosKeeperABI, 'releaseSwap'> & {
        abi?: never
        functionName?: 'releaseSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof irosKeeperABI, 'releaseSwap'>({
    abi: irosKeeperABI,
    functionName: 'releaseSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link irosKeeperABI}__ and `functionName` set to `"requestToBuy"`.
 */
export function useIrosKeeperRequestToBuy<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof irosKeeperABI, 'requestToBuy'>['abi'],
        'requestToBuy'
      > & { functionName?: 'requestToBuy' }
    : UseContractWriteConfig<TMode, typeof irosKeeperABI, 'requestToBuy'> & {
        abi?: never
        functionName?: 'requestToBuy'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof irosKeeperABI, 'requestToBuy'>({
    abi: irosKeeperABI,
    functionName: 'requestToBuy',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link irosKeeperABI}__ and `functionName` set to `"revokeSwap"`.
 */
export function useIrosKeeperRevokeSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof irosKeeperABI, 'revokeSwap'>['abi'],
        'revokeSwap'
      > & { functionName?: 'revokeSwap' }
    : UseContractWriteConfig<TMode, typeof irosKeeperABI, 'revokeSwap'> & {
        abi?: never
        functionName?: 'revokeSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof irosKeeperABI, 'revokeSwap'>({
    abi: irosKeeperABI,
    functionName: 'revokeSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link irosKeeperABI}__ and `functionName` set to `"transferSwap"`.
 */
export function useIrosKeeperTransferSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof irosKeeperABI, 'transferSwap'>['abi'],
        'transferSwap'
      > & { functionName?: 'transferSwap' }
    : UseContractWriteConfig<TMode, typeof irosKeeperABI, 'transferSwap'> & {
        abi?: never
        functionName?: 'transferSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof irosKeeperABI, 'transferSwap'>({
    abi: irosKeeperABI,
    functionName: 'transferSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link irosKeeperABI}__.
 */
export function usePrepareIrosKeeperWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof irosKeeperABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: irosKeeperABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof irosKeeperABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link irosKeeperABI}__ and `functionName` set to `"createSwap"`.
 */
export function usePrepareIrosKeeperCreateSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof irosKeeperABI, 'createSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: irosKeeperABI,
    functionName: 'createSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof irosKeeperABI, 'createSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link irosKeeperABI}__ and `functionName` set to `"crystalizeSwap"`.
 */
export function usePrepareIrosKeeperCrystalizeSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof irosKeeperABI, 'crystalizeSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: irosKeeperABI,
    functionName: 'crystalizeSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof irosKeeperABI, 'crystalizeSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link irosKeeperABI}__ and `functionName` set to `"execSwap"`.
 */
export function usePrepareIrosKeeperExecSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof irosKeeperABI, 'execSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: irosKeeperABI,
    functionName: 'execSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof irosKeeperABI, 'execSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link irosKeeperABI}__ and `functionName` set to `"lockSwap"`.
 */
export function usePrepareIrosKeeperLockSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof irosKeeperABI, 'lockSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: irosKeeperABI,
    functionName: 'lockSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof irosKeeperABI, 'lockSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link irosKeeperABI}__ and `functionName` set to `"releaseSwap"`.
 */
export function usePrepareIrosKeeperReleaseSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof irosKeeperABI, 'releaseSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: irosKeeperABI,
    functionName: 'releaseSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof irosKeeperABI, 'releaseSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link irosKeeperABI}__ and `functionName` set to `"requestToBuy"`.
 */
export function usePrepareIrosKeeperRequestToBuy(
  config: Omit<
    UsePrepareContractWriteConfig<typeof irosKeeperABI, 'requestToBuy'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: irosKeeperABI,
    functionName: 'requestToBuy',
    ...config,
  } as UsePrepareContractWriteConfig<typeof irosKeeperABI, 'requestToBuy'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link irosKeeperABI}__ and `functionName` set to `"revokeSwap"`.
 */
export function usePrepareIrosKeeperRevokeSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof irosKeeperABI, 'revokeSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: irosKeeperABI,
    functionName: 'revokeSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof irosKeeperABI, 'revokeSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link irosKeeperABI}__ and `functionName` set to `"transferSwap"`.
 */
export function usePrepareIrosKeeperTransferSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof irosKeeperABI, 'transferSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: irosKeeperABI,
    functionName: 'transferSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof irosKeeperABI, 'transferSwap'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ishaKeeperABI}__.
 */
export function useIshaKeeper(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: ishaKeeperABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ishaKeeperABI}__.
 */
export function useIshaKeeperWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ishaKeeperABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ishaKeeperABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ishaKeeperABI, TFunctionName>({
    abi: ishaKeeperABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ishaKeeperABI}__ and `functionName` set to `"acceptAlongDeal"`.
 */
export function useIshaKeeperAcceptAlongDeal<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ishaKeeperABI,
          'acceptAlongDeal'
        >['abi'],
        'acceptAlongDeal'
      > & { functionName?: 'acceptAlongDeal' }
    : UseContractWriteConfig<TMode, typeof ishaKeeperABI, 'acceptAlongDeal'> & {
        abi?: never
        functionName?: 'acceptAlongDeal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ishaKeeperABI, 'acceptAlongDeal'>({
    abi: ishaKeeperABI,
    functionName: 'acceptAlongDeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ishaKeeperABI}__ and `functionName` set to `"computeFirstRefusal"`.
 */
export function useIshaKeeperComputeFirstRefusal<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ishaKeeperABI,
          'computeFirstRefusal'
        >['abi'],
        'computeFirstRefusal'
      > & { functionName?: 'computeFirstRefusal' }
    : UseContractWriteConfig<
        TMode,
        typeof ishaKeeperABI,
        'computeFirstRefusal'
      > & {
        abi?: never
        functionName?: 'computeFirstRefusal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ishaKeeperABI, 'computeFirstRefusal'>({
    abi: ishaKeeperABI,
    functionName: 'computeFirstRefusal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ishaKeeperABI}__ and `functionName` set to `"execAlongRight"`.
 */
export function useIshaKeeperExecAlongRight<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ishaKeeperABI,
          'execAlongRight'
        >['abi'],
        'execAlongRight'
      > & { functionName?: 'execAlongRight' }
    : UseContractWriteConfig<TMode, typeof ishaKeeperABI, 'execAlongRight'> & {
        abi?: never
        functionName?: 'execAlongRight'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ishaKeeperABI, 'execAlongRight'>({
    abi: ishaKeeperABI,
    functionName: 'execAlongRight',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ishaKeeperABI}__ and `functionName` set to `"execAntiDilution"`.
 */
export function useIshaKeeperExecAntiDilution<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ishaKeeperABI,
          'execAntiDilution'
        >['abi'],
        'execAntiDilution'
      > & { functionName?: 'execAntiDilution' }
    : UseContractWriteConfig<
        TMode,
        typeof ishaKeeperABI,
        'execAntiDilution'
      > & {
        abi?: never
        functionName?: 'execAntiDilution'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ishaKeeperABI, 'execAntiDilution'>({
    abi: ishaKeeperABI,
    functionName: 'execAntiDilution',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ishaKeeperABI}__ and `functionName` set to `"execFirstRefusal"`.
 */
export function useIshaKeeperExecFirstRefusal<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ishaKeeperABI,
          'execFirstRefusal'
        >['abi'],
        'execFirstRefusal'
      > & { functionName?: 'execFirstRefusal' }
    : UseContractWriteConfig<
        TMode,
        typeof ishaKeeperABI,
        'execFirstRefusal'
      > & {
        abi?: never
        functionName?: 'execFirstRefusal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ishaKeeperABI, 'execFirstRefusal'>({
    abi: ishaKeeperABI,
    functionName: 'execFirstRefusal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ishaKeeperABI}__ and `functionName` set to `"takeGiftShares"`.
 */
export function useIshaKeeperTakeGiftShares<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ishaKeeperABI,
          'takeGiftShares'
        >['abi'],
        'takeGiftShares'
      > & { functionName?: 'takeGiftShares' }
    : UseContractWriteConfig<TMode, typeof ishaKeeperABI, 'takeGiftShares'> & {
        abi?: never
        functionName?: 'takeGiftShares'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ishaKeeperABI, 'takeGiftShares'>({
    abi: ishaKeeperABI,
    functionName: 'takeGiftShares',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ishaKeeperABI}__.
 */
export function usePrepareIshaKeeperWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ishaKeeperABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ishaKeeperABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ishaKeeperABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ishaKeeperABI}__ and `functionName` set to `"acceptAlongDeal"`.
 */
export function usePrepareIshaKeeperAcceptAlongDeal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ishaKeeperABI, 'acceptAlongDeal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ishaKeeperABI,
    functionName: 'acceptAlongDeal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ishaKeeperABI, 'acceptAlongDeal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ishaKeeperABI}__ and `functionName` set to `"computeFirstRefusal"`.
 */
export function usePrepareIshaKeeperComputeFirstRefusal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ishaKeeperABI, 'computeFirstRefusal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ishaKeeperABI,
    functionName: 'computeFirstRefusal',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ishaKeeperABI,
    'computeFirstRefusal'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ishaKeeperABI}__ and `functionName` set to `"execAlongRight"`.
 */
export function usePrepareIshaKeeperExecAlongRight(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ishaKeeperABI, 'execAlongRight'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ishaKeeperABI,
    functionName: 'execAlongRight',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ishaKeeperABI, 'execAlongRight'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ishaKeeperABI}__ and `functionName` set to `"execAntiDilution"`.
 */
export function usePrepareIshaKeeperExecAntiDilution(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ishaKeeperABI, 'execAntiDilution'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ishaKeeperABI,
    functionName: 'execAntiDilution',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ishaKeeperABI, 'execAntiDilution'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ishaKeeperABI}__ and `functionName` set to `"execFirstRefusal"`.
 */
export function usePrepareIshaKeeperExecFirstRefusal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ishaKeeperABI, 'execFirstRefusal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ishaKeeperABI,
    functionName: 'execFirstRefusal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ishaKeeperABI, 'execFirstRefusal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ishaKeeperABI}__ and `functionName` set to `"takeGiftShares"`.
 */
export function usePrepareIshaKeeperTakeGiftShares(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ishaKeeperABI, 'takeGiftShares'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ishaKeeperABI,
    functionName: 'takeGiftShares',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ishaKeeperABI, 'takeGiftShares'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iropKeeperABI}__.
 */
export function useIropKeeper(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iropKeeperABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iropKeeperABI}__.
 */
export function useIropKeeperWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iropKeeperABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iropKeeperABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iropKeeperABI, TFunctionName>({
    abi: iropKeeperABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iropKeeperABI}__ and `functionName` set to `"createPledge"`.
 */
export function useIropKeeperCreatePledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iropKeeperABI, 'createPledge'>['abi'],
        'createPledge'
      > & { functionName?: 'createPledge' }
    : UseContractWriteConfig<TMode, typeof iropKeeperABI, 'createPledge'> & {
        abi?: never
        functionName?: 'createPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iropKeeperABI, 'createPledge'>({
    abi: iropKeeperABI,
    functionName: 'createPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iropKeeperABI}__ and `functionName` set to `"execPledge"`.
 */
export function useIropKeeperExecPledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iropKeeperABI, 'execPledge'>['abi'],
        'execPledge'
      > & { functionName?: 'execPledge' }
    : UseContractWriteConfig<TMode, typeof iropKeeperABI, 'execPledge'> & {
        abi?: never
        functionName?: 'execPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iropKeeperABI, 'execPledge'>({
    abi: iropKeeperABI,
    functionName: 'execPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iropKeeperABI}__ and `functionName` set to `"extendPledge"`.
 */
export function useIropKeeperExtendPledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iropKeeperABI, 'extendPledge'>['abi'],
        'extendPledge'
      > & { functionName?: 'extendPledge' }
    : UseContractWriteConfig<TMode, typeof iropKeeperABI, 'extendPledge'> & {
        abi?: never
        functionName?: 'extendPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iropKeeperABI, 'extendPledge'>({
    abi: iropKeeperABI,
    functionName: 'extendPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iropKeeperABI}__ and `functionName` set to `"lockPledge"`.
 */
export function useIropKeeperLockPledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iropKeeperABI, 'lockPledge'>['abi'],
        'lockPledge'
      > & { functionName?: 'lockPledge' }
    : UseContractWriteConfig<TMode, typeof iropKeeperABI, 'lockPledge'> & {
        abi?: never
        functionName?: 'lockPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iropKeeperABI, 'lockPledge'>({
    abi: iropKeeperABI,
    functionName: 'lockPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iropKeeperABI}__ and `functionName` set to `"refundDebt"`.
 */
export function useIropKeeperRefundDebt<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iropKeeperABI, 'refundDebt'>['abi'],
        'refundDebt'
      > & { functionName?: 'refundDebt' }
    : UseContractWriteConfig<TMode, typeof iropKeeperABI, 'refundDebt'> & {
        abi?: never
        functionName?: 'refundDebt'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iropKeeperABI, 'refundDebt'>({
    abi: iropKeeperABI,
    functionName: 'refundDebt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iropKeeperABI}__ and `functionName` set to `"releasePledge"`.
 */
export function useIropKeeperReleasePledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iropKeeperABI,
          'releasePledge'
        >['abi'],
        'releasePledge'
      > & { functionName?: 'releasePledge' }
    : UseContractWriteConfig<TMode, typeof iropKeeperABI, 'releasePledge'> & {
        abi?: never
        functionName?: 'releasePledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iropKeeperABI, 'releasePledge'>({
    abi: iropKeeperABI,
    functionName: 'releasePledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iropKeeperABI}__ and `functionName` set to `"revokePledge"`.
 */
export function useIropKeeperRevokePledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iropKeeperABI, 'revokePledge'>['abi'],
        'revokePledge'
      > & { functionName?: 'revokePledge' }
    : UseContractWriteConfig<TMode, typeof iropKeeperABI, 'revokePledge'> & {
        abi?: never
        functionName?: 'revokePledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iropKeeperABI, 'revokePledge'>({
    abi: iropKeeperABI,
    functionName: 'revokePledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iropKeeperABI}__ and `functionName` set to `"transferPledge"`.
 */
export function useIropKeeperTransferPledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iropKeeperABI,
          'transferPledge'
        >['abi'],
        'transferPledge'
      > & { functionName?: 'transferPledge' }
    : UseContractWriteConfig<TMode, typeof iropKeeperABI, 'transferPledge'> & {
        abi?: never
        functionName?: 'transferPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iropKeeperABI, 'transferPledge'>({
    abi: iropKeeperABI,
    functionName: 'transferPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iropKeeperABI}__.
 */
export function usePrepareIropKeeperWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iropKeeperABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iropKeeperABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iropKeeperABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iropKeeperABI}__ and `functionName` set to `"createPledge"`.
 */
export function usePrepareIropKeeperCreatePledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iropKeeperABI, 'createPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iropKeeperABI,
    functionName: 'createPledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iropKeeperABI, 'createPledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iropKeeperABI}__ and `functionName` set to `"execPledge"`.
 */
export function usePrepareIropKeeperExecPledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iropKeeperABI, 'execPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iropKeeperABI,
    functionName: 'execPledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iropKeeperABI, 'execPledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iropKeeperABI}__ and `functionName` set to `"extendPledge"`.
 */
export function usePrepareIropKeeperExtendPledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iropKeeperABI, 'extendPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iropKeeperABI,
    functionName: 'extendPledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iropKeeperABI, 'extendPledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iropKeeperABI}__ and `functionName` set to `"lockPledge"`.
 */
export function usePrepareIropKeeperLockPledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iropKeeperABI, 'lockPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iropKeeperABI,
    functionName: 'lockPledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iropKeeperABI, 'lockPledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iropKeeperABI}__ and `functionName` set to `"refundDebt"`.
 */
export function usePrepareIropKeeperRefundDebt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iropKeeperABI, 'refundDebt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iropKeeperABI,
    functionName: 'refundDebt',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iropKeeperABI, 'refundDebt'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iropKeeperABI}__ and `functionName` set to `"releasePledge"`.
 */
export function usePrepareIropKeeperReleasePledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iropKeeperABI, 'releasePledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iropKeeperABI,
    functionName: 'releasePledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iropKeeperABI, 'releasePledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iropKeeperABI}__ and `functionName` set to `"revokePledge"`.
 */
export function usePrepareIropKeeperRevokePledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iropKeeperABI, 'revokePledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iropKeeperABI,
    functionName: 'revokePledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iropKeeperABI, 'revokePledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iropKeeperABI}__ and `functionName` set to `"transferPledge"`.
 */
export function usePrepareIropKeeperTransferPledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iropKeeperABI, 'transferPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iropKeeperABI,
    functionName: 'transferPledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iropKeeperABI, 'transferPledge'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link roaKeeperABI}__.
 */
export function useRoaKeeper(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: roaKeeperABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link roaKeeperABI}__.
 */
export function useRoaKeeperRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof roaKeeperABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof roaKeeperABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: roaKeeperABI,
    ...config,
  } as UseContractReadConfig<typeof roaKeeperABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link roaKeeperABI}__ and `functionName` set to `"getDK"`.
 */
export function useRoaKeeperGetDk<
  TSelectData = ReadContractResult<typeof roaKeeperABI, 'getDK'>,
>(
  config: Omit<
    UseContractReadConfig<typeof roaKeeperABI, 'getDK', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: roaKeeperABI,
    functionName: 'getDK',
    ...config,
  } as UseContractReadConfig<typeof roaKeeperABI, 'getDK', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link roaKeeperABI}__ and `functionName` set to `"getOwner"`.
 */
export function useRoaKeeperGetOwner<
  TSelectData = ReadContractResult<typeof roaKeeperABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof roaKeeperABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: roaKeeperABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<typeof roaKeeperABI, 'getOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link roaKeeperABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useRoaKeeperGetRoleAdmin<
  TSelectData = ReadContractResult<typeof roaKeeperABI, 'getRoleAdmin'>,
>(
  config: Omit<
    UseContractReadConfig<typeof roaKeeperABI, 'getRoleAdmin', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: roaKeeperABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<typeof roaKeeperABI, 'getRoleAdmin', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link roaKeeperABI}__ and `functionName` set to `"hasRole"`.
 */
export function useRoaKeeperHasRole<
  TSelectData = ReadContractResult<typeof roaKeeperABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof roaKeeperABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: roaKeeperABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof roaKeeperABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link roaKeeperABI}__ and `functionName` set to `"isFinalized"`.
 */
export function useRoaKeeperIsFinalized<
  TSelectData = ReadContractResult<typeof roaKeeperABI, 'isFinalized'>,
>(
  config: Omit<
    UseContractReadConfig<typeof roaKeeperABI, 'isFinalized', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: roaKeeperABI,
    functionName: 'isFinalized',
    ...config,
  } as UseContractReadConfig<typeof roaKeeperABI, 'isFinalized', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link roaKeeperABI}__.
 */
export function useRoaKeeperWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof roaKeeperABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof roaKeeperABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof roaKeeperABI, TFunctionName>({
    abi: roaKeeperABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link roaKeeperABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useRoaKeeperAbandonRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof roaKeeperABI, 'abandonRole'>['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<TMode, typeof roaKeeperABI, 'abandonRole'> & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof roaKeeperABI, 'abandonRole'>({
    abi: roaKeeperABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link roaKeeperABI}__ and `functionName` set to `"circulateIA"`.
 */
export function useRoaKeeperCirculateIa<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof roaKeeperABI, 'circulateIA'>['abi'],
        'circulateIA'
      > & { functionName?: 'circulateIA' }
    : UseContractWriteConfig<TMode, typeof roaKeeperABI, 'circulateIA'> & {
        abi?: never
        functionName?: 'circulateIA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof roaKeeperABI, 'circulateIA'>({
    abi: roaKeeperABI,
    functionName: 'circulateIA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link roaKeeperABI}__ and `functionName` set to `"closeDeal"`.
 */
export function useRoaKeeperCloseDeal<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof roaKeeperABI, 'closeDeal'>['abi'],
        'closeDeal'
      > & { functionName?: 'closeDeal' }
    : UseContractWriteConfig<TMode, typeof roaKeeperABI, 'closeDeal'> & {
        abi?: never
        functionName?: 'closeDeal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof roaKeeperABI, 'closeDeal'>({
    abi: roaKeeperABI,
    functionName: 'closeDeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link roaKeeperABI}__ and `functionName` set to `"createIA"`.
 */
export function useRoaKeeperCreateIa<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof roaKeeperABI, 'createIA'>['abi'],
        'createIA'
      > & { functionName?: 'createIA' }
    : UseContractWriteConfig<TMode, typeof roaKeeperABI, 'createIA'> & {
        abi?: never
        functionName?: 'createIA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof roaKeeperABI, 'createIA'>({
    abi: roaKeeperABI,
    functionName: 'createIA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link roaKeeperABI}__ and `functionName` set to `"grantRole"`.
 */
export function useRoaKeeperGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof roaKeeperABI, 'grantRole'>['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof roaKeeperABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof roaKeeperABI, 'grantRole'>({
    abi: roaKeeperABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link roaKeeperABI}__ and `functionName` set to `"init"`.
 */
export function useRoaKeeperInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof roaKeeperABI, 'init'>['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof roaKeeperABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof roaKeeperABI, 'init'>({
    abi: roaKeeperABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link roaKeeperABI}__ and `functionName` set to `"issueNewShare"`.
 */
export function useRoaKeeperIssueNewShare<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof roaKeeperABI, 'issueNewShare'>['abi'],
        'issueNewShare'
      > & { functionName?: 'issueNewShare' }
    : UseContractWriteConfig<TMode, typeof roaKeeperABI, 'issueNewShare'> & {
        abi?: never
        functionName?: 'issueNewShare'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof roaKeeperABI, 'issueNewShare'>({
    abi: roaKeeperABI,
    functionName: 'issueNewShare',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link roaKeeperABI}__ and `functionName` set to `"lockContents"`.
 */
export function useRoaKeeperLockContents<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof roaKeeperABI, 'lockContents'>['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<TMode, typeof roaKeeperABI, 'lockContents'> & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof roaKeeperABI, 'lockContents'>({
    abi: roaKeeperABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link roaKeeperABI}__ and `functionName` set to `"pushToCoffer"`.
 */
export function useRoaKeeperPushToCoffer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof roaKeeperABI, 'pushToCoffer'>['abi'],
        'pushToCoffer'
      > & { functionName?: 'pushToCoffer' }
    : UseContractWriteConfig<TMode, typeof roaKeeperABI, 'pushToCoffer'> & {
        abi?: never
        functionName?: 'pushToCoffer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof roaKeeperABI, 'pushToCoffer'>({
    abi: roaKeeperABI,
    functionName: 'pushToCoffer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link roaKeeperABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useRoaKeeperRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof roaKeeperABI, 'renounceRole'>['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<TMode, typeof roaKeeperABI, 'renounceRole'> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof roaKeeperABI, 'renounceRole'>({
    abi: roaKeeperABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link roaKeeperABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useRoaKeeperRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof roaKeeperABI, 'revokeRole'>['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof roaKeeperABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof roaKeeperABI, 'revokeRole'>({
    abi: roaKeeperABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link roaKeeperABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useRoaKeeperSetDirectKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof roaKeeperABI,
          'setDirectKeeper'
        >['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<TMode, typeof roaKeeperABI, 'setDirectKeeper'> & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof roaKeeperABI, 'setDirectKeeper'>({
    abi: roaKeeperABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link roaKeeperABI}__ and `functionName` set to `"setOwner"`.
 */
export function useRoaKeeperSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof roaKeeperABI, 'setOwner'>['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof roaKeeperABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof roaKeeperABI, 'setOwner'>({
    abi: roaKeeperABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link roaKeeperABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useRoaKeeperSetRoleAdmin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof roaKeeperABI, 'setRoleAdmin'>['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<TMode, typeof roaKeeperABI, 'setRoleAdmin'> & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof roaKeeperABI, 'setRoleAdmin'>({
    abi: roaKeeperABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link roaKeeperABI}__ and `functionName` set to `"signIA"`.
 */
export function useRoaKeeperSignIa<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof roaKeeperABI, 'signIA'>['abi'],
        'signIA'
      > & { functionName?: 'signIA' }
    : UseContractWriteConfig<TMode, typeof roaKeeperABI, 'signIA'> & {
        abi?: never
        functionName?: 'signIA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof roaKeeperABI, 'signIA'>({
    abi: roaKeeperABI,
    functionName: 'signIA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link roaKeeperABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function useRoaKeeperTakeBackKeys<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof roaKeeperABI, 'takeBackKeys'>['abi'],
        'takeBackKeys'
      > & { functionName?: 'takeBackKeys' }
    : UseContractWriteConfig<TMode, typeof roaKeeperABI, 'takeBackKeys'> & {
        abi?: never
        functionName?: 'takeBackKeys'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof roaKeeperABI, 'takeBackKeys'>({
    abi: roaKeeperABI,
    functionName: 'takeBackKeys',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link roaKeeperABI}__ and `functionName` set to `"terminateDeal"`.
 */
export function useRoaKeeperTerminateDeal<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof roaKeeperABI, 'terminateDeal'>['abi'],
        'terminateDeal'
      > & { functionName?: 'terminateDeal' }
    : UseContractWriteConfig<TMode, typeof roaKeeperABI, 'terminateDeal'> & {
        abi?: never
        functionName?: 'terminateDeal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof roaKeeperABI, 'terminateDeal'>({
    abi: roaKeeperABI,
    functionName: 'terminateDeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link roaKeeperABI}__ and `functionName` set to `"transferTargetShare"`.
 */
export function useRoaKeeperTransferTargetShare<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof roaKeeperABI,
          'transferTargetShare'
        >['abi'],
        'transferTargetShare'
      > & { functionName?: 'transferTargetShare' }
    : UseContractWriteConfig<
        TMode,
        typeof roaKeeperABI,
        'transferTargetShare'
      > & {
        abi?: never
        functionName?: 'transferTargetShare'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof roaKeeperABI, 'transferTargetShare'>({
    abi: roaKeeperABI,
    functionName: 'transferTargetShare',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link roaKeeperABI}__.
 */
export function usePrepareRoaKeeperWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof roaKeeperABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: roaKeeperABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof roaKeeperABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link roaKeeperABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareRoaKeeperAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof roaKeeperABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: roaKeeperABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof roaKeeperABI, 'abandonRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link roaKeeperABI}__ and `functionName` set to `"circulateIA"`.
 */
export function usePrepareRoaKeeperCirculateIa(
  config: Omit<
    UsePrepareContractWriteConfig<typeof roaKeeperABI, 'circulateIA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: roaKeeperABI,
    functionName: 'circulateIA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof roaKeeperABI, 'circulateIA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link roaKeeperABI}__ and `functionName` set to `"closeDeal"`.
 */
export function usePrepareRoaKeeperCloseDeal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof roaKeeperABI, 'closeDeal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: roaKeeperABI,
    functionName: 'closeDeal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof roaKeeperABI, 'closeDeal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link roaKeeperABI}__ and `functionName` set to `"createIA"`.
 */
export function usePrepareRoaKeeperCreateIa(
  config: Omit<
    UsePrepareContractWriteConfig<typeof roaKeeperABI, 'createIA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: roaKeeperABI,
    functionName: 'createIA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof roaKeeperABI, 'createIA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link roaKeeperABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareRoaKeeperGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof roaKeeperABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: roaKeeperABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof roaKeeperABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link roaKeeperABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareRoaKeeperInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof roaKeeperABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: roaKeeperABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof roaKeeperABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link roaKeeperABI}__ and `functionName` set to `"issueNewShare"`.
 */
export function usePrepareRoaKeeperIssueNewShare(
  config: Omit<
    UsePrepareContractWriteConfig<typeof roaKeeperABI, 'issueNewShare'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: roaKeeperABI,
    functionName: 'issueNewShare',
    ...config,
  } as UsePrepareContractWriteConfig<typeof roaKeeperABI, 'issueNewShare'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link roaKeeperABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareRoaKeeperLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<typeof roaKeeperABI, 'lockContents'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: roaKeeperABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<typeof roaKeeperABI, 'lockContents'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link roaKeeperABI}__ and `functionName` set to `"pushToCoffer"`.
 */
export function usePrepareRoaKeeperPushToCoffer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof roaKeeperABI, 'pushToCoffer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: roaKeeperABI,
    functionName: 'pushToCoffer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof roaKeeperABI, 'pushToCoffer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link roaKeeperABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareRoaKeeperRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof roaKeeperABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: roaKeeperABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof roaKeeperABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link roaKeeperABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareRoaKeeperRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof roaKeeperABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: roaKeeperABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof roaKeeperABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link roaKeeperABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareRoaKeeperSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof roaKeeperABI, 'setDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: roaKeeperABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof roaKeeperABI, 'setDirectKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link roaKeeperABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareRoaKeeperSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof roaKeeperABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: roaKeeperABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof roaKeeperABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link roaKeeperABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareRoaKeeperSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof roaKeeperABI, 'setRoleAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: roaKeeperABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof roaKeeperABI, 'setRoleAdmin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link roaKeeperABI}__ and `functionName` set to `"signIA"`.
 */
export function usePrepareRoaKeeperSignIa(
  config: Omit<
    UsePrepareContractWriteConfig<typeof roaKeeperABI, 'signIA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: roaKeeperABI,
    functionName: 'signIA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof roaKeeperABI, 'signIA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link roaKeeperABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function usePrepareRoaKeeperTakeBackKeys(
  config: Omit<
    UsePrepareContractWriteConfig<typeof roaKeeperABI, 'takeBackKeys'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: roaKeeperABI,
    functionName: 'takeBackKeys',
    ...config,
  } as UsePrepareContractWriteConfig<typeof roaKeeperABI, 'takeBackKeys'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link roaKeeperABI}__ and `functionName` set to `"terminateDeal"`.
 */
export function usePrepareRoaKeeperTerminateDeal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof roaKeeperABI, 'terminateDeal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: roaKeeperABI,
    functionName: 'terminateDeal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof roaKeeperABI, 'terminateDeal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link roaKeeperABI}__ and `functionName` set to `"transferTargetShare"`.
 */
export function usePrepareRoaKeeperTransferTargetShare(
  config: Omit<
    UsePrepareContractWriteConfig<typeof roaKeeperABI, 'transferTargetShare'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: roaKeeperABI,
    functionName: 'transferTargetShare',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof roaKeeperABI,
    'transferTargetShare'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link roaKeeperABI}__.
 */
export function useRoaKeeperEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof roaKeeperABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: roaKeeperABI,
    ...config,
  } as UseContractEventConfig<typeof roaKeeperABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link roaKeeperABI}__ and `eventName` set to `"Init"`.
 */
export function useRoaKeeperInitEvent(
  config: Omit<
    UseContractEventConfig<typeof roaKeeperABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: roaKeeperABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof roaKeeperABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link roaKeeperABI}__ and `eventName` set to `"LockContents"`.
 */
export function useRoaKeeperLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof roaKeeperABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: roaKeeperABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof roaKeeperABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link roaKeeperABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useRoaKeeperSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof roaKeeperABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: roaKeeperABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof roaKeeperABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link roaKeeperABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useRoaKeeperSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof roaKeeperABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: roaKeeperABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof roaKeeperABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link roaKeeperABI}__ and `eventName` set to `"SetRoleAdmin"`.
 */
export function useRoaKeeperSetRoleAdminEvent(
  config: Omit<
    UseContractEventConfig<typeof roaKeeperABI, 'SetRoleAdmin'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: roaKeeperABI,
    eventName: 'SetRoleAdmin',
    ...config,
  } as UseContractEventConfig<typeof roaKeeperABI, 'SetRoleAdmin'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link irooKeeperABI}__.
 */
export function useIrooKeeper(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: irooKeeperABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link irooKeeperABI}__.
 */
export function useIrooKeeperWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof irooKeeperABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof irooKeeperABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof irooKeeperABI, TFunctionName>({
    abi: irooKeeperABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link irooKeeperABI}__ and `functionName` set to `"execOption"`.
 */
export function useIrooKeeperExecOption<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof irooKeeperABI, 'execOption'>['abi'],
        'execOption'
      > & { functionName?: 'execOption' }
    : UseContractWriteConfig<TMode, typeof irooKeeperABI, 'execOption'> & {
        abi?: never
        functionName?: 'execOption'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof irooKeeperABI, 'execOption'>({
    abi: irooKeeperABI,
    functionName: 'execOption',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link irooKeeperABI}__ and `functionName` set to `"execSwapOrder"`.
 */
export function useIrooKeeperExecSwapOrder<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof irooKeeperABI,
          'execSwapOrder'
        >['abi'],
        'execSwapOrder'
      > & { functionName?: 'execSwapOrder' }
    : UseContractWriteConfig<TMode, typeof irooKeeperABI, 'execSwapOrder'> & {
        abi?: never
        functionName?: 'execSwapOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof irooKeeperABI, 'execSwapOrder'>({
    abi: irooKeeperABI,
    functionName: 'execSwapOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link irooKeeperABI}__ and `functionName` set to `"lockSwapOrder"`.
 */
export function useIrooKeeperLockSwapOrder<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof irooKeeperABI,
          'lockSwapOrder'
        >['abi'],
        'lockSwapOrder'
      > & { functionName?: 'lockSwapOrder' }
    : UseContractWriteConfig<TMode, typeof irooKeeperABI, 'lockSwapOrder'> & {
        abi?: never
        functionName?: 'lockSwapOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof irooKeeperABI, 'lockSwapOrder'>({
    abi: irooKeeperABI,
    functionName: 'lockSwapOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link irooKeeperABI}__ and `functionName` set to `"placeSwapOrder"`.
 */
export function useIrooKeeperPlaceSwapOrder<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof irooKeeperABI,
          'placeSwapOrder'
        >['abi'],
        'placeSwapOrder'
      > & { functionName?: 'placeSwapOrder' }
    : UseContractWriteConfig<TMode, typeof irooKeeperABI, 'placeSwapOrder'> & {
        abi?: never
        functionName?: 'placeSwapOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof irooKeeperABI, 'placeSwapOrder'>({
    abi: irooKeeperABI,
    functionName: 'placeSwapOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link irooKeeperABI}__ and `functionName` set to `"releaseSwapOrder"`.
 */
export function useIrooKeeperReleaseSwapOrder<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof irooKeeperABI,
          'releaseSwapOrder'
        >['abi'],
        'releaseSwapOrder'
      > & { functionName?: 'releaseSwapOrder' }
    : UseContractWriteConfig<
        TMode,
        typeof irooKeeperABI,
        'releaseSwapOrder'
      > & {
        abi?: never
        functionName?: 'releaseSwapOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof irooKeeperABI, 'releaseSwapOrder'>({
    abi: irooKeeperABI,
    functionName: 'releaseSwapOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link irooKeeperABI}__ and `functionName` set to `"revokeSwapOrder"`.
 */
export function useIrooKeeperRevokeSwapOrder<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof irooKeeperABI,
          'revokeSwapOrder'
        >['abi'],
        'revokeSwapOrder'
      > & { functionName?: 'revokeSwapOrder' }
    : UseContractWriteConfig<TMode, typeof irooKeeperABI, 'revokeSwapOrder'> & {
        abi?: never
        functionName?: 'revokeSwapOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof irooKeeperABI, 'revokeSwapOrder'>({
    abi: irooKeeperABI,
    functionName: 'revokeSwapOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link irooKeeperABI}__ and `functionName` set to `"updateOracle"`.
 */
export function useIrooKeeperUpdateOracle<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof irooKeeperABI, 'updateOracle'>['abi'],
        'updateOracle'
      > & { functionName?: 'updateOracle' }
    : UseContractWriteConfig<TMode, typeof irooKeeperABI, 'updateOracle'> & {
        abi?: never
        functionName?: 'updateOracle'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof irooKeeperABI, 'updateOracle'>({
    abi: irooKeeperABI,
    functionName: 'updateOracle',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link irooKeeperABI}__.
 */
export function usePrepareIrooKeeperWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof irooKeeperABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: irooKeeperABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof irooKeeperABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link irooKeeperABI}__ and `functionName` set to `"execOption"`.
 */
export function usePrepareIrooKeeperExecOption(
  config: Omit<
    UsePrepareContractWriteConfig<typeof irooKeeperABI, 'execOption'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: irooKeeperABI,
    functionName: 'execOption',
    ...config,
  } as UsePrepareContractWriteConfig<typeof irooKeeperABI, 'execOption'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link irooKeeperABI}__ and `functionName` set to `"execSwapOrder"`.
 */
export function usePrepareIrooKeeperExecSwapOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof irooKeeperABI, 'execSwapOrder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: irooKeeperABI,
    functionName: 'execSwapOrder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof irooKeeperABI, 'execSwapOrder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link irooKeeperABI}__ and `functionName` set to `"lockSwapOrder"`.
 */
export function usePrepareIrooKeeperLockSwapOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof irooKeeperABI, 'lockSwapOrder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: irooKeeperABI,
    functionName: 'lockSwapOrder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof irooKeeperABI, 'lockSwapOrder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link irooKeeperABI}__ and `functionName` set to `"placeSwapOrder"`.
 */
export function usePrepareIrooKeeperPlaceSwapOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof irooKeeperABI, 'placeSwapOrder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: irooKeeperABI,
    functionName: 'placeSwapOrder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof irooKeeperABI, 'placeSwapOrder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link irooKeeperABI}__ and `functionName` set to `"releaseSwapOrder"`.
 */
export function usePrepareIrooKeeperReleaseSwapOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof irooKeeperABI, 'releaseSwapOrder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: irooKeeperABI,
    functionName: 'releaseSwapOrder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof irooKeeperABI, 'releaseSwapOrder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link irooKeeperABI}__ and `functionName` set to `"revokeSwapOrder"`.
 */
export function usePrepareIrooKeeperRevokeSwapOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof irooKeeperABI, 'revokeSwapOrder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: irooKeeperABI,
    functionName: 'revokeSwapOrder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof irooKeeperABI, 'revokeSwapOrder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link irooKeeperABI}__ and `functionName` set to `"updateOracle"`.
 */
export function usePrepareIrooKeeperUpdateOracle(
  config: Omit<
    UsePrepareContractWriteConfig<typeof irooKeeperABI, 'updateOracle'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: irooKeeperABI,
    functionName: 'updateOracle',
    ...config,
  } as UsePrepareContractWriteConfig<typeof irooKeeperABI, 'updateOracle'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link rocKeeperABI}__.
 */
export function useRocKeeper(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: rocKeeperABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rocKeeperABI}__.
 */
export function useRocKeeperRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof rocKeeperABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof rocKeeperABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: rocKeeperABI,
    ...config,
  } as UseContractReadConfig<typeof rocKeeperABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rocKeeperABI}__ and `functionName` set to `"getDK"`.
 */
export function useRocKeeperGetDk<
  TSelectData = ReadContractResult<typeof rocKeeperABI, 'getDK'>,
>(
  config: Omit<
    UseContractReadConfig<typeof rocKeeperABI, 'getDK', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rocKeeperABI,
    functionName: 'getDK',
    ...config,
  } as UseContractReadConfig<typeof rocKeeperABI, 'getDK', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rocKeeperABI}__ and `functionName` set to `"getOwner"`.
 */
export function useRocKeeperGetOwner<
  TSelectData = ReadContractResult<typeof rocKeeperABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof rocKeeperABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rocKeeperABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<typeof rocKeeperABI, 'getOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rocKeeperABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useRocKeeperGetRoleAdmin<
  TSelectData = ReadContractResult<typeof rocKeeperABI, 'getRoleAdmin'>,
>(
  config: Omit<
    UseContractReadConfig<typeof rocKeeperABI, 'getRoleAdmin', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rocKeeperABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<typeof rocKeeperABI, 'getRoleAdmin', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rocKeeperABI}__ and `functionName` set to `"hasRole"`.
 */
export function useRocKeeperHasRole<
  TSelectData = ReadContractResult<typeof rocKeeperABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof rocKeeperABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rocKeeperABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof rocKeeperABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rocKeeperABI}__ and `functionName` set to `"isFinalized"`.
 */
export function useRocKeeperIsFinalized<
  TSelectData = ReadContractResult<typeof rocKeeperABI, 'isFinalized'>,
>(
  config: Omit<
    UseContractReadConfig<typeof rocKeeperABI, 'isFinalized', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rocKeeperABI,
    functionName: 'isFinalized',
    ...config,
  } as UseContractReadConfig<typeof rocKeeperABI, 'isFinalized', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rocKeeperABI}__.
 */
export function useRocKeeperWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rocKeeperABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof rocKeeperABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rocKeeperABI, TFunctionName>({
    abi: rocKeeperABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rocKeeperABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useRocKeeperAbandonRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rocKeeperABI, 'abandonRole'>['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<TMode, typeof rocKeeperABI, 'abandonRole'> & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rocKeeperABI, 'abandonRole'>({
    abi: rocKeeperABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rocKeeperABI}__ and `functionName` set to `"acceptSHA"`.
 */
export function useRocKeeperAcceptSha<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rocKeeperABI, 'acceptSHA'>['abi'],
        'acceptSHA'
      > & { functionName?: 'acceptSHA' }
    : UseContractWriteConfig<TMode, typeof rocKeeperABI, 'acceptSHA'> & {
        abi?: never
        functionName?: 'acceptSHA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rocKeeperABI, 'acceptSHA'>({
    abi: rocKeeperABI,
    functionName: 'acceptSHA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rocKeeperABI}__ and `functionName` set to `"activateSHA"`.
 */
export function useRocKeeperActivateSha<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rocKeeperABI, 'activateSHA'>['abi'],
        'activateSHA'
      > & { functionName?: 'activateSHA' }
    : UseContractWriteConfig<TMode, typeof rocKeeperABI, 'activateSHA'> & {
        abi?: never
        functionName?: 'activateSHA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rocKeeperABI, 'activateSHA'>({
    abi: rocKeeperABI,
    functionName: 'activateSHA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rocKeeperABI}__ and `functionName` set to `"circulateSHA"`.
 */
export function useRocKeeperCirculateSha<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rocKeeperABI, 'circulateSHA'>['abi'],
        'circulateSHA'
      > & { functionName?: 'circulateSHA' }
    : UseContractWriteConfig<TMode, typeof rocKeeperABI, 'circulateSHA'> & {
        abi?: never
        functionName?: 'circulateSHA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rocKeeperABI, 'circulateSHA'>({
    abi: rocKeeperABI,
    functionName: 'circulateSHA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rocKeeperABI}__ and `functionName` set to `"createSHA"`.
 */
export function useRocKeeperCreateSha<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rocKeeperABI, 'createSHA'>['abi'],
        'createSHA'
      > & { functionName?: 'createSHA' }
    : UseContractWriteConfig<TMode, typeof rocKeeperABI, 'createSHA'> & {
        abi?: never
        functionName?: 'createSHA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rocKeeperABI, 'createSHA'>({
    abi: rocKeeperABI,
    functionName: 'createSHA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rocKeeperABI}__ and `functionName` set to `"grantRole"`.
 */
export function useRocKeeperGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rocKeeperABI, 'grantRole'>['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof rocKeeperABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rocKeeperABI, 'grantRole'>({
    abi: rocKeeperABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rocKeeperABI}__ and `functionName` set to `"init"`.
 */
export function useRocKeeperInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rocKeeperABI, 'init'>['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof rocKeeperABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rocKeeperABI, 'init'>({
    abi: rocKeeperABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rocKeeperABI}__ and `functionName` set to `"lockContents"`.
 */
export function useRocKeeperLockContents<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rocKeeperABI, 'lockContents'>['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<TMode, typeof rocKeeperABI, 'lockContents'> & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rocKeeperABI, 'lockContents'>({
    abi: rocKeeperABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rocKeeperABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useRocKeeperRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rocKeeperABI, 'renounceRole'>['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<TMode, typeof rocKeeperABI, 'renounceRole'> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rocKeeperABI, 'renounceRole'>({
    abi: rocKeeperABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rocKeeperABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useRocKeeperRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rocKeeperABI, 'revokeRole'>['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof rocKeeperABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rocKeeperABI, 'revokeRole'>({
    abi: rocKeeperABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rocKeeperABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useRocKeeperSetDirectKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof rocKeeperABI,
          'setDirectKeeper'
        >['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<TMode, typeof rocKeeperABI, 'setDirectKeeper'> & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rocKeeperABI, 'setDirectKeeper'>({
    abi: rocKeeperABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rocKeeperABI}__ and `functionName` set to `"setOwner"`.
 */
export function useRocKeeperSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rocKeeperABI, 'setOwner'>['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof rocKeeperABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rocKeeperABI, 'setOwner'>({
    abi: rocKeeperABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rocKeeperABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useRocKeeperSetRoleAdmin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rocKeeperABI, 'setRoleAdmin'>['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<TMode, typeof rocKeeperABI, 'setRoleAdmin'> & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rocKeeperABI, 'setRoleAdmin'>({
    abi: rocKeeperABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rocKeeperABI}__ and `functionName` set to `"signSHA"`.
 */
export function useRocKeeperSignSha<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rocKeeperABI, 'signSHA'>['abi'],
        'signSHA'
      > & { functionName?: 'signSHA' }
    : UseContractWriteConfig<TMode, typeof rocKeeperABI, 'signSHA'> & {
        abi?: never
        functionName?: 'signSHA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rocKeeperABI, 'signSHA'>({
    abi: rocKeeperABI,
    functionName: 'signSHA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rocKeeperABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function useRocKeeperTakeBackKeys<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rocKeeperABI, 'takeBackKeys'>['abi'],
        'takeBackKeys'
      > & { functionName?: 'takeBackKeys' }
    : UseContractWriteConfig<TMode, typeof rocKeeperABI, 'takeBackKeys'> & {
        abi?: never
        functionName?: 'takeBackKeys'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rocKeeperABI, 'takeBackKeys'>({
    abi: rocKeeperABI,
    functionName: 'takeBackKeys',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rocKeeperABI}__.
 */
export function usePrepareRocKeeperWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rocKeeperABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rocKeeperABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof rocKeeperABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rocKeeperABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareRocKeeperAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rocKeeperABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rocKeeperABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rocKeeperABI, 'abandonRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rocKeeperABI}__ and `functionName` set to `"acceptSHA"`.
 */
export function usePrepareRocKeeperAcceptSha(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rocKeeperABI, 'acceptSHA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rocKeeperABI,
    functionName: 'acceptSHA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rocKeeperABI, 'acceptSHA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rocKeeperABI}__ and `functionName` set to `"activateSHA"`.
 */
export function usePrepareRocKeeperActivateSha(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rocKeeperABI, 'activateSHA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rocKeeperABI,
    functionName: 'activateSHA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rocKeeperABI, 'activateSHA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rocKeeperABI}__ and `functionName` set to `"circulateSHA"`.
 */
export function usePrepareRocKeeperCirculateSha(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rocKeeperABI, 'circulateSHA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rocKeeperABI,
    functionName: 'circulateSHA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rocKeeperABI, 'circulateSHA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rocKeeperABI}__ and `functionName` set to `"createSHA"`.
 */
export function usePrepareRocKeeperCreateSha(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rocKeeperABI, 'createSHA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rocKeeperABI,
    functionName: 'createSHA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rocKeeperABI, 'createSHA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rocKeeperABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareRocKeeperGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rocKeeperABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rocKeeperABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rocKeeperABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rocKeeperABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareRocKeeperInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rocKeeperABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rocKeeperABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rocKeeperABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rocKeeperABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareRocKeeperLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rocKeeperABI, 'lockContents'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rocKeeperABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rocKeeperABI, 'lockContents'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rocKeeperABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareRocKeeperRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rocKeeperABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rocKeeperABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rocKeeperABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rocKeeperABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareRocKeeperRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rocKeeperABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rocKeeperABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rocKeeperABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rocKeeperABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareRocKeeperSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rocKeeperABI, 'setDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rocKeeperABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rocKeeperABI, 'setDirectKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rocKeeperABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareRocKeeperSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rocKeeperABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rocKeeperABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rocKeeperABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rocKeeperABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareRocKeeperSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rocKeeperABI, 'setRoleAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rocKeeperABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rocKeeperABI, 'setRoleAdmin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rocKeeperABI}__ and `functionName` set to `"signSHA"`.
 */
export function usePrepareRocKeeperSignSha(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rocKeeperABI, 'signSHA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rocKeeperABI,
    functionName: 'signSHA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rocKeeperABI, 'signSHA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rocKeeperABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function usePrepareRocKeeperTakeBackKeys(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rocKeeperABI, 'takeBackKeys'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rocKeeperABI,
    functionName: 'takeBackKeys',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rocKeeperABI, 'takeBackKeys'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rocKeeperABI}__.
 */
export function useRocKeeperEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof rocKeeperABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: rocKeeperABI,
    ...config,
  } as UseContractEventConfig<typeof rocKeeperABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rocKeeperABI}__ and `eventName` set to `"Init"`.
 */
export function useRocKeeperInitEvent(
  config: Omit<
    UseContractEventConfig<typeof rocKeeperABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: rocKeeperABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof rocKeeperABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rocKeeperABI}__ and `eventName` set to `"LockContents"`.
 */
export function useRocKeeperLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof rocKeeperABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: rocKeeperABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof rocKeeperABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rocKeeperABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useRocKeeperSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof rocKeeperABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: rocKeeperABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof rocKeeperABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rocKeeperABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useRocKeeperSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof rocKeeperABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: rocKeeperABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof rocKeeperABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rocKeeperABI}__ and `eventName` set to `"SetRoleAdmin"`.
 */
export function useRocKeeperSetRoleAdminEvent(
  config: Omit<
    UseContractEventConfig<typeof rocKeeperABI, 'SetRoleAdmin'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: rocKeeperABI,
    eventName: 'SetRoleAdmin',
    ...config,
  } as UseContractEventConfig<typeof rocKeeperABI, 'SetRoleAdmin'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link rodKeeperABI}__.
 */
export function useRodKeeper(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: rodKeeperABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rodKeeperABI}__.
 */
export function useRodKeeperRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof rodKeeperABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof rodKeeperABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: rodKeeperABI,
    ...config,
  } as UseContractReadConfig<typeof rodKeeperABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rodKeeperABI}__ and `functionName` set to `"getDK"`.
 */
export function useRodKeeperGetDk<
  TSelectData = ReadContractResult<typeof rodKeeperABI, 'getDK'>,
>(
  config: Omit<
    UseContractReadConfig<typeof rodKeeperABI, 'getDK', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rodKeeperABI,
    functionName: 'getDK',
    ...config,
  } as UseContractReadConfig<typeof rodKeeperABI, 'getDK', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rodKeeperABI}__ and `functionName` set to `"getOwner"`.
 */
export function useRodKeeperGetOwner<
  TSelectData = ReadContractResult<typeof rodKeeperABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof rodKeeperABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rodKeeperABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<typeof rodKeeperABI, 'getOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rodKeeperABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useRodKeeperGetRoleAdmin<
  TSelectData = ReadContractResult<typeof rodKeeperABI, 'getRoleAdmin'>,
>(
  config: Omit<
    UseContractReadConfig<typeof rodKeeperABI, 'getRoleAdmin', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rodKeeperABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<typeof rodKeeperABI, 'getRoleAdmin', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rodKeeperABI}__ and `functionName` set to `"hasRole"`.
 */
export function useRodKeeperHasRole<
  TSelectData = ReadContractResult<typeof rodKeeperABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof rodKeeperABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rodKeeperABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof rodKeeperABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rodKeeperABI}__ and `functionName` set to `"isFinalized"`.
 */
export function useRodKeeperIsFinalized<
  TSelectData = ReadContractResult<typeof rodKeeperABI, 'isFinalized'>,
>(
  config: Omit<
    UseContractReadConfig<typeof rodKeeperABI, 'isFinalized', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rodKeeperABI,
    functionName: 'isFinalized',
    ...config,
  } as UseContractReadConfig<typeof rodKeeperABI, 'isFinalized', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rodKeeperABI}__.
 */
export function useRodKeeperWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rodKeeperABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof rodKeeperABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rodKeeperABI, TFunctionName>({
    abi: rodKeeperABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rodKeeperABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useRodKeeperAbandonRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rodKeeperABI, 'abandonRole'>['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<TMode, typeof rodKeeperABI, 'abandonRole'> & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rodKeeperABI, 'abandonRole'>({
    abi: rodKeeperABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rodKeeperABI}__ and `functionName` set to `"grantRole"`.
 */
export function useRodKeeperGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rodKeeperABI, 'grantRole'>['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof rodKeeperABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rodKeeperABI, 'grantRole'>({
    abi: rodKeeperABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rodKeeperABI}__ and `functionName` set to `"init"`.
 */
export function useRodKeeperInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rodKeeperABI, 'init'>['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof rodKeeperABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rodKeeperABI, 'init'>({
    abi: rodKeeperABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rodKeeperABI}__ and `functionName` set to `"lockContents"`.
 */
export function useRodKeeperLockContents<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rodKeeperABI, 'lockContents'>['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<TMode, typeof rodKeeperABI, 'lockContents'> & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rodKeeperABI, 'lockContents'>({
    abi: rodKeeperABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rodKeeperABI}__ and `functionName` set to `"quitPosition"`.
 */
export function useRodKeeperQuitPosition<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rodKeeperABI, 'quitPosition'>['abi'],
        'quitPosition'
      > & { functionName?: 'quitPosition' }
    : UseContractWriteConfig<TMode, typeof rodKeeperABI, 'quitPosition'> & {
        abi?: never
        functionName?: 'quitPosition'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rodKeeperABI, 'quitPosition'>({
    abi: rodKeeperABI,
    functionName: 'quitPosition',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rodKeeperABI}__ and `functionName` set to `"removeDirector"`.
 */
export function useRodKeeperRemoveDirector<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof rodKeeperABI,
          'removeDirector'
        >['abi'],
        'removeDirector'
      > & { functionName?: 'removeDirector' }
    : UseContractWriteConfig<TMode, typeof rodKeeperABI, 'removeDirector'> & {
        abi?: never
        functionName?: 'removeDirector'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rodKeeperABI, 'removeDirector'>({
    abi: rodKeeperABI,
    functionName: 'removeDirector',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rodKeeperABI}__ and `functionName` set to `"removeOfficer"`.
 */
export function useRodKeeperRemoveOfficer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rodKeeperABI, 'removeOfficer'>['abi'],
        'removeOfficer'
      > & { functionName?: 'removeOfficer' }
    : UseContractWriteConfig<TMode, typeof rodKeeperABI, 'removeOfficer'> & {
        abi?: never
        functionName?: 'removeOfficer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rodKeeperABI, 'removeOfficer'>({
    abi: rodKeeperABI,
    functionName: 'removeOfficer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rodKeeperABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useRodKeeperRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rodKeeperABI, 'renounceRole'>['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<TMode, typeof rodKeeperABI, 'renounceRole'> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rodKeeperABI, 'renounceRole'>({
    abi: rodKeeperABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rodKeeperABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useRodKeeperRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rodKeeperABI, 'revokeRole'>['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof rodKeeperABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rodKeeperABI, 'revokeRole'>({
    abi: rodKeeperABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rodKeeperABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useRodKeeperSetDirectKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof rodKeeperABI,
          'setDirectKeeper'
        >['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<TMode, typeof rodKeeperABI, 'setDirectKeeper'> & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rodKeeperABI, 'setDirectKeeper'>({
    abi: rodKeeperABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rodKeeperABI}__ and `functionName` set to `"setOwner"`.
 */
export function useRodKeeperSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rodKeeperABI, 'setOwner'>['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof rodKeeperABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rodKeeperABI, 'setOwner'>({
    abi: rodKeeperABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rodKeeperABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useRodKeeperSetRoleAdmin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rodKeeperABI, 'setRoleAdmin'>['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<TMode, typeof rodKeeperABI, 'setRoleAdmin'> & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rodKeeperABI, 'setRoleAdmin'>({
    abi: rodKeeperABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rodKeeperABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function useRodKeeperTakeBackKeys<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rodKeeperABI, 'takeBackKeys'>['abi'],
        'takeBackKeys'
      > & { functionName?: 'takeBackKeys' }
    : UseContractWriteConfig<TMode, typeof rodKeeperABI, 'takeBackKeys'> & {
        abi?: never
        functionName?: 'takeBackKeys'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rodKeeperABI, 'takeBackKeys'>({
    abi: rodKeeperABI,
    functionName: 'takeBackKeys',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rodKeeperABI}__ and `functionName` set to `"takePosition"`.
 */
export function useRodKeeperTakePosition<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rodKeeperABI, 'takePosition'>['abi'],
        'takePosition'
      > & { functionName?: 'takePosition' }
    : UseContractWriteConfig<TMode, typeof rodKeeperABI, 'takePosition'> & {
        abi?: never
        functionName?: 'takePosition'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rodKeeperABI, 'takePosition'>({
    abi: rodKeeperABI,
    functionName: 'takePosition',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rodKeeperABI}__ and `functionName` set to `"takeSeat"`.
 */
export function useRodKeeperTakeSeat<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rodKeeperABI, 'takeSeat'>['abi'],
        'takeSeat'
      > & { functionName?: 'takeSeat' }
    : UseContractWriteConfig<TMode, typeof rodKeeperABI, 'takeSeat'> & {
        abi?: never
        functionName?: 'takeSeat'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rodKeeperABI, 'takeSeat'>({
    abi: rodKeeperABI,
    functionName: 'takeSeat',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rodKeeperABI}__.
 */
export function usePrepareRodKeeperWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rodKeeperABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rodKeeperABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof rodKeeperABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rodKeeperABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareRodKeeperAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rodKeeperABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rodKeeperABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rodKeeperABI, 'abandonRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rodKeeperABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareRodKeeperGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rodKeeperABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rodKeeperABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rodKeeperABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rodKeeperABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareRodKeeperInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rodKeeperABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rodKeeperABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rodKeeperABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rodKeeperABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareRodKeeperLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rodKeeperABI, 'lockContents'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rodKeeperABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rodKeeperABI, 'lockContents'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rodKeeperABI}__ and `functionName` set to `"quitPosition"`.
 */
export function usePrepareRodKeeperQuitPosition(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rodKeeperABI, 'quitPosition'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rodKeeperABI,
    functionName: 'quitPosition',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rodKeeperABI, 'quitPosition'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rodKeeperABI}__ and `functionName` set to `"removeDirector"`.
 */
export function usePrepareRodKeeperRemoveDirector(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rodKeeperABI, 'removeDirector'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rodKeeperABI,
    functionName: 'removeDirector',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rodKeeperABI, 'removeDirector'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rodKeeperABI}__ and `functionName` set to `"removeOfficer"`.
 */
export function usePrepareRodKeeperRemoveOfficer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rodKeeperABI, 'removeOfficer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rodKeeperABI,
    functionName: 'removeOfficer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rodKeeperABI, 'removeOfficer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rodKeeperABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareRodKeeperRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rodKeeperABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rodKeeperABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rodKeeperABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rodKeeperABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareRodKeeperRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rodKeeperABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rodKeeperABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rodKeeperABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rodKeeperABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareRodKeeperSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rodKeeperABI, 'setDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rodKeeperABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rodKeeperABI, 'setDirectKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rodKeeperABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareRodKeeperSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rodKeeperABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rodKeeperABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rodKeeperABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rodKeeperABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareRodKeeperSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rodKeeperABI, 'setRoleAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rodKeeperABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rodKeeperABI, 'setRoleAdmin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rodKeeperABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function usePrepareRodKeeperTakeBackKeys(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rodKeeperABI, 'takeBackKeys'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rodKeeperABI,
    functionName: 'takeBackKeys',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rodKeeperABI, 'takeBackKeys'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rodKeeperABI}__ and `functionName` set to `"takePosition"`.
 */
export function usePrepareRodKeeperTakePosition(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rodKeeperABI, 'takePosition'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rodKeeperABI,
    functionName: 'takePosition',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rodKeeperABI, 'takePosition'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rodKeeperABI}__ and `functionName` set to `"takeSeat"`.
 */
export function usePrepareRodKeeperTakeSeat(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rodKeeperABI, 'takeSeat'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rodKeeperABI,
    functionName: 'takeSeat',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rodKeeperABI, 'takeSeat'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rodKeeperABI}__.
 */
export function useRodKeeperEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof rodKeeperABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: rodKeeperABI,
    ...config,
  } as UseContractEventConfig<typeof rodKeeperABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rodKeeperABI}__ and `eventName` set to `"Init"`.
 */
export function useRodKeeperInitEvent(
  config: Omit<
    UseContractEventConfig<typeof rodKeeperABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: rodKeeperABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof rodKeeperABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rodKeeperABI}__ and `eventName` set to `"LockContents"`.
 */
export function useRodKeeperLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof rodKeeperABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: rodKeeperABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof rodKeeperABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rodKeeperABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useRodKeeperSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof rodKeeperABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: rodKeeperABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof rodKeeperABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rodKeeperABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useRodKeeperSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof rodKeeperABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: rodKeeperABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof rodKeeperABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rodKeeperABI}__ and `eventName` set to `"SetRoleAdmin"`.
 */
export function useRodKeeperSetRoleAdminEvent(
  config: Omit<
    UseContractEventConfig<typeof rodKeeperABI, 'SetRoleAdmin'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: rodKeeperABI,
    eventName: 'SetRoleAdmin',
    ...config,
  } as UseContractEventConfig<typeof rodKeeperABI, 'SetRoleAdmin'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link rooKeeperABI}__.
 */
export function useRooKeeper(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: rooKeeperABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rooKeeperABI}__.
 */
export function useRooKeeperRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof rooKeeperABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof rooKeeperABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: rooKeeperABI,
    ...config,
  } as UseContractReadConfig<typeof rooKeeperABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rooKeeperABI}__ and `functionName` set to `"getDK"`.
 */
export function useRooKeeperGetDk<
  TSelectData = ReadContractResult<typeof rooKeeperABI, 'getDK'>,
>(
  config: Omit<
    UseContractReadConfig<typeof rooKeeperABI, 'getDK', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rooKeeperABI,
    functionName: 'getDK',
    ...config,
  } as UseContractReadConfig<typeof rooKeeperABI, 'getDK', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rooKeeperABI}__ and `functionName` set to `"getOwner"`.
 */
export function useRooKeeperGetOwner<
  TSelectData = ReadContractResult<typeof rooKeeperABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof rooKeeperABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rooKeeperABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<typeof rooKeeperABI, 'getOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rooKeeperABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useRooKeeperGetRoleAdmin<
  TSelectData = ReadContractResult<typeof rooKeeperABI, 'getRoleAdmin'>,
>(
  config: Omit<
    UseContractReadConfig<typeof rooKeeperABI, 'getRoleAdmin', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rooKeeperABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<typeof rooKeeperABI, 'getRoleAdmin', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rooKeeperABI}__ and `functionName` set to `"hasRole"`.
 */
export function useRooKeeperHasRole<
  TSelectData = ReadContractResult<typeof rooKeeperABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof rooKeeperABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rooKeeperABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof rooKeeperABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rooKeeperABI}__ and `functionName` set to `"isFinalized"`.
 */
export function useRooKeeperIsFinalized<
  TSelectData = ReadContractResult<typeof rooKeeperABI, 'isFinalized'>,
>(
  config: Omit<
    UseContractReadConfig<typeof rooKeeperABI, 'isFinalized', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rooKeeperABI,
    functionName: 'isFinalized',
    ...config,
  } as UseContractReadConfig<typeof rooKeeperABI, 'isFinalized', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rooKeeperABI}__.
 */
export function useRooKeeperWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rooKeeperABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof rooKeeperABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rooKeeperABI, TFunctionName>({
    abi: rooKeeperABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rooKeeperABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useRooKeeperAbandonRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rooKeeperABI, 'abandonRole'>['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<TMode, typeof rooKeeperABI, 'abandonRole'> & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rooKeeperABI, 'abandonRole'>({
    abi: rooKeeperABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rooKeeperABI}__ and `functionName` set to `"execOption"`.
 */
export function useRooKeeperExecOption<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rooKeeperABI, 'execOption'>['abi'],
        'execOption'
      > & { functionName?: 'execOption' }
    : UseContractWriteConfig<TMode, typeof rooKeeperABI, 'execOption'> & {
        abi?: never
        functionName?: 'execOption'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rooKeeperABI, 'execOption'>({
    abi: rooKeeperABI,
    functionName: 'execOption',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rooKeeperABI}__ and `functionName` set to `"execSwapOrder"`.
 */
export function useRooKeeperExecSwapOrder<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rooKeeperABI, 'execSwapOrder'>['abi'],
        'execSwapOrder'
      > & { functionName?: 'execSwapOrder' }
    : UseContractWriteConfig<TMode, typeof rooKeeperABI, 'execSwapOrder'> & {
        abi?: never
        functionName?: 'execSwapOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rooKeeperABI, 'execSwapOrder'>({
    abi: rooKeeperABI,
    functionName: 'execSwapOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rooKeeperABI}__ and `functionName` set to `"grantRole"`.
 */
export function useRooKeeperGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rooKeeperABI, 'grantRole'>['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof rooKeeperABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rooKeeperABI, 'grantRole'>({
    abi: rooKeeperABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rooKeeperABI}__ and `functionName` set to `"init"`.
 */
export function useRooKeeperInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rooKeeperABI, 'init'>['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof rooKeeperABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rooKeeperABI, 'init'>({
    abi: rooKeeperABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rooKeeperABI}__ and `functionName` set to `"lockContents"`.
 */
export function useRooKeeperLockContents<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rooKeeperABI, 'lockContents'>['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<TMode, typeof rooKeeperABI, 'lockContents'> & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rooKeeperABI, 'lockContents'>({
    abi: rooKeeperABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rooKeeperABI}__ and `functionName` set to `"lockSwapOrder"`.
 */
export function useRooKeeperLockSwapOrder<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rooKeeperABI, 'lockSwapOrder'>['abi'],
        'lockSwapOrder'
      > & { functionName?: 'lockSwapOrder' }
    : UseContractWriteConfig<TMode, typeof rooKeeperABI, 'lockSwapOrder'> & {
        abi?: never
        functionName?: 'lockSwapOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rooKeeperABI, 'lockSwapOrder'>({
    abi: rooKeeperABI,
    functionName: 'lockSwapOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rooKeeperABI}__ and `functionName` set to `"placeSwapOrder"`.
 */
export function useRooKeeperPlaceSwapOrder<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof rooKeeperABI,
          'placeSwapOrder'
        >['abi'],
        'placeSwapOrder'
      > & { functionName?: 'placeSwapOrder' }
    : UseContractWriteConfig<TMode, typeof rooKeeperABI, 'placeSwapOrder'> & {
        abi?: never
        functionName?: 'placeSwapOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rooKeeperABI, 'placeSwapOrder'>({
    abi: rooKeeperABI,
    functionName: 'placeSwapOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rooKeeperABI}__ and `functionName` set to `"releaseSwapOrder"`.
 */
export function useRooKeeperReleaseSwapOrder<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof rooKeeperABI,
          'releaseSwapOrder'
        >['abi'],
        'releaseSwapOrder'
      > & { functionName?: 'releaseSwapOrder' }
    : UseContractWriteConfig<TMode, typeof rooKeeperABI, 'releaseSwapOrder'> & {
        abi?: never
        functionName?: 'releaseSwapOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rooKeeperABI, 'releaseSwapOrder'>({
    abi: rooKeeperABI,
    functionName: 'releaseSwapOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rooKeeperABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useRooKeeperRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rooKeeperABI, 'renounceRole'>['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<TMode, typeof rooKeeperABI, 'renounceRole'> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rooKeeperABI, 'renounceRole'>({
    abi: rooKeeperABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rooKeeperABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useRooKeeperRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rooKeeperABI, 'revokeRole'>['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof rooKeeperABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rooKeeperABI, 'revokeRole'>({
    abi: rooKeeperABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rooKeeperABI}__ and `functionName` set to `"revokeSwapOrder"`.
 */
export function useRooKeeperRevokeSwapOrder<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof rooKeeperABI,
          'revokeSwapOrder'
        >['abi'],
        'revokeSwapOrder'
      > & { functionName?: 'revokeSwapOrder' }
    : UseContractWriteConfig<TMode, typeof rooKeeperABI, 'revokeSwapOrder'> & {
        abi?: never
        functionName?: 'revokeSwapOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rooKeeperABI, 'revokeSwapOrder'>({
    abi: rooKeeperABI,
    functionName: 'revokeSwapOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rooKeeperABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useRooKeeperSetDirectKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof rooKeeperABI,
          'setDirectKeeper'
        >['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<TMode, typeof rooKeeperABI, 'setDirectKeeper'> & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rooKeeperABI, 'setDirectKeeper'>({
    abi: rooKeeperABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rooKeeperABI}__ and `functionName` set to `"setOwner"`.
 */
export function useRooKeeperSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rooKeeperABI, 'setOwner'>['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof rooKeeperABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rooKeeperABI, 'setOwner'>({
    abi: rooKeeperABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rooKeeperABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useRooKeeperSetRoleAdmin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rooKeeperABI, 'setRoleAdmin'>['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<TMode, typeof rooKeeperABI, 'setRoleAdmin'> & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rooKeeperABI, 'setRoleAdmin'>({
    abi: rooKeeperABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rooKeeperABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function useRooKeeperTakeBackKeys<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rooKeeperABI, 'takeBackKeys'>['abi'],
        'takeBackKeys'
      > & { functionName?: 'takeBackKeys' }
    : UseContractWriteConfig<TMode, typeof rooKeeperABI, 'takeBackKeys'> & {
        abi?: never
        functionName?: 'takeBackKeys'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rooKeeperABI, 'takeBackKeys'>({
    abi: rooKeeperABI,
    functionName: 'takeBackKeys',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rooKeeperABI}__ and `functionName` set to `"updateOracle"`.
 */
export function useRooKeeperUpdateOracle<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rooKeeperABI, 'updateOracle'>['abi'],
        'updateOracle'
      > & { functionName?: 'updateOracle' }
    : UseContractWriteConfig<TMode, typeof rooKeeperABI, 'updateOracle'> & {
        abi?: never
        functionName?: 'updateOracle'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rooKeeperABI, 'updateOracle'>({
    abi: rooKeeperABI,
    functionName: 'updateOracle',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rooKeeperABI}__.
 */
export function usePrepareRooKeeperWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rooKeeperABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rooKeeperABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof rooKeeperABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rooKeeperABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareRooKeeperAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rooKeeperABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rooKeeperABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rooKeeperABI, 'abandonRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rooKeeperABI}__ and `functionName` set to `"execOption"`.
 */
export function usePrepareRooKeeperExecOption(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rooKeeperABI, 'execOption'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rooKeeperABI,
    functionName: 'execOption',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rooKeeperABI, 'execOption'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rooKeeperABI}__ and `functionName` set to `"execSwapOrder"`.
 */
export function usePrepareRooKeeperExecSwapOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rooKeeperABI, 'execSwapOrder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rooKeeperABI,
    functionName: 'execSwapOrder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rooKeeperABI, 'execSwapOrder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rooKeeperABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareRooKeeperGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rooKeeperABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rooKeeperABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rooKeeperABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rooKeeperABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareRooKeeperInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rooKeeperABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rooKeeperABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rooKeeperABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rooKeeperABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareRooKeeperLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rooKeeperABI, 'lockContents'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rooKeeperABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rooKeeperABI, 'lockContents'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rooKeeperABI}__ and `functionName` set to `"lockSwapOrder"`.
 */
export function usePrepareRooKeeperLockSwapOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rooKeeperABI, 'lockSwapOrder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rooKeeperABI,
    functionName: 'lockSwapOrder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rooKeeperABI, 'lockSwapOrder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rooKeeperABI}__ and `functionName` set to `"placeSwapOrder"`.
 */
export function usePrepareRooKeeperPlaceSwapOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rooKeeperABI, 'placeSwapOrder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rooKeeperABI,
    functionName: 'placeSwapOrder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rooKeeperABI, 'placeSwapOrder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rooKeeperABI}__ and `functionName` set to `"releaseSwapOrder"`.
 */
export function usePrepareRooKeeperReleaseSwapOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rooKeeperABI, 'releaseSwapOrder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rooKeeperABI,
    functionName: 'releaseSwapOrder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rooKeeperABI, 'releaseSwapOrder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rooKeeperABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareRooKeeperRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rooKeeperABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rooKeeperABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rooKeeperABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rooKeeperABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareRooKeeperRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rooKeeperABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rooKeeperABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rooKeeperABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rooKeeperABI}__ and `functionName` set to `"revokeSwapOrder"`.
 */
export function usePrepareRooKeeperRevokeSwapOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rooKeeperABI, 'revokeSwapOrder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rooKeeperABI,
    functionName: 'revokeSwapOrder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rooKeeperABI, 'revokeSwapOrder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rooKeeperABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareRooKeeperSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rooKeeperABI, 'setDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rooKeeperABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rooKeeperABI, 'setDirectKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rooKeeperABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareRooKeeperSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rooKeeperABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rooKeeperABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rooKeeperABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rooKeeperABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareRooKeeperSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rooKeeperABI, 'setRoleAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rooKeeperABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rooKeeperABI, 'setRoleAdmin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rooKeeperABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function usePrepareRooKeeperTakeBackKeys(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rooKeeperABI, 'takeBackKeys'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rooKeeperABI,
    functionName: 'takeBackKeys',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rooKeeperABI, 'takeBackKeys'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rooKeeperABI}__ and `functionName` set to `"updateOracle"`.
 */
export function usePrepareRooKeeperUpdateOracle(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rooKeeperABI, 'updateOracle'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rooKeeperABI,
    functionName: 'updateOracle',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rooKeeperABI, 'updateOracle'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rooKeeperABI}__.
 */
export function useRooKeeperEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof rooKeeperABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: rooKeeperABI,
    ...config,
  } as UseContractEventConfig<typeof rooKeeperABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rooKeeperABI}__ and `eventName` set to `"Init"`.
 */
export function useRooKeeperInitEvent(
  config: Omit<
    UseContractEventConfig<typeof rooKeeperABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: rooKeeperABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof rooKeeperABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rooKeeperABI}__ and `eventName` set to `"LockContents"`.
 */
export function useRooKeeperLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof rooKeeperABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: rooKeeperABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof rooKeeperABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rooKeeperABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useRooKeeperSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof rooKeeperABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: rooKeeperABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof rooKeeperABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rooKeeperABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useRooKeeperSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof rooKeeperABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: rooKeeperABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof rooKeeperABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rooKeeperABI}__ and `eventName` set to `"SetRoleAdmin"`.
 */
export function useRooKeeperSetRoleAdminEvent(
  config: Omit<
    UseContractEventConfig<typeof rooKeeperABI, 'SetRoleAdmin'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: rooKeeperABI,
    eventName: 'SetRoleAdmin',
    ...config,
  } as UseContractEventConfig<typeof rooKeeperABI, 'SetRoleAdmin'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ropKeeperABI}__.
 */
export function useRopKeeper(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: ropKeeperABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ropKeeperABI}__.
 */
export function useRopKeeperRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ropKeeperABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ropKeeperABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ropKeeperABI,
    ...config,
  } as UseContractReadConfig<typeof ropKeeperABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ropKeeperABI}__ and `functionName` set to `"getDK"`.
 */
export function useRopKeeperGetDk<
  TSelectData = ReadContractResult<typeof ropKeeperABI, 'getDK'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ropKeeperABI, 'getDK', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ropKeeperABI,
    functionName: 'getDK',
    ...config,
  } as UseContractReadConfig<typeof ropKeeperABI, 'getDK', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ropKeeperABI}__ and `functionName` set to `"getOwner"`.
 */
export function useRopKeeperGetOwner<
  TSelectData = ReadContractResult<typeof ropKeeperABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ropKeeperABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ropKeeperABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<typeof ropKeeperABI, 'getOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ropKeeperABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useRopKeeperGetRoleAdmin<
  TSelectData = ReadContractResult<typeof ropKeeperABI, 'getRoleAdmin'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ropKeeperABI, 'getRoleAdmin', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ropKeeperABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<typeof ropKeeperABI, 'getRoleAdmin', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ropKeeperABI}__ and `functionName` set to `"hasRole"`.
 */
export function useRopKeeperHasRole<
  TSelectData = ReadContractResult<typeof ropKeeperABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ropKeeperABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ropKeeperABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof ropKeeperABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ropKeeperABI}__ and `functionName` set to `"isFinalized"`.
 */
export function useRopKeeperIsFinalized<
  TSelectData = ReadContractResult<typeof ropKeeperABI, 'isFinalized'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ropKeeperABI, 'isFinalized', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ropKeeperABI,
    functionName: 'isFinalized',
    ...config,
  } as UseContractReadConfig<typeof ropKeeperABI, 'isFinalized', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ropKeeperABI}__.
 */
export function useRopKeeperWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ropKeeperABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ropKeeperABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ropKeeperABI, TFunctionName>({
    abi: ropKeeperABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ropKeeperABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useRopKeeperAbandonRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ropKeeperABI, 'abandonRole'>['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<TMode, typeof ropKeeperABI, 'abandonRole'> & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ropKeeperABI, 'abandonRole'>({
    abi: ropKeeperABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ropKeeperABI}__ and `functionName` set to `"createPledge"`.
 */
export function useRopKeeperCreatePledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ropKeeperABI, 'createPledge'>['abi'],
        'createPledge'
      > & { functionName?: 'createPledge' }
    : UseContractWriteConfig<TMode, typeof ropKeeperABI, 'createPledge'> & {
        abi?: never
        functionName?: 'createPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ropKeeperABI, 'createPledge'>({
    abi: ropKeeperABI,
    functionName: 'createPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ropKeeperABI}__ and `functionName` set to `"execPledge"`.
 */
export function useRopKeeperExecPledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ropKeeperABI, 'execPledge'>['abi'],
        'execPledge'
      > & { functionName?: 'execPledge' }
    : UseContractWriteConfig<TMode, typeof ropKeeperABI, 'execPledge'> & {
        abi?: never
        functionName?: 'execPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ropKeeperABI, 'execPledge'>({
    abi: ropKeeperABI,
    functionName: 'execPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ropKeeperABI}__ and `functionName` set to `"extendPledge"`.
 */
export function useRopKeeperExtendPledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ropKeeperABI, 'extendPledge'>['abi'],
        'extendPledge'
      > & { functionName?: 'extendPledge' }
    : UseContractWriteConfig<TMode, typeof ropKeeperABI, 'extendPledge'> & {
        abi?: never
        functionName?: 'extendPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ropKeeperABI, 'extendPledge'>({
    abi: ropKeeperABI,
    functionName: 'extendPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ropKeeperABI}__ and `functionName` set to `"grantRole"`.
 */
export function useRopKeeperGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ropKeeperABI, 'grantRole'>['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof ropKeeperABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ropKeeperABI, 'grantRole'>({
    abi: ropKeeperABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ropKeeperABI}__ and `functionName` set to `"init"`.
 */
export function useRopKeeperInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ropKeeperABI, 'init'>['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof ropKeeperABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ropKeeperABI, 'init'>({
    abi: ropKeeperABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ropKeeperABI}__ and `functionName` set to `"lockContents"`.
 */
export function useRopKeeperLockContents<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ropKeeperABI, 'lockContents'>['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<TMode, typeof ropKeeperABI, 'lockContents'> & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ropKeeperABI, 'lockContents'>({
    abi: ropKeeperABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ropKeeperABI}__ and `functionName` set to `"lockPledge"`.
 */
export function useRopKeeperLockPledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ropKeeperABI, 'lockPledge'>['abi'],
        'lockPledge'
      > & { functionName?: 'lockPledge' }
    : UseContractWriteConfig<TMode, typeof ropKeeperABI, 'lockPledge'> & {
        abi?: never
        functionName?: 'lockPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ropKeeperABI, 'lockPledge'>({
    abi: ropKeeperABI,
    functionName: 'lockPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ropKeeperABI}__ and `functionName` set to `"refundDebt"`.
 */
export function useRopKeeperRefundDebt<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ropKeeperABI, 'refundDebt'>['abi'],
        'refundDebt'
      > & { functionName?: 'refundDebt' }
    : UseContractWriteConfig<TMode, typeof ropKeeperABI, 'refundDebt'> & {
        abi?: never
        functionName?: 'refundDebt'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ropKeeperABI, 'refundDebt'>({
    abi: ropKeeperABI,
    functionName: 'refundDebt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ropKeeperABI}__ and `functionName` set to `"releasePledge"`.
 */
export function useRopKeeperReleasePledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ropKeeperABI, 'releasePledge'>['abi'],
        'releasePledge'
      > & { functionName?: 'releasePledge' }
    : UseContractWriteConfig<TMode, typeof ropKeeperABI, 'releasePledge'> & {
        abi?: never
        functionName?: 'releasePledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ropKeeperABI, 'releasePledge'>({
    abi: ropKeeperABI,
    functionName: 'releasePledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ropKeeperABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useRopKeeperRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ropKeeperABI, 'renounceRole'>['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<TMode, typeof ropKeeperABI, 'renounceRole'> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ropKeeperABI, 'renounceRole'>({
    abi: ropKeeperABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ropKeeperABI}__ and `functionName` set to `"revokePledge"`.
 */
export function useRopKeeperRevokePledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ropKeeperABI, 'revokePledge'>['abi'],
        'revokePledge'
      > & { functionName?: 'revokePledge' }
    : UseContractWriteConfig<TMode, typeof ropKeeperABI, 'revokePledge'> & {
        abi?: never
        functionName?: 'revokePledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ropKeeperABI, 'revokePledge'>({
    abi: ropKeeperABI,
    functionName: 'revokePledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ropKeeperABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useRopKeeperRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ropKeeperABI, 'revokeRole'>['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof ropKeeperABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ropKeeperABI, 'revokeRole'>({
    abi: ropKeeperABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ropKeeperABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useRopKeeperSetDirectKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ropKeeperABI,
          'setDirectKeeper'
        >['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<TMode, typeof ropKeeperABI, 'setDirectKeeper'> & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ropKeeperABI, 'setDirectKeeper'>({
    abi: ropKeeperABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ropKeeperABI}__ and `functionName` set to `"setOwner"`.
 */
export function useRopKeeperSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ropKeeperABI, 'setOwner'>['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof ropKeeperABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ropKeeperABI, 'setOwner'>({
    abi: ropKeeperABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ropKeeperABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useRopKeeperSetRoleAdmin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ropKeeperABI, 'setRoleAdmin'>['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<TMode, typeof ropKeeperABI, 'setRoleAdmin'> & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ropKeeperABI, 'setRoleAdmin'>({
    abi: ropKeeperABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ropKeeperABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function useRopKeeperTakeBackKeys<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ropKeeperABI, 'takeBackKeys'>['abi'],
        'takeBackKeys'
      > & { functionName?: 'takeBackKeys' }
    : UseContractWriteConfig<TMode, typeof ropKeeperABI, 'takeBackKeys'> & {
        abi?: never
        functionName?: 'takeBackKeys'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ropKeeperABI, 'takeBackKeys'>({
    abi: ropKeeperABI,
    functionName: 'takeBackKeys',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ropKeeperABI}__ and `functionName` set to `"transferPledge"`.
 */
export function useRopKeeperTransferPledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ropKeeperABI,
          'transferPledge'
        >['abi'],
        'transferPledge'
      > & { functionName?: 'transferPledge' }
    : UseContractWriteConfig<TMode, typeof ropKeeperABI, 'transferPledge'> & {
        abi?: never
        functionName?: 'transferPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ropKeeperABI, 'transferPledge'>({
    abi: ropKeeperABI,
    functionName: 'transferPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ropKeeperABI}__.
 */
export function usePrepareRopKeeperWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ropKeeperABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ropKeeperABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ropKeeperABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ropKeeperABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareRopKeeperAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ropKeeperABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ropKeeperABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ropKeeperABI, 'abandonRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ropKeeperABI}__ and `functionName` set to `"createPledge"`.
 */
export function usePrepareRopKeeperCreatePledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ropKeeperABI, 'createPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ropKeeperABI,
    functionName: 'createPledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ropKeeperABI, 'createPledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ropKeeperABI}__ and `functionName` set to `"execPledge"`.
 */
export function usePrepareRopKeeperExecPledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ropKeeperABI, 'execPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ropKeeperABI,
    functionName: 'execPledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ropKeeperABI, 'execPledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ropKeeperABI}__ and `functionName` set to `"extendPledge"`.
 */
export function usePrepareRopKeeperExtendPledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ropKeeperABI, 'extendPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ropKeeperABI,
    functionName: 'extendPledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ropKeeperABI, 'extendPledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ropKeeperABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareRopKeeperGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ropKeeperABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ropKeeperABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ropKeeperABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ropKeeperABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareRopKeeperInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ropKeeperABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ropKeeperABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ropKeeperABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ropKeeperABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareRopKeeperLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ropKeeperABI, 'lockContents'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ropKeeperABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ropKeeperABI, 'lockContents'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ropKeeperABI}__ and `functionName` set to `"lockPledge"`.
 */
export function usePrepareRopKeeperLockPledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ropKeeperABI, 'lockPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ropKeeperABI,
    functionName: 'lockPledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ropKeeperABI, 'lockPledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ropKeeperABI}__ and `functionName` set to `"refundDebt"`.
 */
export function usePrepareRopKeeperRefundDebt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ropKeeperABI, 'refundDebt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ropKeeperABI,
    functionName: 'refundDebt',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ropKeeperABI, 'refundDebt'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ropKeeperABI}__ and `functionName` set to `"releasePledge"`.
 */
export function usePrepareRopKeeperReleasePledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ropKeeperABI, 'releasePledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ropKeeperABI,
    functionName: 'releasePledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ropKeeperABI, 'releasePledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ropKeeperABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareRopKeeperRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ropKeeperABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ropKeeperABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ropKeeperABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ropKeeperABI}__ and `functionName` set to `"revokePledge"`.
 */
export function usePrepareRopKeeperRevokePledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ropKeeperABI, 'revokePledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ropKeeperABI,
    functionName: 'revokePledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ropKeeperABI, 'revokePledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ropKeeperABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareRopKeeperRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ropKeeperABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ropKeeperABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ropKeeperABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ropKeeperABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareRopKeeperSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ropKeeperABI, 'setDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ropKeeperABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ropKeeperABI, 'setDirectKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ropKeeperABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareRopKeeperSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ropKeeperABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ropKeeperABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ropKeeperABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ropKeeperABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareRopKeeperSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ropKeeperABI, 'setRoleAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ropKeeperABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ropKeeperABI, 'setRoleAdmin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ropKeeperABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function usePrepareRopKeeperTakeBackKeys(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ropKeeperABI, 'takeBackKeys'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ropKeeperABI,
    functionName: 'takeBackKeys',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ropKeeperABI, 'takeBackKeys'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ropKeeperABI}__ and `functionName` set to `"transferPledge"`.
 */
export function usePrepareRopKeeperTransferPledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ropKeeperABI, 'transferPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ropKeeperABI,
    functionName: 'transferPledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ropKeeperABI, 'transferPledge'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ropKeeperABI}__.
 */
export function useRopKeeperEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ropKeeperABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ropKeeperABI,
    ...config,
  } as UseContractEventConfig<typeof ropKeeperABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ropKeeperABI}__ and `eventName` set to `"Init"`.
 */
export function useRopKeeperInitEvent(
  config: Omit<
    UseContractEventConfig<typeof ropKeeperABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ropKeeperABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof ropKeeperABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ropKeeperABI}__ and `eventName` set to `"LockContents"`.
 */
export function useRopKeeperLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof ropKeeperABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ropKeeperABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof ropKeeperABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ropKeeperABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useRopKeeperSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof ropKeeperABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ropKeeperABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof ropKeeperABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ropKeeperABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useRopKeeperSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof ropKeeperABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ropKeeperABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof ropKeeperABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ropKeeperABI}__ and `eventName` set to `"SetRoleAdmin"`.
 */
export function useRopKeeperSetRoleAdminEvent(
  config: Omit<
    UseContractEventConfig<typeof ropKeeperABI, 'SetRoleAdmin'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ropKeeperABI,
    eventName: 'SetRoleAdmin',
    ...config,
  } as UseContractEventConfig<typeof ropKeeperABI, 'SetRoleAdmin'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link rosKeeperABI}__.
 */
export function useRosKeeper(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: rosKeeperABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rosKeeperABI}__.
 */
export function useRosKeeperRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof rosKeeperABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof rosKeeperABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: rosKeeperABI,
    ...config,
  } as UseContractReadConfig<typeof rosKeeperABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"getDK"`.
 */
export function useRosKeeperGetDk<
  TSelectData = ReadContractResult<typeof rosKeeperABI, 'getDK'>,
>(
  config: Omit<
    UseContractReadConfig<typeof rosKeeperABI, 'getDK', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rosKeeperABI,
    functionName: 'getDK',
    ...config,
  } as UseContractReadConfig<typeof rosKeeperABI, 'getDK', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"getOwner"`.
 */
export function useRosKeeperGetOwner<
  TSelectData = ReadContractResult<typeof rosKeeperABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof rosKeeperABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rosKeeperABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<typeof rosKeeperABI, 'getOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useRosKeeperGetRoleAdmin<
  TSelectData = ReadContractResult<typeof rosKeeperABI, 'getRoleAdmin'>,
>(
  config: Omit<
    UseContractReadConfig<typeof rosKeeperABI, 'getRoleAdmin', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rosKeeperABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<typeof rosKeeperABI, 'getRoleAdmin', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"hasRole"`.
 */
export function useRosKeeperHasRole<
  TSelectData = ReadContractResult<typeof rosKeeperABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof rosKeeperABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rosKeeperABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof rosKeeperABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"isFinalized"`.
 */
export function useRosKeeperIsFinalized<
  TSelectData = ReadContractResult<typeof rosKeeperABI, 'isFinalized'>,
>(
  config: Omit<
    UseContractReadConfig<typeof rosKeeperABI, 'isFinalized', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rosKeeperABI,
    functionName: 'isFinalized',
    ...config,
  } as UseContractReadConfig<typeof rosKeeperABI, 'isFinalized', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rosKeeperABI}__.
 */
export function useRosKeeperWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rosKeeperABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof rosKeeperABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rosKeeperABI, TFunctionName>({
    abi: rosKeeperABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useRosKeeperAbandonRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rosKeeperABI, 'abandonRole'>['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<TMode, typeof rosKeeperABI, 'abandonRole'> & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rosKeeperABI, 'abandonRole'>({
    abi: rosKeeperABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"createSwap"`.
 */
export function useRosKeeperCreateSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rosKeeperABI, 'createSwap'>['abi'],
        'createSwap'
      > & { functionName?: 'createSwap' }
    : UseContractWriteConfig<TMode, typeof rosKeeperABI, 'createSwap'> & {
        abi?: never
        functionName?: 'createSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rosKeeperABI, 'createSwap'>({
    abi: rosKeeperABI,
    functionName: 'createSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"crystalizeSwap"`.
 */
export function useRosKeeperCrystalizeSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof rosKeeperABI,
          'crystalizeSwap'
        >['abi'],
        'crystalizeSwap'
      > & { functionName?: 'crystalizeSwap' }
    : UseContractWriteConfig<TMode, typeof rosKeeperABI, 'crystalizeSwap'> & {
        abi?: never
        functionName?: 'crystalizeSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rosKeeperABI, 'crystalizeSwap'>({
    abi: rosKeeperABI,
    functionName: 'crystalizeSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"execSwap"`.
 */
export function useRosKeeperExecSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rosKeeperABI, 'execSwap'>['abi'],
        'execSwap'
      > & { functionName?: 'execSwap' }
    : UseContractWriteConfig<TMode, typeof rosKeeperABI, 'execSwap'> & {
        abi?: never
        functionName?: 'execSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rosKeeperABI, 'execSwap'>({
    abi: rosKeeperABI,
    functionName: 'execSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"grantRole"`.
 */
export function useRosKeeperGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rosKeeperABI, 'grantRole'>['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof rosKeeperABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rosKeeperABI, 'grantRole'>({
    abi: rosKeeperABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"init"`.
 */
export function useRosKeeperInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rosKeeperABI, 'init'>['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof rosKeeperABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rosKeeperABI, 'init'>({
    abi: rosKeeperABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"lockContents"`.
 */
export function useRosKeeperLockContents<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rosKeeperABI, 'lockContents'>['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<TMode, typeof rosKeeperABI, 'lockContents'> & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rosKeeperABI, 'lockContents'>({
    abi: rosKeeperABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"lockSwap"`.
 */
export function useRosKeeperLockSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rosKeeperABI, 'lockSwap'>['abi'],
        'lockSwap'
      > & { functionName?: 'lockSwap' }
    : UseContractWriteConfig<TMode, typeof rosKeeperABI, 'lockSwap'> & {
        abi?: never
        functionName?: 'lockSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rosKeeperABI, 'lockSwap'>({
    abi: rosKeeperABI,
    functionName: 'lockSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"releaseSwap"`.
 */
export function useRosKeeperReleaseSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rosKeeperABI, 'releaseSwap'>['abi'],
        'releaseSwap'
      > & { functionName?: 'releaseSwap' }
    : UseContractWriteConfig<TMode, typeof rosKeeperABI, 'releaseSwap'> & {
        abi?: never
        functionName?: 'releaseSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rosKeeperABI, 'releaseSwap'>({
    abi: rosKeeperABI,
    functionName: 'releaseSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useRosKeeperRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rosKeeperABI, 'renounceRole'>['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<TMode, typeof rosKeeperABI, 'renounceRole'> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rosKeeperABI, 'renounceRole'>({
    abi: rosKeeperABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"requestToBuy"`.
 */
export function useRosKeeperRequestToBuy<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rosKeeperABI, 'requestToBuy'>['abi'],
        'requestToBuy'
      > & { functionName?: 'requestToBuy' }
    : UseContractWriteConfig<TMode, typeof rosKeeperABI, 'requestToBuy'> & {
        abi?: never
        functionName?: 'requestToBuy'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rosKeeperABI, 'requestToBuy'>({
    abi: rosKeeperABI,
    functionName: 'requestToBuy',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useRosKeeperRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rosKeeperABI, 'revokeRole'>['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof rosKeeperABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rosKeeperABI, 'revokeRole'>({
    abi: rosKeeperABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"revokeSwap"`.
 */
export function useRosKeeperRevokeSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rosKeeperABI, 'revokeSwap'>['abi'],
        'revokeSwap'
      > & { functionName?: 'revokeSwap' }
    : UseContractWriteConfig<TMode, typeof rosKeeperABI, 'revokeSwap'> & {
        abi?: never
        functionName?: 'revokeSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rosKeeperABI, 'revokeSwap'>({
    abi: rosKeeperABI,
    functionName: 'revokeSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useRosKeeperSetDirectKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof rosKeeperABI,
          'setDirectKeeper'
        >['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<TMode, typeof rosKeeperABI, 'setDirectKeeper'> & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rosKeeperABI, 'setDirectKeeper'>({
    abi: rosKeeperABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"setOwner"`.
 */
export function useRosKeeperSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rosKeeperABI, 'setOwner'>['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof rosKeeperABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rosKeeperABI, 'setOwner'>({
    abi: rosKeeperABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useRosKeeperSetRoleAdmin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rosKeeperABI, 'setRoleAdmin'>['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<TMode, typeof rosKeeperABI, 'setRoleAdmin'> & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rosKeeperABI, 'setRoleAdmin'>({
    abi: rosKeeperABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function useRosKeeperTakeBackKeys<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rosKeeperABI, 'takeBackKeys'>['abi'],
        'takeBackKeys'
      > & { functionName?: 'takeBackKeys' }
    : UseContractWriteConfig<TMode, typeof rosKeeperABI, 'takeBackKeys'> & {
        abi?: never
        functionName?: 'takeBackKeys'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rosKeeperABI, 'takeBackKeys'>({
    abi: rosKeeperABI,
    functionName: 'takeBackKeys',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"transferSwap"`.
 */
export function useRosKeeperTransferSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rosKeeperABI, 'transferSwap'>['abi'],
        'transferSwap'
      > & { functionName?: 'transferSwap' }
    : UseContractWriteConfig<TMode, typeof rosKeeperABI, 'transferSwap'> & {
        abi?: never
        functionName?: 'transferSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rosKeeperABI, 'transferSwap'>({
    abi: rosKeeperABI,
    functionName: 'transferSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rosKeeperABI}__.
 */
export function usePrepareRosKeeperWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rosKeeperABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rosKeeperABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof rosKeeperABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareRosKeeperAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rosKeeperABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rosKeeperABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rosKeeperABI, 'abandonRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"createSwap"`.
 */
export function usePrepareRosKeeperCreateSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rosKeeperABI, 'createSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rosKeeperABI,
    functionName: 'createSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rosKeeperABI, 'createSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"crystalizeSwap"`.
 */
export function usePrepareRosKeeperCrystalizeSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rosKeeperABI, 'crystalizeSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rosKeeperABI,
    functionName: 'crystalizeSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rosKeeperABI, 'crystalizeSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"execSwap"`.
 */
export function usePrepareRosKeeperExecSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rosKeeperABI, 'execSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rosKeeperABI,
    functionName: 'execSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rosKeeperABI, 'execSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareRosKeeperGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rosKeeperABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rosKeeperABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rosKeeperABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareRosKeeperInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rosKeeperABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rosKeeperABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rosKeeperABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareRosKeeperLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rosKeeperABI, 'lockContents'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rosKeeperABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rosKeeperABI, 'lockContents'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"lockSwap"`.
 */
export function usePrepareRosKeeperLockSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rosKeeperABI, 'lockSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rosKeeperABI,
    functionName: 'lockSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rosKeeperABI, 'lockSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"releaseSwap"`.
 */
export function usePrepareRosKeeperReleaseSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rosKeeperABI, 'releaseSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rosKeeperABI,
    functionName: 'releaseSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rosKeeperABI, 'releaseSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareRosKeeperRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rosKeeperABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rosKeeperABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rosKeeperABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"requestToBuy"`.
 */
export function usePrepareRosKeeperRequestToBuy(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rosKeeperABI, 'requestToBuy'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rosKeeperABI,
    functionName: 'requestToBuy',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rosKeeperABI, 'requestToBuy'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareRosKeeperRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rosKeeperABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rosKeeperABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rosKeeperABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"revokeSwap"`.
 */
export function usePrepareRosKeeperRevokeSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rosKeeperABI, 'revokeSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rosKeeperABI,
    functionName: 'revokeSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rosKeeperABI, 'revokeSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareRosKeeperSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rosKeeperABI, 'setDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rosKeeperABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rosKeeperABI, 'setDirectKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareRosKeeperSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rosKeeperABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rosKeeperABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rosKeeperABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareRosKeeperSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rosKeeperABI, 'setRoleAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rosKeeperABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rosKeeperABI, 'setRoleAdmin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function usePrepareRosKeeperTakeBackKeys(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rosKeeperABI, 'takeBackKeys'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rosKeeperABI,
    functionName: 'takeBackKeys',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rosKeeperABI, 'takeBackKeys'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"transferSwap"`.
 */
export function usePrepareRosKeeperTransferSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rosKeeperABI, 'transferSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rosKeeperABI,
    functionName: 'transferSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rosKeeperABI, 'transferSwap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rosKeeperABI}__.
 */
export function useRosKeeperEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof rosKeeperABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: rosKeeperABI,
    ...config,
  } as UseContractEventConfig<typeof rosKeeperABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rosKeeperABI}__ and `eventName` set to `"Init"`.
 */
export function useRosKeeperInitEvent(
  config: Omit<
    UseContractEventConfig<typeof rosKeeperABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: rosKeeperABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof rosKeeperABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rosKeeperABI}__ and `eventName` set to `"LockContents"`.
 */
export function useRosKeeperLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof rosKeeperABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: rosKeeperABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof rosKeeperABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rosKeeperABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useRosKeeperSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof rosKeeperABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: rosKeeperABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof rosKeeperABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rosKeeperABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useRosKeeperSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof rosKeeperABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: rosKeeperABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof rosKeeperABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rosKeeperABI}__ and `eventName` set to `"SetRoleAdmin"`.
 */
export function useRosKeeperSetRoleAdminEvent(
  config: Omit<
    UseContractEventConfig<typeof rosKeeperABI, 'SetRoleAdmin'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: rosKeeperABI,
    eventName: 'SetRoleAdmin',
    ...config,
  } as UseContractEventConfig<typeof rosKeeperABI, 'SetRoleAdmin'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link shaKeeperABI}__.
 */
export function useShaKeeper(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: shaKeeperABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shaKeeperABI}__.
 */
export function useShaKeeperRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof shaKeeperABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof shaKeeperABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: shaKeeperABI,
    ...config,
  } as UseContractReadConfig<typeof shaKeeperABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"getDK"`.
 */
export function useShaKeeperGetDk<
  TSelectData = ReadContractResult<typeof shaKeeperABI, 'getDK'>,
>(
  config: Omit<
    UseContractReadConfig<typeof shaKeeperABI, 'getDK', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shaKeeperABI,
    functionName: 'getDK',
    ...config,
  } as UseContractReadConfig<typeof shaKeeperABI, 'getDK', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"getOwner"`.
 */
export function useShaKeeperGetOwner<
  TSelectData = ReadContractResult<typeof shaKeeperABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof shaKeeperABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shaKeeperABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<typeof shaKeeperABI, 'getOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useShaKeeperGetRoleAdmin<
  TSelectData = ReadContractResult<typeof shaKeeperABI, 'getRoleAdmin'>,
>(
  config: Omit<
    UseContractReadConfig<typeof shaKeeperABI, 'getRoleAdmin', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shaKeeperABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<typeof shaKeeperABI, 'getRoleAdmin', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"hasRole"`.
 */
export function useShaKeeperHasRole<
  TSelectData = ReadContractResult<typeof shaKeeperABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof shaKeeperABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shaKeeperABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof shaKeeperABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"isFinalized"`.
 */
export function useShaKeeperIsFinalized<
  TSelectData = ReadContractResult<typeof shaKeeperABI, 'isFinalized'>,
>(
  config: Omit<
    UseContractReadConfig<typeof shaKeeperABI, 'isFinalized', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shaKeeperABI,
    functionName: 'isFinalized',
    ...config,
  } as UseContractReadConfig<typeof shaKeeperABI, 'isFinalized', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shaKeeperABI}__.
 */
export function useShaKeeperWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof shaKeeperABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof shaKeeperABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shaKeeperABI, TFunctionName>({
    abi: shaKeeperABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useShaKeeperAbandonRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof shaKeeperABI, 'abandonRole'>['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<TMode, typeof shaKeeperABI, 'abandonRole'> & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shaKeeperABI, 'abandonRole'>({
    abi: shaKeeperABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"acceptAlongDeal"`.
 */
export function useShaKeeperAcceptAlongDeal<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shaKeeperABI,
          'acceptAlongDeal'
        >['abi'],
        'acceptAlongDeal'
      > & { functionName?: 'acceptAlongDeal' }
    : UseContractWriteConfig<TMode, typeof shaKeeperABI, 'acceptAlongDeal'> & {
        abi?: never
        functionName?: 'acceptAlongDeal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shaKeeperABI, 'acceptAlongDeal'>({
    abi: shaKeeperABI,
    functionName: 'acceptAlongDeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"computeFirstRefusal"`.
 */
export function useShaKeeperComputeFirstRefusal<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shaKeeperABI,
          'computeFirstRefusal'
        >['abi'],
        'computeFirstRefusal'
      > & { functionName?: 'computeFirstRefusal' }
    : UseContractWriteConfig<
        TMode,
        typeof shaKeeperABI,
        'computeFirstRefusal'
      > & {
        abi?: never
        functionName?: 'computeFirstRefusal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shaKeeperABI, 'computeFirstRefusal'>({
    abi: shaKeeperABI,
    functionName: 'computeFirstRefusal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"execAlongRight"`.
 */
export function useShaKeeperExecAlongRight<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shaKeeperABI,
          'execAlongRight'
        >['abi'],
        'execAlongRight'
      > & { functionName?: 'execAlongRight' }
    : UseContractWriteConfig<TMode, typeof shaKeeperABI, 'execAlongRight'> & {
        abi?: never
        functionName?: 'execAlongRight'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shaKeeperABI, 'execAlongRight'>({
    abi: shaKeeperABI,
    functionName: 'execAlongRight',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"execAntiDilution"`.
 */
export function useShaKeeperExecAntiDilution<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shaKeeperABI,
          'execAntiDilution'
        >['abi'],
        'execAntiDilution'
      > & { functionName?: 'execAntiDilution' }
    : UseContractWriteConfig<TMode, typeof shaKeeperABI, 'execAntiDilution'> & {
        abi?: never
        functionName?: 'execAntiDilution'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shaKeeperABI, 'execAntiDilution'>({
    abi: shaKeeperABI,
    functionName: 'execAntiDilution',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"execFirstRefusal"`.
 */
export function useShaKeeperExecFirstRefusal<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shaKeeperABI,
          'execFirstRefusal'
        >['abi'],
        'execFirstRefusal'
      > & { functionName?: 'execFirstRefusal' }
    : UseContractWriteConfig<TMode, typeof shaKeeperABI, 'execFirstRefusal'> & {
        abi?: never
        functionName?: 'execFirstRefusal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shaKeeperABI, 'execFirstRefusal'>({
    abi: shaKeeperABI,
    functionName: 'execFirstRefusal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"grantRole"`.
 */
export function useShaKeeperGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof shaKeeperABI, 'grantRole'>['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof shaKeeperABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shaKeeperABI, 'grantRole'>({
    abi: shaKeeperABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"init"`.
 */
export function useShaKeeperInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof shaKeeperABI, 'init'>['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof shaKeeperABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shaKeeperABI, 'init'>({
    abi: shaKeeperABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"lockContents"`.
 */
export function useShaKeeperLockContents<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof shaKeeperABI, 'lockContents'>['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<TMode, typeof shaKeeperABI, 'lockContents'> & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shaKeeperABI, 'lockContents'>({
    abi: shaKeeperABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useShaKeeperRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof shaKeeperABI, 'renounceRole'>['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<TMode, typeof shaKeeperABI, 'renounceRole'> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shaKeeperABI, 'renounceRole'>({
    abi: shaKeeperABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useShaKeeperRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof shaKeeperABI, 'revokeRole'>['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof shaKeeperABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shaKeeperABI, 'revokeRole'>({
    abi: shaKeeperABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useShaKeeperSetDirectKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shaKeeperABI,
          'setDirectKeeper'
        >['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<TMode, typeof shaKeeperABI, 'setDirectKeeper'> & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shaKeeperABI, 'setDirectKeeper'>({
    abi: shaKeeperABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"setOwner"`.
 */
export function useShaKeeperSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof shaKeeperABI, 'setOwner'>['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof shaKeeperABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shaKeeperABI, 'setOwner'>({
    abi: shaKeeperABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useShaKeeperSetRoleAdmin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof shaKeeperABI, 'setRoleAdmin'>['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<TMode, typeof shaKeeperABI, 'setRoleAdmin'> & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shaKeeperABI, 'setRoleAdmin'>({
    abi: shaKeeperABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function useShaKeeperTakeBackKeys<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof shaKeeperABI, 'takeBackKeys'>['abi'],
        'takeBackKeys'
      > & { functionName?: 'takeBackKeys' }
    : UseContractWriteConfig<TMode, typeof shaKeeperABI, 'takeBackKeys'> & {
        abi?: never
        functionName?: 'takeBackKeys'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shaKeeperABI, 'takeBackKeys'>({
    abi: shaKeeperABI,
    functionName: 'takeBackKeys',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"takeGiftShares"`.
 */
export function useShaKeeperTakeGiftShares<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shaKeeperABI,
          'takeGiftShares'
        >['abi'],
        'takeGiftShares'
      > & { functionName?: 'takeGiftShares' }
    : UseContractWriteConfig<TMode, typeof shaKeeperABI, 'takeGiftShares'> & {
        abi?: never
        functionName?: 'takeGiftShares'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shaKeeperABI, 'takeGiftShares'>({
    abi: shaKeeperABI,
    functionName: 'takeGiftShares',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shaKeeperABI}__.
 */
export function usePrepareShaKeeperWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof shaKeeperABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shaKeeperABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof shaKeeperABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareShaKeeperAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof shaKeeperABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shaKeeperABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof shaKeeperABI, 'abandonRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"acceptAlongDeal"`.
 */
export function usePrepareShaKeeperAcceptAlongDeal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof shaKeeperABI, 'acceptAlongDeal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shaKeeperABI,
    functionName: 'acceptAlongDeal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof shaKeeperABI, 'acceptAlongDeal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"computeFirstRefusal"`.
 */
export function usePrepareShaKeeperComputeFirstRefusal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof shaKeeperABI, 'computeFirstRefusal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shaKeeperABI,
    functionName: 'computeFirstRefusal',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof shaKeeperABI,
    'computeFirstRefusal'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"execAlongRight"`.
 */
export function usePrepareShaKeeperExecAlongRight(
  config: Omit<
    UsePrepareContractWriteConfig<typeof shaKeeperABI, 'execAlongRight'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shaKeeperABI,
    functionName: 'execAlongRight',
    ...config,
  } as UsePrepareContractWriteConfig<typeof shaKeeperABI, 'execAlongRight'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"execAntiDilution"`.
 */
export function usePrepareShaKeeperExecAntiDilution(
  config: Omit<
    UsePrepareContractWriteConfig<typeof shaKeeperABI, 'execAntiDilution'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shaKeeperABI,
    functionName: 'execAntiDilution',
    ...config,
  } as UsePrepareContractWriteConfig<typeof shaKeeperABI, 'execAntiDilution'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"execFirstRefusal"`.
 */
export function usePrepareShaKeeperExecFirstRefusal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof shaKeeperABI, 'execFirstRefusal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shaKeeperABI,
    functionName: 'execFirstRefusal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof shaKeeperABI, 'execFirstRefusal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareShaKeeperGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof shaKeeperABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shaKeeperABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof shaKeeperABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareShaKeeperInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof shaKeeperABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shaKeeperABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof shaKeeperABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareShaKeeperLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<typeof shaKeeperABI, 'lockContents'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shaKeeperABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<typeof shaKeeperABI, 'lockContents'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareShaKeeperRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof shaKeeperABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shaKeeperABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof shaKeeperABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareShaKeeperRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof shaKeeperABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shaKeeperABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof shaKeeperABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareShaKeeperSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof shaKeeperABI, 'setDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shaKeeperABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof shaKeeperABI, 'setDirectKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareShaKeeperSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof shaKeeperABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shaKeeperABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof shaKeeperABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareShaKeeperSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof shaKeeperABI, 'setRoleAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shaKeeperABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof shaKeeperABI, 'setRoleAdmin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function usePrepareShaKeeperTakeBackKeys(
  config: Omit<
    UsePrepareContractWriteConfig<typeof shaKeeperABI, 'takeBackKeys'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shaKeeperABI,
    functionName: 'takeBackKeys',
    ...config,
  } as UsePrepareContractWriteConfig<typeof shaKeeperABI, 'takeBackKeys'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"takeGiftShares"`.
 */
export function usePrepareShaKeeperTakeGiftShares(
  config: Omit<
    UsePrepareContractWriteConfig<typeof shaKeeperABI, 'takeGiftShares'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shaKeeperABI,
    functionName: 'takeGiftShares',
    ...config,
  } as UsePrepareContractWriteConfig<typeof shaKeeperABI, 'takeGiftShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link shaKeeperABI}__.
 */
export function useShaKeeperEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof shaKeeperABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: shaKeeperABI,
    ...config,
  } as UseContractEventConfig<typeof shaKeeperABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link shaKeeperABI}__ and `eventName` set to `"Init"`.
 */
export function useShaKeeperInitEvent(
  config: Omit<
    UseContractEventConfig<typeof shaKeeperABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: shaKeeperABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof shaKeeperABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link shaKeeperABI}__ and `eventName` set to `"LockContents"`.
 */
export function useShaKeeperLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof shaKeeperABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: shaKeeperABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof shaKeeperABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link shaKeeperABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useShaKeeperSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof shaKeeperABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: shaKeeperABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof shaKeeperABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link shaKeeperABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useShaKeeperSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof shaKeeperABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: shaKeeperABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof shaKeeperABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link shaKeeperABI}__ and `eventName` set to `"SetRoleAdmin"`.
 */
export function useShaKeeperSetRoleAdminEvent(
  config: Omit<
    UseContractEventConfig<typeof shaKeeperABI, 'SetRoleAdmin'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: shaKeeperABI,
    eventName: 'SetRoleAdmin',
    ...config,
  } as UseContractEventConfig<typeof shaKeeperABI, 'SetRoleAdmin'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link romKeeperABI}__.
 */
export function useRomKeeper(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: romKeeperABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link romKeeperABI}__.
 */
export function useRomKeeperRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof romKeeperABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof romKeeperABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: romKeeperABI,
    ...config,
  } as UseContractReadConfig<typeof romKeeperABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"getDK"`.
 */
export function useRomKeeperGetDk<
  TSelectData = ReadContractResult<typeof romKeeperABI, 'getDK'>,
>(
  config: Omit<
    UseContractReadConfig<typeof romKeeperABI, 'getDK', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: romKeeperABI,
    functionName: 'getDK',
    ...config,
  } as UseContractReadConfig<typeof romKeeperABI, 'getDK', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"getOwner"`.
 */
export function useRomKeeperGetOwner<
  TSelectData = ReadContractResult<typeof romKeeperABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof romKeeperABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: romKeeperABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<typeof romKeeperABI, 'getOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useRomKeeperGetRoleAdmin<
  TSelectData = ReadContractResult<typeof romKeeperABI, 'getRoleAdmin'>,
>(
  config: Omit<
    UseContractReadConfig<typeof romKeeperABI, 'getRoleAdmin', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: romKeeperABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<typeof romKeeperABI, 'getRoleAdmin', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"hasRole"`.
 */
export function useRomKeeperHasRole<
  TSelectData = ReadContractResult<typeof romKeeperABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof romKeeperABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: romKeeperABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof romKeeperABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"isFinalized"`.
 */
export function useRomKeeperIsFinalized<
  TSelectData = ReadContractResult<typeof romKeeperABI, 'isFinalized'>,
>(
  config: Omit<
    UseContractReadConfig<typeof romKeeperABI, 'isFinalized', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: romKeeperABI,
    functionName: 'isFinalized',
    ...config,
  } as UseContractReadConfig<typeof romKeeperABI, 'isFinalized', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link romKeeperABI}__.
 */
export function useRomKeeperWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof romKeeperABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof romKeeperABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof romKeeperABI, TFunctionName>({
    abi: romKeeperABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useRomKeeperAbandonRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof romKeeperABI, 'abandonRole'>['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<TMode, typeof romKeeperABI, 'abandonRole'> & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof romKeeperABI, 'abandonRole'>({
    abi: romKeeperABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"decreaseCapital"`.
 */
export function useRomKeeperDecreaseCapital<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof romKeeperABI,
          'decreaseCapital'
        >['abi'],
        'decreaseCapital'
      > & { functionName?: 'decreaseCapital' }
    : UseContractWriteConfig<TMode, typeof romKeeperABI, 'decreaseCapital'> & {
        abi?: never
        functionName?: 'decreaseCapital'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof romKeeperABI, 'decreaseCapital'>({
    abi: romKeeperABI,
    functionName: 'decreaseCapital',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"grantRole"`.
 */
export function useRomKeeperGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof romKeeperABI, 'grantRole'>['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof romKeeperABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof romKeeperABI, 'grantRole'>({
    abi: romKeeperABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"init"`.
 */
export function useRomKeeperInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof romKeeperABI, 'init'>['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof romKeeperABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof romKeeperABI, 'init'>({
    abi: romKeeperABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"lockContents"`.
 */
export function useRomKeeperLockContents<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof romKeeperABI, 'lockContents'>['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<TMode, typeof romKeeperABI, 'lockContents'> & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof romKeeperABI, 'lockContents'>({
    abi: romKeeperABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useRomKeeperRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof romKeeperABI, 'renounceRole'>['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<TMode, typeof romKeeperABI, 'renounceRole'> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof romKeeperABI, 'renounceRole'>({
    abi: romKeeperABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"requestPaidInCapital"`.
 */
export function useRomKeeperRequestPaidInCapital<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof romKeeperABI,
          'requestPaidInCapital'
        >['abi'],
        'requestPaidInCapital'
      > & { functionName?: 'requestPaidInCapital' }
    : UseContractWriteConfig<
        TMode,
        typeof romKeeperABI,
        'requestPaidInCapital'
      > & {
        abi?: never
        functionName?: 'requestPaidInCapital'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof romKeeperABI, 'requestPaidInCapital'>({
    abi: romKeeperABI,
    functionName: 'requestPaidInCapital',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useRomKeeperRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof romKeeperABI, 'revokeRole'>['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof romKeeperABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof romKeeperABI, 'revokeRole'>({
    abi: romKeeperABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useRomKeeperSetDirectKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof romKeeperABI,
          'setDirectKeeper'
        >['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<TMode, typeof romKeeperABI, 'setDirectKeeper'> & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof romKeeperABI, 'setDirectKeeper'>({
    abi: romKeeperABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"setMaxQtyOfMembers"`.
 */
export function useRomKeeperSetMaxQtyOfMembers<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof romKeeperABI,
          'setMaxQtyOfMembers'
        >['abi'],
        'setMaxQtyOfMembers'
      > & { functionName?: 'setMaxQtyOfMembers' }
    : UseContractWriteConfig<
        TMode,
        typeof romKeeperABI,
        'setMaxQtyOfMembers'
      > & {
        abi?: never
        functionName?: 'setMaxQtyOfMembers'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof romKeeperABI, 'setMaxQtyOfMembers'>({
    abi: romKeeperABI,
    functionName: 'setMaxQtyOfMembers',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"setOwner"`.
 */
export function useRomKeeperSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof romKeeperABI, 'setOwner'>['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof romKeeperABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof romKeeperABI, 'setOwner'>({
    abi: romKeeperABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"setPayInAmt"`.
 */
export function useRomKeeperSetPayInAmt<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof romKeeperABI, 'setPayInAmt'>['abi'],
        'setPayInAmt'
      > & { functionName?: 'setPayInAmt' }
    : UseContractWriteConfig<TMode, typeof romKeeperABI, 'setPayInAmt'> & {
        abi?: never
        functionName?: 'setPayInAmt'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof romKeeperABI, 'setPayInAmt'>({
    abi: romKeeperABI,
    functionName: 'setPayInAmt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useRomKeeperSetRoleAdmin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof romKeeperABI, 'setRoleAdmin'>['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<TMode, typeof romKeeperABI, 'setRoleAdmin'> & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof romKeeperABI, 'setRoleAdmin'>({
    abi: romKeeperABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function useRomKeeperTakeBackKeys<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof romKeeperABI, 'takeBackKeys'>['abi'],
        'takeBackKeys'
      > & { functionName?: 'takeBackKeys' }
    : UseContractWriteConfig<TMode, typeof romKeeperABI, 'takeBackKeys'> & {
        abi?: never
        functionName?: 'takeBackKeys'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof romKeeperABI, 'takeBackKeys'>({
    abi: romKeeperABI,
    functionName: 'takeBackKeys',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"withdrawPayInAmt"`.
 */
export function useRomKeeperWithdrawPayInAmt<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof romKeeperABI,
          'withdrawPayInAmt'
        >['abi'],
        'withdrawPayInAmt'
      > & { functionName?: 'withdrawPayInAmt' }
    : UseContractWriteConfig<TMode, typeof romKeeperABI, 'withdrawPayInAmt'> & {
        abi?: never
        functionName?: 'withdrawPayInAmt'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof romKeeperABI, 'withdrawPayInAmt'>({
    abi: romKeeperABI,
    functionName: 'withdrawPayInAmt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link romKeeperABI}__.
 */
export function usePrepareRomKeeperWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof romKeeperABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: romKeeperABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof romKeeperABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareRomKeeperAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof romKeeperABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: romKeeperABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof romKeeperABI, 'abandonRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"decreaseCapital"`.
 */
export function usePrepareRomKeeperDecreaseCapital(
  config: Omit<
    UsePrepareContractWriteConfig<typeof romKeeperABI, 'decreaseCapital'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: romKeeperABI,
    functionName: 'decreaseCapital',
    ...config,
  } as UsePrepareContractWriteConfig<typeof romKeeperABI, 'decreaseCapital'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareRomKeeperGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof romKeeperABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: romKeeperABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof romKeeperABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareRomKeeperInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof romKeeperABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: romKeeperABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof romKeeperABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareRomKeeperLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<typeof romKeeperABI, 'lockContents'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: romKeeperABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<typeof romKeeperABI, 'lockContents'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareRomKeeperRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof romKeeperABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: romKeeperABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof romKeeperABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"requestPaidInCapital"`.
 */
export function usePrepareRomKeeperRequestPaidInCapital(
  config: Omit<
    UsePrepareContractWriteConfig<typeof romKeeperABI, 'requestPaidInCapital'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: romKeeperABI,
    functionName: 'requestPaidInCapital',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof romKeeperABI,
    'requestPaidInCapital'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareRomKeeperRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof romKeeperABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: romKeeperABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof romKeeperABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareRomKeeperSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof romKeeperABI, 'setDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: romKeeperABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof romKeeperABI, 'setDirectKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"setMaxQtyOfMembers"`.
 */
export function usePrepareRomKeeperSetMaxQtyOfMembers(
  config: Omit<
    UsePrepareContractWriteConfig<typeof romKeeperABI, 'setMaxQtyOfMembers'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: romKeeperABI,
    functionName: 'setMaxQtyOfMembers',
    ...config,
  } as UsePrepareContractWriteConfig<typeof romKeeperABI, 'setMaxQtyOfMembers'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareRomKeeperSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof romKeeperABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: romKeeperABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof romKeeperABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"setPayInAmt"`.
 */
export function usePrepareRomKeeperSetPayInAmt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof romKeeperABI, 'setPayInAmt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: romKeeperABI,
    functionName: 'setPayInAmt',
    ...config,
  } as UsePrepareContractWriteConfig<typeof romKeeperABI, 'setPayInAmt'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareRomKeeperSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof romKeeperABI, 'setRoleAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: romKeeperABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof romKeeperABI, 'setRoleAdmin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function usePrepareRomKeeperTakeBackKeys(
  config: Omit<
    UsePrepareContractWriteConfig<typeof romKeeperABI, 'takeBackKeys'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: romKeeperABI,
    functionName: 'takeBackKeys',
    ...config,
  } as UsePrepareContractWriteConfig<typeof romKeeperABI, 'takeBackKeys'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"withdrawPayInAmt"`.
 */
export function usePrepareRomKeeperWithdrawPayInAmt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof romKeeperABI, 'withdrawPayInAmt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: romKeeperABI,
    functionName: 'withdrawPayInAmt',
    ...config,
  } as UsePrepareContractWriteConfig<typeof romKeeperABI, 'withdrawPayInAmt'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link romKeeperABI}__.
 */
export function useRomKeeperEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof romKeeperABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: romKeeperABI,
    ...config,
  } as UseContractEventConfig<typeof romKeeperABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link romKeeperABI}__ and `eventName` set to `"Init"`.
 */
export function useRomKeeperInitEvent(
  config: Omit<
    UseContractEventConfig<typeof romKeeperABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: romKeeperABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof romKeeperABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link romKeeperABI}__ and `eventName` set to `"LockContents"`.
 */
export function useRomKeeperLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof romKeeperABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: romKeeperABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof romKeeperABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link romKeeperABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useRomKeeperSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof romKeeperABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: romKeeperABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof romKeeperABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link romKeeperABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useRomKeeperSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof romKeeperABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: romKeeperABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof romKeeperABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link romKeeperABI}__ and `eventName` set to `"SetRoleAdmin"`.
 */
export function useRomKeeperSetRoleAdminEvent(
  config: Omit<
    UseContractEventConfig<typeof romKeeperABI, 'SetRoleAdmin'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: romKeeperABI,
    eventName: 'SetRoleAdmin',
    ...config,
  } as UseContractEventConfig<typeof romKeeperABI, 'SetRoleAdmin'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iInvestmentAgreementABI}__.
 */
export function useIInvestmentAgreement(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iInvestmentAgreementABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iInvestmentAgreementABI}__.
 */
export function useIInvestmentAgreementRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof iInvestmentAgreementABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iInvestmentAgreementABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iInvestmentAgreementABI,
    ...config,
  } as UseContractReadConfig<
    typeof iInvestmentAgreementABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"circulated"`.
 */
export function useIInvestmentAgreementCirculated<
  TSelectData = ReadContractResult<
    typeof iInvestmentAgreementABI,
    'circulated'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iInvestmentAgreementABI,
      'circulated',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iInvestmentAgreementABI,
    functionName: 'circulated',
    ...config,
  } as UseContractReadConfig<
    typeof iInvestmentAgreementABI,
    'circulated',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"counterOfClosedDeal"`.
 */
export function useIInvestmentAgreementCounterOfClosedDeal<
  TSelectData = ReadContractResult<
    typeof iInvestmentAgreementABI,
    'counterOfClosedDeal'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iInvestmentAgreementABI,
      'counterOfClosedDeal',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iInvestmentAgreementABI,
    functionName: 'counterOfClosedDeal',
    ...config,
  } as UseContractReadConfig<
    typeof iInvestmentAgreementABI,
    'counterOfClosedDeal',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"counterOfDeal"`.
 */
export function useIInvestmentAgreementCounterOfDeal<
  TSelectData = ReadContractResult<
    typeof iInvestmentAgreementABI,
    'counterOfDeal'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iInvestmentAgreementABI,
      'counterOfDeal',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iInvestmentAgreementABI,
    functionName: 'counterOfDeal',
    ...config,
  } as UseContractReadConfig<
    typeof iInvestmentAgreementABI,
    'counterOfDeal',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"established"`.
 */
export function useIInvestmentAgreementEstablished<
  TSelectData = ReadContractResult<
    typeof iInvestmentAgreementABI,
    'established'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iInvestmentAgreementABI,
      'established',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iInvestmentAgreementABI,
    functionName: 'established',
    ...config,
  } as UseContractReadConfig<
    typeof iInvestmentAgreementABI,
    'established',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"getBodyOfDeal"`.
 */
export function useIInvestmentAgreementGetBodyOfDeal<
  TSelectData = ReadContractResult<
    typeof iInvestmentAgreementABI,
    'getBodyOfDeal'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iInvestmentAgreementABI,
      'getBodyOfDeal',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iInvestmentAgreementABI,
    functionName: 'getBodyOfDeal',
    ...config,
  } as UseContractReadConfig<
    typeof iInvestmentAgreementABI,
    'getBodyOfDeal',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"getBuyers"`.
 */
export function useIInvestmentAgreementGetBuyers<
  TSelectData = ReadContractResult<typeof iInvestmentAgreementABI, 'getBuyers'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iInvestmentAgreementABI,
      'getBuyers',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iInvestmentAgreementABI,
    functionName: 'getBuyers',
    ...config,
  } as UseContractReadConfig<
    typeof iInvestmentAgreementABI,
    'getBuyers',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"getCirculateDate"`.
 */
export function useIInvestmentAgreementGetCirculateDate<
  TSelectData = ReadContractResult<
    typeof iInvestmentAgreementABI,
    'getCirculateDate'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iInvestmentAgreementABI,
      'getCirculateDate',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iInvestmentAgreementABI,
    functionName: 'getCirculateDate',
    ...config,
  } as UseContractReadConfig<
    typeof iInvestmentAgreementABI,
    'getCirculateDate',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"getClosingDays"`.
 */
export function useIInvestmentAgreementGetClosingDays<
  TSelectData = ReadContractResult<
    typeof iInvestmentAgreementABI,
    'getClosingDays'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iInvestmentAgreementABI,
      'getClosingDays',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iInvestmentAgreementABI,
    functionName: 'getClosingDays',
    ...config,
  } as UseContractReadConfig<
    typeof iInvestmentAgreementABI,
    'getClosingDays',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"getClosingDeadline"`.
 */
export function useIInvestmentAgreementGetClosingDeadline<
  TSelectData = ReadContractResult<
    typeof iInvestmentAgreementABI,
    'getClosingDeadline'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iInvestmentAgreementABI,
      'getClosingDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iInvestmentAgreementABI,
    functionName: 'getClosingDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof iInvestmentAgreementABI,
    'getClosingDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"getDeal"`.
 */
export function useIInvestmentAgreementGetDeal<
  TSelectData = ReadContractResult<typeof iInvestmentAgreementABI, 'getDeal'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iInvestmentAgreementABI,
      'getDeal',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iInvestmentAgreementABI,
    functionName: 'getDeal',
    ...config,
  } as UseContractReadConfig<
    typeof iInvestmentAgreementABI,
    'getDeal',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"getHashLockOfDeal"`.
 */
export function useIInvestmentAgreementGetHashLockOfDeal<
  TSelectData = ReadContractResult<
    typeof iInvestmentAgreementABI,
    'getHashLockOfDeal'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iInvestmentAgreementABI,
      'getHashLockOfDeal',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iInvestmentAgreementABI,
    functionName: 'getHashLockOfDeal',
    ...config,
  } as UseContractReadConfig<
    typeof iInvestmentAgreementABI,
    'getHashLockOfDeal',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"getHeadOfDeal"`.
 */
export function useIInvestmentAgreementGetHeadOfDeal<
  TSelectData = ReadContractResult<
    typeof iInvestmentAgreementABI,
    'getHeadOfDeal'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iInvestmentAgreementABI,
      'getHeadOfDeal',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iInvestmentAgreementABI,
    functionName: 'getHeadOfDeal',
    ...config,
  } as UseContractReadConfig<
    typeof iInvestmentAgreementABI,
    'getHeadOfDeal',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"getParasOfPage"`.
 */
export function useIInvestmentAgreementGetParasOfPage<
  TSelectData = ReadContractResult<
    typeof iInvestmentAgreementABI,
    'getParasOfPage'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iInvestmentAgreementABI,
      'getParasOfPage',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iInvestmentAgreementABI,
    functionName: 'getParasOfPage',
    ...config,
  } as UseContractReadConfig<
    typeof iInvestmentAgreementABI,
    'getParasOfPage',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"getParties"`.
 */
export function useIInvestmentAgreementGetParties<
  TSelectData = ReadContractResult<
    typeof iInvestmentAgreementABI,
    'getParties'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iInvestmentAgreementABI,
      'getParties',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iInvestmentAgreementABI,
    functionName: 'getParties',
    ...config,
  } as UseContractReadConfig<
    typeof iInvestmentAgreementABI,
    'getParties',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"getSellers"`.
 */
export function useIInvestmentAgreementGetSellers<
  TSelectData = ReadContractResult<
    typeof iInvestmentAgreementABI,
    'getSellers'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iInvestmentAgreementABI,
      'getSellers',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iInvestmentAgreementABI,
    functionName: 'getSellers',
    ...config,
  } as UseContractReadConfig<
    typeof iInvestmentAgreementABI,
    'getSellers',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"getSeqList"`.
 */
export function useIInvestmentAgreementGetSeqList<
  TSelectData = ReadContractResult<
    typeof iInvestmentAgreementABI,
    'getSeqList'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iInvestmentAgreementABI,
      'getSeqList',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iInvestmentAgreementABI,
    functionName: 'getSeqList',
    ...config,
  } as UseContractReadConfig<
    typeof iInvestmentAgreementABI,
    'getSeqList',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"getSigDeadline"`.
 */
export function useIInvestmentAgreementGetSigDeadline<
  TSelectData = ReadContractResult<
    typeof iInvestmentAgreementABI,
    'getSigDeadline'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iInvestmentAgreementABI,
      'getSigDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iInvestmentAgreementABI,
    functionName: 'getSigDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof iInvestmentAgreementABI,
    'getSigDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"getSigOfParty"`.
 */
export function useIInvestmentAgreementGetSigOfParty<
  TSelectData = ReadContractResult<
    typeof iInvestmentAgreementABI,
    'getSigOfParty'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iInvestmentAgreementABI,
      'getSigOfParty',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iInvestmentAgreementABI,
    functionName: 'getSigOfParty',
    ...config,
  } as UseContractReadConfig<
    typeof iInvestmentAgreementABI,
    'getSigOfParty',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"getSigningDays"`.
 */
export function useIInvestmentAgreementGetSigningDays<
  TSelectData = ReadContractResult<
    typeof iInvestmentAgreementABI,
    'getSigningDays'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iInvestmentAgreementABI,
      'getSigningDays',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iInvestmentAgreementABI,
    functionName: 'getSigningDays',
    ...config,
  } as UseContractReadConfig<
    typeof iInvestmentAgreementABI,
    'getSigningDays',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"getSigsOfPage"`.
 */
export function useIInvestmentAgreementGetSigsOfPage<
  TSelectData = ReadContractResult<
    typeof iInvestmentAgreementABI,
    'getSigsOfPage'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iInvestmentAgreementABI,
      'getSigsOfPage',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iInvestmentAgreementABI,
    functionName: 'getSigsOfPage',
    ...config,
  } as UseContractReadConfig<
    typeof iInvestmentAgreementABI,
    'getSigsOfPage',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"getTypeOfIA"`.
 */
export function useIInvestmentAgreementGetTypeOfIa<
  TSelectData = ReadContractResult<
    typeof iInvestmentAgreementABI,
    'getTypeOfIA'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iInvestmentAgreementABI,
      'getTypeOfIA',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iInvestmentAgreementABI,
    functionName: 'getTypeOfIA',
    ...config,
  } as UseContractReadConfig<
    typeof iInvestmentAgreementABI,
    'getTypeOfIA',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"isBuyer"`.
 */
export function useIInvestmentAgreementIsBuyer<
  TSelectData = ReadContractResult<typeof iInvestmentAgreementABI, 'isBuyer'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iInvestmentAgreementABI,
      'isBuyer',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iInvestmentAgreementABI,
    functionName: 'isBuyer',
    ...config,
  } as UseContractReadConfig<
    typeof iInvestmentAgreementABI,
    'isBuyer',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"isDeal"`.
 */
export function useIInvestmentAgreementIsDeal<
  TSelectData = ReadContractResult<typeof iInvestmentAgreementABI, 'isDeal'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iInvestmentAgreementABI,
      'isDeal',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iInvestmentAgreementABI,
    functionName: 'isDeal',
    ...config,
  } as UseContractReadConfig<
    typeof iInvestmentAgreementABI,
    'isDeal',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"isInitSigner"`.
 */
export function useIInvestmentAgreementIsInitSigner<
  TSelectData = ReadContractResult<
    typeof iInvestmentAgreementABI,
    'isInitSigner'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iInvestmentAgreementABI,
      'isInitSigner',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iInvestmentAgreementABI,
    functionName: 'isInitSigner',
    ...config,
  } as UseContractReadConfig<
    typeof iInvestmentAgreementABI,
    'isInitSigner',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"isParty"`.
 */
export function useIInvestmentAgreementIsParty<
  TSelectData = ReadContractResult<typeof iInvestmentAgreementABI, 'isParty'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iInvestmentAgreementABI,
      'isParty',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iInvestmentAgreementABI,
    functionName: 'isParty',
    ...config,
  } as UseContractReadConfig<
    typeof iInvestmentAgreementABI,
    'isParty',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"isSeller"`.
 */
export function useIInvestmentAgreementIsSeller<
  TSelectData = ReadContractResult<typeof iInvestmentAgreementABI, 'isSeller'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iInvestmentAgreementABI,
      'isSeller',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iInvestmentAgreementABI,
    functionName: 'isSeller',
    ...config,
  } as UseContractReadConfig<
    typeof iInvestmentAgreementABI,
    'isSeller',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"isSigner"`.
 */
export function useIInvestmentAgreementIsSigner<
  TSelectData = ReadContractResult<typeof iInvestmentAgreementABI, 'isSigner'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iInvestmentAgreementABI,
      'isSigner',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iInvestmentAgreementABI,
    functionName: 'isSigner',
    ...config,
  } as UseContractReadConfig<
    typeof iInvestmentAgreementABI,
    'isSigner',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__.
 */
export function useIInvestmentAgreementWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iInvestmentAgreementABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof iInvestmentAgreementABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iInvestmentAgreementABI, TFunctionName>(
    { abi: iInvestmentAgreementABI, ...config } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"addBlank"`.
 */
export function useIInvestmentAgreementAddBlank<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iInvestmentAgreementABI,
          'addBlank'
        >['abi'],
        'addBlank'
      > & { functionName?: 'addBlank' }
    : UseContractWriteConfig<
        TMode,
        typeof iInvestmentAgreementABI,
        'addBlank'
      > & {
        abi?: never
        functionName?: 'addBlank'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iInvestmentAgreementABI, 'addBlank'>({
    abi: iInvestmentAgreementABI,
    functionName: 'addBlank',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"addDeal"`.
 */
export function useIInvestmentAgreementAddDeal<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iInvestmentAgreementABI,
          'addDeal'
        >['abi'],
        'addDeal'
      > & { functionName?: 'addDeal' }
    : UseContractWriteConfig<
        TMode,
        typeof iInvestmentAgreementABI,
        'addDeal'
      > & {
        abi?: never
        functionName?: 'addDeal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iInvestmentAgreementABI, 'addDeal'>({
    abi: iInvestmentAgreementABI,
    functionName: 'addDeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"circulateDoc"`.
 */
export function useIInvestmentAgreementCirculateDoc<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iInvestmentAgreementABI,
          'circulateDoc'
        >['abi'],
        'circulateDoc'
      > & { functionName?: 'circulateDoc' }
    : UseContractWriteConfig<
        TMode,
        typeof iInvestmentAgreementABI,
        'circulateDoc'
      > & {
        abi?: never
        functionName?: 'circulateDoc'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iInvestmentAgreementABI,
    'circulateDoc'
  >({
    abi: iInvestmentAgreementABI,
    functionName: 'circulateDoc',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"clearDealCP"`.
 */
export function useIInvestmentAgreementClearDealCp<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iInvestmentAgreementABI,
          'clearDealCP'
        >['abi'],
        'clearDealCP'
      > & { functionName?: 'clearDealCP' }
    : UseContractWriteConfig<
        TMode,
        typeof iInvestmentAgreementABI,
        'clearDealCP'
      > & {
        abi?: never
        functionName?: 'clearDealCP'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iInvestmentAgreementABI, 'clearDealCP'>(
    {
      abi: iInvestmentAgreementABI,
      functionName: 'clearDealCP',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"closeDeal"`.
 */
export function useIInvestmentAgreementCloseDeal<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iInvestmentAgreementABI,
          'closeDeal'
        >['abi'],
        'closeDeal'
      > & { functionName?: 'closeDeal' }
    : UseContractWriteConfig<
        TMode,
        typeof iInvestmentAgreementABI,
        'closeDeal'
      > & {
        abi?: never
        functionName?: 'closeDeal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iInvestmentAgreementABI, 'closeDeal'>({
    abi: iInvestmentAgreementABI,
    functionName: 'closeDeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"delDeal"`.
 */
export function useIInvestmentAgreementDelDeal<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iInvestmentAgreementABI,
          'delDeal'
        >['abi'],
        'delDeal'
      > & { functionName?: 'delDeal' }
    : UseContractWriteConfig<
        TMode,
        typeof iInvestmentAgreementABI,
        'delDeal'
      > & {
        abi?: never
        functionName?: 'delDeal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iInvestmentAgreementABI, 'delDeal'>({
    abi: iInvestmentAgreementABI,
    functionName: 'delDeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"directCloseDeal"`.
 */
export function useIInvestmentAgreementDirectCloseDeal<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iInvestmentAgreementABI,
          'directCloseDeal'
        >['abi'],
        'directCloseDeal'
      > & { functionName?: 'directCloseDeal' }
    : UseContractWriteConfig<
        TMode,
        typeof iInvestmentAgreementABI,
        'directCloseDeal'
      > & {
        abi?: never
        functionName?: 'directCloseDeal'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iInvestmentAgreementABI,
    'directCloseDeal'
  >({
    abi: iInvestmentAgreementABI,
    functionName: 'directCloseDeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"finalizeIA"`.
 */
export function useIInvestmentAgreementFinalizeIa<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iInvestmentAgreementABI,
          'finalizeIA'
        >['abi'],
        'finalizeIA'
      > & { functionName?: 'finalizeIA' }
    : UseContractWriteConfig<
        TMode,
        typeof iInvestmentAgreementABI,
        'finalizeIA'
      > & {
        abi?: never
        functionName?: 'finalizeIA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iInvestmentAgreementABI, 'finalizeIA'>({
    abi: iInvestmentAgreementABI,
    functionName: 'finalizeIA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"lockDealSubject"`.
 */
export function useIInvestmentAgreementLockDealSubject<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iInvestmentAgreementABI,
          'lockDealSubject'
        >['abi'],
        'lockDealSubject'
      > & { functionName?: 'lockDealSubject' }
    : UseContractWriteConfig<
        TMode,
        typeof iInvestmentAgreementABI,
        'lockDealSubject'
      > & {
        abi?: never
        functionName?: 'lockDealSubject'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iInvestmentAgreementABI,
    'lockDealSubject'
  >({
    abi: iInvestmentAgreementABI,
    functionName: 'lockDealSubject',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"regDeal"`.
 */
export function useIInvestmentAgreementRegDeal<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iInvestmentAgreementABI,
          'regDeal'
        >['abi'],
        'regDeal'
      > & { functionName?: 'regDeal' }
    : UseContractWriteConfig<
        TMode,
        typeof iInvestmentAgreementABI,
        'regDeal'
      > & {
        abi?: never
        functionName?: 'regDeal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iInvestmentAgreementABI, 'regDeal'>({
    abi: iInvestmentAgreementABI,
    functionName: 'regDeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"regSig"`.
 */
export function useIInvestmentAgreementRegSig<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iInvestmentAgreementABI,
          'regSig'
        >['abi'],
        'regSig'
      > & { functionName?: 'regSig' }
    : UseContractWriteConfig<
        TMode,
        typeof iInvestmentAgreementABI,
        'regSig'
      > & {
        abi?: never
        functionName?: 'regSig'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iInvestmentAgreementABI, 'regSig'>({
    abi: iInvestmentAgreementABI,
    functionName: 'regSig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"releaseDealSubject"`.
 */
export function useIInvestmentAgreementReleaseDealSubject<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iInvestmentAgreementABI,
          'releaseDealSubject'
        >['abi'],
        'releaseDealSubject'
      > & { functionName?: 'releaseDealSubject' }
    : UseContractWriteConfig<
        TMode,
        typeof iInvestmentAgreementABI,
        'releaseDealSubject'
      > & {
        abi?: never
        functionName?: 'releaseDealSubject'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iInvestmentAgreementABI,
    'releaseDealSubject'
  >({
    abi: iInvestmentAgreementABI,
    functionName: 'releaseDealSubject',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"removeBlank"`.
 */
export function useIInvestmentAgreementRemoveBlank<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iInvestmentAgreementABI,
          'removeBlank'
        >['abi'],
        'removeBlank'
      > & { functionName?: 'removeBlank' }
    : UseContractWriteConfig<
        TMode,
        typeof iInvestmentAgreementABI,
        'removeBlank'
      > & {
        abi?: never
        functionName?: 'removeBlank'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iInvestmentAgreementABI, 'removeBlank'>(
    {
      abi: iInvestmentAgreementABI,
      functionName: 'removeBlank',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"setTiming"`.
 */
export function useIInvestmentAgreementSetTiming<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iInvestmentAgreementABI,
          'setTiming'
        >['abi'],
        'setTiming'
      > & { functionName?: 'setTiming' }
    : UseContractWriteConfig<
        TMode,
        typeof iInvestmentAgreementABI,
        'setTiming'
      > & {
        abi?: never
        functionName?: 'setTiming'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iInvestmentAgreementABI, 'setTiming'>({
    abi: iInvestmentAgreementABI,
    functionName: 'setTiming',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"signDoc"`.
 */
export function useIInvestmentAgreementSignDoc<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iInvestmentAgreementABI,
          'signDoc'
        >['abi'],
        'signDoc'
      > & { functionName?: 'signDoc' }
    : UseContractWriteConfig<
        TMode,
        typeof iInvestmentAgreementABI,
        'signDoc'
      > & {
        abi?: never
        functionName?: 'signDoc'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iInvestmentAgreementABI, 'signDoc'>({
    abi: iInvestmentAgreementABI,
    functionName: 'signDoc',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"takeGift"`.
 */
export function useIInvestmentAgreementTakeGift<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iInvestmentAgreementABI,
          'takeGift'
        >['abi'],
        'takeGift'
      > & { functionName?: 'takeGift' }
    : UseContractWriteConfig<
        TMode,
        typeof iInvestmentAgreementABI,
        'takeGift'
      > & {
        abi?: never
        functionName?: 'takeGift'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iInvestmentAgreementABI, 'takeGift'>({
    abi: iInvestmentAgreementABI,
    functionName: 'takeGift',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"terminateDeal"`.
 */
export function useIInvestmentAgreementTerminateDeal<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iInvestmentAgreementABI,
          'terminateDeal'
        >['abi'],
        'terminateDeal'
      > & { functionName?: 'terminateDeal' }
    : UseContractWriteConfig<
        TMode,
        typeof iInvestmentAgreementABI,
        'terminateDeal'
      > & {
        abi?: never
        functionName?: 'terminateDeal'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iInvestmentAgreementABI,
    'terminateDeal'
  >({
    abi: iInvestmentAgreementABI,
    functionName: 'terminateDeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__.
 */
export function usePrepareIInvestmentAgreementWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iInvestmentAgreementABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iInvestmentAgreementABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iInvestmentAgreementABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"addBlank"`.
 */
export function usePrepareIInvestmentAgreementAddBlank(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iInvestmentAgreementABI, 'addBlank'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iInvestmentAgreementABI,
    functionName: 'addBlank',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iInvestmentAgreementABI,
    'addBlank'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"addDeal"`.
 */
export function usePrepareIInvestmentAgreementAddDeal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iInvestmentAgreementABI, 'addDeal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iInvestmentAgreementABI,
    functionName: 'addDeal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iInvestmentAgreementABI, 'addDeal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"circulateDoc"`.
 */
export function usePrepareIInvestmentAgreementCirculateDoc(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iInvestmentAgreementABI,
      'circulateDoc'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iInvestmentAgreementABI,
    functionName: 'circulateDoc',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iInvestmentAgreementABI,
    'circulateDoc'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"clearDealCP"`.
 */
export function usePrepareIInvestmentAgreementClearDealCp(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iInvestmentAgreementABI,
      'clearDealCP'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iInvestmentAgreementABI,
    functionName: 'clearDealCP',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iInvestmentAgreementABI,
    'clearDealCP'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"closeDeal"`.
 */
export function usePrepareIInvestmentAgreementCloseDeal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iInvestmentAgreementABI, 'closeDeal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iInvestmentAgreementABI,
    functionName: 'closeDeal',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iInvestmentAgreementABI,
    'closeDeal'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"delDeal"`.
 */
export function usePrepareIInvestmentAgreementDelDeal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iInvestmentAgreementABI, 'delDeal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iInvestmentAgreementABI,
    functionName: 'delDeal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iInvestmentAgreementABI, 'delDeal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"directCloseDeal"`.
 */
export function usePrepareIInvestmentAgreementDirectCloseDeal(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iInvestmentAgreementABI,
      'directCloseDeal'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iInvestmentAgreementABI,
    functionName: 'directCloseDeal',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iInvestmentAgreementABI,
    'directCloseDeal'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"finalizeIA"`.
 */
export function usePrepareIInvestmentAgreementFinalizeIa(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iInvestmentAgreementABI, 'finalizeIA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iInvestmentAgreementABI,
    functionName: 'finalizeIA',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iInvestmentAgreementABI,
    'finalizeIA'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"lockDealSubject"`.
 */
export function usePrepareIInvestmentAgreementLockDealSubject(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iInvestmentAgreementABI,
      'lockDealSubject'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iInvestmentAgreementABI,
    functionName: 'lockDealSubject',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iInvestmentAgreementABI,
    'lockDealSubject'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"regDeal"`.
 */
export function usePrepareIInvestmentAgreementRegDeal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iInvestmentAgreementABI, 'regDeal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iInvestmentAgreementABI,
    functionName: 'regDeal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iInvestmentAgreementABI, 'regDeal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"regSig"`.
 */
export function usePrepareIInvestmentAgreementRegSig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iInvestmentAgreementABI, 'regSig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iInvestmentAgreementABI,
    functionName: 'regSig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iInvestmentAgreementABI, 'regSig'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"releaseDealSubject"`.
 */
export function usePrepareIInvestmentAgreementReleaseDealSubject(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iInvestmentAgreementABI,
      'releaseDealSubject'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iInvestmentAgreementABI,
    functionName: 'releaseDealSubject',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iInvestmentAgreementABI,
    'releaseDealSubject'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"removeBlank"`.
 */
export function usePrepareIInvestmentAgreementRemoveBlank(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iInvestmentAgreementABI,
      'removeBlank'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iInvestmentAgreementABI,
    functionName: 'removeBlank',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iInvestmentAgreementABI,
    'removeBlank'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"setTiming"`.
 */
export function usePrepareIInvestmentAgreementSetTiming(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iInvestmentAgreementABI, 'setTiming'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iInvestmentAgreementABI,
    functionName: 'setTiming',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iInvestmentAgreementABI,
    'setTiming'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"signDoc"`.
 */
export function usePrepareIInvestmentAgreementSignDoc(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iInvestmentAgreementABI, 'signDoc'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iInvestmentAgreementABI,
    functionName: 'signDoc',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iInvestmentAgreementABI, 'signDoc'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"takeGift"`.
 */
export function usePrepareIInvestmentAgreementTakeGift(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iInvestmentAgreementABI, 'takeGift'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iInvestmentAgreementABI,
    functionName: 'takeGift',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iInvestmentAgreementABI,
    'takeGift'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"terminateDeal"`.
 */
export function usePrepareIInvestmentAgreementTerminateDeal(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iInvestmentAgreementABI,
      'terminateDeal'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iInvestmentAgreementABI,
    functionName: 'terminateDeal',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iInvestmentAgreementABI,
    'terminateDeal'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iInvestmentAgreementABI}__.
 */
export function useIInvestmentAgreementEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iInvestmentAgreementABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iInvestmentAgreementABI,
    ...config,
  } as UseContractEventConfig<typeof iInvestmentAgreementABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `eventName` set to `"AddDeal"`.
 */
export function useIInvestmentAgreementAddDealEvent(
  config: Omit<
    UseContractEventConfig<typeof iInvestmentAgreementABI, 'AddDeal'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iInvestmentAgreementABI,
    eventName: 'AddDeal',
    ...config,
  } as UseContractEventConfig<typeof iInvestmentAgreementABI, 'AddDeal'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `eventName` set to `"CirculateDoc"`.
 */
export function useIInvestmentAgreementCirculateDocEvent(
  config: Omit<
    UseContractEventConfig<typeof iInvestmentAgreementABI, 'CirculateDoc'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iInvestmentAgreementABI,
    eventName: 'CirculateDoc',
    ...config,
  } as UseContractEventConfig<typeof iInvestmentAgreementABI, 'CirculateDoc'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `eventName` set to `"ClearDealCP"`.
 */
export function useIInvestmentAgreementClearDealCpEvent(
  config: Omit<
    UseContractEventConfig<typeof iInvestmentAgreementABI, 'ClearDealCP'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iInvestmentAgreementABI,
    eventName: 'ClearDealCP',
    ...config,
  } as UseContractEventConfig<typeof iInvestmentAgreementABI, 'ClearDealCP'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `eventName` set to `"CloseDeal"`.
 */
export function useIInvestmentAgreementCloseDealEvent(
  config: Omit<
    UseContractEventConfig<typeof iInvestmentAgreementABI, 'CloseDeal'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iInvestmentAgreementABI,
    eventName: 'CloseDeal',
    ...config,
  } as UseContractEventConfig<typeof iInvestmentAgreementABI, 'CloseDeal'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `eventName` set to `"TerminateDeal"`.
 */
export function useIInvestmentAgreementTerminateDealEvent(
  config: Omit<
    UseContractEventConfig<typeof iInvestmentAgreementABI, 'TerminateDeal'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iInvestmentAgreementABI,
    eventName: 'TerminateDeal',
    ...config,
  } as UseContractEventConfig<typeof iInvestmentAgreementABI, 'TerminateDeal'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link bookOfSharesABI}__.
 */
export function useBookOfShares(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: bookOfSharesABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfSharesABI}__.
 */
export function useBookOfSharesRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof bookOfSharesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfSharesABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfSharesABI,
    ...config,
  } as UseContractReadConfig<
    typeof bookOfSharesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"counterOfClasses"`.
 */
export function useBookOfSharesCounterOfClasses<
  TSelectData = ReadContractResult<typeof bookOfSharesABI, 'counterOfClasses'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bookOfSharesABI,
      'counterOfClasses',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfSharesABI,
    functionName: 'counterOfClasses',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfSharesABI,
    'counterOfClasses',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"counterOfShares"`.
 */
export function useBookOfSharesCounterOfShares<
  TSelectData = ReadContractResult<typeof bookOfSharesABI, 'counterOfShares'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bookOfSharesABI,
      'counterOfShares',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfSharesABI,
    functionName: 'counterOfShares',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfSharesABI,
    'counterOfShares',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"getBodyOfShare"`.
 */
export function useBookOfSharesGetBodyOfShare<
  TSelectData = ReadContractResult<typeof bookOfSharesABI, 'getBodyOfShare'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bookOfSharesABI,
      'getBodyOfShare',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfSharesABI,
    functionName: 'getBodyOfShare',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfSharesABI,
    'getBodyOfShare',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"getDK"`.
 */
export function useBookOfSharesGetDk<
  TSelectData = ReadContractResult<typeof bookOfSharesABI, 'getDK'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfSharesABI, 'getDK', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfSharesABI,
    functionName: 'getDK',
    ...config,
  } as UseContractReadConfig<typeof bookOfSharesABI, 'getDK', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"getHeadOfShare"`.
 */
export function useBookOfSharesGetHeadOfShare<
  TSelectData = ReadContractResult<typeof bookOfSharesABI, 'getHeadOfShare'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bookOfSharesABI,
      'getHeadOfShare',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfSharesABI,
    functionName: 'getHeadOfShare',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfSharesABI,
    'getHeadOfShare',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"getLocker"`.
 */
export function useBookOfSharesGetLocker<
  TSelectData = ReadContractResult<typeof bookOfSharesABI, 'getLocker'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfSharesABI, 'getLocker', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfSharesABI,
    functionName: 'getLocker',
    ...config,
  } as UseContractReadConfig<typeof bookOfSharesABI, 'getLocker', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"getLocksList"`.
 */
export function useBookOfSharesGetLocksList<
  TSelectData = ReadContractResult<typeof bookOfSharesABI, 'getLocksList'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfSharesABI, 'getLocksList', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfSharesABI,
    functionName: 'getLocksList',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfSharesABI,
    'getLocksList',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"getOwner"`.
 */
export function useBookOfSharesGetOwner<
  TSelectData = ReadContractResult<typeof bookOfSharesABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfSharesABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfSharesABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<typeof bookOfSharesABI, 'getOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useBookOfSharesGetRoleAdmin<
  TSelectData = ReadContractResult<typeof bookOfSharesABI, 'getRoleAdmin'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfSharesABI, 'getRoleAdmin', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfSharesABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfSharesABI,
    'getRoleAdmin',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"getShare"`.
 */
export function useBookOfSharesGetShare<
  TSelectData = ReadContractResult<typeof bookOfSharesABI, 'getShare'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfSharesABI, 'getShare', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfSharesABI,
    functionName: 'getShare',
    ...config,
  } as UseContractReadConfig<typeof bookOfSharesABI, 'getShare', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"getSharesOfClass"`.
 */
export function useBookOfSharesGetSharesOfClass<
  TSelectData = ReadContractResult<typeof bookOfSharesABI, 'getSharesOfClass'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bookOfSharesABI,
      'getSharesOfClass',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfSharesABI,
    functionName: 'getSharesOfClass',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfSharesABI,
    'getSharesOfClass',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"hasRole"`.
 */
export function useBookOfSharesHasRole<
  TSelectData = ReadContractResult<typeof bookOfSharesABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfSharesABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfSharesABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof bookOfSharesABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"isFinalized"`.
 */
export function useBookOfSharesIsFinalized<
  TSelectData = ReadContractResult<typeof bookOfSharesABI, 'isFinalized'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfSharesABI, 'isFinalized', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfSharesABI,
    functionName: 'isFinalized',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfSharesABI,
    'isFinalized',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"isShare"`.
 */
export function useBookOfSharesIsShare<
  TSelectData = ReadContractResult<typeof bookOfSharesABI, 'isShare'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfSharesABI, 'isShare', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfSharesABI,
    functionName: 'isShare',
    ...config,
  } as UseContractReadConfig<typeof bookOfSharesABI, 'isShare', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__.
 */
export function useBookOfSharesWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfSharesABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof bookOfSharesABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfSharesABI, TFunctionName>({
    abi: bookOfSharesABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useBookOfSharesAbandonRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfSharesABI,
          'abandonRole'
        >['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<TMode, typeof bookOfSharesABI, 'abandonRole'> & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfSharesABI, 'abandonRole'>({
    abi: bookOfSharesABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"decreaseCapital"`.
 */
export function useBookOfSharesDecreaseCapital<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfSharesABI,
          'decreaseCapital'
        >['abi'],
        'decreaseCapital'
      > & { functionName?: 'decreaseCapital' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfSharesABI,
        'decreaseCapital'
      > & {
        abi?: never
        functionName?: 'decreaseCapital'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfSharesABI, 'decreaseCapital'>({
    abi: bookOfSharesABI,
    functionName: 'decreaseCapital',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"decreaseCleanPaid"`.
 */
export function useBookOfSharesDecreaseCleanPaid<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfSharesABI,
          'decreaseCleanPaid'
        >['abi'],
        'decreaseCleanPaid'
      > & { functionName?: 'decreaseCleanPaid' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfSharesABI,
        'decreaseCleanPaid'
      > & {
        abi?: never
        functionName?: 'decreaseCleanPaid'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfSharesABI, 'decreaseCleanPaid'>({
    abi: bookOfSharesABI,
    functionName: 'decreaseCleanPaid',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"grantRole"`.
 */
export function useBookOfSharesGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfSharesABI, 'grantRole'>['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof bookOfSharesABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfSharesABI, 'grantRole'>({
    abi: bookOfSharesABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"increaseCleanPaid"`.
 */
export function useBookOfSharesIncreaseCleanPaid<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfSharesABI,
          'increaseCleanPaid'
        >['abi'],
        'increaseCleanPaid'
      > & { functionName?: 'increaseCleanPaid' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfSharesABI,
        'increaseCleanPaid'
      > & {
        abi?: never
        functionName?: 'increaseCleanPaid'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfSharesABI, 'increaseCleanPaid'>({
    abi: bookOfSharesABI,
    functionName: 'increaseCleanPaid',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"init"`.
 */
export function useBookOfSharesInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfSharesABI, 'init'>['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof bookOfSharesABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfSharesABI, 'init'>({
    abi: bookOfSharesABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"issueShare"`.
 */
export function useBookOfSharesIssueShare<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfSharesABI, 'issueShare'>['abi'],
        'issueShare'
      > & { functionName?: 'issueShare' }
    : UseContractWriteConfig<TMode, typeof bookOfSharesABI, 'issueShare'> & {
        abi?: never
        functionName?: 'issueShare'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfSharesABI, 'issueShare'>({
    abi: bookOfSharesABI,
    functionName: 'issueShare',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"lockContents"`.
 */
export function useBookOfSharesLockContents<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfSharesABI,
          'lockContents'
        >['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<TMode, typeof bookOfSharesABI, 'lockContents'> & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfSharesABI, 'lockContents'>({
    abi: bookOfSharesABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"regShare"`.
 */
export function useBookOfSharesRegShare<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfSharesABI, 'regShare'>['abi'],
        'regShare'
      > & { functionName?: 'regShare' }
    : UseContractWriteConfig<TMode, typeof bookOfSharesABI, 'regShare'> & {
        abi?: never
        functionName?: 'regShare'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfSharesABI, 'regShare'>({
    abi: bookOfSharesABI,
    functionName: 'regShare',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useBookOfSharesRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfSharesABI,
          'renounceRole'
        >['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<TMode, typeof bookOfSharesABI, 'renounceRole'> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfSharesABI, 'renounceRole'>({
    abi: bookOfSharesABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"requestPaidInCapital"`.
 */
export function useBookOfSharesRequestPaidInCapital<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfSharesABI,
          'requestPaidInCapital'
        >['abi'],
        'requestPaidInCapital'
      > & { functionName?: 'requestPaidInCapital' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfSharesABI,
        'requestPaidInCapital'
      > & {
        abi?: never
        functionName?: 'requestPaidInCapital'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof bookOfSharesABI,
    'requestPaidInCapital'
  >({
    abi: bookOfSharesABI,
    functionName: 'requestPaidInCapital',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useBookOfSharesRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfSharesABI, 'revokeRole'>['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof bookOfSharesABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfSharesABI, 'revokeRole'>({
    abi: bookOfSharesABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useBookOfSharesSetDirectKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfSharesABI,
          'setDirectKeeper'
        >['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfSharesABI,
        'setDirectKeeper'
      > & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfSharesABI, 'setDirectKeeper'>({
    abi: bookOfSharesABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"setOwner"`.
 */
export function useBookOfSharesSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfSharesABI, 'setOwner'>['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof bookOfSharesABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfSharesABI, 'setOwner'>({
    abi: bookOfSharesABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"setPayInAmt"`.
 */
export function useBookOfSharesSetPayInAmt<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfSharesABI,
          'setPayInAmt'
        >['abi'],
        'setPayInAmt'
      > & { functionName?: 'setPayInAmt' }
    : UseContractWriteConfig<TMode, typeof bookOfSharesABI, 'setPayInAmt'> & {
        abi?: never
        functionName?: 'setPayInAmt'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfSharesABI, 'setPayInAmt'>({
    abi: bookOfSharesABI,
    functionName: 'setPayInAmt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useBookOfSharesSetRoleAdmin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfSharesABI,
          'setRoleAdmin'
        >['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<TMode, typeof bookOfSharesABI, 'setRoleAdmin'> & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfSharesABI, 'setRoleAdmin'>({
    abi: bookOfSharesABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function useBookOfSharesTakeBackKeys<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfSharesABI,
          'takeBackKeys'
        >['abi'],
        'takeBackKeys'
      > & { functionName?: 'takeBackKeys' }
    : UseContractWriteConfig<TMode, typeof bookOfSharesABI, 'takeBackKeys'> & {
        abi?: never
        functionName?: 'takeBackKeys'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfSharesABI, 'takeBackKeys'>({
    abi: bookOfSharesABI,
    functionName: 'takeBackKeys',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"transferShare"`.
 */
export function useBookOfSharesTransferShare<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfSharesABI,
          'transferShare'
        >['abi'],
        'transferShare'
      > & { functionName?: 'transferShare' }
    : UseContractWriteConfig<TMode, typeof bookOfSharesABI, 'transferShare'> & {
        abi?: never
        functionName?: 'transferShare'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfSharesABI, 'transferShare'>({
    abi: bookOfSharesABI,
    functionName: 'transferShare',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"updateStateOfShare"`.
 */
export function useBookOfSharesUpdateStateOfShare<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfSharesABI,
          'updateStateOfShare'
        >['abi'],
        'updateStateOfShare'
      > & { functionName?: 'updateStateOfShare' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfSharesABI,
        'updateStateOfShare'
      > & {
        abi?: never
        functionName?: 'updateStateOfShare'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfSharesABI, 'updateStateOfShare'>({
    abi: bookOfSharesABI,
    functionName: 'updateStateOfShare',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"withdrawPayInAmt"`.
 */
export function useBookOfSharesWithdrawPayInAmt<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfSharesABI,
          'withdrawPayInAmt'
        >['abi'],
        'withdrawPayInAmt'
      > & { functionName?: 'withdrawPayInAmt' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfSharesABI,
        'withdrawPayInAmt'
      > & {
        abi?: never
        functionName?: 'withdrawPayInAmt'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfSharesABI, 'withdrawPayInAmt'>({
    abi: bookOfSharesABI,
    functionName: 'withdrawPayInAmt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__.
 */
export function usePrepareBookOfSharesWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfSharesABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfSharesABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfSharesABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareBookOfSharesAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfSharesABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'abandonRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"decreaseCapital"`.
 */
export function usePrepareBookOfSharesDecreaseCapital(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'decreaseCapital'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfSharesABI,
    functionName: 'decreaseCapital',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'decreaseCapital'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"decreaseCleanPaid"`.
 */
export function usePrepareBookOfSharesDecreaseCleanPaid(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'decreaseCleanPaid'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfSharesABI,
    functionName: 'decreaseCleanPaid',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bookOfSharesABI,
    'decreaseCleanPaid'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareBookOfSharesGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfSharesABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"increaseCleanPaid"`.
 */
export function usePrepareBookOfSharesIncreaseCleanPaid(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'increaseCleanPaid'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfSharesABI,
    functionName: 'increaseCleanPaid',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bookOfSharesABI,
    'increaseCleanPaid'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareBookOfSharesInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfSharesABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"issueShare"`.
 */
export function usePrepareBookOfSharesIssueShare(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'issueShare'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfSharesABI,
    functionName: 'issueShare',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'issueShare'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareBookOfSharesLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'lockContents'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfSharesABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'lockContents'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"regShare"`.
 */
export function usePrepareBookOfSharesRegShare(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'regShare'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfSharesABI,
    functionName: 'regShare',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'regShare'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareBookOfSharesRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfSharesABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"requestPaidInCapital"`.
 */
export function usePrepareBookOfSharesRequestPaidInCapital(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof bookOfSharesABI,
      'requestPaidInCapital'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfSharesABI,
    functionName: 'requestPaidInCapital',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bookOfSharesABI,
    'requestPaidInCapital'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareBookOfSharesRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfSharesABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareBookOfSharesSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'setDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfSharesABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'setDirectKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareBookOfSharesSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfSharesABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"setPayInAmt"`.
 */
export function usePrepareBookOfSharesSetPayInAmt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'setPayInAmt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfSharesABI,
    functionName: 'setPayInAmt',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'setPayInAmt'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareBookOfSharesSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'setRoleAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfSharesABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'setRoleAdmin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function usePrepareBookOfSharesTakeBackKeys(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'takeBackKeys'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfSharesABI,
    functionName: 'takeBackKeys',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'takeBackKeys'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"transferShare"`.
 */
export function usePrepareBookOfSharesTransferShare(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'transferShare'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfSharesABI,
    functionName: 'transferShare',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'transferShare'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"updateStateOfShare"`.
 */
export function usePrepareBookOfSharesUpdateStateOfShare(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'updateStateOfShare'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfSharesABI,
    functionName: 'updateStateOfShare',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bookOfSharesABI,
    'updateStateOfShare'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"withdrawPayInAmt"`.
 */
export function usePrepareBookOfSharesWithdrawPayInAmt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'withdrawPayInAmt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfSharesABI,
    functionName: 'withdrawPayInAmt',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bookOfSharesABI,
    'withdrawPayInAmt'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfSharesABI}__.
 */
export function useBookOfSharesEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof bookOfSharesABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfSharesABI,
    ...config,
  } as UseContractEventConfig<typeof bookOfSharesABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfSharesABI}__ and `eventName` set to `"DecreaseCleanPaid"`.
 */
export function useBookOfSharesDecreaseCleanPaidEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfSharesABI, 'DecreaseCleanPaid'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfSharesABI,
    eventName: 'DecreaseCleanPaid',
    ...config,
  } as UseContractEventConfig<typeof bookOfSharesABI, 'DecreaseCleanPaid'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfSharesABI}__ and `eventName` set to `"DeregisterShare"`.
 */
export function useBookOfSharesDeregisterShareEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfSharesABI, 'DeregisterShare'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfSharesABI,
    eventName: 'DeregisterShare',
    ...config,
  } as UseContractEventConfig<typeof bookOfSharesABI, 'DeregisterShare'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfSharesABI}__ and `eventName` set to `"IncreaseCleanPaid"`.
 */
export function useBookOfSharesIncreaseCleanPaidEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfSharesABI, 'IncreaseCleanPaid'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfSharesABI,
    eventName: 'IncreaseCleanPaid',
    ...config,
  } as UseContractEventConfig<typeof bookOfSharesABI, 'IncreaseCleanPaid'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfSharesABI}__ and `eventName` set to `"Init"`.
 */
export function useBookOfSharesInitEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfSharesABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfSharesABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof bookOfSharesABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfSharesABI}__ and `eventName` set to `"IssueShare"`.
 */
export function useBookOfSharesIssueShareEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfSharesABI, 'IssueShare'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfSharesABI,
    eventName: 'IssueShare',
    ...config,
  } as UseContractEventConfig<typeof bookOfSharesABI, 'IssueShare'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfSharesABI}__ and `eventName` set to `"LockContents"`.
 */
export function useBookOfSharesLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfSharesABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfSharesABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof bookOfSharesABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfSharesABI}__ and `eventName` set to `"PayInCapital"`.
 */
export function useBookOfSharesPayInCapitalEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfSharesABI, 'PayInCapital'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfSharesABI,
    eventName: 'PayInCapital',
    ...config,
  } as UseContractEventConfig<typeof bookOfSharesABI, 'PayInCapital'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfSharesABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useBookOfSharesSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfSharesABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfSharesABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof bookOfSharesABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfSharesABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useBookOfSharesSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfSharesABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfSharesABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof bookOfSharesABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfSharesABI}__ and `eventName` set to `"SetPayInAmt"`.
 */
export function useBookOfSharesSetPayInAmtEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfSharesABI, 'SetPayInAmt'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfSharesABI,
    eventName: 'SetPayInAmt',
    ...config,
  } as UseContractEventConfig<typeof bookOfSharesABI, 'SetPayInAmt'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfSharesABI}__ and `eventName` set to `"SetRoleAdmin"`.
 */
export function useBookOfSharesSetRoleAdminEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfSharesABI, 'SetRoleAdmin'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfSharesABI,
    eventName: 'SetRoleAdmin',
    ...config,
  } as UseContractEventConfig<typeof bookOfSharesABI, 'SetRoleAdmin'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfSharesABI}__ and `eventName` set to `"SubAmountFromShare"`.
 */
export function useBookOfSharesSubAmountFromShareEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfSharesABI, 'SubAmountFromShare'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfSharesABI,
    eventName: 'SubAmountFromShare',
    ...config,
  } as UseContractEventConfig<typeof bookOfSharesABI, 'SubAmountFromShare'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfSharesABI}__ and `eventName` set to `"UpdateStateOfShare"`.
 */
export function useBookOfSharesUpdateStateOfShareEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfSharesABI, 'UpdateStateOfShare'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfSharesABI,
    eventName: 'UpdateStateOfShare',
    ...config,
  } as UseContractEventConfig<typeof bookOfSharesABI, 'UpdateStateOfShare'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfSharesABI}__ and `eventName` set to `"WithdrawPayInAmt"`.
 */
export function useBookOfSharesWithdrawPayInAmtEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfSharesABI, 'WithdrawPayInAmt'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfSharesABI,
    eventName: 'WithdrawPayInAmt',
    ...config,
  } as UseContractEventConfig<typeof bookOfSharesABI, 'WithdrawPayInAmt'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iBookOfSharesABI}__.
 */
export function useIBookOfShares(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iBookOfSharesABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfSharesABI}__.
 */
export function useIBookOfSharesRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iBookOfSharesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfSharesABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfSharesABI,
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfSharesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"counterOfClasses"`.
 */
export function useIBookOfSharesCounterOfClasses<
  TSelectData = ReadContractResult<typeof iBookOfSharesABI, 'counterOfClasses'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfSharesABI,
      'counterOfClasses',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfSharesABI,
    functionName: 'counterOfClasses',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfSharesABI,
    'counterOfClasses',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"counterOfShares"`.
 */
export function useIBookOfSharesCounterOfShares<
  TSelectData = ReadContractResult<typeof iBookOfSharesABI, 'counterOfShares'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfSharesABI,
      'counterOfShares',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfSharesABI,
    functionName: 'counterOfShares',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfSharesABI,
    'counterOfShares',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"getBodyOfShare"`.
 */
export function useIBookOfSharesGetBodyOfShare<
  TSelectData = ReadContractResult<typeof iBookOfSharesABI, 'getBodyOfShare'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfSharesABI,
      'getBodyOfShare',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfSharesABI,
    functionName: 'getBodyOfShare',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfSharesABI,
    'getBodyOfShare',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"getHeadOfShare"`.
 */
export function useIBookOfSharesGetHeadOfShare<
  TSelectData = ReadContractResult<typeof iBookOfSharesABI, 'getHeadOfShare'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfSharesABI,
      'getHeadOfShare',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfSharesABI,
    functionName: 'getHeadOfShare',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfSharesABI,
    'getHeadOfShare',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"getLocker"`.
 */
export function useIBookOfSharesGetLocker<
  TSelectData = ReadContractResult<typeof iBookOfSharesABI, 'getLocker'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfSharesABI, 'getLocker', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfSharesABI,
    functionName: 'getLocker',
    ...config,
  } as UseContractReadConfig<typeof iBookOfSharesABI, 'getLocker', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"getLocksList"`.
 */
export function useIBookOfSharesGetLocksList<
  TSelectData = ReadContractResult<typeof iBookOfSharesABI, 'getLocksList'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfSharesABI, 'getLocksList', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfSharesABI,
    functionName: 'getLocksList',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfSharesABI,
    'getLocksList',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"getShare"`.
 */
export function useIBookOfSharesGetShare<
  TSelectData = ReadContractResult<typeof iBookOfSharesABI, 'getShare'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfSharesABI, 'getShare', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfSharesABI,
    functionName: 'getShare',
    ...config,
  } as UseContractReadConfig<typeof iBookOfSharesABI, 'getShare', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"getSharesOfClass"`.
 */
export function useIBookOfSharesGetSharesOfClass<
  TSelectData = ReadContractResult<typeof iBookOfSharesABI, 'getSharesOfClass'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfSharesABI,
      'getSharesOfClass',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfSharesABI,
    functionName: 'getSharesOfClass',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfSharesABI,
    'getSharesOfClass',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"isShare"`.
 */
export function useIBookOfSharesIsShare<
  TSelectData = ReadContractResult<typeof iBookOfSharesABI, 'isShare'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfSharesABI, 'isShare', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfSharesABI,
    functionName: 'isShare',
    ...config,
  } as UseContractReadConfig<typeof iBookOfSharesABI, 'isShare', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfSharesABI}__.
 */
export function useIBookOfSharesWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iBookOfSharesABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iBookOfSharesABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfSharesABI, TFunctionName>({
    abi: iBookOfSharesABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"decreaseCapital"`.
 */
export function useIBookOfSharesDecreaseCapital<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfSharesABI,
          'decreaseCapital'
        >['abi'],
        'decreaseCapital'
      > & { functionName?: 'decreaseCapital' }
    : UseContractWriteConfig<
        TMode,
        typeof iBookOfSharesABI,
        'decreaseCapital'
      > & {
        abi?: never
        functionName?: 'decreaseCapital'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfSharesABI, 'decreaseCapital'>({
    abi: iBookOfSharesABI,
    functionName: 'decreaseCapital',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"decreaseCleanPaid"`.
 */
export function useIBookOfSharesDecreaseCleanPaid<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfSharesABI,
          'decreaseCleanPaid'
        >['abi'],
        'decreaseCleanPaid'
      > & { functionName?: 'decreaseCleanPaid' }
    : UseContractWriteConfig<
        TMode,
        typeof iBookOfSharesABI,
        'decreaseCleanPaid'
      > & {
        abi?: never
        functionName?: 'decreaseCleanPaid'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfSharesABI, 'decreaseCleanPaid'>({
    abi: iBookOfSharesABI,
    functionName: 'decreaseCleanPaid',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"increaseCleanPaid"`.
 */
export function useIBookOfSharesIncreaseCleanPaid<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfSharesABI,
          'increaseCleanPaid'
        >['abi'],
        'increaseCleanPaid'
      > & { functionName?: 'increaseCleanPaid' }
    : UseContractWriteConfig<
        TMode,
        typeof iBookOfSharesABI,
        'increaseCleanPaid'
      > & {
        abi?: never
        functionName?: 'increaseCleanPaid'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfSharesABI, 'increaseCleanPaid'>({
    abi: iBookOfSharesABI,
    functionName: 'increaseCleanPaid',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"issueShare"`.
 */
export function useIBookOfSharesIssueShare<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfSharesABI,
          'issueShare'
        >['abi'],
        'issueShare'
      > & { functionName?: 'issueShare' }
    : UseContractWriteConfig<TMode, typeof iBookOfSharesABI, 'issueShare'> & {
        abi?: never
        functionName?: 'issueShare'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfSharesABI, 'issueShare'>({
    abi: iBookOfSharesABI,
    functionName: 'issueShare',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"regShare"`.
 */
export function useIBookOfSharesRegShare<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iBookOfSharesABI, 'regShare'>['abi'],
        'regShare'
      > & { functionName?: 'regShare' }
    : UseContractWriteConfig<TMode, typeof iBookOfSharesABI, 'regShare'> & {
        abi?: never
        functionName?: 'regShare'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfSharesABI, 'regShare'>({
    abi: iBookOfSharesABI,
    functionName: 'regShare',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"requestPaidInCapital"`.
 */
export function useIBookOfSharesRequestPaidInCapital<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfSharesABI,
          'requestPaidInCapital'
        >['abi'],
        'requestPaidInCapital'
      > & { functionName?: 'requestPaidInCapital' }
    : UseContractWriteConfig<
        TMode,
        typeof iBookOfSharesABI,
        'requestPaidInCapital'
      > & {
        abi?: never
        functionName?: 'requestPaidInCapital'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iBookOfSharesABI,
    'requestPaidInCapital'
  >({
    abi: iBookOfSharesABI,
    functionName: 'requestPaidInCapital',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"setPayInAmt"`.
 */
export function useIBookOfSharesSetPayInAmt<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfSharesABI,
          'setPayInAmt'
        >['abi'],
        'setPayInAmt'
      > & { functionName?: 'setPayInAmt' }
    : UseContractWriteConfig<TMode, typeof iBookOfSharesABI, 'setPayInAmt'> & {
        abi?: never
        functionName?: 'setPayInAmt'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfSharesABI, 'setPayInAmt'>({
    abi: iBookOfSharesABI,
    functionName: 'setPayInAmt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"transferShare"`.
 */
export function useIBookOfSharesTransferShare<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfSharesABI,
          'transferShare'
        >['abi'],
        'transferShare'
      > & { functionName?: 'transferShare' }
    : UseContractWriteConfig<
        TMode,
        typeof iBookOfSharesABI,
        'transferShare'
      > & {
        abi?: never
        functionName?: 'transferShare'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfSharesABI, 'transferShare'>({
    abi: iBookOfSharesABI,
    functionName: 'transferShare',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"updateStateOfShare"`.
 */
export function useIBookOfSharesUpdateStateOfShare<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfSharesABI,
          'updateStateOfShare'
        >['abi'],
        'updateStateOfShare'
      > & { functionName?: 'updateStateOfShare' }
    : UseContractWriteConfig<
        TMode,
        typeof iBookOfSharesABI,
        'updateStateOfShare'
      > & {
        abi?: never
        functionName?: 'updateStateOfShare'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfSharesABI, 'updateStateOfShare'>(
    {
      abi: iBookOfSharesABI,
      functionName: 'updateStateOfShare',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"withdrawPayInAmt"`.
 */
export function useIBookOfSharesWithdrawPayInAmt<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfSharesABI,
          'withdrawPayInAmt'
        >['abi'],
        'withdrawPayInAmt'
      > & { functionName?: 'withdrawPayInAmt' }
    : UseContractWriteConfig<
        TMode,
        typeof iBookOfSharesABI,
        'withdrawPayInAmt'
      > & {
        abi?: never
        functionName?: 'withdrawPayInAmt'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfSharesABI, 'withdrawPayInAmt'>({
    abi: iBookOfSharesABI,
    functionName: 'withdrawPayInAmt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfSharesABI}__.
 */
export function usePrepareIBookOfSharesWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfSharesABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfSharesABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfSharesABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"decreaseCapital"`.
 */
export function usePrepareIBookOfSharesDecreaseCapital(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfSharesABI, 'decreaseCapital'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfSharesABI,
    functionName: 'decreaseCapital',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iBookOfSharesABI,
    'decreaseCapital'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"decreaseCleanPaid"`.
 */
export function usePrepareIBookOfSharesDecreaseCleanPaid(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfSharesABI, 'decreaseCleanPaid'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfSharesABI,
    functionName: 'decreaseCleanPaid',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iBookOfSharesABI,
    'decreaseCleanPaid'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"increaseCleanPaid"`.
 */
export function usePrepareIBookOfSharesIncreaseCleanPaid(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfSharesABI, 'increaseCleanPaid'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfSharesABI,
    functionName: 'increaseCleanPaid',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iBookOfSharesABI,
    'increaseCleanPaid'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"issueShare"`.
 */
export function usePrepareIBookOfSharesIssueShare(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfSharesABI, 'issueShare'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfSharesABI,
    functionName: 'issueShare',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfSharesABI, 'issueShare'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"regShare"`.
 */
export function usePrepareIBookOfSharesRegShare(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfSharesABI, 'regShare'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfSharesABI,
    functionName: 'regShare',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfSharesABI, 'regShare'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"requestPaidInCapital"`.
 */
export function usePrepareIBookOfSharesRequestPaidInCapital(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iBookOfSharesABI,
      'requestPaidInCapital'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfSharesABI,
    functionName: 'requestPaidInCapital',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iBookOfSharesABI,
    'requestPaidInCapital'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"setPayInAmt"`.
 */
export function usePrepareIBookOfSharesSetPayInAmt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfSharesABI, 'setPayInAmt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfSharesABI,
    functionName: 'setPayInAmt',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfSharesABI, 'setPayInAmt'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"transferShare"`.
 */
export function usePrepareIBookOfSharesTransferShare(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfSharesABI, 'transferShare'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfSharesABI,
    functionName: 'transferShare',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfSharesABI, 'transferShare'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"updateStateOfShare"`.
 */
export function usePrepareIBookOfSharesUpdateStateOfShare(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iBookOfSharesABI,
      'updateStateOfShare'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfSharesABI,
    functionName: 'updateStateOfShare',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iBookOfSharesABI,
    'updateStateOfShare'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"withdrawPayInAmt"`.
 */
export function usePrepareIBookOfSharesWithdrawPayInAmt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfSharesABI, 'withdrawPayInAmt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfSharesABI,
    functionName: 'withdrawPayInAmt',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iBookOfSharesABI,
    'withdrawPayInAmt'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfSharesABI}__.
 */
export function useIBookOfSharesEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iBookOfSharesABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfSharesABI,
    ...config,
  } as UseContractEventConfig<typeof iBookOfSharesABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfSharesABI}__ and `eventName` set to `"DecreaseCleanPaid"`.
 */
export function useIBookOfSharesDecreaseCleanPaidEvent(
  config: Omit<
    UseContractEventConfig<typeof iBookOfSharesABI, 'DecreaseCleanPaid'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfSharesABI,
    eventName: 'DecreaseCleanPaid',
    ...config,
  } as UseContractEventConfig<typeof iBookOfSharesABI, 'DecreaseCleanPaid'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfSharesABI}__ and `eventName` set to `"DeregisterShare"`.
 */
export function useIBookOfSharesDeregisterShareEvent(
  config: Omit<
    UseContractEventConfig<typeof iBookOfSharesABI, 'DeregisterShare'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfSharesABI,
    eventName: 'DeregisterShare',
    ...config,
  } as UseContractEventConfig<typeof iBookOfSharesABI, 'DeregisterShare'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfSharesABI}__ and `eventName` set to `"IncreaseCleanPaid"`.
 */
export function useIBookOfSharesIncreaseCleanPaidEvent(
  config: Omit<
    UseContractEventConfig<typeof iBookOfSharesABI, 'IncreaseCleanPaid'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfSharesABI,
    eventName: 'IncreaseCleanPaid',
    ...config,
  } as UseContractEventConfig<typeof iBookOfSharesABI, 'IncreaseCleanPaid'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfSharesABI}__ and `eventName` set to `"IssueShare"`.
 */
export function useIBookOfSharesIssueShareEvent(
  config: Omit<
    UseContractEventConfig<typeof iBookOfSharesABI, 'IssueShare'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfSharesABI,
    eventName: 'IssueShare',
    ...config,
  } as UseContractEventConfig<typeof iBookOfSharesABI, 'IssueShare'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfSharesABI}__ and `eventName` set to `"PayInCapital"`.
 */
export function useIBookOfSharesPayInCapitalEvent(
  config: Omit<
    UseContractEventConfig<typeof iBookOfSharesABI, 'PayInCapital'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfSharesABI,
    eventName: 'PayInCapital',
    ...config,
  } as UseContractEventConfig<typeof iBookOfSharesABI, 'PayInCapital'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfSharesABI}__ and `eventName` set to `"SetPayInAmt"`.
 */
export function useIBookOfSharesSetPayInAmtEvent(
  config: Omit<
    UseContractEventConfig<typeof iBookOfSharesABI, 'SetPayInAmt'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfSharesABI,
    eventName: 'SetPayInAmt',
    ...config,
  } as UseContractEventConfig<typeof iBookOfSharesABI, 'SetPayInAmt'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfSharesABI}__ and `eventName` set to `"SubAmountFromShare"`.
 */
export function useIBookOfSharesSubAmountFromShareEvent(
  config: Omit<
    UseContractEventConfig<typeof iBookOfSharesABI, 'SubAmountFromShare'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfSharesABI,
    eventName: 'SubAmountFromShare',
    ...config,
  } as UseContractEventConfig<typeof iBookOfSharesABI, 'SubAmountFromShare'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfSharesABI}__ and `eventName` set to `"UpdateStateOfShare"`.
 */
export function useIBookOfSharesUpdateStateOfShareEvent(
  config: Omit<
    UseContractEventConfig<typeof iBookOfSharesABI, 'UpdateStateOfShare'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfSharesABI,
    eventName: 'UpdateStateOfShare',
    ...config,
  } as UseContractEventConfig<typeof iBookOfSharesABI, 'UpdateStateOfShare'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfSharesABI}__ and `eventName` set to `"WithdrawPayInAmt"`.
 */
export function useIBookOfSharesWithdrawPayInAmtEvent(
  config: Omit<
    UseContractEventConfig<typeof iBookOfSharesABI, 'WithdrawPayInAmt'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfSharesABI,
    eventName: 'WithdrawPayInAmt',
    ...config,
  } as UseContractEventConfig<typeof iBookOfSharesABI, 'WithdrawPayInAmt'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__.
 */
export function useIRegisterOfAgreements(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iRegisterOfAgreementsABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__.
 */
export function useIRegisterOfAgreementsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof iRegisterOfAgreementsABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfAgreementsABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfAgreementsABI,
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfAgreementsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `functionName` set to `"allClaimsAccepted"`.
 */
export function useIRegisterOfAgreementsAllClaimsAccepted<
  TSelectData = ReadContractResult<
    typeof iRegisterOfAgreementsABI,
    'allClaimsAccepted'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfAgreementsABI,
      'allClaimsAccepted',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfAgreementsABI,
    functionName: 'allClaimsAccepted',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfAgreementsABI,
    'allClaimsAccepted',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `functionName` set to `"allDTClaimsAccepted"`.
 */
export function useIRegisterOfAgreementsAllDtClaimsAccepted<
  TSelectData = ReadContractResult<
    typeof iRegisterOfAgreementsABI,
    'allDTClaimsAccepted'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfAgreementsABI,
      'allDTClaimsAccepted',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfAgreementsABI,
    functionName: 'allDTClaimsAccepted',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfAgreementsABI,
    'allDTClaimsAccepted',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `functionName` set to `"allFRClaimsAccepted"`.
 */
export function useIRegisterOfAgreementsAllFrClaimsAccepted<
  TSelectData = ReadContractResult<
    typeof iRegisterOfAgreementsABI,
    'allFRClaimsAccepted'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfAgreementsABI,
      'allFRClaimsAccepted',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfAgreementsABI,
    functionName: 'allFRClaimsAccepted',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfAgreementsABI,
    'allFRClaimsAccepted',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `functionName` set to `"closingDeadline"`.
 */
export function useIRegisterOfAgreementsClosingDeadline<
  TSelectData = ReadContractResult<
    typeof iRegisterOfAgreementsABI,
    'closingDeadline'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfAgreementsABI,
      'closingDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfAgreementsABI,
    functionName: 'closingDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfAgreementsABI,
    'closingDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `functionName` set to `"dtExecDeadline"`.
 */
export function useIRegisterOfAgreementsDtExecDeadline<
  TSelectData = ReadContractResult<
    typeof iRegisterOfAgreementsABI,
    'dtExecDeadline'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfAgreementsABI,
      'dtExecDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfAgreementsABI,
    functionName: 'dtExecDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfAgreementsABI,
    'dtExecDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `functionName` set to `"frExecDeadline"`.
 */
export function useIRegisterOfAgreementsFrExecDeadline<
  TSelectData = ReadContractResult<
    typeof iRegisterOfAgreementsABI,
    'frExecDeadline'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfAgreementsABI,
      'frExecDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfAgreementsABI,
    functionName: 'frExecDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfAgreementsABI,
    'frExecDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `functionName` set to `"getDTClaimForShare"`.
 */
export function useIRegisterOfAgreementsGetDtClaimForShare<
  TSelectData = ReadContractResult<
    typeof iRegisterOfAgreementsABI,
    'getDTClaimForShare'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfAgreementsABI,
      'getDTClaimForShare',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfAgreementsABI,
    functionName: 'getDTClaimForShare',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfAgreementsABI,
    'getDTClaimForShare',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `functionName` set to `"getDTClaimsOfDeal"`.
 */
export function useIRegisterOfAgreementsGetDtClaimsOfDeal<
  TSelectData = ReadContractResult<
    typeof iRegisterOfAgreementsABI,
    'getDTClaimsOfDeal'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfAgreementsABI,
      'getDTClaimsOfDeal',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfAgreementsABI,
    functionName: 'getDTClaimsOfDeal',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfAgreementsABI,
    'getDTClaimsOfDeal',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `functionName` set to `"getFRClaimsOfDeal"`.
 */
export function useIRegisterOfAgreementsGetFrClaimsOfDeal<
  TSelectData = ReadContractResult<
    typeof iRegisterOfAgreementsABI,
    'getFRClaimsOfDeal'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfAgreementsABI,
      'getFRClaimsOfDeal',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfAgreementsABI,
    functionName: 'getFRClaimsOfDeal',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfAgreementsABI,
    'getFRClaimsOfDeal',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `functionName` set to `"getFile"`.
 */
export function useIRegisterOfAgreementsGetFile<
  TSelectData = ReadContractResult<typeof iRegisterOfAgreementsABI, 'getFile'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfAgreementsABI,
      'getFile',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfAgreementsABI,
    functionName: 'getFile',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfAgreementsABI,
    'getFile',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `functionName` set to `"getFilesList"`.
 */
export function useIRegisterOfAgreementsGetFilesList<
  TSelectData = ReadContractResult<
    typeof iRegisterOfAgreementsABI,
    'getFilesList'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfAgreementsABI,
      'getFilesList',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfAgreementsABI,
    functionName: 'getFilesList',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfAgreementsABI,
    'getFilesList',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `functionName` set to `"getHeadOfFile"`.
 */
export function useIRegisterOfAgreementsGetHeadOfFile<
  TSelectData = ReadContractResult<
    typeof iRegisterOfAgreementsABI,
    'getHeadOfFile'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfAgreementsABI,
      'getHeadOfFile',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfAgreementsABI,
    functionName: 'getHeadOfFile',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfAgreementsABI,
    'getHeadOfFile',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `functionName` set to `"getSubjectDealsOfDT"`.
 */
export function useIRegisterOfAgreementsGetSubjectDealsOfDt<
  TSelectData = ReadContractResult<
    typeof iRegisterOfAgreementsABI,
    'getSubjectDealsOfDT'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfAgreementsABI,
      'getSubjectDealsOfDT',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfAgreementsABI,
    functionName: 'getSubjectDealsOfDT',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfAgreementsABI,
    'getSubjectDealsOfDT',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `functionName` set to `"getSubjectDealsOfFR"`.
 */
export function useIRegisterOfAgreementsGetSubjectDealsOfFr<
  TSelectData = ReadContractResult<
    typeof iRegisterOfAgreementsABI,
    'getSubjectDealsOfFR'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfAgreementsABI,
      'getSubjectDealsOfFR',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfAgreementsABI,
    functionName: 'getSubjectDealsOfFR',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfAgreementsABI,
    'getSubjectDealsOfFR',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `functionName` set to `"hasDTClaims"`.
 */
export function useIRegisterOfAgreementsHasDtClaims<
  TSelectData = ReadContractResult<
    typeof iRegisterOfAgreementsABI,
    'hasDTClaims'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfAgreementsABI,
      'hasDTClaims',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfAgreementsABI,
    functionName: 'hasDTClaims',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfAgreementsABI,
    'hasDTClaims',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `functionName` set to `"hasFRClaims"`.
 */
export function useIRegisterOfAgreementsHasFrClaims<
  TSelectData = ReadContractResult<
    typeof iRegisterOfAgreementsABI,
    'hasFRClaims'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfAgreementsABI,
      'hasFRClaims',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfAgreementsABI,
    functionName: 'hasFRClaims',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfAgreementsABI,
    'hasFRClaims',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `functionName` set to `"isRegistered"`.
 */
export function useIRegisterOfAgreementsIsRegistered<
  TSelectData = ReadContractResult<
    typeof iRegisterOfAgreementsABI,
    'isRegistered'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfAgreementsABI,
      'isRegistered',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfAgreementsABI,
    functionName: 'isRegistered',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfAgreementsABI,
    'isRegistered',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `functionName` set to `"mockResultsOfAcct"`.
 */
export function useIRegisterOfAgreementsMockResultsOfAcct<
  TSelectData = ReadContractResult<
    typeof iRegisterOfAgreementsABI,
    'mockResultsOfAcct'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfAgreementsABI,
      'mockResultsOfAcct',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfAgreementsABI,
    functionName: 'mockResultsOfAcct',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfAgreementsABI,
    'mockResultsOfAcct',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `functionName` set to `"mockResultsOfIA"`.
 */
export function useIRegisterOfAgreementsMockResultsOfIa<
  TSelectData = ReadContractResult<
    typeof iRegisterOfAgreementsABI,
    'mockResultsOfIA'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfAgreementsABI,
      'mockResultsOfIA',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfAgreementsABI,
    functionName: 'mockResultsOfIA',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfAgreementsABI,
    'mockResultsOfIA',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `functionName` set to `"qtyOfFiles"`.
 */
export function useIRegisterOfAgreementsQtyOfFiles<
  TSelectData = ReadContractResult<
    typeof iRegisterOfAgreementsABI,
    'qtyOfFiles'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfAgreementsABI,
      'qtyOfFiles',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfAgreementsABI,
    functionName: 'qtyOfFiles',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfAgreementsABI,
    'qtyOfFiles',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `functionName` set to `"signingDeadline"`.
 */
export function useIRegisterOfAgreementsSigningDeadline<
  TSelectData = ReadContractResult<
    typeof iRegisterOfAgreementsABI,
    'signingDeadline'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfAgreementsABI,
      'signingDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfAgreementsABI,
    functionName: 'signingDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfAgreementsABI,
    'signingDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `functionName` set to `"terminateStartpoint"`.
 */
export function useIRegisterOfAgreementsTerminateStartpoint<
  TSelectData = ReadContractResult<
    typeof iRegisterOfAgreementsABI,
    'terminateStartpoint'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfAgreementsABI,
      'terminateStartpoint',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfAgreementsABI,
    functionName: 'terminateStartpoint',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfAgreementsABI,
    'terminateStartpoint',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `functionName` set to `"votingDeadline"`.
 */
export function useIRegisterOfAgreementsVotingDeadline<
  TSelectData = ReadContractResult<
    typeof iRegisterOfAgreementsABI,
    'votingDeadline'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfAgreementsABI,
      'votingDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfAgreementsABI,
    functionName: 'votingDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfAgreementsABI,
    'votingDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__.
 */
export function useIRegisterOfAgreementsWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfAgreementsABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfAgreementsABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iRegisterOfAgreementsABI,
    TFunctionName
  >({ abi: iRegisterOfAgreementsABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `functionName` set to `"acceptAlongClaims"`.
 */
export function useIRegisterOfAgreementsAcceptAlongClaims<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfAgreementsABI,
          'acceptAlongClaims'
        >['abi'],
        'acceptAlongClaims'
      > & { functionName?: 'acceptAlongClaims' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfAgreementsABI,
        'acceptAlongClaims'
      > & {
        abi?: never
        functionName?: 'acceptAlongClaims'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iRegisterOfAgreementsABI,
    'acceptAlongClaims'
  >({
    abi: iRegisterOfAgreementsABI,
    functionName: 'acceptAlongClaims',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `functionName` set to `"circulateFile"`.
 */
export function useIRegisterOfAgreementsCirculateFile<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfAgreementsABI,
          'circulateFile'
        >['abi'],
        'circulateFile'
      > & { functionName?: 'circulateFile' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfAgreementsABI,
        'circulateFile'
      > & {
        abi?: never
        functionName?: 'circulateFile'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iRegisterOfAgreementsABI,
    'circulateFile'
  >({
    abi: iRegisterOfAgreementsABI,
    functionName: 'circulateFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `functionName` set to `"claimFirstRefusal"`.
 */
export function useIRegisterOfAgreementsClaimFirstRefusal<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfAgreementsABI,
          'claimFirstRefusal'
        >['abi'],
        'claimFirstRefusal'
      > & { functionName?: 'claimFirstRefusal' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfAgreementsABI,
        'claimFirstRefusal'
      > & {
        abi?: never
        functionName?: 'claimFirstRefusal'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iRegisterOfAgreementsABI,
    'claimFirstRefusal'
  >({
    abi: iRegisterOfAgreementsABI,
    functionName: 'claimFirstRefusal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `functionName` set to `"computeFirstRefusal"`.
 */
export function useIRegisterOfAgreementsComputeFirstRefusal<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfAgreementsABI,
          'computeFirstRefusal'
        >['abi'],
        'computeFirstRefusal'
      > & { functionName?: 'computeFirstRefusal' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfAgreementsABI,
        'computeFirstRefusal'
      > & {
        abi?: never
        functionName?: 'computeFirstRefusal'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iRegisterOfAgreementsABI,
    'computeFirstRefusal'
  >({
    abi: iRegisterOfAgreementsABI,
    functionName: 'computeFirstRefusal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `functionName` set to `"createMockOfIA"`.
 */
export function useIRegisterOfAgreementsCreateMockOfIa<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfAgreementsABI,
          'createMockOfIA'
        >['abi'],
        'createMockOfIA'
      > & { functionName?: 'createMockOfIA' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfAgreementsABI,
        'createMockOfIA'
      > & {
        abi?: never
        functionName?: 'createMockOfIA'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iRegisterOfAgreementsABI,
    'createMockOfIA'
  >({
    abi: iRegisterOfAgreementsABI,
    functionName: 'createMockOfIA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `functionName` set to `"execAlongRight"`.
 */
export function useIRegisterOfAgreementsExecAlongRight<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfAgreementsABI,
          'execAlongRight'
        >['abi'],
        'execAlongRight'
      > & { functionName?: 'execAlongRight' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfAgreementsABI,
        'execAlongRight'
      > & {
        abi?: never
        functionName?: 'execAlongRight'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iRegisterOfAgreementsABI,
    'execAlongRight'
  >({
    abi: iRegisterOfAgreementsABI,
    functionName: 'execAlongRight',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `functionName` set to `"execFile"`.
 */
export function useIRegisterOfAgreementsExecFile<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfAgreementsABI,
          'execFile'
        >['abi'],
        'execFile'
      > & { functionName?: 'execFile' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfAgreementsABI,
        'execFile'
      > & {
        abi?: never
        functionName?: 'execFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegisterOfAgreementsABI, 'execFile'>({
    abi: iRegisterOfAgreementsABI,
    functionName: 'execFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `functionName` set to `"isFRClaimer"`.
 */
export function useIRegisterOfAgreementsIsFrClaimer<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfAgreementsABI,
          'isFRClaimer'
        >['abi'],
        'isFRClaimer'
      > & { functionName?: 'isFRClaimer' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfAgreementsABI,
        'isFRClaimer'
      > & {
        abi?: never
        functionName?: 'isFRClaimer'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iRegisterOfAgreementsABI,
    'isFRClaimer'
  >({
    abi: iRegisterOfAgreementsABI,
    functionName: 'isFRClaimer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `functionName` set to `"mockDealOfBuy"`.
 */
export function useIRegisterOfAgreementsMockDealOfBuy<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfAgreementsABI,
          'mockDealOfBuy'
        >['abi'],
        'mockDealOfBuy'
      > & { functionName?: 'mockDealOfBuy' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfAgreementsABI,
        'mockDealOfBuy'
      > & {
        abi?: never
        functionName?: 'mockDealOfBuy'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iRegisterOfAgreementsABI,
    'mockDealOfBuy'
  >({
    abi: iRegisterOfAgreementsABI,
    functionName: 'mockDealOfBuy',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `functionName` set to `"mockDealOfSell"`.
 */
export function useIRegisterOfAgreementsMockDealOfSell<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfAgreementsABI,
          'mockDealOfSell'
        >['abi'],
        'mockDealOfSell'
      > & { functionName?: 'mockDealOfSell' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfAgreementsABI,
        'mockDealOfSell'
      > & {
        abi?: never
        functionName?: 'mockDealOfSell'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iRegisterOfAgreementsABI,
    'mockDealOfSell'
  >({
    abi: iRegisterOfAgreementsABI,
    functionName: 'mockDealOfSell',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `functionName` set to `"proposeFile"`.
 */
export function useIRegisterOfAgreementsProposeFile<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfAgreementsABI,
          'proposeFile'
        >['abi'],
        'proposeFile'
      > & { functionName?: 'proposeFile' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfAgreementsABI,
        'proposeFile'
      > & {
        abi?: never
        functionName?: 'proposeFile'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iRegisterOfAgreementsABI,
    'proposeFile'
  >({
    abi: iRegisterOfAgreementsABI,
    functionName: 'proposeFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `functionName` set to `"regFile"`.
 */
export function useIRegisterOfAgreementsRegFile<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfAgreementsABI,
          'regFile'
        >['abi'],
        'regFile'
      > & { functionName?: 'regFile' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfAgreementsABI,
        'regFile'
      > & {
        abi?: never
        functionName?: 'regFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegisterOfAgreementsABI, 'regFile'>({
    abi: iRegisterOfAgreementsABI,
    functionName: 'regFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `functionName` set to `"setStateOfFile"`.
 */
export function useIRegisterOfAgreementsSetStateOfFile<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfAgreementsABI,
          'setStateOfFile'
        >['abi'],
        'setStateOfFile'
      > & { functionName?: 'setStateOfFile' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfAgreementsABI,
        'setStateOfFile'
      > & {
        abi?: never
        functionName?: 'setStateOfFile'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iRegisterOfAgreementsABI,
    'setStateOfFile'
  >({
    abi: iRegisterOfAgreementsABI,
    functionName: 'setStateOfFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `functionName` set to `"terminateFile"`.
 */
export function useIRegisterOfAgreementsTerminateFile<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfAgreementsABI,
          'terminateFile'
        >['abi'],
        'terminateFile'
      > & { functionName?: 'terminateFile' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfAgreementsABI,
        'terminateFile'
      > & {
        abi?: never
        functionName?: 'terminateFile'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iRegisterOfAgreementsABI,
    'terminateFile'
  >({
    abi: iRegisterOfAgreementsABI,
    functionName: 'terminateFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `functionName` set to `"voteCountingForFile"`.
 */
export function useIRegisterOfAgreementsVoteCountingForFile<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfAgreementsABI,
          'voteCountingForFile'
        >['abi'],
        'voteCountingForFile'
      > & { functionName?: 'voteCountingForFile' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfAgreementsABI,
        'voteCountingForFile'
      > & {
        abi?: never
        functionName?: 'voteCountingForFile'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iRegisterOfAgreementsABI,
    'voteCountingForFile'
  >({
    abi: iRegisterOfAgreementsABI,
    functionName: 'voteCountingForFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__.
 */
export function usePrepareIRegisterOfAgreementsWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRegisterOfAgreementsABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfAgreementsABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfAgreementsABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `functionName` set to `"acceptAlongClaims"`.
 */
export function usePrepareIRegisterOfAgreementsAcceptAlongClaims(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRegisterOfAgreementsABI,
      'acceptAlongClaims'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfAgreementsABI,
    functionName: 'acceptAlongClaims',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfAgreementsABI,
    'acceptAlongClaims'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `functionName` set to `"circulateFile"`.
 */
export function usePrepareIRegisterOfAgreementsCirculateFile(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRegisterOfAgreementsABI,
      'circulateFile'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfAgreementsABI,
    functionName: 'circulateFile',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfAgreementsABI,
    'circulateFile'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `functionName` set to `"claimFirstRefusal"`.
 */
export function usePrepareIRegisterOfAgreementsClaimFirstRefusal(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRegisterOfAgreementsABI,
      'claimFirstRefusal'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfAgreementsABI,
    functionName: 'claimFirstRefusal',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfAgreementsABI,
    'claimFirstRefusal'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `functionName` set to `"computeFirstRefusal"`.
 */
export function usePrepareIRegisterOfAgreementsComputeFirstRefusal(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRegisterOfAgreementsABI,
      'computeFirstRefusal'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfAgreementsABI,
    functionName: 'computeFirstRefusal',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfAgreementsABI,
    'computeFirstRefusal'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `functionName` set to `"createMockOfIA"`.
 */
export function usePrepareIRegisterOfAgreementsCreateMockOfIa(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRegisterOfAgreementsABI,
      'createMockOfIA'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfAgreementsABI,
    functionName: 'createMockOfIA',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfAgreementsABI,
    'createMockOfIA'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `functionName` set to `"execAlongRight"`.
 */
export function usePrepareIRegisterOfAgreementsExecAlongRight(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRegisterOfAgreementsABI,
      'execAlongRight'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfAgreementsABI,
    functionName: 'execAlongRight',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfAgreementsABI,
    'execAlongRight'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `functionName` set to `"execFile"`.
 */
export function usePrepareIRegisterOfAgreementsExecFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegisterOfAgreementsABI, 'execFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfAgreementsABI,
    functionName: 'execFile',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfAgreementsABI,
    'execFile'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `functionName` set to `"isFRClaimer"`.
 */
export function usePrepareIRegisterOfAgreementsIsFrClaimer(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRegisterOfAgreementsABI,
      'isFRClaimer'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfAgreementsABI,
    functionName: 'isFRClaimer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfAgreementsABI,
    'isFRClaimer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `functionName` set to `"mockDealOfBuy"`.
 */
export function usePrepareIRegisterOfAgreementsMockDealOfBuy(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRegisterOfAgreementsABI,
      'mockDealOfBuy'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfAgreementsABI,
    functionName: 'mockDealOfBuy',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfAgreementsABI,
    'mockDealOfBuy'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `functionName` set to `"mockDealOfSell"`.
 */
export function usePrepareIRegisterOfAgreementsMockDealOfSell(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRegisterOfAgreementsABI,
      'mockDealOfSell'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfAgreementsABI,
    functionName: 'mockDealOfSell',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfAgreementsABI,
    'mockDealOfSell'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `functionName` set to `"proposeFile"`.
 */
export function usePrepareIRegisterOfAgreementsProposeFile(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRegisterOfAgreementsABI,
      'proposeFile'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfAgreementsABI,
    functionName: 'proposeFile',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfAgreementsABI,
    'proposeFile'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `functionName` set to `"regFile"`.
 */
export function usePrepareIRegisterOfAgreementsRegFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegisterOfAgreementsABI, 'regFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfAgreementsABI,
    functionName: 'regFile',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfAgreementsABI,
    'regFile'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `functionName` set to `"setStateOfFile"`.
 */
export function usePrepareIRegisterOfAgreementsSetStateOfFile(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRegisterOfAgreementsABI,
      'setStateOfFile'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfAgreementsABI,
    functionName: 'setStateOfFile',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfAgreementsABI,
    'setStateOfFile'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `functionName` set to `"terminateFile"`.
 */
export function usePrepareIRegisterOfAgreementsTerminateFile(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRegisterOfAgreementsABI,
      'terminateFile'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfAgreementsABI,
    functionName: 'terminateFile',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfAgreementsABI,
    'terminateFile'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `functionName` set to `"voteCountingForFile"`.
 */
export function usePrepareIRegisterOfAgreementsVoteCountingForFile(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRegisterOfAgreementsABI,
      'voteCountingForFile'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfAgreementsABI,
    functionName: 'voteCountingForFile',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfAgreementsABI,
    'voteCountingForFile'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__.
 */
export function useIRegisterOfAgreementsEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfAgreementsABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfAgreementsABI,
    ...config,
  } as UseContractEventConfig<typeof iRegisterOfAgreementsABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `eventName` set to `"AcceptAlongClaims"`.
 */
export function useIRegisterOfAgreementsAcceptAlongClaimsEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iRegisterOfAgreementsABI,
      'AcceptAlongClaims'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfAgreementsABI,
    eventName: 'AcceptAlongClaims',
    ...config,
  } as UseContractEventConfig<
    typeof iRegisterOfAgreementsABI,
    'AcceptAlongClaims'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `eventName` set to `"ClaimFirstRefusal"`.
 */
export function useIRegisterOfAgreementsClaimFirstRefusalEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iRegisterOfAgreementsABI,
      'ClaimFirstRefusal'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfAgreementsABI,
    eventName: 'ClaimFirstRefusal',
    ...config,
  } as UseContractEventConfig<
    typeof iRegisterOfAgreementsABI,
    'ClaimFirstRefusal'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `eventName` set to `"ComputeFirstRefusal"`.
 */
export function useIRegisterOfAgreementsComputeFirstRefusalEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iRegisterOfAgreementsABI,
      'ComputeFirstRefusal'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfAgreementsABI,
    eventName: 'ComputeFirstRefusal',
    ...config,
  } as UseContractEventConfig<
    typeof iRegisterOfAgreementsABI,
    'ComputeFirstRefusal'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `eventName` set to `"ExecAlongRight"`.
 */
export function useIRegisterOfAgreementsExecAlongRightEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfAgreementsABI, 'ExecAlongRight'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfAgreementsABI,
    eventName: 'ExecAlongRight',
    ...config,
  } as UseContractEventConfig<
    typeof iRegisterOfAgreementsABI,
    'ExecAlongRight'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfAgreementsABI}__ and `eventName` set to `"UpdateStateOfFile"`.
 */
export function useIRegisterOfAgreementsUpdateStateOfFileEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iRegisterOfAgreementsABI,
      'UpdateStateOfFile'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfAgreementsABI,
    eventName: 'UpdateStateOfFile',
    ...config,
  } as UseContractEventConfig<
    typeof iRegisterOfAgreementsABI,
    'UpdateStateOfFile'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link investmentAgreementABI}__.
 */
export function useInvestmentAgreement(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: investmentAgreementABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__.
 */
export function useInvestmentAgreementRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof investmentAgreementABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"circulated"`.
 */
export function useInvestmentAgreementCirculated<
  TSelectData = ReadContractResult<typeof investmentAgreementABI, 'circulated'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'circulated',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'circulated',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'circulated',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"counterOfClosedDeal"`.
 */
export function useInvestmentAgreementCounterOfClosedDeal<
  TSelectData = ReadContractResult<
    typeof investmentAgreementABI,
    'counterOfClosedDeal'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'counterOfClosedDeal',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'counterOfClosedDeal',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'counterOfClosedDeal',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"counterOfDeal"`.
 */
export function useInvestmentAgreementCounterOfDeal<
  TSelectData = ReadContractResult<
    typeof investmentAgreementABI,
    'counterOfDeal'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'counterOfDeal',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'counterOfDeal',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'counterOfDeal',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"established"`.
 */
export function useInvestmentAgreementEstablished<
  TSelectData = ReadContractResult<
    typeof investmentAgreementABI,
    'established'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'established',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'established',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'established',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"getBodyOfDeal"`.
 */
export function useInvestmentAgreementGetBodyOfDeal<
  TSelectData = ReadContractResult<
    typeof investmentAgreementABI,
    'getBodyOfDeal'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'getBodyOfDeal',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'getBodyOfDeal',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'getBodyOfDeal',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"getBuyers"`.
 */
export function useInvestmentAgreementGetBuyers<
  TSelectData = ReadContractResult<typeof investmentAgreementABI, 'getBuyers'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'getBuyers',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'getBuyers',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'getBuyers',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"getCirculateDate"`.
 */
export function useInvestmentAgreementGetCirculateDate<
  TSelectData = ReadContractResult<
    typeof investmentAgreementABI,
    'getCirculateDate'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'getCirculateDate',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'getCirculateDate',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'getCirculateDate',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"getClosingDays"`.
 */
export function useInvestmentAgreementGetClosingDays<
  TSelectData = ReadContractResult<
    typeof investmentAgreementABI,
    'getClosingDays'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'getClosingDays',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'getClosingDays',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'getClosingDays',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"getClosingDeadline"`.
 */
export function useInvestmentAgreementGetClosingDeadline<
  TSelectData = ReadContractResult<
    typeof investmentAgreementABI,
    'getClosingDeadline'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'getClosingDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'getClosingDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'getClosingDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"getDK"`.
 */
export function useInvestmentAgreementGetDk<
  TSelectData = ReadContractResult<typeof investmentAgreementABI, 'getDK'>,
>(
  config: Omit<
    UseContractReadConfig<typeof investmentAgreementABI, 'getDK', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'getDK',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'getDK',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"getDeal"`.
 */
export function useInvestmentAgreementGetDeal<
  TSelectData = ReadContractResult<typeof investmentAgreementABI, 'getDeal'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'getDeal',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'getDeal',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'getDeal',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"getHashLockOfDeal"`.
 */
export function useInvestmentAgreementGetHashLockOfDeal<
  TSelectData = ReadContractResult<
    typeof investmentAgreementABI,
    'getHashLockOfDeal'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'getHashLockOfDeal',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'getHashLockOfDeal',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'getHashLockOfDeal',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"getHeadOfDeal"`.
 */
export function useInvestmentAgreementGetHeadOfDeal<
  TSelectData = ReadContractResult<
    typeof investmentAgreementABI,
    'getHeadOfDeal'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'getHeadOfDeal',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'getHeadOfDeal',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'getHeadOfDeal',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"getOwner"`.
 */
export function useInvestmentAgreementGetOwner<
  TSelectData = ReadContractResult<typeof investmentAgreementABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'getOwner',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'getOwner',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"getParasOfPage"`.
 */
export function useInvestmentAgreementGetParasOfPage<
  TSelectData = ReadContractResult<
    typeof investmentAgreementABI,
    'getParasOfPage'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'getParasOfPage',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'getParasOfPage',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'getParasOfPage',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"getParties"`.
 */
export function useInvestmentAgreementGetParties<
  TSelectData = ReadContractResult<typeof investmentAgreementABI, 'getParties'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'getParties',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'getParties',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'getParties',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useInvestmentAgreementGetRoleAdmin<
  TSelectData = ReadContractResult<
    typeof investmentAgreementABI,
    'getRoleAdmin'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'getRoleAdmin',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'getRoleAdmin',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"getSellers"`.
 */
export function useInvestmentAgreementGetSellers<
  TSelectData = ReadContractResult<typeof investmentAgreementABI, 'getSellers'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'getSellers',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'getSellers',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'getSellers',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"getSeqList"`.
 */
export function useInvestmentAgreementGetSeqList<
  TSelectData = ReadContractResult<typeof investmentAgreementABI, 'getSeqList'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'getSeqList',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'getSeqList',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'getSeqList',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"getSigDeadline"`.
 */
export function useInvestmentAgreementGetSigDeadline<
  TSelectData = ReadContractResult<
    typeof investmentAgreementABI,
    'getSigDeadline'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'getSigDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'getSigDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'getSigDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"getSigOfParty"`.
 */
export function useInvestmentAgreementGetSigOfParty<
  TSelectData = ReadContractResult<
    typeof investmentAgreementABI,
    'getSigOfParty'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'getSigOfParty',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'getSigOfParty',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'getSigOfParty',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"getSigningDays"`.
 */
export function useInvestmentAgreementGetSigningDays<
  TSelectData = ReadContractResult<
    typeof investmentAgreementABI,
    'getSigningDays'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'getSigningDays',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'getSigningDays',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'getSigningDays',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"getSigsOfPage"`.
 */
export function useInvestmentAgreementGetSigsOfPage<
  TSelectData = ReadContractResult<
    typeof investmentAgreementABI,
    'getSigsOfPage'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'getSigsOfPage',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'getSigsOfPage',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'getSigsOfPage',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"getTypeOfIA"`.
 */
export function useInvestmentAgreementGetTypeOfIa<
  TSelectData = ReadContractResult<
    typeof investmentAgreementABI,
    'getTypeOfIA'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'getTypeOfIA',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'getTypeOfIA',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'getTypeOfIA',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"hasRole"`.
 */
export function useInvestmentAgreementHasRole<
  TSelectData = ReadContractResult<typeof investmentAgreementABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'hasRole',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'hasRole',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"isBuyer"`.
 */
export function useInvestmentAgreementIsBuyer<
  TSelectData = ReadContractResult<typeof investmentAgreementABI, 'isBuyer'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'isBuyer',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'isBuyer',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'isBuyer',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"isDeal"`.
 */
export function useInvestmentAgreementIsDeal<
  TSelectData = ReadContractResult<typeof investmentAgreementABI, 'isDeal'>,
>(
  config: Omit<
    UseContractReadConfig<typeof investmentAgreementABI, 'isDeal', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'isDeal',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'isDeal',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"isFinalized"`.
 */
export function useInvestmentAgreementIsFinalized<
  TSelectData = ReadContractResult<
    typeof investmentAgreementABI,
    'isFinalized'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'isFinalized',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'isFinalized',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'isFinalized',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"isInitSigner"`.
 */
export function useInvestmentAgreementIsInitSigner<
  TSelectData = ReadContractResult<
    typeof investmentAgreementABI,
    'isInitSigner'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'isInitSigner',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'isInitSigner',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'isInitSigner',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"isParty"`.
 */
export function useInvestmentAgreementIsParty<
  TSelectData = ReadContractResult<typeof investmentAgreementABI, 'isParty'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'isParty',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'isParty',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'isParty',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"isSeller"`.
 */
export function useInvestmentAgreementIsSeller<
  TSelectData = ReadContractResult<typeof investmentAgreementABI, 'isSeller'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'isSeller',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'isSeller',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'isSeller',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"isSigner"`.
 */
export function useInvestmentAgreementIsSigner<
  TSelectData = ReadContractResult<typeof investmentAgreementABI, 'isSigner'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'isSigner',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'isSigner',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'isSigner',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__.
 */
export function useInvestmentAgreementWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof investmentAgreementABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof investmentAgreementABI, TFunctionName>({
    abi: investmentAgreementABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useInvestmentAgreementAbandonRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          'abandonRole'
        >['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<
        TMode,
        typeof investmentAgreementABI,
        'abandonRole'
      > & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof investmentAgreementABI, 'abandonRole'>({
    abi: investmentAgreementABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"addBlank"`.
 */
export function useInvestmentAgreementAddBlank<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          'addBlank'
        >['abi'],
        'addBlank'
      > & { functionName?: 'addBlank' }
    : UseContractWriteConfig<
        TMode,
        typeof investmentAgreementABI,
        'addBlank'
      > & {
        abi?: never
        functionName?: 'addBlank'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof investmentAgreementABI, 'addBlank'>({
    abi: investmentAgreementABI,
    functionName: 'addBlank',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"addDeal"`.
 */
export function useInvestmentAgreementAddDeal<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          'addDeal'
        >['abi'],
        'addDeal'
      > & { functionName?: 'addDeal' }
    : UseContractWriteConfig<
        TMode,
        typeof investmentAgreementABI,
        'addDeal'
      > & {
        abi?: never
        functionName?: 'addDeal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof investmentAgreementABI, 'addDeal'>({
    abi: investmentAgreementABI,
    functionName: 'addDeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"circulateDoc"`.
 */
export function useInvestmentAgreementCirculateDoc<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          'circulateDoc'
        >['abi'],
        'circulateDoc'
      > & { functionName?: 'circulateDoc' }
    : UseContractWriteConfig<
        TMode,
        typeof investmentAgreementABI,
        'circulateDoc'
      > & {
        abi?: never
        functionName?: 'circulateDoc'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof investmentAgreementABI, 'circulateDoc'>(
    {
      abi: investmentAgreementABI,
      functionName: 'circulateDoc',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"clearDealCP"`.
 */
export function useInvestmentAgreementClearDealCp<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          'clearDealCP'
        >['abi'],
        'clearDealCP'
      > & { functionName?: 'clearDealCP' }
    : UseContractWriteConfig<
        TMode,
        typeof investmentAgreementABI,
        'clearDealCP'
      > & {
        abi?: never
        functionName?: 'clearDealCP'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof investmentAgreementABI, 'clearDealCP'>({
    abi: investmentAgreementABI,
    functionName: 'clearDealCP',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"closeDeal"`.
 */
export function useInvestmentAgreementCloseDeal<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          'closeDeal'
        >['abi'],
        'closeDeal'
      > & { functionName?: 'closeDeal' }
    : UseContractWriteConfig<
        TMode,
        typeof investmentAgreementABI,
        'closeDeal'
      > & {
        abi?: never
        functionName?: 'closeDeal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof investmentAgreementABI, 'closeDeal'>({
    abi: investmentAgreementABI,
    functionName: 'closeDeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"delDeal"`.
 */
export function useInvestmentAgreementDelDeal<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          'delDeal'
        >['abi'],
        'delDeal'
      > & { functionName?: 'delDeal' }
    : UseContractWriteConfig<
        TMode,
        typeof investmentAgreementABI,
        'delDeal'
      > & {
        abi?: never
        functionName?: 'delDeal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof investmentAgreementABI, 'delDeal'>({
    abi: investmentAgreementABI,
    functionName: 'delDeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"directCloseDeal"`.
 */
export function useInvestmentAgreementDirectCloseDeal<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          'directCloseDeal'
        >['abi'],
        'directCloseDeal'
      > & { functionName?: 'directCloseDeal' }
    : UseContractWriteConfig<
        TMode,
        typeof investmentAgreementABI,
        'directCloseDeal'
      > & {
        abi?: never
        functionName?: 'directCloseDeal'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof investmentAgreementABI,
    'directCloseDeal'
  >({
    abi: investmentAgreementABI,
    functionName: 'directCloseDeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"finalizeIA"`.
 */
export function useInvestmentAgreementFinalizeIa<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          'finalizeIA'
        >['abi'],
        'finalizeIA'
      > & { functionName?: 'finalizeIA' }
    : UseContractWriteConfig<
        TMode,
        typeof investmentAgreementABI,
        'finalizeIA'
      > & {
        abi?: never
        functionName?: 'finalizeIA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof investmentAgreementABI, 'finalizeIA'>({
    abi: investmentAgreementABI,
    functionName: 'finalizeIA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"grantRole"`.
 */
export function useInvestmentAgreementGrantRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          'grantRole'
        >['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<
        TMode,
        typeof investmentAgreementABI,
        'grantRole'
      > & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof investmentAgreementABI, 'grantRole'>({
    abi: investmentAgreementABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"init"`.
 */
export function useInvestmentAgreementInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          'init'
        >['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof investmentAgreementABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof investmentAgreementABI, 'init'>({
    abi: investmentAgreementABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"lockContents"`.
 */
export function useInvestmentAgreementLockContents<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          'lockContents'
        >['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<
        TMode,
        typeof investmentAgreementABI,
        'lockContents'
      > & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof investmentAgreementABI, 'lockContents'>(
    {
      abi: investmentAgreementABI,
      functionName: 'lockContents',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"lockDealSubject"`.
 */
export function useInvestmentAgreementLockDealSubject<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          'lockDealSubject'
        >['abi'],
        'lockDealSubject'
      > & { functionName?: 'lockDealSubject' }
    : UseContractWriteConfig<
        TMode,
        typeof investmentAgreementABI,
        'lockDealSubject'
      > & {
        abi?: never
        functionName?: 'lockDealSubject'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof investmentAgreementABI,
    'lockDealSubject'
  >({
    abi: investmentAgreementABI,
    functionName: 'lockDealSubject',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"regDeal"`.
 */
export function useInvestmentAgreementRegDeal<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          'regDeal'
        >['abi'],
        'regDeal'
      > & { functionName?: 'regDeal' }
    : UseContractWriteConfig<
        TMode,
        typeof investmentAgreementABI,
        'regDeal'
      > & {
        abi?: never
        functionName?: 'regDeal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof investmentAgreementABI, 'regDeal'>({
    abi: investmentAgreementABI,
    functionName: 'regDeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"regSig"`.
 */
export function useInvestmentAgreementRegSig<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          'regSig'
        >['abi'],
        'regSig'
      > & { functionName?: 'regSig' }
    : UseContractWriteConfig<TMode, typeof investmentAgreementABI, 'regSig'> & {
        abi?: never
        functionName?: 'regSig'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof investmentAgreementABI, 'regSig'>({
    abi: investmentAgreementABI,
    functionName: 'regSig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"releaseDealSubject"`.
 */
export function useInvestmentAgreementReleaseDealSubject<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          'releaseDealSubject'
        >['abi'],
        'releaseDealSubject'
      > & { functionName?: 'releaseDealSubject' }
    : UseContractWriteConfig<
        TMode,
        typeof investmentAgreementABI,
        'releaseDealSubject'
      > & {
        abi?: never
        functionName?: 'releaseDealSubject'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof investmentAgreementABI,
    'releaseDealSubject'
  >({
    abi: investmentAgreementABI,
    functionName: 'releaseDealSubject',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"removeBlank"`.
 */
export function useInvestmentAgreementRemoveBlank<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          'removeBlank'
        >['abi'],
        'removeBlank'
      > & { functionName?: 'removeBlank' }
    : UseContractWriteConfig<
        TMode,
        typeof investmentAgreementABI,
        'removeBlank'
      > & {
        abi?: never
        functionName?: 'removeBlank'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof investmentAgreementABI, 'removeBlank'>({
    abi: investmentAgreementABI,
    functionName: 'removeBlank',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useInvestmentAgreementRenounceRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          'renounceRole'
        >['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<
        TMode,
        typeof investmentAgreementABI,
        'renounceRole'
      > & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof investmentAgreementABI, 'renounceRole'>(
    {
      abi: investmentAgreementABI,
      functionName: 'renounceRole',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useInvestmentAgreementRevokeRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          'revokeRole'
        >['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<
        TMode,
        typeof investmentAgreementABI,
        'revokeRole'
      > & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof investmentAgreementABI, 'revokeRole'>({
    abi: investmentAgreementABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useInvestmentAgreementSetDirectKeeper<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          'setDirectKeeper'
        >['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof investmentAgreementABI,
        'setDirectKeeper'
      > & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof investmentAgreementABI,
    'setDirectKeeper'
  >({
    abi: investmentAgreementABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"setOwner"`.
 */
export function useInvestmentAgreementSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          'setOwner'
        >['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<
        TMode,
        typeof investmentAgreementABI,
        'setOwner'
      > & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof investmentAgreementABI, 'setOwner'>({
    abi: investmentAgreementABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useInvestmentAgreementSetRoleAdmin<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          'setRoleAdmin'
        >['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<
        TMode,
        typeof investmentAgreementABI,
        'setRoleAdmin'
      > & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof investmentAgreementABI, 'setRoleAdmin'>(
    {
      abi: investmentAgreementABI,
      functionName: 'setRoleAdmin',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"setTiming"`.
 */
export function useInvestmentAgreementSetTiming<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          'setTiming'
        >['abi'],
        'setTiming'
      > & { functionName?: 'setTiming' }
    : UseContractWriteConfig<
        TMode,
        typeof investmentAgreementABI,
        'setTiming'
      > & {
        abi?: never
        functionName?: 'setTiming'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof investmentAgreementABI, 'setTiming'>({
    abi: investmentAgreementABI,
    functionName: 'setTiming',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"signDoc"`.
 */
export function useInvestmentAgreementSignDoc<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          'signDoc'
        >['abi'],
        'signDoc'
      > & { functionName?: 'signDoc' }
    : UseContractWriteConfig<
        TMode,
        typeof investmentAgreementABI,
        'signDoc'
      > & {
        abi?: never
        functionName?: 'signDoc'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof investmentAgreementABI, 'signDoc'>({
    abi: investmentAgreementABI,
    functionName: 'signDoc',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function useInvestmentAgreementTakeBackKeys<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          'takeBackKeys'
        >['abi'],
        'takeBackKeys'
      > & { functionName?: 'takeBackKeys' }
    : UseContractWriteConfig<
        TMode,
        typeof investmentAgreementABI,
        'takeBackKeys'
      > & {
        abi?: never
        functionName?: 'takeBackKeys'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof investmentAgreementABI, 'takeBackKeys'>(
    {
      abi: investmentAgreementABI,
      functionName: 'takeBackKeys',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"takeGift"`.
 */
export function useInvestmentAgreementTakeGift<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          'takeGift'
        >['abi'],
        'takeGift'
      > & { functionName?: 'takeGift' }
    : UseContractWriteConfig<
        TMode,
        typeof investmentAgreementABI,
        'takeGift'
      > & {
        abi?: never
        functionName?: 'takeGift'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof investmentAgreementABI, 'takeGift'>({
    abi: investmentAgreementABI,
    functionName: 'takeGift',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"terminateDeal"`.
 */
export function useInvestmentAgreementTerminateDeal<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          'terminateDeal'
        >['abi'],
        'terminateDeal'
      > & { functionName?: 'terminateDeal' }
    : UseContractWriteConfig<
        TMode,
        typeof investmentAgreementABI,
        'terminateDeal'
      > & {
        abi?: never
        functionName?: 'terminateDeal'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof investmentAgreementABI,
    'terminateDeal'
  >({
    abi: investmentAgreementABI,
    functionName: 'terminateDeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__.
 */
export function usePrepareInvestmentAgreementWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof investmentAgreementABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof investmentAgreementABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareInvestmentAgreementAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof investmentAgreementABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof investmentAgreementABI,
    'abandonRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"addBlank"`.
 */
export function usePrepareInvestmentAgreementAddBlank(
  config: Omit<
    UsePrepareContractWriteConfig<typeof investmentAgreementABI, 'addBlank'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    functionName: 'addBlank',
    ...config,
  } as UsePrepareContractWriteConfig<typeof investmentAgreementABI, 'addBlank'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"addDeal"`.
 */
export function usePrepareInvestmentAgreementAddDeal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof investmentAgreementABI, 'addDeal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    functionName: 'addDeal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof investmentAgreementABI, 'addDeal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"circulateDoc"`.
 */
export function usePrepareInvestmentAgreementCirculateDoc(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof investmentAgreementABI,
      'circulateDoc'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    functionName: 'circulateDoc',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof investmentAgreementABI,
    'circulateDoc'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"clearDealCP"`.
 */
export function usePrepareInvestmentAgreementClearDealCp(
  config: Omit<
    UsePrepareContractWriteConfig<typeof investmentAgreementABI, 'clearDealCP'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    functionName: 'clearDealCP',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof investmentAgreementABI,
    'clearDealCP'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"closeDeal"`.
 */
export function usePrepareInvestmentAgreementCloseDeal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof investmentAgreementABI, 'closeDeal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    functionName: 'closeDeal',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof investmentAgreementABI,
    'closeDeal'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"delDeal"`.
 */
export function usePrepareInvestmentAgreementDelDeal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof investmentAgreementABI, 'delDeal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    functionName: 'delDeal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof investmentAgreementABI, 'delDeal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"directCloseDeal"`.
 */
export function usePrepareInvestmentAgreementDirectCloseDeal(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof investmentAgreementABI,
      'directCloseDeal'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    functionName: 'directCloseDeal',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof investmentAgreementABI,
    'directCloseDeal'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"finalizeIA"`.
 */
export function usePrepareInvestmentAgreementFinalizeIa(
  config: Omit<
    UsePrepareContractWriteConfig<typeof investmentAgreementABI, 'finalizeIA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    functionName: 'finalizeIA',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof investmentAgreementABI,
    'finalizeIA'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareInvestmentAgreementGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof investmentAgreementABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof investmentAgreementABI,
    'grantRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareInvestmentAgreementInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof investmentAgreementABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof investmentAgreementABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareInvestmentAgreementLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof investmentAgreementABI,
      'lockContents'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof investmentAgreementABI,
    'lockContents'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"lockDealSubject"`.
 */
export function usePrepareInvestmentAgreementLockDealSubject(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof investmentAgreementABI,
      'lockDealSubject'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    functionName: 'lockDealSubject',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof investmentAgreementABI,
    'lockDealSubject'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"regDeal"`.
 */
export function usePrepareInvestmentAgreementRegDeal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof investmentAgreementABI, 'regDeal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    functionName: 'regDeal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof investmentAgreementABI, 'regDeal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"regSig"`.
 */
export function usePrepareInvestmentAgreementRegSig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof investmentAgreementABI, 'regSig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    functionName: 'regSig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof investmentAgreementABI, 'regSig'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"releaseDealSubject"`.
 */
export function usePrepareInvestmentAgreementReleaseDealSubject(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof investmentAgreementABI,
      'releaseDealSubject'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    functionName: 'releaseDealSubject',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof investmentAgreementABI,
    'releaseDealSubject'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"removeBlank"`.
 */
export function usePrepareInvestmentAgreementRemoveBlank(
  config: Omit<
    UsePrepareContractWriteConfig<typeof investmentAgreementABI, 'removeBlank'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    functionName: 'removeBlank',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof investmentAgreementABI,
    'removeBlank'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareInvestmentAgreementRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof investmentAgreementABI,
      'renounceRole'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof investmentAgreementABI,
    'renounceRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareInvestmentAgreementRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof investmentAgreementABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof investmentAgreementABI,
    'revokeRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareInvestmentAgreementSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof investmentAgreementABI,
      'setDirectKeeper'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof investmentAgreementABI,
    'setDirectKeeper'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareInvestmentAgreementSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof investmentAgreementABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof investmentAgreementABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareInvestmentAgreementSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof investmentAgreementABI,
      'setRoleAdmin'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof investmentAgreementABI,
    'setRoleAdmin'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"setTiming"`.
 */
export function usePrepareInvestmentAgreementSetTiming(
  config: Omit<
    UsePrepareContractWriteConfig<typeof investmentAgreementABI, 'setTiming'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    functionName: 'setTiming',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof investmentAgreementABI,
    'setTiming'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"signDoc"`.
 */
export function usePrepareInvestmentAgreementSignDoc(
  config: Omit<
    UsePrepareContractWriteConfig<typeof investmentAgreementABI, 'signDoc'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    functionName: 'signDoc',
    ...config,
  } as UsePrepareContractWriteConfig<typeof investmentAgreementABI, 'signDoc'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function usePrepareInvestmentAgreementTakeBackKeys(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof investmentAgreementABI,
      'takeBackKeys'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    functionName: 'takeBackKeys',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof investmentAgreementABI,
    'takeBackKeys'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"takeGift"`.
 */
export function usePrepareInvestmentAgreementTakeGift(
  config: Omit<
    UsePrepareContractWriteConfig<typeof investmentAgreementABI, 'takeGift'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    functionName: 'takeGift',
    ...config,
  } as UsePrepareContractWriteConfig<typeof investmentAgreementABI, 'takeGift'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"terminateDeal"`.
 */
export function usePrepareInvestmentAgreementTerminateDeal(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof investmentAgreementABI,
      'terminateDeal'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    functionName: 'terminateDeal',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof investmentAgreementABI,
    'terminateDeal'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link investmentAgreementABI}__.
 */
export function useInvestmentAgreementEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof investmentAgreementABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: investmentAgreementABI,
    ...config,
  } as UseContractEventConfig<typeof investmentAgreementABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link investmentAgreementABI}__ and `eventName` set to `"AddDeal"`.
 */
export function useInvestmentAgreementAddDealEvent(
  config: Omit<
    UseContractEventConfig<typeof investmentAgreementABI, 'AddDeal'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: investmentAgreementABI,
    eventName: 'AddDeal',
    ...config,
  } as UseContractEventConfig<typeof investmentAgreementABI, 'AddDeal'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link investmentAgreementABI}__ and `eventName` set to `"CirculateDoc"`.
 */
export function useInvestmentAgreementCirculateDocEvent(
  config: Omit<
    UseContractEventConfig<typeof investmentAgreementABI, 'CirculateDoc'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: investmentAgreementABI,
    eventName: 'CirculateDoc',
    ...config,
  } as UseContractEventConfig<typeof investmentAgreementABI, 'CirculateDoc'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link investmentAgreementABI}__ and `eventName` set to `"ClearDealCP"`.
 */
export function useInvestmentAgreementClearDealCpEvent(
  config: Omit<
    UseContractEventConfig<typeof investmentAgreementABI, 'ClearDealCP'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: investmentAgreementABI,
    eventName: 'ClearDealCP',
    ...config,
  } as UseContractEventConfig<typeof investmentAgreementABI, 'ClearDealCP'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link investmentAgreementABI}__ and `eventName` set to `"CloseDeal"`.
 */
export function useInvestmentAgreementCloseDealEvent(
  config: Omit<
    UseContractEventConfig<typeof investmentAgreementABI, 'CloseDeal'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: investmentAgreementABI,
    eventName: 'CloseDeal',
    ...config,
  } as UseContractEventConfig<typeof investmentAgreementABI, 'CloseDeal'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link investmentAgreementABI}__ and `eventName` set to `"Init"`.
 */
export function useInvestmentAgreementInitEvent(
  config: Omit<
    UseContractEventConfig<typeof investmentAgreementABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: investmentAgreementABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof investmentAgreementABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link investmentAgreementABI}__ and `eventName` set to `"LockContents"`.
 */
export function useInvestmentAgreementLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof investmentAgreementABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: investmentAgreementABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof investmentAgreementABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link investmentAgreementABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useInvestmentAgreementSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof investmentAgreementABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: investmentAgreementABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof investmentAgreementABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link investmentAgreementABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useInvestmentAgreementSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof investmentAgreementABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: investmentAgreementABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof investmentAgreementABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link investmentAgreementABI}__ and `eventName` set to `"SetRoleAdmin"`.
 */
export function useInvestmentAgreementSetRoleAdminEvent(
  config: Omit<
    UseContractEventConfig<typeof investmentAgreementABI, 'SetRoleAdmin'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: investmentAgreementABI,
    eventName: 'SetRoleAdmin',
    ...config,
  } as UseContractEventConfig<typeof investmentAgreementABI, 'SetRoleAdmin'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link investmentAgreementABI}__ and `eventName` set to `"TerminateDeal"`.
 */
export function useInvestmentAgreementTerminateDealEvent(
  config: Omit<
    UseContractEventConfig<typeof investmentAgreementABI, 'TerminateDeal'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: investmentAgreementABI,
    eventName: 'TerminateDeal',
    ...config,
  } as UseContractEventConfig<typeof investmentAgreementABI, 'TerminateDeal'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iRegisterOfConstitutionABI}__.
 */
export function useIRegisterOfConstitution(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iRegisterOfConstitutionABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfConstitutionABI}__.
 */
export function useIRegisterOfConstitutionRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof iRegisterOfConstitutionABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfConstitutionABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfConstitutionABI,
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfConstitutionABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfConstitutionABI}__ and `functionName` set to `"closingDeadline"`.
 */
export function useIRegisterOfConstitutionClosingDeadline<
  TSelectData = ReadContractResult<
    typeof iRegisterOfConstitutionABI,
    'closingDeadline'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfConstitutionABI,
      'closingDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfConstitutionABI,
    functionName: 'closingDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfConstitutionABI,
    'closingDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfConstitutionABI}__ and `functionName` set to `"dtExecDeadline"`.
 */
export function useIRegisterOfConstitutionDtExecDeadline<
  TSelectData = ReadContractResult<
    typeof iRegisterOfConstitutionABI,
    'dtExecDeadline'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfConstitutionABI,
      'dtExecDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfConstitutionABI,
    functionName: 'dtExecDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfConstitutionABI,
    'dtExecDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfConstitutionABI}__ and `functionName` set to `"frExecDeadline"`.
 */
export function useIRegisterOfConstitutionFrExecDeadline<
  TSelectData = ReadContractResult<
    typeof iRegisterOfConstitutionABI,
    'frExecDeadline'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfConstitutionABI,
      'frExecDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfConstitutionABI,
    functionName: 'frExecDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfConstitutionABI,
    'frExecDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfConstitutionABI}__ and `functionName` set to `"getFile"`.
 */
export function useIRegisterOfConstitutionGetFile<
  TSelectData = ReadContractResult<
    typeof iRegisterOfConstitutionABI,
    'getFile'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfConstitutionABI,
      'getFile',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfConstitutionABI,
    functionName: 'getFile',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfConstitutionABI,
    'getFile',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfConstitutionABI}__ and `functionName` set to `"getFilesList"`.
 */
export function useIRegisterOfConstitutionGetFilesList<
  TSelectData = ReadContractResult<
    typeof iRegisterOfConstitutionABI,
    'getFilesList'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfConstitutionABI,
      'getFilesList',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfConstitutionABI,
    functionName: 'getFilesList',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfConstitutionABI,
    'getFilesList',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfConstitutionABI}__ and `functionName` set to `"getHeadOfFile"`.
 */
export function useIRegisterOfConstitutionGetHeadOfFile<
  TSelectData = ReadContractResult<
    typeof iRegisterOfConstitutionABI,
    'getHeadOfFile'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfConstitutionABI,
      'getHeadOfFile',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfConstitutionABI,
    functionName: 'getHeadOfFile',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfConstitutionABI,
    'getHeadOfFile',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfConstitutionABI}__ and `functionName` set to `"isRegistered"`.
 */
export function useIRegisterOfConstitutionIsRegistered<
  TSelectData = ReadContractResult<
    typeof iRegisterOfConstitutionABI,
    'isRegistered'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfConstitutionABI,
      'isRegistered',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfConstitutionABI,
    functionName: 'isRegistered',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfConstitutionABI,
    'isRegistered',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfConstitutionABI}__ and `functionName` set to `"pointer"`.
 */
export function useIRegisterOfConstitutionPointer<
  TSelectData = ReadContractResult<
    typeof iRegisterOfConstitutionABI,
    'pointer'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfConstitutionABI,
      'pointer',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfConstitutionABI,
    functionName: 'pointer',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfConstitutionABI,
    'pointer',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfConstitutionABI}__ and `functionName` set to `"qtyOfFiles"`.
 */
export function useIRegisterOfConstitutionQtyOfFiles<
  TSelectData = ReadContractResult<
    typeof iRegisterOfConstitutionABI,
    'qtyOfFiles'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfConstitutionABI,
      'qtyOfFiles',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfConstitutionABI,
    functionName: 'qtyOfFiles',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfConstitutionABI,
    'qtyOfFiles',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfConstitutionABI}__ and `functionName` set to `"signingDeadline"`.
 */
export function useIRegisterOfConstitutionSigningDeadline<
  TSelectData = ReadContractResult<
    typeof iRegisterOfConstitutionABI,
    'signingDeadline'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfConstitutionABI,
      'signingDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfConstitutionABI,
    functionName: 'signingDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfConstitutionABI,
    'signingDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfConstitutionABI}__ and `functionName` set to `"terminateStartpoint"`.
 */
export function useIRegisterOfConstitutionTerminateStartpoint<
  TSelectData = ReadContractResult<
    typeof iRegisterOfConstitutionABI,
    'terminateStartpoint'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfConstitutionABI,
      'terminateStartpoint',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfConstitutionABI,
    functionName: 'terminateStartpoint',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfConstitutionABI,
    'terminateStartpoint',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfConstitutionABI}__ and `functionName` set to `"votingDeadline"`.
 */
export function useIRegisterOfConstitutionVotingDeadline<
  TSelectData = ReadContractResult<
    typeof iRegisterOfConstitutionABI,
    'votingDeadline'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfConstitutionABI,
      'votingDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfConstitutionABI,
    functionName: 'votingDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfConstitutionABI,
    'votingDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfConstitutionABI}__.
 */
export function useIRegisterOfConstitutionWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfConstitutionABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfConstitutionABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iRegisterOfConstitutionABI,
    TFunctionName
  >({ abi: iRegisterOfConstitutionABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfConstitutionABI}__ and `functionName` set to `"changePointer"`.
 */
export function useIRegisterOfConstitutionChangePointer<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfConstitutionABI,
          'changePointer'
        >['abi'],
        'changePointer'
      > & { functionName?: 'changePointer' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfConstitutionABI,
        'changePointer'
      > & {
        abi?: never
        functionName?: 'changePointer'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iRegisterOfConstitutionABI,
    'changePointer'
  >({
    abi: iRegisterOfConstitutionABI,
    functionName: 'changePointer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfConstitutionABI}__ and `functionName` set to `"circulateFile"`.
 */
export function useIRegisterOfConstitutionCirculateFile<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfConstitutionABI,
          'circulateFile'
        >['abi'],
        'circulateFile'
      > & { functionName?: 'circulateFile' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfConstitutionABI,
        'circulateFile'
      > & {
        abi?: never
        functionName?: 'circulateFile'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iRegisterOfConstitutionABI,
    'circulateFile'
  >({
    abi: iRegisterOfConstitutionABI,
    functionName: 'circulateFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfConstitutionABI}__ and `functionName` set to `"execFile"`.
 */
export function useIRegisterOfConstitutionExecFile<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfConstitutionABI,
          'execFile'
        >['abi'],
        'execFile'
      > & { functionName?: 'execFile' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfConstitutionABI,
        'execFile'
      > & {
        abi?: never
        functionName?: 'execFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegisterOfConstitutionABI, 'execFile'>(
    {
      abi: iRegisterOfConstitutionABI,
      functionName: 'execFile',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfConstitutionABI}__ and `functionName` set to `"proposeFile"`.
 */
export function useIRegisterOfConstitutionProposeFile<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfConstitutionABI,
          'proposeFile'
        >['abi'],
        'proposeFile'
      > & { functionName?: 'proposeFile' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfConstitutionABI,
        'proposeFile'
      > & {
        abi?: never
        functionName?: 'proposeFile'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iRegisterOfConstitutionABI,
    'proposeFile'
  >({
    abi: iRegisterOfConstitutionABI,
    functionName: 'proposeFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfConstitutionABI}__ and `functionName` set to `"regFile"`.
 */
export function useIRegisterOfConstitutionRegFile<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfConstitutionABI,
          'regFile'
        >['abi'],
        'regFile'
      > & { functionName?: 'regFile' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfConstitutionABI,
        'regFile'
      > & {
        abi?: never
        functionName?: 'regFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegisterOfConstitutionABI, 'regFile'>({
    abi: iRegisterOfConstitutionABI,
    functionName: 'regFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfConstitutionABI}__ and `functionName` set to `"setStateOfFile"`.
 */
export function useIRegisterOfConstitutionSetStateOfFile<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfConstitutionABI,
          'setStateOfFile'
        >['abi'],
        'setStateOfFile'
      > & { functionName?: 'setStateOfFile' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfConstitutionABI,
        'setStateOfFile'
      > & {
        abi?: never
        functionName?: 'setStateOfFile'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iRegisterOfConstitutionABI,
    'setStateOfFile'
  >({
    abi: iRegisterOfConstitutionABI,
    functionName: 'setStateOfFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfConstitutionABI}__ and `functionName` set to `"terminateFile"`.
 */
export function useIRegisterOfConstitutionTerminateFile<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfConstitutionABI,
          'terminateFile'
        >['abi'],
        'terminateFile'
      > & { functionName?: 'terminateFile' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfConstitutionABI,
        'terminateFile'
      > & {
        abi?: never
        functionName?: 'terminateFile'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iRegisterOfConstitutionABI,
    'terminateFile'
  >({
    abi: iRegisterOfConstitutionABI,
    functionName: 'terminateFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfConstitutionABI}__ and `functionName` set to `"voteCountingForFile"`.
 */
export function useIRegisterOfConstitutionVoteCountingForFile<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfConstitutionABI,
          'voteCountingForFile'
        >['abi'],
        'voteCountingForFile'
      > & { functionName?: 'voteCountingForFile' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfConstitutionABI,
        'voteCountingForFile'
      > & {
        abi?: never
        functionName?: 'voteCountingForFile'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iRegisterOfConstitutionABI,
    'voteCountingForFile'
  >({
    abi: iRegisterOfConstitutionABI,
    functionName: 'voteCountingForFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfConstitutionABI}__.
 */
export function usePrepareIRegisterOfConstitutionWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRegisterOfConstitutionABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfConstitutionABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfConstitutionABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfConstitutionABI}__ and `functionName` set to `"changePointer"`.
 */
export function usePrepareIRegisterOfConstitutionChangePointer(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRegisterOfConstitutionABI,
      'changePointer'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfConstitutionABI,
    functionName: 'changePointer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfConstitutionABI,
    'changePointer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfConstitutionABI}__ and `functionName` set to `"circulateFile"`.
 */
export function usePrepareIRegisterOfConstitutionCirculateFile(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRegisterOfConstitutionABI,
      'circulateFile'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfConstitutionABI,
    functionName: 'circulateFile',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfConstitutionABI,
    'circulateFile'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfConstitutionABI}__ and `functionName` set to `"execFile"`.
 */
export function usePrepareIRegisterOfConstitutionExecFile(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRegisterOfConstitutionABI,
      'execFile'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfConstitutionABI,
    functionName: 'execFile',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfConstitutionABI,
    'execFile'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfConstitutionABI}__ and `functionName` set to `"proposeFile"`.
 */
export function usePrepareIRegisterOfConstitutionProposeFile(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRegisterOfConstitutionABI,
      'proposeFile'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfConstitutionABI,
    functionName: 'proposeFile',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfConstitutionABI,
    'proposeFile'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfConstitutionABI}__ and `functionName` set to `"regFile"`.
 */
export function usePrepareIRegisterOfConstitutionRegFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegisterOfConstitutionABI, 'regFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfConstitutionABI,
    functionName: 'regFile',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfConstitutionABI,
    'regFile'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfConstitutionABI}__ and `functionName` set to `"setStateOfFile"`.
 */
export function usePrepareIRegisterOfConstitutionSetStateOfFile(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRegisterOfConstitutionABI,
      'setStateOfFile'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfConstitutionABI,
    functionName: 'setStateOfFile',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfConstitutionABI,
    'setStateOfFile'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfConstitutionABI}__ and `functionName` set to `"terminateFile"`.
 */
export function usePrepareIRegisterOfConstitutionTerminateFile(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRegisterOfConstitutionABI,
      'terminateFile'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfConstitutionABI,
    functionName: 'terminateFile',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfConstitutionABI,
    'terminateFile'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfConstitutionABI}__ and `functionName` set to `"voteCountingForFile"`.
 */
export function usePrepareIRegisterOfConstitutionVoteCountingForFile(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRegisterOfConstitutionABI,
      'voteCountingForFile'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfConstitutionABI,
    functionName: 'voteCountingForFile',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfConstitutionABI,
    'voteCountingForFile'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfConstitutionABI}__.
 */
export function useIRegisterOfConstitutionEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfConstitutionABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfConstitutionABI,
    ...config,
  } as UseContractEventConfig<typeof iRegisterOfConstitutionABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfConstitutionABI}__ and `eventName` set to `"ChangePointer"`.
 */
export function useIRegisterOfConstitutionChangePointerEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfConstitutionABI, 'ChangePointer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfConstitutionABI,
    eventName: 'ChangePointer',
    ...config,
  } as UseContractEventConfig<
    typeof iRegisterOfConstitutionABI,
    'ChangePointer'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfConstitutionABI}__ and `eventName` set to `"UpdateStateOfFile"`.
 */
export function useIRegisterOfConstitutionUpdateStateOfFileEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iRegisterOfConstitutionABI,
      'UpdateStateOfFile'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfConstitutionABI,
    eventName: 'UpdateStateOfFile',
    ...config,
  } as UseContractEventConfig<
    typeof iRegisterOfConstitutionABI,
    'UpdateStateOfFile'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link registerOfAgreementsABI}__.
 */
export function useRegisterOfAgreements(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: registerOfAgreementsABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfAgreementsABI}__.
 */
export function useRegisterOfAgreementsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof registerOfAgreementsABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfAgreementsABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfAgreementsABI,
    ...config,
  } as UseContractReadConfig<
    typeof registerOfAgreementsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"allClaimsAccepted"`.
 */
export function useRegisterOfAgreementsAllClaimsAccepted<
  TSelectData = ReadContractResult<
    typeof registerOfAgreementsABI,
    'allClaimsAccepted'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfAgreementsABI,
      'allClaimsAccepted',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfAgreementsABI,
    functionName: 'allClaimsAccepted',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfAgreementsABI,
    'allClaimsAccepted',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"allDTClaimsAccepted"`.
 */
export function useRegisterOfAgreementsAllDtClaimsAccepted<
  TSelectData = ReadContractResult<
    typeof registerOfAgreementsABI,
    'allDTClaimsAccepted'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfAgreementsABI,
      'allDTClaimsAccepted',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfAgreementsABI,
    functionName: 'allDTClaimsAccepted',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfAgreementsABI,
    'allDTClaimsAccepted',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"allFRClaimsAccepted"`.
 */
export function useRegisterOfAgreementsAllFrClaimsAccepted<
  TSelectData = ReadContractResult<
    typeof registerOfAgreementsABI,
    'allFRClaimsAccepted'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfAgreementsABI,
      'allFRClaimsAccepted',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfAgreementsABI,
    functionName: 'allFRClaimsAccepted',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfAgreementsABI,
    'allFRClaimsAccepted',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"closingDeadline"`.
 */
export function useRegisterOfAgreementsClosingDeadline<
  TSelectData = ReadContractResult<
    typeof registerOfAgreementsABI,
    'closingDeadline'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfAgreementsABI,
      'closingDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfAgreementsABI,
    functionName: 'closingDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfAgreementsABI,
    'closingDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"dtExecDeadline"`.
 */
export function useRegisterOfAgreementsDtExecDeadline<
  TSelectData = ReadContractResult<
    typeof registerOfAgreementsABI,
    'dtExecDeadline'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfAgreementsABI,
      'dtExecDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfAgreementsABI,
    functionName: 'dtExecDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfAgreementsABI,
    'dtExecDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"frExecDeadline"`.
 */
export function useRegisterOfAgreementsFrExecDeadline<
  TSelectData = ReadContractResult<
    typeof registerOfAgreementsABI,
    'frExecDeadline'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfAgreementsABI,
      'frExecDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfAgreementsABI,
    functionName: 'frExecDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfAgreementsABI,
    'frExecDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"getDK"`.
 */
export function useRegisterOfAgreementsGetDk<
  TSelectData = ReadContractResult<typeof registerOfAgreementsABI, 'getDK'>,
>(
  config: Omit<
    UseContractReadConfig<typeof registerOfAgreementsABI, 'getDK', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfAgreementsABI,
    functionName: 'getDK',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfAgreementsABI,
    'getDK',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"getDTClaimForShare"`.
 */
export function useRegisterOfAgreementsGetDtClaimForShare<
  TSelectData = ReadContractResult<
    typeof registerOfAgreementsABI,
    'getDTClaimForShare'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfAgreementsABI,
      'getDTClaimForShare',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfAgreementsABI,
    functionName: 'getDTClaimForShare',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfAgreementsABI,
    'getDTClaimForShare',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"getDTClaimsOfDeal"`.
 */
export function useRegisterOfAgreementsGetDtClaimsOfDeal<
  TSelectData = ReadContractResult<
    typeof registerOfAgreementsABI,
    'getDTClaimsOfDeal'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfAgreementsABI,
      'getDTClaimsOfDeal',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfAgreementsABI,
    functionName: 'getDTClaimsOfDeal',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfAgreementsABI,
    'getDTClaimsOfDeal',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"getFRClaimsOfDeal"`.
 */
export function useRegisterOfAgreementsGetFrClaimsOfDeal<
  TSelectData = ReadContractResult<
    typeof registerOfAgreementsABI,
    'getFRClaimsOfDeal'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfAgreementsABI,
      'getFRClaimsOfDeal',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfAgreementsABI,
    functionName: 'getFRClaimsOfDeal',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfAgreementsABI,
    'getFRClaimsOfDeal',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"getFile"`.
 */
export function useRegisterOfAgreementsGetFile<
  TSelectData = ReadContractResult<typeof registerOfAgreementsABI, 'getFile'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfAgreementsABI,
      'getFile',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfAgreementsABI,
    functionName: 'getFile',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfAgreementsABI,
    'getFile',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"getFilesList"`.
 */
export function useRegisterOfAgreementsGetFilesList<
  TSelectData = ReadContractResult<
    typeof registerOfAgreementsABI,
    'getFilesList'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfAgreementsABI,
      'getFilesList',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfAgreementsABI,
    functionName: 'getFilesList',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfAgreementsABI,
    'getFilesList',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"getHeadOfFile"`.
 */
export function useRegisterOfAgreementsGetHeadOfFile<
  TSelectData = ReadContractResult<
    typeof registerOfAgreementsABI,
    'getHeadOfFile'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfAgreementsABI,
      'getHeadOfFile',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfAgreementsABI,
    functionName: 'getHeadOfFile',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfAgreementsABI,
    'getHeadOfFile',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"getOwner"`.
 */
export function useRegisterOfAgreementsGetOwner<
  TSelectData = ReadContractResult<typeof registerOfAgreementsABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfAgreementsABI,
      'getOwner',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfAgreementsABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfAgreementsABI,
    'getOwner',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useRegisterOfAgreementsGetRoleAdmin<
  TSelectData = ReadContractResult<
    typeof registerOfAgreementsABI,
    'getRoleAdmin'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfAgreementsABI,
      'getRoleAdmin',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfAgreementsABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfAgreementsABI,
    'getRoleAdmin',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"getSubjectDealsOfDT"`.
 */
export function useRegisterOfAgreementsGetSubjectDealsOfDt<
  TSelectData = ReadContractResult<
    typeof registerOfAgreementsABI,
    'getSubjectDealsOfDT'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfAgreementsABI,
      'getSubjectDealsOfDT',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfAgreementsABI,
    functionName: 'getSubjectDealsOfDT',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfAgreementsABI,
    'getSubjectDealsOfDT',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"getSubjectDealsOfFR"`.
 */
export function useRegisterOfAgreementsGetSubjectDealsOfFr<
  TSelectData = ReadContractResult<
    typeof registerOfAgreementsABI,
    'getSubjectDealsOfFR'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfAgreementsABI,
      'getSubjectDealsOfFR',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfAgreementsABI,
    functionName: 'getSubjectDealsOfFR',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfAgreementsABI,
    'getSubjectDealsOfFR',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"hasDTClaims"`.
 */
export function useRegisterOfAgreementsHasDtClaims<
  TSelectData = ReadContractResult<
    typeof registerOfAgreementsABI,
    'hasDTClaims'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfAgreementsABI,
      'hasDTClaims',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfAgreementsABI,
    functionName: 'hasDTClaims',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfAgreementsABI,
    'hasDTClaims',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"hasFRClaims"`.
 */
export function useRegisterOfAgreementsHasFrClaims<
  TSelectData = ReadContractResult<
    typeof registerOfAgreementsABI,
    'hasFRClaims'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfAgreementsABI,
      'hasFRClaims',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfAgreementsABI,
    functionName: 'hasFRClaims',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfAgreementsABI,
    'hasFRClaims',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"hasRole"`.
 */
export function useRegisterOfAgreementsHasRole<
  TSelectData = ReadContractResult<typeof registerOfAgreementsABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfAgreementsABI,
      'hasRole',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfAgreementsABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfAgreementsABI,
    'hasRole',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"isFRClaimer"`.
 */
export function useRegisterOfAgreementsIsFrClaimer<
  TSelectData = ReadContractResult<
    typeof registerOfAgreementsABI,
    'isFRClaimer'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfAgreementsABI,
      'isFRClaimer',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfAgreementsABI,
    functionName: 'isFRClaimer',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfAgreementsABI,
    'isFRClaimer',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"isFinalized"`.
 */
export function useRegisterOfAgreementsIsFinalized<
  TSelectData = ReadContractResult<
    typeof registerOfAgreementsABI,
    'isFinalized'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfAgreementsABI,
      'isFinalized',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfAgreementsABI,
    functionName: 'isFinalized',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfAgreementsABI,
    'isFinalized',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"isRegistered"`.
 */
export function useRegisterOfAgreementsIsRegistered<
  TSelectData = ReadContractResult<
    typeof registerOfAgreementsABI,
    'isRegistered'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfAgreementsABI,
      'isRegistered',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfAgreementsABI,
    functionName: 'isRegistered',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfAgreementsABI,
    'isRegistered',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"mockResultsOfAcct"`.
 */
export function useRegisterOfAgreementsMockResultsOfAcct<
  TSelectData = ReadContractResult<
    typeof registerOfAgreementsABI,
    'mockResultsOfAcct'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfAgreementsABI,
      'mockResultsOfAcct',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfAgreementsABI,
    functionName: 'mockResultsOfAcct',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfAgreementsABI,
    'mockResultsOfAcct',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"mockResultsOfIA"`.
 */
export function useRegisterOfAgreementsMockResultsOfIa<
  TSelectData = ReadContractResult<
    typeof registerOfAgreementsABI,
    'mockResultsOfIA'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfAgreementsABI,
      'mockResultsOfIA',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfAgreementsABI,
    functionName: 'mockResultsOfIA',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfAgreementsABI,
    'mockResultsOfIA',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"qtyOfFiles"`.
 */
export function useRegisterOfAgreementsQtyOfFiles<
  TSelectData = ReadContractResult<
    typeof registerOfAgreementsABI,
    'qtyOfFiles'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfAgreementsABI,
      'qtyOfFiles',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfAgreementsABI,
    functionName: 'qtyOfFiles',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfAgreementsABI,
    'qtyOfFiles',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"signingDeadline"`.
 */
export function useRegisterOfAgreementsSigningDeadline<
  TSelectData = ReadContractResult<
    typeof registerOfAgreementsABI,
    'signingDeadline'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfAgreementsABI,
      'signingDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfAgreementsABI,
    functionName: 'signingDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfAgreementsABI,
    'signingDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"terminateStartpoint"`.
 */
export function useRegisterOfAgreementsTerminateStartpoint<
  TSelectData = ReadContractResult<
    typeof registerOfAgreementsABI,
    'terminateStartpoint'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfAgreementsABI,
      'terminateStartpoint',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfAgreementsABI,
    functionName: 'terminateStartpoint',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfAgreementsABI,
    'terminateStartpoint',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"votingDeadline"`.
 */
export function useRegisterOfAgreementsVotingDeadline<
  TSelectData = ReadContractResult<
    typeof registerOfAgreementsABI,
    'votingDeadline'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfAgreementsABI,
      'votingDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfAgreementsABI,
    functionName: 'votingDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfAgreementsABI,
    'votingDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfAgreementsABI}__.
 */
export function useRegisterOfAgreementsWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfAgreementsABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof registerOfAgreementsABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfAgreementsABI, TFunctionName>(
    { abi: registerOfAgreementsABI, ...config } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useRegisterOfAgreementsAbandonRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfAgreementsABI,
          'abandonRole'
        >['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfAgreementsABI,
        'abandonRole'
      > & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfAgreementsABI, 'abandonRole'>(
    {
      abi: registerOfAgreementsABI,
      functionName: 'abandonRole',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"acceptAlongClaims"`.
 */
export function useRegisterOfAgreementsAcceptAlongClaims<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfAgreementsABI,
          'acceptAlongClaims'
        >['abi'],
        'acceptAlongClaims'
      > & { functionName?: 'acceptAlongClaims' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfAgreementsABI,
        'acceptAlongClaims'
      > & {
        abi?: never
        functionName?: 'acceptAlongClaims'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfAgreementsABI,
    'acceptAlongClaims'
  >({
    abi: registerOfAgreementsABI,
    functionName: 'acceptAlongClaims',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"circulateFile"`.
 */
export function useRegisterOfAgreementsCirculateFile<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfAgreementsABI,
          'circulateFile'
        >['abi'],
        'circulateFile'
      > & { functionName?: 'circulateFile' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfAgreementsABI,
        'circulateFile'
      > & {
        abi?: never
        functionName?: 'circulateFile'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfAgreementsABI,
    'circulateFile'
  >({
    abi: registerOfAgreementsABI,
    functionName: 'circulateFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"claimFirstRefusal"`.
 */
export function useRegisterOfAgreementsClaimFirstRefusal<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfAgreementsABI,
          'claimFirstRefusal'
        >['abi'],
        'claimFirstRefusal'
      > & { functionName?: 'claimFirstRefusal' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfAgreementsABI,
        'claimFirstRefusal'
      > & {
        abi?: never
        functionName?: 'claimFirstRefusal'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfAgreementsABI,
    'claimFirstRefusal'
  >({
    abi: registerOfAgreementsABI,
    functionName: 'claimFirstRefusal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"computeFirstRefusal"`.
 */
export function useRegisterOfAgreementsComputeFirstRefusal<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfAgreementsABI,
          'computeFirstRefusal'
        >['abi'],
        'computeFirstRefusal'
      > & { functionName?: 'computeFirstRefusal' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfAgreementsABI,
        'computeFirstRefusal'
      > & {
        abi?: never
        functionName?: 'computeFirstRefusal'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfAgreementsABI,
    'computeFirstRefusal'
  >({
    abi: registerOfAgreementsABI,
    functionName: 'computeFirstRefusal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"createMockOfIA"`.
 */
export function useRegisterOfAgreementsCreateMockOfIa<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfAgreementsABI,
          'createMockOfIA'
        >['abi'],
        'createMockOfIA'
      > & { functionName?: 'createMockOfIA' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfAgreementsABI,
        'createMockOfIA'
      > & {
        abi?: never
        functionName?: 'createMockOfIA'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfAgreementsABI,
    'createMockOfIA'
  >({
    abi: registerOfAgreementsABI,
    functionName: 'createMockOfIA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"execAlongRight"`.
 */
export function useRegisterOfAgreementsExecAlongRight<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfAgreementsABI,
          'execAlongRight'
        >['abi'],
        'execAlongRight'
      > & { functionName?: 'execAlongRight' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfAgreementsABI,
        'execAlongRight'
      > & {
        abi?: never
        functionName?: 'execAlongRight'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfAgreementsABI,
    'execAlongRight'
  >({
    abi: registerOfAgreementsABI,
    functionName: 'execAlongRight',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"execFile"`.
 */
export function useRegisterOfAgreementsExecFile<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfAgreementsABI,
          'execFile'
        >['abi'],
        'execFile'
      > & { functionName?: 'execFile' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfAgreementsABI,
        'execFile'
      > & {
        abi?: never
        functionName?: 'execFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfAgreementsABI, 'execFile'>({
    abi: registerOfAgreementsABI,
    functionName: 'execFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"grantRole"`.
 */
export function useRegisterOfAgreementsGrantRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfAgreementsABI,
          'grantRole'
        >['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfAgreementsABI,
        'grantRole'
      > & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfAgreementsABI, 'grantRole'>({
    abi: registerOfAgreementsABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"init"`.
 */
export function useRegisterOfAgreementsInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfAgreementsABI,
          'init'
        >['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof registerOfAgreementsABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfAgreementsABI, 'init'>({
    abi: registerOfAgreementsABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"lockContents"`.
 */
export function useRegisterOfAgreementsLockContents<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfAgreementsABI,
          'lockContents'
        >['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfAgreementsABI,
        'lockContents'
      > & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfAgreementsABI,
    'lockContents'
  >({
    abi: registerOfAgreementsABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"mockDealOfBuy"`.
 */
export function useRegisterOfAgreementsMockDealOfBuy<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfAgreementsABI,
          'mockDealOfBuy'
        >['abi'],
        'mockDealOfBuy'
      > & { functionName?: 'mockDealOfBuy' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfAgreementsABI,
        'mockDealOfBuy'
      > & {
        abi?: never
        functionName?: 'mockDealOfBuy'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfAgreementsABI,
    'mockDealOfBuy'
  >({
    abi: registerOfAgreementsABI,
    functionName: 'mockDealOfBuy',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"mockDealOfSell"`.
 */
export function useRegisterOfAgreementsMockDealOfSell<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfAgreementsABI,
          'mockDealOfSell'
        >['abi'],
        'mockDealOfSell'
      > & { functionName?: 'mockDealOfSell' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfAgreementsABI,
        'mockDealOfSell'
      > & {
        abi?: never
        functionName?: 'mockDealOfSell'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfAgreementsABI,
    'mockDealOfSell'
  >({
    abi: registerOfAgreementsABI,
    functionName: 'mockDealOfSell',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"proposeFile"`.
 */
export function useRegisterOfAgreementsProposeFile<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfAgreementsABI,
          'proposeFile'
        >['abi'],
        'proposeFile'
      > & { functionName?: 'proposeFile' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfAgreementsABI,
        'proposeFile'
      > & {
        abi?: never
        functionName?: 'proposeFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfAgreementsABI, 'proposeFile'>(
    {
      abi: registerOfAgreementsABI,
      functionName: 'proposeFile',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"regFile"`.
 */
export function useRegisterOfAgreementsRegFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfAgreementsABI,
          'regFile'
        >['abi'],
        'regFile'
      > & { functionName?: 'regFile' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfAgreementsABI,
        'regFile'
      > & {
        abi?: never
        functionName?: 'regFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfAgreementsABI, 'regFile'>({
    abi: registerOfAgreementsABI,
    functionName: 'regFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useRegisterOfAgreementsRenounceRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfAgreementsABI,
          'renounceRole'
        >['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfAgreementsABI,
        'renounceRole'
      > & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfAgreementsABI,
    'renounceRole'
  >({
    abi: registerOfAgreementsABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useRegisterOfAgreementsRevokeRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfAgreementsABI,
          'revokeRole'
        >['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfAgreementsABI,
        'revokeRole'
      > & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfAgreementsABI, 'revokeRole'>({
    abi: registerOfAgreementsABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useRegisterOfAgreementsSetDirectKeeper<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfAgreementsABI,
          'setDirectKeeper'
        >['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfAgreementsABI,
        'setDirectKeeper'
      > & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfAgreementsABI,
    'setDirectKeeper'
  >({
    abi: registerOfAgreementsABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"setOwner"`.
 */
export function useRegisterOfAgreementsSetOwner<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfAgreementsABI,
          'setOwner'
        >['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfAgreementsABI,
        'setOwner'
      > & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfAgreementsABI, 'setOwner'>({
    abi: registerOfAgreementsABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useRegisterOfAgreementsSetRoleAdmin<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfAgreementsABI,
          'setRoleAdmin'
        >['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfAgreementsABI,
        'setRoleAdmin'
      > & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfAgreementsABI,
    'setRoleAdmin'
  >({
    abi: registerOfAgreementsABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"setStateOfFile"`.
 */
export function useRegisterOfAgreementsSetStateOfFile<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfAgreementsABI,
          'setStateOfFile'
        >['abi'],
        'setStateOfFile'
      > & { functionName?: 'setStateOfFile' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfAgreementsABI,
        'setStateOfFile'
      > & {
        abi?: never
        functionName?: 'setStateOfFile'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfAgreementsABI,
    'setStateOfFile'
  >({
    abi: registerOfAgreementsABI,
    functionName: 'setStateOfFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function useRegisterOfAgreementsTakeBackKeys<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfAgreementsABI,
          'takeBackKeys'
        >['abi'],
        'takeBackKeys'
      > & { functionName?: 'takeBackKeys' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfAgreementsABI,
        'takeBackKeys'
      > & {
        abi?: never
        functionName?: 'takeBackKeys'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfAgreementsABI,
    'takeBackKeys'
  >({
    abi: registerOfAgreementsABI,
    functionName: 'takeBackKeys',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"terminateFile"`.
 */
export function useRegisterOfAgreementsTerminateFile<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfAgreementsABI,
          'terminateFile'
        >['abi'],
        'terminateFile'
      > & { functionName?: 'terminateFile' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfAgreementsABI,
        'terminateFile'
      > & {
        abi?: never
        functionName?: 'terminateFile'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfAgreementsABI,
    'terminateFile'
  >({
    abi: registerOfAgreementsABI,
    functionName: 'terminateFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"voteCountingForFile"`.
 */
export function useRegisterOfAgreementsVoteCountingForFile<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfAgreementsABI,
          'voteCountingForFile'
        >['abi'],
        'voteCountingForFile'
      > & { functionName?: 'voteCountingForFile' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfAgreementsABI,
        'voteCountingForFile'
      > & {
        abi?: never
        functionName?: 'voteCountingForFile'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfAgreementsABI,
    'voteCountingForFile'
  >({
    abi: registerOfAgreementsABI,
    functionName: 'voteCountingForFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfAgreementsABI}__.
 */
export function usePrepareRegisterOfAgreementsWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfAgreementsABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfAgreementsABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfAgreementsABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareRegisterOfAgreementsAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfAgreementsABI,
      'abandonRole'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfAgreementsABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfAgreementsABI,
    'abandonRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"acceptAlongClaims"`.
 */
export function usePrepareRegisterOfAgreementsAcceptAlongClaims(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfAgreementsABI,
      'acceptAlongClaims'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfAgreementsABI,
    functionName: 'acceptAlongClaims',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfAgreementsABI,
    'acceptAlongClaims'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"circulateFile"`.
 */
export function usePrepareRegisterOfAgreementsCirculateFile(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfAgreementsABI,
      'circulateFile'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfAgreementsABI,
    functionName: 'circulateFile',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfAgreementsABI,
    'circulateFile'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"claimFirstRefusal"`.
 */
export function usePrepareRegisterOfAgreementsClaimFirstRefusal(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfAgreementsABI,
      'claimFirstRefusal'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfAgreementsABI,
    functionName: 'claimFirstRefusal',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfAgreementsABI,
    'claimFirstRefusal'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"computeFirstRefusal"`.
 */
export function usePrepareRegisterOfAgreementsComputeFirstRefusal(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfAgreementsABI,
      'computeFirstRefusal'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfAgreementsABI,
    functionName: 'computeFirstRefusal',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfAgreementsABI,
    'computeFirstRefusal'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"createMockOfIA"`.
 */
export function usePrepareRegisterOfAgreementsCreateMockOfIa(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfAgreementsABI,
      'createMockOfIA'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfAgreementsABI,
    functionName: 'createMockOfIA',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfAgreementsABI,
    'createMockOfIA'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"execAlongRight"`.
 */
export function usePrepareRegisterOfAgreementsExecAlongRight(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfAgreementsABI,
      'execAlongRight'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfAgreementsABI,
    functionName: 'execAlongRight',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfAgreementsABI,
    'execAlongRight'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"execFile"`.
 */
export function usePrepareRegisterOfAgreementsExecFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfAgreementsABI, 'execFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfAgreementsABI,
    functionName: 'execFile',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfAgreementsABI,
    'execFile'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareRegisterOfAgreementsGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfAgreementsABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfAgreementsABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfAgreementsABI,
    'grantRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareRegisterOfAgreementsInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfAgreementsABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfAgreementsABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfAgreementsABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareRegisterOfAgreementsLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfAgreementsABI,
      'lockContents'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfAgreementsABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfAgreementsABI,
    'lockContents'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"mockDealOfBuy"`.
 */
export function usePrepareRegisterOfAgreementsMockDealOfBuy(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfAgreementsABI,
      'mockDealOfBuy'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfAgreementsABI,
    functionName: 'mockDealOfBuy',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfAgreementsABI,
    'mockDealOfBuy'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"mockDealOfSell"`.
 */
export function usePrepareRegisterOfAgreementsMockDealOfSell(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfAgreementsABI,
      'mockDealOfSell'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfAgreementsABI,
    functionName: 'mockDealOfSell',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfAgreementsABI,
    'mockDealOfSell'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"proposeFile"`.
 */
export function usePrepareRegisterOfAgreementsProposeFile(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfAgreementsABI,
      'proposeFile'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfAgreementsABI,
    functionName: 'proposeFile',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfAgreementsABI,
    'proposeFile'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"regFile"`.
 */
export function usePrepareRegisterOfAgreementsRegFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfAgreementsABI, 'regFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfAgreementsABI,
    functionName: 'regFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfAgreementsABI, 'regFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareRegisterOfAgreementsRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfAgreementsABI,
      'renounceRole'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfAgreementsABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfAgreementsABI,
    'renounceRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareRegisterOfAgreementsRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfAgreementsABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfAgreementsABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfAgreementsABI,
    'revokeRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareRegisterOfAgreementsSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfAgreementsABI,
      'setDirectKeeper'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfAgreementsABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfAgreementsABI,
    'setDirectKeeper'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareRegisterOfAgreementsSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfAgreementsABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfAgreementsABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfAgreementsABI,
    'setOwner'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareRegisterOfAgreementsSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfAgreementsABI,
      'setRoleAdmin'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfAgreementsABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfAgreementsABI,
    'setRoleAdmin'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"setStateOfFile"`.
 */
export function usePrepareRegisterOfAgreementsSetStateOfFile(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfAgreementsABI,
      'setStateOfFile'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfAgreementsABI,
    functionName: 'setStateOfFile',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfAgreementsABI,
    'setStateOfFile'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function usePrepareRegisterOfAgreementsTakeBackKeys(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfAgreementsABI,
      'takeBackKeys'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfAgreementsABI,
    functionName: 'takeBackKeys',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfAgreementsABI,
    'takeBackKeys'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"terminateFile"`.
 */
export function usePrepareRegisterOfAgreementsTerminateFile(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfAgreementsABI,
      'terminateFile'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfAgreementsABI,
    functionName: 'terminateFile',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfAgreementsABI,
    'terminateFile'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `functionName` set to `"voteCountingForFile"`.
 */
export function usePrepareRegisterOfAgreementsVoteCountingForFile(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfAgreementsABI,
      'voteCountingForFile'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfAgreementsABI,
    functionName: 'voteCountingForFile',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfAgreementsABI,
    'voteCountingForFile'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfAgreementsABI}__.
 */
export function useRegisterOfAgreementsEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof registerOfAgreementsABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfAgreementsABI,
    ...config,
  } as UseContractEventConfig<typeof registerOfAgreementsABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `eventName` set to `"AcceptAlongClaims"`.
 */
export function useRegisterOfAgreementsAcceptAlongClaimsEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfAgreementsABI, 'AcceptAlongClaims'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfAgreementsABI,
    eventName: 'AcceptAlongClaims',
    ...config,
  } as UseContractEventConfig<
    typeof registerOfAgreementsABI,
    'AcceptAlongClaims'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `eventName` set to `"ClaimFirstRefusal"`.
 */
export function useRegisterOfAgreementsClaimFirstRefusalEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfAgreementsABI, 'ClaimFirstRefusal'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfAgreementsABI,
    eventName: 'ClaimFirstRefusal',
    ...config,
  } as UseContractEventConfig<
    typeof registerOfAgreementsABI,
    'ClaimFirstRefusal'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `eventName` set to `"ComputeFirstRefusal"`.
 */
export function useRegisterOfAgreementsComputeFirstRefusalEvent(
  config: Omit<
    UseContractEventConfig<
      typeof registerOfAgreementsABI,
      'ComputeFirstRefusal'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfAgreementsABI,
    eventName: 'ComputeFirstRefusal',
    ...config,
  } as UseContractEventConfig<
    typeof registerOfAgreementsABI,
    'ComputeFirstRefusal'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `eventName` set to `"ExecAlongRight"`.
 */
export function useRegisterOfAgreementsExecAlongRightEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfAgreementsABI, 'ExecAlongRight'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfAgreementsABI,
    eventName: 'ExecAlongRight',
    ...config,
  } as UseContractEventConfig<typeof registerOfAgreementsABI, 'ExecAlongRight'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `eventName` set to `"Init"`.
 */
export function useRegisterOfAgreementsInitEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfAgreementsABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfAgreementsABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof registerOfAgreementsABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `eventName` set to `"LockContents"`.
 */
export function useRegisterOfAgreementsLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfAgreementsABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfAgreementsABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof registerOfAgreementsABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useRegisterOfAgreementsSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfAgreementsABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfAgreementsABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<
    typeof registerOfAgreementsABI,
    'SetDirectKeeper'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useRegisterOfAgreementsSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfAgreementsABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfAgreementsABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof registerOfAgreementsABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `eventName` set to `"SetRoleAdmin"`.
 */
export function useRegisterOfAgreementsSetRoleAdminEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfAgreementsABI, 'SetRoleAdmin'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfAgreementsABI,
    eventName: 'SetRoleAdmin',
    ...config,
  } as UseContractEventConfig<typeof registerOfAgreementsABI, 'SetRoleAdmin'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfAgreementsABI}__ and `eventName` set to `"UpdateStateOfFile"`.
 */
export function useRegisterOfAgreementsUpdateStateOfFileEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfAgreementsABI, 'UpdateStateOfFile'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfAgreementsABI,
    eventName: 'UpdateStateOfFile',
    ...config,
  } as UseContractEventConfig<
    typeof registerOfAgreementsABI,
    'UpdateStateOfFile'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iShareholdersAgreementABI}__.
 */
export function useIShareholdersAgreement(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iShareholdersAgreementABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iShareholdersAgreementABI}__.
 */
export function useIShareholdersAgreementRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof iShareholdersAgreementABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iShareholdersAgreementABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iShareholdersAgreementABI,
    ...config,
  } as UseContractReadConfig<
    typeof iShareholdersAgreementABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"circulated"`.
 */
export function useIShareholdersAgreementCirculated<
  TSelectData = ReadContractResult<
    typeof iShareholdersAgreementABI,
    'circulated'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iShareholdersAgreementABI,
      'circulated',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iShareholdersAgreementABI,
    functionName: 'circulated',
    ...config,
  } as UseContractReadConfig<
    typeof iShareholdersAgreementABI,
    'circulated',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"established"`.
 */
export function useIShareholdersAgreementEstablished<
  TSelectData = ReadContractResult<
    typeof iShareholdersAgreementABI,
    'established'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iShareholdersAgreementABI,
      'established',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iShareholdersAgreementABI,
    functionName: 'established',
    ...config,
  } as UseContractReadConfig<
    typeof iShareholdersAgreementABI,
    'established',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"getBuyers"`.
 */
export function useIShareholdersAgreementGetBuyers<
  TSelectData = ReadContractResult<
    typeof iShareholdersAgreementABI,
    'getBuyers'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iShareholdersAgreementABI,
      'getBuyers',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iShareholdersAgreementABI,
    functionName: 'getBuyers',
    ...config,
  } as UseContractReadConfig<
    typeof iShareholdersAgreementABI,
    'getBuyers',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"getCirculateDate"`.
 */
export function useIShareholdersAgreementGetCirculateDate<
  TSelectData = ReadContractResult<
    typeof iShareholdersAgreementABI,
    'getCirculateDate'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iShareholdersAgreementABI,
      'getCirculateDate',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iShareholdersAgreementABI,
    functionName: 'getCirculateDate',
    ...config,
  } as UseContractReadConfig<
    typeof iShareholdersAgreementABI,
    'getCirculateDate',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"getClosingDays"`.
 */
export function useIShareholdersAgreementGetClosingDays<
  TSelectData = ReadContractResult<
    typeof iShareholdersAgreementABI,
    'getClosingDays'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iShareholdersAgreementABI,
      'getClosingDays',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iShareholdersAgreementABI,
    functionName: 'getClosingDays',
    ...config,
  } as UseContractReadConfig<
    typeof iShareholdersAgreementABI,
    'getClosingDays',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"getClosingDeadline"`.
 */
export function useIShareholdersAgreementGetClosingDeadline<
  TSelectData = ReadContractResult<
    typeof iShareholdersAgreementABI,
    'getClosingDeadline'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iShareholdersAgreementABI,
      'getClosingDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iShareholdersAgreementABI,
    functionName: 'getClosingDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof iShareholdersAgreementABI,
    'getClosingDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"getParasOfPage"`.
 */
export function useIShareholdersAgreementGetParasOfPage<
  TSelectData = ReadContractResult<
    typeof iShareholdersAgreementABI,
    'getParasOfPage'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iShareholdersAgreementABI,
      'getParasOfPage',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iShareholdersAgreementABI,
    functionName: 'getParasOfPage',
    ...config,
  } as UseContractReadConfig<
    typeof iShareholdersAgreementABI,
    'getParasOfPage',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"getParties"`.
 */
export function useIShareholdersAgreementGetParties<
  TSelectData = ReadContractResult<
    typeof iShareholdersAgreementABI,
    'getParties'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iShareholdersAgreementABI,
      'getParties',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iShareholdersAgreementABI,
    functionName: 'getParties',
    ...config,
  } as UseContractReadConfig<
    typeof iShareholdersAgreementABI,
    'getParties',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"getRule"`.
 */
export function useIShareholdersAgreementGetRule<
  TSelectData = ReadContractResult<typeof iShareholdersAgreementABI, 'getRule'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iShareholdersAgreementABI,
      'getRule',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iShareholdersAgreementABI,
    functionName: 'getRule',
    ...config,
  } as UseContractReadConfig<
    typeof iShareholdersAgreementABI,
    'getRule',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"getRules"`.
 */
export function useIShareholdersAgreementGetRules<
  TSelectData = ReadContractResult<
    typeof iShareholdersAgreementABI,
    'getRules'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iShareholdersAgreementABI,
      'getRules',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iShareholdersAgreementABI,
    functionName: 'getRules',
    ...config,
  } as UseContractReadConfig<
    typeof iShareholdersAgreementABI,
    'getRules',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"getSellers"`.
 */
export function useIShareholdersAgreementGetSellers<
  TSelectData = ReadContractResult<
    typeof iShareholdersAgreementABI,
    'getSellers'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iShareholdersAgreementABI,
      'getSellers',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iShareholdersAgreementABI,
    functionName: 'getSellers',
    ...config,
  } as UseContractReadConfig<
    typeof iShareholdersAgreementABI,
    'getSellers',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"getSigDeadline"`.
 */
export function useIShareholdersAgreementGetSigDeadline<
  TSelectData = ReadContractResult<
    typeof iShareholdersAgreementABI,
    'getSigDeadline'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iShareholdersAgreementABI,
      'getSigDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iShareholdersAgreementABI,
    functionName: 'getSigDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof iShareholdersAgreementABI,
    'getSigDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"getSigOfParty"`.
 */
export function useIShareholdersAgreementGetSigOfParty<
  TSelectData = ReadContractResult<
    typeof iShareholdersAgreementABI,
    'getSigOfParty'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iShareholdersAgreementABI,
      'getSigOfParty',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iShareholdersAgreementABI,
    functionName: 'getSigOfParty',
    ...config,
  } as UseContractReadConfig<
    typeof iShareholdersAgreementABI,
    'getSigOfParty',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"getSigningDays"`.
 */
export function useIShareholdersAgreementGetSigningDays<
  TSelectData = ReadContractResult<
    typeof iShareholdersAgreementABI,
    'getSigningDays'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iShareholdersAgreementABI,
      'getSigningDays',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iShareholdersAgreementABI,
    functionName: 'getSigningDays',
    ...config,
  } as UseContractReadConfig<
    typeof iShareholdersAgreementABI,
    'getSigningDays',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"getSigsOfPage"`.
 */
export function useIShareholdersAgreementGetSigsOfPage<
  TSelectData = ReadContractResult<
    typeof iShareholdersAgreementABI,
    'getSigsOfPage'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iShareholdersAgreementABI,
      'getSigsOfPage',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iShareholdersAgreementABI,
    functionName: 'getSigsOfPage',
    ...config,
  } as UseContractReadConfig<
    typeof iShareholdersAgreementABI,
    'getSigsOfPage',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"getTerm"`.
 */
export function useIShareholdersAgreementGetTerm<
  TSelectData = ReadContractResult<typeof iShareholdersAgreementABI, 'getTerm'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iShareholdersAgreementABI,
      'getTerm',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iShareholdersAgreementABI,
    functionName: 'getTerm',
    ...config,
  } as UseContractReadConfig<
    typeof iShareholdersAgreementABI,
    'getTerm',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"getTitles"`.
 */
export function useIShareholdersAgreementGetTitles<
  TSelectData = ReadContractResult<
    typeof iShareholdersAgreementABI,
    'getTitles'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iShareholdersAgreementABI,
      'getTitles',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iShareholdersAgreementABI,
    functionName: 'getTitles',
    ...config,
  } as UseContractReadConfig<
    typeof iShareholdersAgreementABI,
    'getTitles',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"hasRule"`.
 */
export function useIShareholdersAgreementHasRule<
  TSelectData = ReadContractResult<typeof iShareholdersAgreementABI, 'hasRule'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iShareholdersAgreementABI,
      'hasRule',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iShareholdersAgreementABI,
    functionName: 'hasRule',
    ...config,
  } as UseContractReadConfig<
    typeof iShareholdersAgreementABI,
    'hasRule',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"hasTitle"`.
 */
export function useIShareholdersAgreementHasTitle<
  TSelectData = ReadContractResult<
    typeof iShareholdersAgreementABI,
    'hasTitle'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iShareholdersAgreementABI,
      'hasTitle',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iShareholdersAgreementABI,
    functionName: 'hasTitle',
    ...config,
  } as UseContractReadConfig<
    typeof iShareholdersAgreementABI,
    'hasTitle',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"isBuyer"`.
 */
export function useIShareholdersAgreementIsBuyer<
  TSelectData = ReadContractResult<typeof iShareholdersAgreementABI, 'isBuyer'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iShareholdersAgreementABI,
      'isBuyer',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iShareholdersAgreementABI,
    functionName: 'isBuyer',
    ...config,
  } as UseContractReadConfig<
    typeof iShareholdersAgreementABI,
    'isBuyer',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"isInitSigner"`.
 */
export function useIShareholdersAgreementIsInitSigner<
  TSelectData = ReadContractResult<
    typeof iShareholdersAgreementABI,
    'isInitSigner'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iShareholdersAgreementABI,
      'isInitSigner',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iShareholdersAgreementABI,
    functionName: 'isInitSigner',
    ...config,
  } as UseContractReadConfig<
    typeof iShareholdersAgreementABI,
    'isInitSigner',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"isParty"`.
 */
export function useIShareholdersAgreementIsParty<
  TSelectData = ReadContractResult<typeof iShareholdersAgreementABI, 'isParty'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iShareholdersAgreementABI,
      'isParty',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iShareholdersAgreementABI,
    functionName: 'isParty',
    ...config,
  } as UseContractReadConfig<
    typeof iShareholdersAgreementABI,
    'isParty',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"isSeller"`.
 */
export function useIShareholdersAgreementIsSeller<
  TSelectData = ReadContractResult<
    typeof iShareholdersAgreementABI,
    'isSeller'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iShareholdersAgreementABI,
      'isSeller',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iShareholdersAgreementABI,
    functionName: 'isSeller',
    ...config,
  } as UseContractReadConfig<
    typeof iShareholdersAgreementABI,
    'isSeller',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"isSigner"`.
 */
export function useIShareholdersAgreementIsSigner<
  TSelectData = ReadContractResult<
    typeof iShareholdersAgreementABI,
    'isSigner'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iShareholdersAgreementABI,
      'isSigner',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iShareholdersAgreementABI,
    functionName: 'isSigner',
    ...config,
  } as UseContractReadConfig<
    typeof iShareholdersAgreementABI,
    'isSigner',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"qtyOfRules"`.
 */
export function useIShareholdersAgreementQtyOfRules<
  TSelectData = ReadContractResult<
    typeof iShareholdersAgreementABI,
    'qtyOfRules'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iShareholdersAgreementABI,
      'qtyOfRules',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iShareholdersAgreementABI,
    functionName: 'qtyOfRules',
    ...config,
  } as UseContractReadConfig<
    typeof iShareholdersAgreementABI,
    'qtyOfRules',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"qtyOfTerms"`.
 */
export function useIShareholdersAgreementQtyOfTerms<
  TSelectData = ReadContractResult<
    typeof iShareholdersAgreementABI,
    'qtyOfTerms'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iShareholdersAgreementABI,
      'qtyOfTerms',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iShareholdersAgreementABI,
    functionName: 'qtyOfTerms',
    ...config,
  } as UseContractReadConfig<
    typeof iShareholdersAgreementABI,
    'qtyOfTerms',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iShareholdersAgreementABI}__.
 */
export function useIShareholdersAgreementWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iShareholdersAgreementABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof iShareholdersAgreementABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iShareholdersAgreementABI,
    TFunctionName
  >({ abi: iShareholdersAgreementABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"addBlank"`.
 */
export function useIShareholdersAgreementAddBlank<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iShareholdersAgreementABI,
          'addBlank'
        >['abi'],
        'addBlank'
      > & { functionName?: 'addBlank' }
    : UseContractWriteConfig<
        TMode,
        typeof iShareholdersAgreementABI,
        'addBlank'
      > & {
        abi?: never
        functionName?: 'addBlank'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iShareholdersAgreementABI, 'addBlank'>({
    abi: iShareholdersAgreementABI,
    functionName: 'addBlank',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"addRule"`.
 */
export function useIShareholdersAgreementAddRule<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iShareholdersAgreementABI,
          'addRule'
        >['abi'],
        'addRule'
      > & { functionName?: 'addRule' }
    : UseContractWriteConfig<
        TMode,
        typeof iShareholdersAgreementABI,
        'addRule'
      > & {
        abi?: never
        functionName?: 'addRule'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iShareholdersAgreementABI, 'addRule'>({
    abi: iShareholdersAgreementABI,
    functionName: 'addRule',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"circulateDoc"`.
 */
export function useIShareholdersAgreementCirculateDoc<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iShareholdersAgreementABI,
          'circulateDoc'
        >['abi'],
        'circulateDoc'
      > & { functionName?: 'circulateDoc' }
    : UseContractWriteConfig<
        TMode,
        typeof iShareholdersAgreementABI,
        'circulateDoc'
      > & {
        abi?: never
        functionName?: 'circulateDoc'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iShareholdersAgreementABI,
    'circulateDoc'
  >({
    abi: iShareholdersAgreementABI,
    functionName: 'circulateDoc',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"createTerm"`.
 */
export function useIShareholdersAgreementCreateTerm<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iShareholdersAgreementABI,
          'createTerm'
        >['abi'],
        'createTerm'
      > & { functionName?: 'createTerm' }
    : UseContractWriteConfig<
        TMode,
        typeof iShareholdersAgreementABI,
        'createTerm'
      > & {
        abi?: never
        functionName?: 'createTerm'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iShareholdersAgreementABI,
    'createTerm'
  >({
    abi: iShareholdersAgreementABI,
    functionName: 'createTerm',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"finalizeSHA"`.
 */
export function useIShareholdersAgreementFinalizeSha<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iShareholdersAgreementABI,
          'finalizeSHA'
        >['abi'],
        'finalizeSHA'
      > & { functionName?: 'finalizeSHA' }
    : UseContractWriteConfig<
        TMode,
        typeof iShareholdersAgreementABI,
        'finalizeSHA'
      > & {
        abi?: never
        functionName?: 'finalizeSHA'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iShareholdersAgreementABI,
    'finalizeSHA'
  >({
    abi: iShareholdersAgreementABI,
    functionName: 'finalizeSHA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"initDefaultRules"`.
 */
export function useIShareholdersAgreementInitDefaultRules<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iShareholdersAgreementABI,
          'initDefaultRules'
        >['abi'],
        'initDefaultRules'
      > & { functionName?: 'initDefaultRules' }
    : UseContractWriteConfig<
        TMode,
        typeof iShareholdersAgreementABI,
        'initDefaultRules'
      > & {
        abi?: never
        functionName?: 'initDefaultRules'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iShareholdersAgreementABI,
    'initDefaultRules'
  >({
    abi: iShareholdersAgreementABI,
    functionName: 'initDefaultRules',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"regSig"`.
 */
export function useIShareholdersAgreementRegSig<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iShareholdersAgreementABI,
          'regSig'
        >['abi'],
        'regSig'
      > & { functionName?: 'regSig' }
    : UseContractWriteConfig<
        TMode,
        typeof iShareholdersAgreementABI,
        'regSig'
      > & {
        abi?: never
        functionName?: 'regSig'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iShareholdersAgreementABI, 'regSig'>({
    abi: iShareholdersAgreementABI,
    functionName: 'regSig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"removeBlank"`.
 */
export function useIShareholdersAgreementRemoveBlank<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iShareholdersAgreementABI,
          'removeBlank'
        >['abi'],
        'removeBlank'
      > & { functionName?: 'removeBlank' }
    : UseContractWriteConfig<
        TMode,
        typeof iShareholdersAgreementABI,
        'removeBlank'
      > & {
        abi?: never
        functionName?: 'removeBlank'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iShareholdersAgreementABI,
    'removeBlank'
  >({
    abi: iShareholdersAgreementABI,
    functionName: 'removeBlank',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"removeRule"`.
 */
export function useIShareholdersAgreementRemoveRule<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iShareholdersAgreementABI,
          'removeRule'
        >['abi'],
        'removeRule'
      > & { functionName?: 'removeRule' }
    : UseContractWriteConfig<
        TMode,
        typeof iShareholdersAgreementABI,
        'removeRule'
      > & {
        abi?: never
        functionName?: 'removeRule'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iShareholdersAgreementABI,
    'removeRule'
  >({
    abi: iShareholdersAgreementABI,
    functionName: 'removeRule',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"removeTerm"`.
 */
export function useIShareholdersAgreementRemoveTerm<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iShareholdersAgreementABI,
          'removeTerm'
        >['abi'],
        'removeTerm'
      > & { functionName?: 'removeTerm' }
    : UseContractWriteConfig<
        TMode,
        typeof iShareholdersAgreementABI,
        'removeTerm'
      > & {
        abi?: never
        functionName?: 'removeTerm'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iShareholdersAgreementABI,
    'removeTerm'
  >({
    abi: iShareholdersAgreementABI,
    functionName: 'removeTerm',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"setTiming"`.
 */
export function useIShareholdersAgreementSetTiming<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iShareholdersAgreementABI,
          'setTiming'
        >['abi'],
        'setTiming'
      > & { functionName?: 'setTiming' }
    : UseContractWriteConfig<
        TMode,
        typeof iShareholdersAgreementABI,
        'setTiming'
      > & {
        abi?: never
        functionName?: 'setTiming'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iShareholdersAgreementABI, 'setTiming'>(
    {
      abi: iShareholdersAgreementABI,
      functionName: 'setTiming',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"signDoc"`.
 */
export function useIShareholdersAgreementSignDoc<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iShareholdersAgreementABI,
          'signDoc'
        >['abi'],
        'signDoc'
      > & { functionName?: 'signDoc' }
    : UseContractWriteConfig<
        TMode,
        typeof iShareholdersAgreementABI,
        'signDoc'
      > & {
        abi?: never
        functionName?: 'signDoc'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iShareholdersAgreementABI, 'signDoc'>({
    abi: iShareholdersAgreementABI,
    functionName: 'signDoc',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iShareholdersAgreementABI}__.
 */
export function usePrepareIShareholdersAgreementWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iShareholdersAgreementABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iShareholdersAgreementABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iShareholdersAgreementABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"addBlank"`.
 */
export function usePrepareIShareholdersAgreementAddBlank(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iShareholdersAgreementABI, 'addBlank'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iShareholdersAgreementABI,
    functionName: 'addBlank',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iShareholdersAgreementABI,
    'addBlank'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"addRule"`.
 */
export function usePrepareIShareholdersAgreementAddRule(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iShareholdersAgreementABI, 'addRule'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iShareholdersAgreementABI,
    functionName: 'addRule',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iShareholdersAgreementABI,
    'addRule'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"circulateDoc"`.
 */
export function usePrepareIShareholdersAgreementCirculateDoc(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iShareholdersAgreementABI,
      'circulateDoc'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iShareholdersAgreementABI,
    functionName: 'circulateDoc',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iShareholdersAgreementABI,
    'circulateDoc'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"createTerm"`.
 */
export function usePrepareIShareholdersAgreementCreateTerm(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iShareholdersAgreementABI,
      'createTerm'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iShareholdersAgreementABI,
    functionName: 'createTerm',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iShareholdersAgreementABI,
    'createTerm'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"finalizeSHA"`.
 */
export function usePrepareIShareholdersAgreementFinalizeSha(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iShareholdersAgreementABI,
      'finalizeSHA'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iShareholdersAgreementABI,
    functionName: 'finalizeSHA',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iShareholdersAgreementABI,
    'finalizeSHA'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"initDefaultRules"`.
 */
export function usePrepareIShareholdersAgreementInitDefaultRules(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iShareholdersAgreementABI,
      'initDefaultRules'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iShareholdersAgreementABI,
    functionName: 'initDefaultRules',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iShareholdersAgreementABI,
    'initDefaultRules'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"regSig"`.
 */
export function usePrepareIShareholdersAgreementRegSig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iShareholdersAgreementABI, 'regSig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iShareholdersAgreementABI,
    functionName: 'regSig',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iShareholdersAgreementABI,
    'regSig'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"removeBlank"`.
 */
export function usePrepareIShareholdersAgreementRemoveBlank(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iShareholdersAgreementABI,
      'removeBlank'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iShareholdersAgreementABI,
    functionName: 'removeBlank',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iShareholdersAgreementABI,
    'removeBlank'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"removeRule"`.
 */
export function usePrepareIShareholdersAgreementRemoveRule(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iShareholdersAgreementABI,
      'removeRule'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iShareholdersAgreementABI,
    functionName: 'removeRule',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iShareholdersAgreementABI,
    'removeRule'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"removeTerm"`.
 */
export function usePrepareIShareholdersAgreementRemoveTerm(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iShareholdersAgreementABI,
      'removeTerm'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iShareholdersAgreementABI,
    functionName: 'removeTerm',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iShareholdersAgreementABI,
    'removeTerm'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"setTiming"`.
 */
export function usePrepareIShareholdersAgreementSetTiming(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iShareholdersAgreementABI,
      'setTiming'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iShareholdersAgreementABI,
    functionName: 'setTiming',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iShareholdersAgreementABI,
    'setTiming'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"signDoc"`.
 */
export function usePrepareIShareholdersAgreementSignDoc(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iShareholdersAgreementABI, 'signDoc'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iShareholdersAgreementABI,
    functionName: 'signDoc',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iShareholdersAgreementABI,
    'signDoc'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iShareholdersAgreementABI}__.
 */
export function useIShareholdersAgreementEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iShareholdersAgreementABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iShareholdersAgreementABI,
    ...config,
  } as UseContractEventConfig<typeof iShareholdersAgreementABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `eventName` set to `"CirculateDoc"`.
 */
export function useIShareholdersAgreementCirculateDocEvent(
  config: Omit<
    UseContractEventConfig<typeof iShareholdersAgreementABI, 'CirculateDoc'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iShareholdersAgreementABI,
    eventName: 'CirculateDoc',
    ...config,
  } as UseContractEventConfig<typeof iShareholdersAgreementABI, 'CirculateDoc'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link registerOfConstitutionABI}__.
 */
export function useRegisterOfConstitution(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: registerOfConstitutionABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfConstitutionABI}__.
 */
export function useRegisterOfConstitutionRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof registerOfConstitutionABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfConstitutionABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfConstitutionABI,
    ...config,
  } as UseContractReadConfig<
    typeof registerOfConstitutionABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `functionName` set to `"closingDeadline"`.
 */
export function useRegisterOfConstitutionClosingDeadline<
  TSelectData = ReadContractResult<
    typeof registerOfConstitutionABI,
    'closingDeadline'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfConstitutionABI,
      'closingDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfConstitutionABI,
    functionName: 'closingDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfConstitutionABI,
    'closingDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `functionName` set to `"dtExecDeadline"`.
 */
export function useRegisterOfConstitutionDtExecDeadline<
  TSelectData = ReadContractResult<
    typeof registerOfConstitutionABI,
    'dtExecDeadline'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfConstitutionABI,
      'dtExecDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfConstitutionABI,
    functionName: 'dtExecDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfConstitutionABI,
    'dtExecDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `functionName` set to `"frExecDeadline"`.
 */
export function useRegisterOfConstitutionFrExecDeadline<
  TSelectData = ReadContractResult<
    typeof registerOfConstitutionABI,
    'frExecDeadline'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfConstitutionABI,
      'frExecDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfConstitutionABI,
    functionName: 'frExecDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfConstitutionABI,
    'frExecDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `functionName` set to `"getDK"`.
 */
export function useRegisterOfConstitutionGetDk<
  TSelectData = ReadContractResult<typeof registerOfConstitutionABI, 'getDK'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfConstitutionABI,
      'getDK',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfConstitutionABI,
    functionName: 'getDK',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfConstitutionABI,
    'getDK',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `functionName` set to `"getFile"`.
 */
export function useRegisterOfConstitutionGetFile<
  TSelectData = ReadContractResult<typeof registerOfConstitutionABI, 'getFile'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfConstitutionABI,
      'getFile',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfConstitutionABI,
    functionName: 'getFile',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfConstitutionABI,
    'getFile',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `functionName` set to `"getFilesList"`.
 */
export function useRegisterOfConstitutionGetFilesList<
  TSelectData = ReadContractResult<
    typeof registerOfConstitutionABI,
    'getFilesList'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfConstitutionABI,
      'getFilesList',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfConstitutionABI,
    functionName: 'getFilesList',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfConstitutionABI,
    'getFilesList',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `functionName` set to `"getHeadOfFile"`.
 */
export function useRegisterOfConstitutionGetHeadOfFile<
  TSelectData = ReadContractResult<
    typeof registerOfConstitutionABI,
    'getHeadOfFile'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfConstitutionABI,
      'getHeadOfFile',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfConstitutionABI,
    functionName: 'getHeadOfFile',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfConstitutionABI,
    'getHeadOfFile',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `functionName` set to `"getOwner"`.
 */
export function useRegisterOfConstitutionGetOwner<
  TSelectData = ReadContractResult<
    typeof registerOfConstitutionABI,
    'getOwner'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfConstitutionABI,
      'getOwner',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfConstitutionABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfConstitutionABI,
    'getOwner',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useRegisterOfConstitutionGetRoleAdmin<
  TSelectData = ReadContractResult<
    typeof registerOfConstitutionABI,
    'getRoleAdmin'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfConstitutionABI,
      'getRoleAdmin',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfConstitutionABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfConstitutionABI,
    'getRoleAdmin',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `functionName` set to `"hasRole"`.
 */
export function useRegisterOfConstitutionHasRole<
  TSelectData = ReadContractResult<typeof registerOfConstitutionABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfConstitutionABI,
      'hasRole',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfConstitutionABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfConstitutionABI,
    'hasRole',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `functionName` set to `"isFinalized"`.
 */
export function useRegisterOfConstitutionIsFinalized<
  TSelectData = ReadContractResult<
    typeof registerOfConstitutionABI,
    'isFinalized'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfConstitutionABI,
      'isFinalized',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfConstitutionABI,
    functionName: 'isFinalized',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfConstitutionABI,
    'isFinalized',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `functionName` set to `"isRegistered"`.
 */
export function useRegisterOfConstitutionIsRegistered<
  TSelectData = ReadContractResult<
    typeof registerOfConstitutionABI,
    'isRegistered'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfConstitutionABI,
      'isRegistered',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfConstitutionABI,
    functionName: 'isRegistered',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfConstitutionABI,
    'isRegistered',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `functionName` set to `"pointer"`.
 */
export function useRegisterOfConstitutionPointer<
  TSelectData = ReadContractResult<typeof registerOfConstitutionABI, 'pointer'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfConstitutionABI,
      'pointer',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfConstitutionABI,
    functionName: 'pointer',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfConstitutionABI,
    'pointer',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `functionName` set to `"qtyOfFiles"`.
 */
export function useRegisterOfConstitutionQtyOfFiles<
  TSelectData = ReadContractResult<
    typeof registerOfConstitutionABI,
    'qtyOfFiles'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfConstitutionABI,
      'qtyOfFiles',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfConstitutionABI,
    functionName: 'qtyOfFiles',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfConstitutionABI,
    'qtyOfFiles',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `functionName` set to `"signingDeadline"`.
 */
export function useRegisterOfConstitutionSigningDeadline<
  TSelectData = ReadContractResult<
    typeof registerOfConstitutionABI,
    'signingDeadline'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfConstitutionABI,
      'signingDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfConstitutionABI,
    functionName: 'signingDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfConstitutionABI,
    'signingDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `functionName` set to `"terminateStartpoint"`.
 */
export function useRegisterOfConstitutionTerminateStartpoint<
  TSelectData = ReadContractResult<
    typeof registerOfConstitutionABI,
    'terminateStartpoint'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfConstitutionABI,
      'terminateStartpoint',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfConstitutionABI,
    functionName: 'terminateStartpoint',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfConstitutionABI,
    'terminateStartpoint',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `functionName` set to `"votingDeadline"`.
 */
export function useRegisterOfConstitutionVotingDeadline<
  TSelectData = ReadContractResult<
    typeof registerOfConstitutionABI,
    'votingDeadline'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfConstitutionABI,
      'votingDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfConstitutionABI,
    functionName: 'votingDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfConstitutionABI,
    'votingDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfConstitutionABI}__.
 */
export function useRegisterOfConstitutionWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfConstitutionABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof registerOfConstitutionABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfConstitutionABI,
    TFunctionName
  >({ abi: registerOfConstitutionABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useRegisterOfConstitutionAbandonRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfConstitutionABI,
          'abandonRole'
        >['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfConstitutionABI,
        'abandonRole'
      > & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfConstitutionABI,
    'abandonRole'
  >({
    abi: registerOfConstitutionABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `functionName` set to `"changePointer"`.
 */
export function useRegisterOfConstitutionChangePointer<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfConstitutionABI,
          'changePointer'
        >['abi'],
        'changePointer'
      > & { functionName?: 'changePointer' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfConstitutionABI,
        'changePointer'
      > & {
        abi?: never
        functionName?: 'changePointer'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfConstitutionABI,
    'changePointer'
  >({
    abi: registerOfConstitutionABI,
    functionName: 'changePointer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `functionName` set to `"circulateFile"`.
 */
export function useRegisterOfConstitutionCirculateFile<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfConstitutionABI,
          'circulateFile'
        >['abi'],
        'circulateFile'
      > & { functionName?: 'circulateFile' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfConstitutionABI,
        'circulateFile'
      > & {
        abi?: never
        functionName?: 'circulateFile'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfConstitutionABI,
    'circulateFile'
  >({
    abi: registerOfConstitutionABI,
    functionName: 'circulateFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `functionName` set to `"execFile"`.
 */
export function useRegisterOfConstitutionExecFile<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfConstitutionABI,
          'execFile'
        >['abi'],
        'execFile'
      > & { functionName?: 'execFile' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfConstitutionABI,
        'execFile'
      > & {
        abi?: never
        functionName?: 'execFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfConstitutionABI, 'execFile'>({
    abi: registerOfConstitutionABI,
    functionName: 'execFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `functionName` set to `"grantRole"`.
 */
export function useRegisterOfConstitutionGrantRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfConstitutionABI,
          'grantRole'
        >['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfConstitutionABI,
        'grantRole'
      > & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfConstitutionABI, 'grantRole'>(
    {
      abi: registerOfConstitutionABI,
      functionName: 'grantRole',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `functionName` set to `"init"`.
 */
export function useRegisterOfConstitutionInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfConstitutionABI,
          'init'
        >['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfConstitutionABI,
        'init'
      > & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfConstitutionABI, 'init'>({
    abi: registerOfConstitutionABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `functionName` set to `"lockContents"`.
 */
export function useRegisterOfConstitutionLockContents<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfConstitutionABI,
          'lockContents'
        >['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfConstitutionABI,
        'lockContents'
      > & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfConstitutionABI,
    'lockContents'
  >({
    abi: registerOfConstitutionABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `functionName` set to `"proposeFile"`.
 */
export function useRegisterOfConstitutionProposeFile<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfConstitutionABI,
          'proposeFile'
        >['abi'],
        'proposeFile'
      > & { functionName?: 'proposeFile' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfConstitutionABI,
        'proposeFile'
      > & {
        abi?: never
        functionName?: 'proposeFile'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfConstitutionABI,
    'proposeFile'
  >({
    abi: registerOfConstitutionABI,
    functionName: 'proposeFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `functionName` set to `"regFile"`.
 */
export function useRegisterOfConstitutionRegFile<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfConstitutionABI,
          'regFile'
        >['abi'],
        'regFile'
      > & { functionName?: 'regFile' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfConstitutionABI,
        'regFile'
      > & {
        abi?: never
        functionName?: 'regFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfConstitutionABI, 'regFile'>({
    abi: registerOfConstitutionABI,
    functionName: 'regFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useRegisterOfConstitutionRenounceRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfConstitutionABI,
          'renounceRole'
        >['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfConstitutionABI,
        'renounceRole'
      > & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfConstitutionABI,
    'renounceRole'
  >({
    abi: registerOfConstitutionABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useRegisterOfConstitutionRevokeRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfConstitutionABI,
          'revokeRole'
        >['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfConstitutionABI,
        'revokeRole'
      > & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfConstitutionABI,
    'revokeRole'
  >({
    abi: registerOfConstitutionABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useRegisterOfConstitutionSetDirectKeeper<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfConstitutionABI,
          'setDirectKeeper'
        >['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfConstitutionABI,
        'setDirectKeeper'
      > & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfConstitutionABI,
    'setDirectKeeper'
  >({
    abi: registerOfConstitutionABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `functionName` set to `"setOwner"`.
 */
export function useRegisterOfConstitutionSetOwner<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfConstitutionABI,
          'setOwner'
        >['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfConstitutionABI,
        'setOwner'
      > & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfConstitutionABI, 'setOwner'>({
    abi: registerOfConstitutionABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useRegisterOfConstitutionSetRoleAdmin<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfConstitutionABI,
          'setRoleAdmin'
        >['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfConstitutionABI,
        'setRoleAdmin'
      > & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfConstitutionABI,
    'setRoleAdmin'
  >({
    abi: registerOfConstitutionABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `functionName` set to `"setStateOfFile"`.
 */
export function useRegisterOfConstitutionSetStateOfFile<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfConstitutionABI,
          'setStateOfFile'
        >['abi'],
        'setStateOfFile'
      > & { functionName?: 'setStateOfFile' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfConstitutionABI,
        'setStateOfFile'
      > & {
        abi?: never
        functionName?: 'setStateOfFile'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfConstitutionABI,
    'setStateOfFile'
  >({
    abi: registerOfConstitutionABI,
    functionName: 'setStateOfFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function useRegisterOfConstitutionTakeBackKeys<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfConstitutionABI,
          'takeBackKeys'
        >['abi'],
        'takeBackKeys'
      > & { functionName?: 'takeBackKeys' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfConstitutionABI,
        'takeBackKeys'
      > & {
        abi?: never
        functionName?: 'takeBackKeys'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfConstitutionABI,
    'takeBackKeys'
  >({
    abi: registerOfConstitutionABI,
    functionName: 'takeBackKeys',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `functionName` set to `"terminateFile"`.
 */
export function useRegisterOfConstitutionTerminateFile<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfConstitutionABI,
          'terminateFile'
        >['abi'],
        'terminateFile'
      > & { functionName?: 'terminateFile' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfConstitutionABI,
        'terminateFile'
      > & {
        abi?: never
        functionName?: 'terminateFile'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfConstitutionABI,
    'terminateFile'
  >({
    abi: registerOfConstitutionABI,
    functionName: 'terminateFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `functionName` set to `"voteCountingForFile"`.
 */
export function useRegisterOfConstitutionVoteCountingForFile<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfConstitutionABI,
          'voteCountingForFile'
        >['abi'],
        'voteCountingForFile'
      > & { functionName?: 'voteCountingForFile' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfConstitutionABI,
        'voteCountingForFile'
      > & {
        abi?: never
        functionName?: 'voteCountingForFile'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfConstitutionABI,
    'voteCountingForFile'
  >({
    abi: registerOfConstitutionABI,
    functionName: 'voteCountingForFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfConstitutionABI}__.
 */
export function usePrepareRegisterOfConstitutionWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfConstitutionABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfConstitutionABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfConstitutionABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareRegisterOfConstitutionAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfConstitutionABI,
      'abandonRole'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfConstitutionABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfConstitutionABI,
    'abandonRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `functionName` set to `"changePointer"`.
 */
export function usePrepareRegisterOfConstitutionChangePointer(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfConstitutionABI,
      'changePointer'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfConstitutionABI,
    functionName: 'changePointer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfConstitutionABI,
    'changePointer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `functionName` set to `"circulateFile"`.
 */
export function usePrepareRegisterOfConstitutionCirculateFile(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfConstitutionABI,
      'circulateFile'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfConstitutionABI,
    functionName: 'circulateFile',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfConstitutionABI,
    'circulateFile'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `functionName` set to `"execFile"`.
 */
export function usePrepareRegisterOfConstitutionExecFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfConstitutionABI, 'execFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfConstitutionABI,
    functionName: 'execFile',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfConstitutionABI,
    'execFile'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareRegisterOfConstitutionGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfConstitutionABI,
      'grantRole'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfConstitutionABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfConstitutionABI,
    'grantRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareRegisterOfConstitutionInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfConstitutionABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfConstitutionABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfConstitutionABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareRegisterOfConstitutionLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfConstitutionABI,
      'lockContents'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfConstitutionABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfConstitutionABI,
    'lockContents'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `functionName` set to `"proposeFile"`.
 */
export function usePrepareRegisterOfConstitutionProposeFile(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfConstitutionABI,
      'proposeFile'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfConstitutionABI,
    functionName: 'proposeFile',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfConstitutionABI,
    'proposeFile'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `functionName` set to `"regFile"`.
 */
export function usePrepareRegisterOfConstitutionRegFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfConstitutionABI, 'regFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfConstitutionABI,
    functionName: 'regFile',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfConstitutionABI,
    'regFile'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareRegisterOfConstitutionRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfConstitutionABI,
      'renounceRole'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfConstitutionABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfConstitutionABI,
    'renounceRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareRegisterOfConstitutionRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfConstitutionABI,
      'revokeRole'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfConstitutionABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfConstitutionABI,
    'revokeRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareRegisterOfConstitutionSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfConstitutionABI,
      'setDirectKeeper'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfConstitutionABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfConstitutionABI,
    'setDirectKeeper'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareRegisterOfConstitutionSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfConstitutionABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfConstitutionABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfConstitutionABI,
    'setOwner'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareRegisterOfConstitutionSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfConstitutionABI,
      'setRoleAdmin'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfConstitutionABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfConstitutionABI,
    'setRoleAdmin'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `functionName` set to `"setStateOfFile"`.
 */
export function usePrepareRegisterOfConstitutionSetStateOfFile(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfConstitutionABI,
      'setStateOfFile'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfConstitutionABI,
    functionName: 'setStateOfFile',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfConstitutionABI,
    'setStateOfFile'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function usePrepareRegisterOfConstitutionTakeBackKeys(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfConstitutionABI,
      'takeBackKeys'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfConstitutionABI,
    functionName: 'takeBackKeys',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfConstitutionABI,
    'takeBackKeys'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `functionName` set to `"terminateFile"`.
 */
export function usePrepareRegisterOfConstitutionTerminateFile(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfConstitutionABI,
      'terminateFile'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfConstitutionABI,
    functionName: 'terminateFile',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfConstitutionABI,
    'terminateFile'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `functionName` set to `"voteCountingForFile"`.
 */
export function usePrepareRegisterOfConstitutionVoteCountingForFile(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfConstitutionABI,
      'voteCountingForFile'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfConstitutionABI,
    functionName: 'voteCountingForFile',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfConstitutionABI,
    'voteCountingForFile'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfConstitutionABI}__.
 */
export function useRegisterOfConstitutionEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof registerOfConstitutionABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfConstitutionABI,
    ...config,
  } as UseContractEventConfig<typeof registerOfConstitutionABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `eventName` set to `"ChangePointer"`.
 */
export function useRegisterOfConstitutionChangePointerEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfConstitutionABI, 'ChangePointer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfConstitutionABI,
    eventName: 'ChangePointer',
    ...config,
  } as UseContractEventConfig<
    typeof registerOfConstitutionABI,
    'ChangePointer'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `eventName` set to `"Init"`.
 */
export function useRegisterOfConstitutionInitEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfConstitutionABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfConstitutionABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof registerOfConstitutionABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `eventName` set to `"LockContents"`.
 */
export function useRegisterOfConstitutionLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfConstitutionABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfConstitutionABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof registerOfConstitutionABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useRegisterOfConstitutionSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfConstitutionABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfConstitutionABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<
    typeof registerOfConstitutionABI,
    'SetDirectKeeper'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useRegisterOfConstitutionSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfConstitutionABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfConstitutionABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof registerOfConstitutionABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `eventName` set to `"SetRoleAdmin"`.
 */
export function useRegisterOfConstitutionSetRoleAdminEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfConstitutionABI, 'SetRoleAdmin'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfConstitutionABI,
    eventName: 'SetRoleAdmin',
    ...config,
  } as UseContractEventConfig<typeof registerOfConstitutionABI, 'SetRoleAdmin'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfConstitutionABI}__ and `eventName` set to `"UpdateStateOfFile"`.
 */
export function useRegisterOfConstitutionUpdateStateOfFileEvent(
  config: Omit<
    UseContractEventConfig<
      typeof registerOfConstitutionABI,
      'UpdateStateOfFile'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfConstitutionABI,
    eventName: 'UpdateStateOfFile',
    ...config,
  } as UseContractEventConfig<
    typeof registerOfConstitutionABI,
    'UpdateStateOfFile'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link shareholdersAgreementABI}__.
 */
export function useShareholdersAgreement(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: shareholdersAgreementABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__.
 */
export function useShareholdersAgreementRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof shareholdersAgreementABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"circulated"`.
 */
export function useShareholdersAgreementCirculated<
  TSelectData = ReadContractResult<
    typeof shareholdersAgreementABI,
    'circulated'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'circulated',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'circulated',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'circulated',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"established"`.
 */
export function useShareholdersAgreementEstablished<
  TSelectData = ReadContractResult<
    typeof shareholdersAgreementABI,
    'established'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'established',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'established',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'established',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"getBuyers"`.
 */
export function useShareholdersAgreementGetBuyers<
  TSelectData = ReadContractResult<
    typeof shareholdersAgreementABI,
    'getBuyers'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'getBuyers',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'getBuyers',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'getBuyers',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"getCirculateDate"`.
 */
export function useShareholdersAgreementGetCirculateDate<
  TSelectData = ReadContractResult<
    typeof shareholdersAgreementABI,
    'getCirculateDate'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'getCirculateDate',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'getCirculateDate',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'getCirculateDate',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"getClosingDays"`.
 */
export function useShareholdersAgreementGetClosingDays<
  TSelectData = ReadContractResult<
    typeof shareholdersAgreementABI,
    'getClosingDays'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'getClosingDays',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'getClosingDays',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'getClosingDays',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"getClosingDeadline"`.
 */
export function useShareholdersAgreementGetClosingDeadline<
  TSelectData = ReadContractResult<
    typeof shareholdersAgreementABI,
    'getClosingDeadline'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'getClosingDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'getClosingDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'getClosingDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"getDK"`.
 */
export function useShareholdersAgreementGetDk<
  TSelectData = ReadContractResult<typeof shareholdersAgreementABI, 'getDK'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'getDK',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'getDK',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'getDK',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"getOwner"`.
 */
export function useShareholdersAgreementGetOwner<
  TSelectData = ReadContractResult<typeof shareholdersAgreementABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'getOwner',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'getOwner',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"getParasOfPage"`.
 */
export function useShareholdersAgreementGetParasOfPage<
  TSelectData = ReadContractResult<
    typeof shareholdersAgreementABI,
    'getParasOfPage'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'getParasOfPage',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'getParasOfPage',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'getParasOfPage',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"getParties"`.
 */
export function useShareholdersAgreementGetParties<
  TSelectData = ReadContractResult<
    typeof shareholdersAgreementABI,
    'getParties'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'getParties',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'getParties',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'getParties',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useShareholdersAgreementGetRoleAdmin<
  TSelectData = ReadContractResult<
    typeof shareholdersAgreementABI,
    'getRoleAdmin'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'getRoleAdmin',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'getRoleAdmin',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"getRule"`.
 */
export function useShareholdersAgreementGetRule<
  TSelectData = ReadContractResult<typeof shareholdersAgreementABI, 'getRule'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'getRule',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'getRule',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'getRule',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"getRules"`.
 */
export function useShareholdersAgreementGetRules<
  TSelectData = ReadContractResult<typeof shareholdersAgreementABI, 'getRules'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'getRules',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'getRules',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'getRules',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"getSellers"`.
 */
export function useShareholdersAgreementGetSellers<
  TSelectData = ReadContractResult<
    typeof shareholdersAgreementABI,
    'getSellers'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'getSellers',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'getSellers',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'getSellers',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"getSigDeadline"`.
 */
export function useShareholdersAgreementGetSigDeadline<
  TSelectData = ReadContractResult<
    typeof shareholdersAgreementABI,
    'getSigDeadline'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'getSigDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'getSigDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'getSigDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"getSigOfParty"`.
 */
export function useShareholdersAgreementGetSigOfParty<
  TSelectData = ReadContractResult<
    typeof shareholdersAgreementABI,
    'getSigOfParty'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'getSigOfParty',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'getSigOfParty',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'getSigOfParty',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"getSigningDays"`.
 */
export function useShareholdersAgreementGetSigningDays<
  TSelectData = ReadContractResult<
    typeof shareholdersAgreementABI,
    'getSigningDays'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'getSigningDays',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'getSigningDays',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'getSigningDays',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"getSigsOfPage"`.
 */
export function useShareholdersAgreementGetSigsOfPage<
  TSelectData = ReadContractResult<
    typeof shareholdersAgreementABI,
    'getSigsOfPage'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'getSigsOfPage',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'getSigsOfPage',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'getSigsOfPage',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"getTerm"`.
 */
export function useShareholdersAgreementGetTerm<
  TSelectData = ReadContractResult<typeof shareholdersAgreementABI, 'getTerm'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'getTerm',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'getTerm',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'getTerm',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"getTitles"`.
 */
export function useShareholdersAgreementGetTitles<
  TSelectData = ReadContractResult<
    typeof shareholdersAgreementABI,
    'getTitles'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'getTitles',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'getTitles',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'getTitles',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"hasRole"`.
 */
export function useShareholdersAgreementHasRole<
  TSelectData = ReadContractResult<typeof shareholdersAgreementABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'hasRole',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'hasRole',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"hasRule"`.
 */
export function useShareholdersAgreementHasRule<
  TSelectData = ReadContractResult<typeof shareholdersAgreementABI, 'hasRule'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'hasRule',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'hasRule',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'hasRule',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"hasTitle"`.
 */
export function useShareholdersAgreementHasTitle<
  TSelectData = ReadContractResult<typeof shareholdersAgreementABI, 'hasTitle'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'hasTitle',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'hasTitle',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'hasTitle',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"isBuyer"`.
 */
export function useShareholdersAgreementIsBuyer<
  TSelectData = ReadContractResult<typeof shareholdersAgreementABI, 'isBuyer'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'isBuyer',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'isBuyer',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'isBuyer',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"isFinalized"`.
 */
export function useShareholdersAgreementIsFinalized<
  TSelectData = ReadContractResult<
    typeof shareholdersAgreementABI,
    'isFinalized'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'isFinalized',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'isFinalized',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'isFinalized',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"isInitSigner"`.
 */
export function useShareholdersAgreementIsInitSigner<
  TSelectData = ReadContractResult<
    typeof shareholdersAgreementABI,
    'isInitSigner'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'isInitSigner',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'isInitSigner',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'isInitSigner',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"isParty"`.
 */
export function useShareholdersAgreementIsParty<
  TSelectData = ReadContractResult<typeof shareholdersAgreementABI, 'isParty'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'isParty',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'isParty',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'isParty',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"isSeller"`.
 */
export function useShareholdersAgreementIsSeller<
  TSelectData = ReadContractResult<typeof shareholdersAgreementABI, 'isSeller'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'isSeller',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'isSeller',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'isSeller',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"isSigner"`.
 */
export function useShareholdersAgreementIsSigner<
  TSelectData = ReadContractResult<typeof shareholdersAgreementABI, 'isSigner'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'isSigner',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'isSigner',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'isSigner',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"qtyOfRules"`.
 */
export function useShareholdersAgreementQtyOfRules<
  TSelectData = ReadContractResult<
    typeof shareholdersAgreementABI,
    'qtyOfRules'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'qtyOfRules',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'qtyOfRules',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'qtyOfRules',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"qtyOfTerms"`.
 */
export function useShareholdersAgreementQtyOfTerms<
  TSelectData = ReadContractResult<
    typeof shareholdersAgreementABI,
    'qtyOfTerms'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'qtyOfTerms',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'qtyOfTerms',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'qtyOfTerms',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__.
 */
export function useShareholdersAgreementWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shareholdersAgreementABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof shareholdersAgreementABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof shareholdersAgreementABI,
    TFunctionName
  >({ abi: shareholdersAgreementABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useShareholdersAgreementAbandonRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shareholdersAgreementABI,
          'abandonRole'
        >['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<
        TMode,
        typeof shareholdersAgreementABI,
        'abandonRole'
      > & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof shareholdersAgreementABI,
    'abandonRole'
  >({
    abi: shareholdersAgreementABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"addBlank"`.
 */
export function useShareholdersAgreementAddBlank<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shareholdersAgreementABI,
          'addBlank'
        >['abi'],
        'addBlank'
      > & { functionName?: 'addBlank' }
    : UseContractWriteConfig<
        TMode,
        typeof shareholdersAgreementABI,
        'addBlank'
      > & {
        abi?: never
        functionName?: 'addBlank'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shareholdersAgreementABI, 'addBlank'>({
    abi: shareholdersAgreementABI,
    functionName: 'addBlank',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"addRule"`.
 */
export function useShareholdersAgreementAddRule<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shareholdersAgreementABI,
          'addRule'
        >['abi'],
        'addRule'
      > & { functionName?: 'addRule' }
    : UseContractWriteConfig<
        TMode,
        typeof shareholdersAgreementABI,
        'addRule'
      > & {
        abi?: never
        functionName?: 'addRule'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shareholdersAgreementABI, 'addRule'>({
    abi: shareholdersAgreementABI,
    functionName: 'addRule',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"circulateDoc"`.
 */
export function useShareholdersAgreementCirculateDoc<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shareholdersAgreementABI,
          'circulateDoc'
        >['abi'],
        'circulateDoc'
      > & { functionName?: 'circulateDoc' }
    : UseContractWriteConfig<
        TMode,
        typeof shareholdersAgreementABI,
        'circulateDoc'
      > & {
        abi?: never
        functionName?: 'circulateDoc'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof shareholdersAgreementABI,
    'circulateDoc'
  >({
    abi: shareholdersAgreementABI,
    functionName: 'circulateDoc',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"createTerm"`.
 */
export function useShareholdersAgreementCreateTerm<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shareholdersAgreementABI,
          'createTerm'
        >['abi'],
        'createTerm'
      > & { functionName?: 'createTerm' }
    : UseContractWriteConfig<
        TMode,
        typeof shareholdersAgreementABI,
        'createTerm'
      > & {
        abi?: never
        functionName?: 'createTerm'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shareholdersAgreementABI, 'createTerm'>(
    {
      abi: shareholdersAgreementABI,
      functionName: 'createTerm',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"finalizeSHA"`.
 */
export function useShareholdersAgreementFinalizeSha<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shareholdersAgreementABI,
          'finalizeSHA'
        >['abi'],
        'finalizeSHA'
      > & { functionName?: 'finalizeSHA' }
    : UseContractWriteConfig<
        TMode,
        typeof shareholdersAgreementABI,
        'finalizeSHA'
      > & {
        abi?: never
        functionName?: 'finalizeSHA'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof shareholdersAgreementABI,
    'finalizeSHA'
  >({
    abi: shareholdersAgreementABI,
    functionName: 'finalizeSHA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"grantRole"`.
 */
export function useShareholdersAgreementGrantRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shareholdersAgreementABI,
          'grantRole'
        >['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<
        TMode,
        typeof shareholdersAgreementABI,
        'grantRole'
      > & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shareholdersAgreementABI, 'grantRole'>({
    abi: shareholdersAgreementABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"init"`.
 */
export function useShareholdersAgreementInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shareholdersAgreementABI,
          'init'
        >['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof shareholdersAgreementABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shareholdersAgreementABI, 'init'>({
    abi: shareholdersAgreementABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"initDefaultRules"`.
 */
export function useShareholdersAgreementInitDefaultRules<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shareholdersAgreementABI,
          'initDefaultRules'
        >['abi'],
        'initDefaultRules'
      > & { functionName?: 'initDefaultRules' }
    : UseContractWriteConfig<
        TMode,
        typeof shareholdersAgreementABI,
        'initDefaultRules'
      > & {
        abi?: never
        functionName?: 'initDefaultRules'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof shareholdersAgreementABI,
    'initDefaultRules'
  >({
    abi: shareholdersAgreementABI,
    functionName: 'initDefaultRules',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"lockContents"`.
 */
export function useShareholdersAgreementLockContents<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shareholdersAgreementABI,
          'lockContents'
        >['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<
        TMode,
        typeof shareholdersAgreementABI,
        'lockContents'
      > & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof shareholdersAgreementABI,
    'lockContents'
  >({
    abi: shareholdersAgreementABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"regSig"`.
 */
export function useShareholdersAgreementRegSig<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shareholdersAgreementABI,
          'regSig'
        >['abi'],
        'regSig'
      > & { functionName?: 'regSig' }
    : UseContractWriteConfig<
        TMode,
        typeof shareholdersAgreementABI,
        'regSig'
      > & {
        abi?: never
        functionName?: 'regSig'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shareholdersAgreementABI, 'regSig'>({
    abi: shareholdersAgreementABI,
    functionName: 'regSig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"removeBlank"`.
 */
export function useShareholdersAgreementRemoveBlank<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shareholdersAgreementABI,
          'removeBlank'
        >['abi'],
        'removeBlank'
      > & { functionName?: 'removeBlank' }
    : UseContractWriteConfig<
        TMode,
        typeof shareholdersAgreementABI,
        'removeBlank'
      > & {
        abi?: never
        functionName?: 'removeBlank'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof shareholdersAgreementABI,
    'removeBlank'
  >({
    abi: shareholdersAgreementABI,
    functionName: 'removeBlank',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"removeRule"`.
 */
export function useShareholdersAgreementRemoveRule<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shareholdersAgreementABI,
          'removeRule'
        >['abi'],
        'removeRule'
      > & { functionName?: 'removeRule' }
    : UseContractWriteConfig<
        TMode,
        typeof shareholdersAgreementABI,
        'removeRule'
      > & {
        abi?: never
        functionName?: 'removeRule'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shareholdersAgreementABI, 'removeRule'>(
    {
      abi: shareholdersAgreementABI,
      functionName: 'removeRule',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"removeTerm"`.
 */
export function useShareholdersAgreementRemoveTerm<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shareholdersAgreementABI,
          'removeTerm'
        >['abi'],
        'removeTerm'
      > & { functionName?: 'removeTerm' }
    : UseContractWriteConfig<
        TMode,
        typeof shareholdersAgreementABI,
        'removeTerm'
      > & {
        abi?: never
        functionName?: 'removeTerm'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shareholdersAgreementABI, 'removeTerm'>(
    {
      abi: shareholdersAgreementABI,
      functionName: 'removeTerm',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useShareholdersAgreementRenounceRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shareholdersAgreementABI,
          'renounceRole'
        >['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<
        TMode,
        typeof shareholdersAgreementABI,
        'renounceRole'
      > & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof shareholdersAgreementABI,
    'renounceRole'
  >({
    abi: shareholdersAgreementABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useShareholdersAgreementRevokeRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shareholdersAgreementABI,
          'revokeRole'
        >['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<
        TMode,
        typeof shareholdersAgreementABI,
        'revokeRole'
      > & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shareholdersAgreementABI, 'revokeRole'>(
    {
      abi: shareholdersAgreementABI,
      functionName: 'revokeRole',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useShareholdersAgreementSetDirectKeeper<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shareholdersAgreementABI,
          'setDirectKeeper'
        >['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof shareholdersAgreementABI,
        'setDirectKeeper'
      > & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof shareholdersAgreementABI,
    'setDirectKeeper'
  >({
    abi: shareholdersAgreementABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"setOwner"`.
 */
export function useShareholdersAgreementSetOwner<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shareholdersAgreementABI,
          'setOwner'
        >['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<
        TMode,
        typeof shareholdersAgreementABI,
        'setOwner'
      > & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shareholdersAgreementABI, 'setOwner'>({
    abi: shareholdersAgreementABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useShareholdersAgreementSetRoleAdmin<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shareholdersAgreementABI,
          'setRoleAdmin'
        >['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<
        TMode,
        typeof shareholdersAgreementABI,
        'setRoleAdmin'
      > & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof shareholdersAgreementABI,
    'setRoleAdmin'
  >({
    abi: shareholdersAgreementABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"setTiming"`.
 */
export function useShareholdersAgreementSetTiming<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shareholdersAgreementABI,
          'setTiming'
        >['abi'],
        'setTiming'
      > & { functionName?: 'setTiming' }
    : UseContractWriteConfig<
        TMode,
        typeof shareholdersAgreementABI,
        'setTiming'
      > & {
        abi?: never
        functionName?: 'setTiming'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shareholdersAgreementABI, 'setTiming'>({
    abi: shareholdersAgreementABI,
    functionName: 'setTiming',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"signDoc"`.
 */
export function useShareholdersAgreementSignDoc<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shareholdersAgreementABI,
          'signDoc'
        >['abi'],
        'signDoc'
      > & { functionName?: 'signDoc' }
    : UseContractWriteConfig<
        TMode,
        typeof shareholdersAgreementABI,
        'signDoc'
      > & {
        abi?: never
        functionName?: 'signDoc'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shareholdersAgreementABI, 'signDoc'>({
    abi: shareholdersAgreementABI,
    functionName: 'signDoc',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function useShareholdersAgreementTakeBackKeys<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shareholdersAgreementABI,
          'takeBackKeys'
        >['abi'],
        'takeBackKeys'
      > & { functionName?: 'takeBackKeys' }
    : UseContractWriteConfig<
        TMode,
        typeof shareholdersAgreementABI,
        'takeBackKeys'
      > & {
        abi?: never
        functionName?: 'takeBackKeys'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof shareholdersAgreementABI,
    'takeBackKeys'
  >({
    abi: shareholdersAgreementABI,
    functionName: 'takeBackKeys',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__.
 */
export function usePrepareShareholdersAgreementWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof shareholdersAgreementABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shareholdersAgreementABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof shareholdersAgreementABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareShareholdersAgreementAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof shareholdersAgreementABI,
      'abandonRole'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shareholdersAgreementABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof shareholdersAgreementABI,
    'abandonRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"addBlank"`.
 */
export function usePrepareShareholdersAgreementAddBlank(
  config: Omit<
    UsePrepareContractWriteConfig<typeof shareholdersAgreementABI, 'addBlank'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shareholdersAgreementABI,
    functionName: 'addBlank',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof shareholdersAgreementABI,
    'addBlank'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"addRule"`.
 */
export function usePrepareShareholdersAgreementAddRule(
  config: Omit<
    UsePrepareContractWriteConfig<typeof shareholdersAgreementABI, 'addRule'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shareholdersAgreementABI,
    functionName: 'addRule',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof shareholdersAgreementABI,
    'addRule'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"circulateDoc"`.
 */
export function usePrepareShareholdersAgreementCirculateDoc(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof shareholdersAgreementABI,
      'circulateDoc'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shareholdersAgreementABI,
    functionName: 'circulateDoc',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof shareholdersAgreementABI,
    'circulateDoc'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"createTerm"`.
 */
export function usePrepareShareholdersAgreementCreateTerm(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof shareholdersAgreementABI,
      'createTerm'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shareholdersAgreementABI,
    functionName: 'createTerm',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof shareholdersAgreementABI,
    'createTerm'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"finalizeSHA"`.
 */
export function usePrepareShareholdersAgreementFinalizeSha(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof shareholdersAgreementABI,
      'finalizeSHA'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shareholdersAgreementABI,
    functionName: 'finalizeSHA',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof shareholdersAgreementABI,
    'finalizeSHA'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareShareholdersAgreementGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof shareholdersAgreementABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shareholdersAgreementABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof shareholdersAgreementABI,
    'grantRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareShareholdersAgreementInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof shareholdersAgreementABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shareholdersAgreementABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof shareholdersAgreementABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"initDefaultRules"`.
 */
export function usePrepareShareholdersAgreementInitDefaultRules(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof shareholdersAgreementABI,
      'initDefaultRules'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shareholdersAgreementABI,
    functionName: 'initDefaultRules',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof shareholdersAgreementABI,
    'initDefaultRules'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareShareholdersAgreementLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof shareholdersAgreementABI,
      'lockContents'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shareholdersAgreementABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof shareholdersAgreementABI,
    'lockContents'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"regSig"`.
 */
export function usePrepareShareholdersAgreementRegSig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof shareholdersAgreementABI, 'regSig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shareholdersAgreementABI,
    functionName: 'regSig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof shareholdersAgreementABI, 'regSig'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"removeBlank"`.
 */
export function usePrepareShareholdersAgreementRemoveBlank(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof shareholdersAgreementABI,
      'removeBlank'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shareholdersAgreementABI,
    functionName: 'removeBlank',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof shareholdersAgreementABI,
    'removeBlank'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"removeRule"`.
 */
export function usePrepareShareholdersAgreementRemoveRule(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof shareholdersAgreementABI,
      'removeRule'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shareholdersAgreementABI,
    functionName: 'removeRule',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof shareholdersAgreementABI,
    'removeRule'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"removeTerm"`.
 */
export function usePrepareShareholdersAgreementRemoveTerm(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof shareholdersAgreementABI,
      'removeTerm'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shareholdersAgreementABI,
    functionName: 'removeTerm',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof shareholdersAgreementABI,
    'removeTerm'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareShareholdersAgreementRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof shareholdersAgreementABI,
      'renounceRole'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shareholdersAgreementABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof shareholdersAgreementABI,
    'renounceRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareShareholdersAgreementRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof shareholdersAgreementABI,
      'revokeRole'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shareholdersAgreementABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof shareholdersAgreementABI,
    'revokeRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareShareholdersAgreementSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof shareholdersAgreementABI,
      'setDirectKeeper'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shareholdersAgreementABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof shareholdersAgreementABI,
    'setDirectKeeper'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareShareholdersAgreementSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof shareholdersAgreementABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shareholdersAgreementABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof shareholdersAgreementABI,
    'setOwner'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareShareholdersAgreementSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof shareholdersAgreementABI,
      'setRoleAdmin'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shareholdersAgreementABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof shareholdersAgreementABI,
    'setRoleAdmin'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"setTiming"`.
 */
export function usePrepareShareholdersAgreementSetTiming(
  config: Omit<
    UsePrepareContractWriteConfig<typeof shareholdersAgreementABI, 'setTiming'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shareholdersAgreementABI,
    functionName: 'setTiming',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof shareholdersAgreementABI,
    'setTiming'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"signDoc"`.
 */
export function usePrepareShareholdersAgreementSignDoc(
  config: Omit<
    UsePrepareContractWriteConfig<typeof shareholdersAgreementABI, 'signDoc'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shareholdersAgreementABI,
    functionName: 'signDoc',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof shareholdersAgreementABI,
    'signDoc'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function usePrepareShareholdersAgreementTakeBackKeys(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof shareholdersAgreementABI,
      'takeBackKeys'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shareholdersAgreementABI,
    functionName: 'takeBackKeys',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof shareholdersAgreementABI,
    'takeBackKeys'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link shareholdersAgreementABI}__.
 */
export function useShareholdersAgreementEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof shareholdersAgreementABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: shareholdersAgreementABI,
    ...config,
  } as UseContractEventConfig<typeof shareholdersAgreementABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `eventName` set to `"CirculateDoc"`.
 */
export function useShareholdersAgreementCirculateDocEvent(
  config: Omit<
    UseContractEventConfig<typeof shareholdersAgreementABI, 'CirculateDoc'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: shareholdersAgreementABI,
    eventName: 'CirculateDoc',
    ...config,
  } as UseContractEventConfig<typeof shareholdersAgreementABI, 'CirculateDoc'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `eventName` set to `"Init"`.
 */
export function useShareholdersAgreementInitEvent(
  config: Omit<
    UseContractEventConfig<typeof shareholdersAgreementABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: shareholdersAgreementABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof shareholdersAgreementABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `eventName` set to `"LockContents"`.
 */
export function useShareholdersAgreementLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof shareholdersAgreementABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: shareholdersAgreementABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof shareholdersAgreementABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useShareholdersAgreementSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof shareholdersAgreementABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: shareholdersAgreementABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<
    typeof shareholdersAgreementABI,
    'SetDirectKeeper'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useShareholdersAgreementSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof shareholdersAgreementABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: shareholdersAgreementABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof shareholdersAgreementABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `eventName` set to `"SetRoleAdmin"`.
 */
export function useShareholdersAgreementSetRoleAdminEvent(
  config: Omit<
    UseContractEventConfig<typeof shareholdersAgreementABI, 'SetRoleAdmin'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: shareholdersAgreementABI,
    eventName: 'SetRoleAdmin',
    ...config,
  } as UseContractEventConfig<typeof shareholdersAgreementABI, 'SetRoleAdmin'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iRegisterOfDirectorsABI}__.
 */
export function useIRegisterOfDirectors(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iRegisterOfDirectorsABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfDirectorsABI}__.
 */
export function useIRegisterOfDirectorsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof iRegisterOfDirectorsABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfDirectorsABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfDirectorsABI,
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfDirectorsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfDirectorsABI}__ and `functionName` set to `"getBoardSeatsOccupied"`.
 */
export function useIRegisterOfDirectorsGetBoardSeatsOccupied<
  TSelectData = ReadContractResult<
    typeof iRegisterOfDirectorsABI,
    'getBoardSeatsOccupied'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfDirectorsABI,
      'getBoardSeatsOccupied',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfDirectorsABI,
    functionName: 'getBoardSeatsOccupied',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfDirectorsABI,
    'getBoardSeatsOccupied',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfDirectorsABI}__ and `functionName` set to `"getDirectorsList"`.
 */
export function useIRegisterOfDirectorsGetDirectorsList<
  TSelectData = ReadContractResult<
    typeof iRegisterOfDirectorsABI,
    'getDirectorsList'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfDirectorsABI,
      'getDirectorsList',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfDirectorsABI,
    functionName: 'getDirectorsList',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfDirectorsABI,
    'getDirectorsList',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfDirectorsABI}__ and `functionName` set to `"getDirectorsPosList"`.
 */
export function useIRegisterOfDirectorsGetDirectorsPosList<
  TSelectData = ReadContractResult<
    typeof iRegisterOfDirectorsABI,
    'getDirectorsPosList'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfDirectorsABI,
      'getDirectorsPosList',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfDirectorsABI,
    functionName: 'getDirectorsPosList',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfDirectorsABI,
    'getDirectorsPosList',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfDirectorsABI}__ and `functionName` set to `"getFullPosInfoInHand"`.
 */
export function useIRegisterOfDirectorsGetFullPosInfoInHand<
  TSelectData = ReadContractResult<
    typeof iRegisterOfDirectorsABI,
    'getFullPosInfoInHand'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfDirectorsABI,
      'getFullPosInfoInHand',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfDirectorsABI,
    functionName: 'getFullPosInfoInHand',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfDirectorsABI,
    'getFullPosInfoInHand',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfDirectorsABI}__ and `functionName` set to `"getManagersList"`.
 */
export function useIRegisterOfDirectorsGetManagersList<
  TSelectData = ReadContractResult<
    typeof iRegisterOfDirectorsABI,
    'getManagersList'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfDirectorsABI,
      'getManagersList',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfDirectorsABI,
    functionName: 'getManagersList',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfDirectorsABI,
    'getManagersList',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfDirectorsABI}__ and `functionName` set to `"getManagersPosList"`.
 */
export function useIRegisterOfDirectorsGetManagersPosList<
  TSelectData = ReadContractResult<
    typeof iRegisterOfDirectorsABI,
    'getManagersPosList'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfDirectorsABI,
      'getManagersPosList',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfDirectorsABI,
    functionName: 'getManagersPosList',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfDirectorsABI,
    'getManagersPosList',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfDirectorsABI}__ and `functionName` set to `"getNumOfDirectors"`.
 */
export function useIRegisterOfDirectorsGetNumOfDirectors<
  TSelectData = ReadContractResult<
    typeof iRegisterOfDirectorsABI,
    'getNumOfDirectors'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfDirectorsABI,
      'getNumOfDirectors',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfDirectorsABI,
    functionName: 'getNumOfDirectors',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfDirectorsABI,
    'getNumOfDirectors',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfDirectorsABI}__ and `functionName` set to `"getNumOfManagers"`.
 */
export function useIRegisterOfDirectorsGetNumOfManagers<
  TSelectData = ReadContractResult<
    typeof iRegisterOfDirectorsABI,
    'getNumOfManagers'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfDirectorsABI,
      'getNumOfManagers',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfDirectorsABI,
    functionName: 'getNumOfManagers',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfDirectorsABI,
    'getNumOfManagers',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfDirectorsABI}__ and `functionName` set to `"getPosInHand"`.
 */
export function useIRegisterOfDirectorsGetPosInHand<
  TSelectData = ReadContractResult<
    typeof iRegisterOfDirectorsABI,
    'getPosInHand'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfDirectorsABI,
      'getPosInHand',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfDirectorsABI,
    functionName: 'getPosInHand',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfDirectorsABI,
    'getPosInHand',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfDirectorsABI}__ and `functionName` set to `"getPosition"`.
 */
export function useIRegisterOfDirectorsGetPosition<
  TSelectData = ReadContractResult<
    typeof iRegisterOfDirectorsABI,
    'getPosition'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfDirectorsABI,
      'getPosition',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfDirectorsABI,
    functionName: 'getPosition',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfDirectorsABI,
    'getPosition',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfDirectorsABI}__ and `functionName` set to `"hasNominationRight"`.
 */
export function useIRegisterOfDirectorsHasNominationRight<
  TSelectData = ReadContractResult<
    typeof iRegisterOfDirectorsABI,
    'hasNominationRight'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfDirectorsABI,
      'hasNominationRight',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfDirectorsABI,
    functionName: 'hasNominationRight',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfDirectorsABI,
    'hasNominationRight',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfDirectorsABI}__ and `functionName` set to `"hasPosition"`.
 */
export function useIRegisterOfDirectorsHasPosition<
  TSelectData = ReadContractResult<
    typeof iRegisterOfDirectorsABI,
    'hasPosition'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfDirectorsABI,
      'hasPosition',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfDirectorsABI,
    functionName: 'hasPosition',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfDirectorsABI,
    'hasPosition',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfDirectorsABI}__ and `functionName` set to `"isDirector"`.
 */
export function useIRegisterOfDirectorsIsDirector<
  TSelectData = ReadContractResult<
    typeof iRegisterOfDirectorsABI,
    'isDirector'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfDirectorsABI,
      'isDirector',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfDirectorsABI,
    functionName: 'isDirector',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfDirectorsABI,
    'isDirector',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfDirectorsABI}__ and `functionName` set to `"isManager"`.
 */
export function useIRegisterOfDirectorsIsManager<
  TSelectData = ReadContractResult<typeof iRegisterOfDirectorsABI, 'isManager'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfDirectorsABI,
      'isManager',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfDirectorsABI,
    functionName: 'isManager',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfDirectorsABI,
    'isManager',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfDirectorsABI}__ and `functionName` set to `"isOccupied"`.
 */
export function useIRegisterOfDirectorsIsOccupied<
  TSelectData = ReadContractResult<
    typeof iRegisterOfDirectorsABI,
    'isOccupied'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfDirectorsABI,
      'isOccupied',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfDirectorsABI,
    functionName: 'isOccupied',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfDirectorsABI,
    'isOccupied',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfDirectorsABI}__ and `functionName` set to `"posExist"`.
 */
export function useIRegisterOfDirectorsPosExist<
  TSelectData = ReadContractResult<typeof iRegisterOfDirectorsABI, 'posExist'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfDirectorsABI,
      'posExist',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfDirectorsABI,
    functionName: 'posExist',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfDirectorsABI,
    'posExist',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfDirectorsABI}__.
 */
export function useIRegisterOfDirectorsWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfDirectorsABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfDirectorsABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegisterOfDirectorsABI, TFunctionName>(
    { abi: iRegisterOfDirectorsABI, ...config } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfDirectorsABI}__ and `functionName` set to `"createPosition"`.
 */
export function useIRegisterOfDirectorsCreatePosition<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfDirectorsABI,
          'createPosition'
        >['abi'],
        'createPosition'
      > & { functionName?: 'createPosition' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfDirectorsABI,
        'createPosition'
      > & {
        abi?: never
        functionName?: 'createPosition'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iRegisterOfDirectorsABI,
    'createPosition'
  >({
    abi: iRegisterOfDirectorsABI,
    functionName: 'createPosition',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfDirectorsABI}__ and `functionName` set to `"hasTitle"`.
 */
export function useIRegisterOfDirectorsHasTitle<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfDirectorsABI,
          'hasTitle'
        >['abi'],
        'hasTitle'
      > & { functionName?: 'hasTitle' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfDirectorsABI,
        'hasTitle'
      > & {
        abi?: never
        functionName?: 'hasTitle'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegisterOfDirectorsABI, 'hasTitle'>({
    abi: iRegisterOfDirectorsABI,
    functionName: 'hasTitle',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfDirectorsABI}__ and `functionName` set to `"quitPosition"`.
 */
export function useIRegisterOfDirectorsQuitPosition<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfDirectorsABI,
          'quitPosition'
        >['abi'],
        'quitPosition'
      > & { functionName?: 'quitPosition' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfDirectorsABI,
        'quitPosition'
      > & {
        abi?: never
        functionName?: 'quitPosition'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iRegisterOfDirectorsABI,
    'quitPosition'
  >({
    abi: iRegisterOfDirectorsABI,
    functionName: 'quitPosition',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfDirectorsABI}__ and `functionName` set to `"removeOfficer"`.
 */
export function useIRegisterOfDirectorsRemoveOfficer<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfDirectorsABI,
          'removeOfficer'
        >['abi'],
        'removeOfficer'
      > & { functionName?: 'removeOfficer' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfDirectorsABI,
        'removeOfficer'
      > & {
        abi?: never
        functionName?: 'removeOfficer'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iRegisterOfDirectorsABI,
    'removeOfficer'
  >({
    abi: iRegisterOfDirectorsABI,
    functionName: 'removeOfficer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfDirectorsABI}__ and `functionName` set to `"removePosition"`.
 */
export function useIRegisterOfDirectorsRemovePosition<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfDirectorsABI,
          'removePosition'
        >['abi'],
        'removePosition'
      > & { functionName?: 'removePosition' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfDirectorsABI,
        'removePosition'
      > & {
        abi?: never
        functionName?: 'removePosition'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iRegisterOfDirectorsABI,
    'removePosition'
  >({
    abi: iRegisterOfDirectorsABI,
    functionName: 'removePosition',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfDirectorsABI}__ and `functionName` set to `"takePosition"`.
 */
export function useIRegisterOfDirectorsTakePosition<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfDirectorsABI,
          'takePosition'
        >['abi'],
        'takePosition'
      > & { functionName?: 'takePosition' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfDirectorsABI,
        'takePosition'
      > & {
        abi?: never
        functionName?: 'takePosition'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iRegisterOfDirectorsABI,
    'takePosition'
  >({
    abi: iRegisterOfDirectorsABI,
    functionName: 'takePosition',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfDirectorsABI}__ and `functionName` set to `"updatePosition"`.
 */
export function useIRegisterOfDirectorsUpdatePosition<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfDirectorsABI,
          'updatePosition'
        >['abi'],
        'updatePosition'
      > & { functionName?: 'updatePosition' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfDirectorsABI,
        'updatePosition'
      > & {
        abi?: never
        functionName?: 'updatePosition'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iRegisterOfDirectorsABI,
    'updatePosition'
  >({
    abi: iRegisterOfDirectorsABI,
    functionName: 'updatePosition',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfDirectorsABI}__.
 */
export function usePrepareIRegisterOfDirectorsWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRegisterOfDirectorsABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfDirectorsABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfDirectorsABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfDirectorsABI}__ and `functionName` set to `"createPosition"`.
 */
export function usePrepareIRegisterOfDirectorsCreatePosition(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRegisterOfDirectorsABI,
      'createPosition'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfDirectorsABI,
    functionName: 'createPosition',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfDirectorsABI,
    'createPosition'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfDirectorsABI}__ and `functionName` set to `"hasTitle"`.
 */
export function usePrepareIRegisterOfDirectorsHasTitle(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegisterOfDirectorsABI, 'hasTitle'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfDirectorsABI,
    functionName: 'hasTitle',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfDirectorsABI,
    'hasTitle'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfDirectorsABI}__ and `functionName` set to `"quitPosition"`.
 */
export function usePrepareIRegisterOfDirectorsQuitPosition(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRegisterOfDirectorsABI,
      'quitPosition'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfDirectorsABI,
    functionName: 'quitPosition',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfDirectorsABI,
    'quitPosition'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfDirectorsABI}__ and `functionName` set to `"removeOfficer"`.
 */
export function usePrepareIRegisterOfDirectorsRemoveOfficer(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRegisterOfDirectorsABI,
      'removeOfficer'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfDirectorsABI,
    functionName: 'removeOfficer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfDirectorsABI,
    'removeOfficer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfDirectorsABI}__ and `functionName` set to `"removePosition"`.
 */
export function usePrepareIRegisterOfDirectorsRemovePosition(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRegisterOfDirectorsABI,
      'removePosition'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfDirectorsABI,
    functionName: 'removePosition',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfDirectorsABI,
    'removePosition'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfDirectorsABI}__ and `functionName` set to `"takePosition"`.
 */
export function usePrepareIRegisterOfDirectorsTakePosition(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRegisterOfDirectorsABI,
      'takePosition'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfDirectorsABI,
    functionName: 'takePosition',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfDirectorsABI,
    'takePosition'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfDirectorsABI}__ and `functionName` set to `"updatePosition"`.
 */
export function usePrepareIRegisterOfDirectorsUpdatePosition(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRegisterOfDirectorsABI,
      'updatePosition'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfDirectorsABI,
    functionName: 'updatePosition',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfDirectorsABI,
    'updatePosition'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfDirectorsABI}__.
 */
export function useIRegisterOfDirectorsEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfDirectorsABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfDirectorsABI,
    ...config,
  } as UseContractEventConfig<typeof iRegisterOfDirectorsABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfDirectorsABI}__ and `eventName` set to `"AddPosition"`.
 */
export function useIRegisterOfDirectorsAddPositionEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfDirectorsABI, 'AddPosition'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfDirectorsABI,
    eventName: 'AddPosition',
    ...config,
  } as UseContractEventConfig<typeof iRegisterOfDirectorsABI, 'AddPosition'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfDirectorsABI}__ and `eventName` set to `"QuitPosition"`.
 */
export function useIRegisterOfDirectorsQuitPositionEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfDirectorsABI, 'QuitPosition'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfDirectorsABI,
    eventName: 'QuitPosition',
    ...config,
  } as UseContractEventConfig<typeof iRegisterOfDirectorsABI, 'QuitPosition'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfDirectorsABI}__ and `eventName` set to `"RemoveOfficer"`.
 */
export function useIRegisterOfDirectorsRemoveOfficerEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfDirectorsABI, 'RemoveOfficer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfDirectorsABI,
    eventName: 'RemoveOfficer',
    ...config,
  } as UseContractEventConfig<typeof iRegisterOfDirectorsABI, 'RemoveOfficer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfDirectorsABI}__ and `eventName` set to `"RemovePosition"`.
 */
export function useIRegisterOfDirectorsRemovePositionEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfDirectorsABI, 'RemovePosition'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfDirectorsABI,
    eventName: 'RemovePosition',
    ...config,
  } as UseContractEventConfig<typeof iRegisterOfDirectorsABI, 'RemovePosition'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfDirectorsABI}__ and `eventName` set to `"TakePosition"`.
 */
export function useIRegisterOfDirectorsTakePositionEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfDirectorsABI, 'TakePosition'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfDirectorsABI,
    eventName: 'TakePosition',
    ...config,
  } as UseContractEventConfig<typeof iRegisterOfDirectorsABI, 'TakePosition'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link registerOfDirectorsABI}__.
 */
export function useRegisterOfDirectors(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: registerOfDirectorsABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfDirectorsABI}__.
 */
export function useRegisterOfDirectorsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof registerOfDirectorsABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfDirectorsABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfDirectorsABI,
    ...config,
  } as UseContractReadConfig<
    typeof registerOfDirectorsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `functionName` set to `"getBoardSeatsOccupied"`.
 */
export function useRegisterOfDirectorsGetBoardSeatsOccupied<
  TSelectData = ReadContractResult<
    typeof registerOfDirectorsABI,
    'getBoardSeatsOccupied'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfDirectorsABI,
      'getBoardSeatsOccupied',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfDirectorsABI,
    functionName: 'getBoardSeatsOccupied',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfDirectorsABI,
    'getBoardSeatsOccupied',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `functionName` set to `"getDK"`.
 */
export function useRegisterOfDirectorsGetDk<
  TSelectData = ReadContractResult<typeof registerOfDirectorsABI, 'getDK'>,
>(
  config: Omit<
    UseContractReadConfig<typeof registerOfDirectorsABI, 'getDK', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfDirectorsABI,
    functionName: 'getDK',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfDirectorsABI,
    'getDK',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `functionName` set to `"getDirectorsList"`.
 */
export function useRegisterOfDirectorsGetDirectorsList<
  TSelectData = ReadContractResult<
    typeof registerOfDirectorsABI,
    'getDirectorsList'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfDirectorsABI,
      'getDirectorsList',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfDirectorsABI,
    functionName: 'getDirectorsList',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfDirectorsABI,
    'getDirectorsList',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `functionName` set to `"getDirectorsPosList"`.
 */
export function useRegisterOfDirectorsGetDirectorsPosList<
  TSelectData = ReadContractResult<
    typeof registerOfDirectorsABI,
    'getDirectorsPosList'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfDirectorsABI,
      'getDirectorsPosList',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfDirectorsABI,
    functionName: 'getDirectorsPosList',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfDirectorsABI,
    'getDirectorsPosList',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `functionName` set to `"getFullPosInfoInHand"`.
 */
export function useRegisterOfDirectorsGetFullPosInfoInHand<
  TSelectData = ReadContractResult<
    typeof registerOfDirectorsABI,
    'getFullPosInfoInHand'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfDirectorsABI,
      'getFullPosInfoInHand',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfDirectorsABI,
    functionName: 'getFullPosInfoInHand',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfDirectorsABI,
    'getFullPosInfoInHand',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `functionName` set to `"getManagersList"`.
 */
export function useRegisterOfDirectorsGetManagersList<
  TSelectData = ReadContractResult<
    typeof registerOfDirectorsABI,
    'getManagersList'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfDirectorsABI,
      'getManagersList',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfDirectorsABI,
    functionName: 'getManagersList',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfDirectorsABI,
    'getManagersList',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `functionName` set to `"getManagersPosList"`.
 */
export function useRegisterOfDirectorsGetManagersPosList<
  TSelectData = ReadContractResult<
    typeof registerOfDirectorsABI,
    'getManagersPosList'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfDirectorsABI,
      'getManagersPosList',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfDirectorsABI,
    functionName: 'getManagersPosList',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfDirectorsABI,
    'getManagersPosList',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `functionName` set to `"getNumOfDirectors"`.
 */
export function useRegisterOfDirectorsGetNumOfDirectors<
  TSelectData = ReadContractResult<
    typeof registerOfDirectorsABI,
    'getNumOfDirectors'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfDirectorsABI,
      'getNumOfDirectors',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfDirectorsABI,
    functionName: 'getNumOfDirectors',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfDirectorsABI,
    'getNumOfDirectors',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `functionName` set to `"getNumOfManagers"`.
 */
export function useRegisterOfDirectorsGetNumOfManagers<
  TSelectData = ReadContractResult<
    typeof registerOfDirectorsABI,
    'getNumOfManagers'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfDirectorsABI,
      'getNumOfManagers',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfDirectorsABI,
    functionName: 'getNumOfManagers',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfDirectorsABI,
    'getNumOfManagers',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `functionName` set to `"getOwner"`.
 */
export function useRegisterOfDirectorsGetOwner<
  TSelectData = ReadContractResult<typeof registerOfDirectorsABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfDirectorsABI,
      'getOwner',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfDirectorsABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfDirectorsABI,
    'getOwner',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `functionName` set to `"getPosInHand"`.
 */
export function useRegisterOfDirectorsGetPosInHand<
  TSelectData = ReadContractResult<
    typeof registerOfDirectorsABI,
    'getPosInHand'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfDirectorsABI,
      'getPosInHand',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfDirectorsABI,
    functionName: 'getPosInHand',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfDirectorsABI,
    'getPosInHand',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `functionName` set to `"getPosition"`.
 */
export function useRegisterOfDirectorsGetPosition<
  TSelectData = ReadContractResult<
    typeof registerOfDirectorsABI,
    'getPosition'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfDirectorsABI,
      'getPosition',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfDirectorsABI,
    functionName: 'getPosition',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfDirectorsABI,
    'getPosition',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useRegisterOfDirectorsGetRoleAdmin<
  TSelectData = ReadContractResult<
    typeof registerOfDirectorsABI,
    'getRoleAdmin'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfDirectorsABI,
      'getRoleAdmin',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfDirectorsABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfDirectorsABI,
    'getRoleAdmin',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `functionName` set to `"hasNominationRight"`.
 */
export function useRegisterOfDirectorsHasNominationRight<
  TSelectData = ReadContractResult<
    typeof registerOfDirectorsABI,
    'hasNominationRight'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfDirectorsABI,
      'hasNominationRight',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfDirectorsABI,
    functionName: 'hasNominationRight',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfDirectorsABI,
    'hasNominationRight',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `functionName` set to `"hasPosition"`.
 */
export function useRegisterOfDirectorsHasPosition<
  TSelectData = ReadContractResult<
    typeof registerOfDirectorsABI,
    'hasPosition'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfDirectorsABI,
      'hasPosition',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfDirectorsABI,
    functionName: 'hasPosition',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfDirectorsABI,
    'hasPosition',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `functionName` set to `"hasRole"`.
 */
export function useRegisterOfDirectorsHasRole<
  TSelectData = ReadContractResult<typeof registerOfDirectorsABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfDirectorsABI,
      'hasRole',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfDirectorsABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfDirectorsABI,
    'hasRole',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `functionName` set to `"hasTitle"`.
 */
export function useRegisterOfDirectorsHasTitle<
  TSelectData = ReadContractResult<typeof registerOfDirectorsABI, 'hasTitle'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfDirectorsABI,
      'hasTitle',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfDirectorsABI,
    functionName: 'hasTitle',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfDirectorsABI,
    'hasTitle',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `functionName` set to `"isDirector"`.
 */
export function useRegisterOfDirectorsIsDirector<
  TSelectData = ReadContractResult<typeof registerOfDirectorsABI, 'isDirector'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfDirectorsABI,
      'isDirector',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfDirectorsABI,
    functionName: 'isDirector',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfDirectorsABI,
    'isDirector',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `functionName` set to `"isFinalized"`.
 */
export function useRegisterOfDirectorsIsFinalized<
  TSelectData = ReadContractResult<
    typeof registerOfDirectorsABI,
    'isFinalized'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfDirectorsABI,
      'isFinalized',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfDirectorsABI,
    functionName: 'isFinalized',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfDirectorsABI,
    'isFinalized',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `functionName` set to `"isManager"`.
 */
export function useRegisterOfDirectorsIsManager<
  TSelectData = ReadContractResult<typeof registerOfDirectorsABI, 'isManager'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfDirectorsABI,
      'isManager',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfDirectorsABI,
    functionName: 'isManager',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfDirectorsABI,
    'isManager',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `functionName` set to `"isOccupied"`.
 */
export function useRegisterOfDirectorsIsOccupied<
  TSelectData = ReadContractResult<typeof registerOfDirectorsABI, 'isOccupied'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfDirectorsABI,
      'isOccupied',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfDirectorsABI,
    functionName: 'isOccupied',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfDirectorsABI,
    'isOccupied',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `functionName` set to `"posExist"`.
 */
export function useRegisterOfDirectorsPosExist<
  TSelectData = ReadContractResult<typeof registerOfDirectorsABI, 'posExist'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfDirectorsABI,
      'posExist',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfDirectorsABI,
    functionName: 'posExist',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfDirectorsABI,
    'posExist',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfDirectorsABI}__.
 */
export function useRegisterOfDirectorsWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfDirectorsABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof registerOfDirectorsABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfDirectorsABI, TFunctionName>({
    abi: registerOfDirectorsABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useRegisterOfDirectorsAbandonRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfDirectorsABI,
          'abandonRole'
        >['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfDirectorsABI,
        'abandonRole'
      > & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfDirectorsABI, 'abandonRole'>({
    abi: registerOfDirectorsABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `functionName` set to `"createPosition"`.
 */
export function useRegisterOfDirectorsCreatePosition<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfDirectorsABI,
          'createPosition'
        >['abi'],
        'createPosition'
      > & { functionName?: 'createPosition' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfDirectorsABI,
        'createPosition'
      > & {
        abi?: never
        functionName?: 'createPosition'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfDirectorsABI,
    'createPosition'
  >({
    abi: registerOfDirectorsABI,
    functionName: 'createPosition',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `functionName` set to `"grantRole"`.
 */
export function useRegisterOfDirectorsGrantRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfDirectorsABI,
          'grantRole'
        >['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfDirectorsABI,
        'grantRole'
      > & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfDirectorsABI, 'grantRole'>({
    abi: registerOfDirectorsABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `functionName` set to `"init"`.
 */
export function useRegisterOfDirectorsInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfDirectorsABI,
          'init'
        >['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof registerOfDirectorsABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfDirectorsABI, 'init'>({
    abi: registerOfDirectorsABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `functionName` set to `"lockContents"`.
 */
export function useRegisterOfDirectorsLockContents<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfDirectorsABI,
          'lockContents'
        >['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfDirectorsABI,
        'lockContents'
      > & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfDirectorsABI, 'lockContents'>(
    {
      abi: registerOfDirectorsABI,
      functionName: 'lockContents',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `functionName` set to `"quitPosition"`.
 */
export function useRegisterOfDirectorsQuitPosition<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfDirectorsABI,
          'quitPosition'
        >['abi'],
        'quitPosition'
      > & { functionName?: 'quitPosition' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfDirectorsABI,
        'quitPosition'
      > & {
        abi?: never
        functionName?: 'quitPosition'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfDirectorsABI, 'quitPosition'>(
    {
      abi: registerOfDirectorsABI,
      functionName: 'quitPosition',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `functionName` set to `"removeOfficer"`.
 */
export function useRegisterOfDirectorsRemoveOfficer<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfDirectorsABI,
          'removeOfficer'
        >['abi'],
        'removeOfficer'
      > & { functionName?: 'removeOfficer' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfDirectorsABI,
        'removeOfficer'
      > & {
        abi?: never
        functionName?: 'removeOfficer'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfDirectorsABI,
    'removeOfficer'
  >({
    abi: registerOfDirectorsABI,
    functionName: 'removeOfficer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `functionName` set to `"removePosition"`.
 */
export function useRegisterOfDirectorsRemovePosition<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfDirectorsABI,
          'removePosition'
        >['abi'],
        'removePosition'
      > & { functionName?: 'removePosition' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfDirectorsABI,
        'removePosition'
      > & {
        abi?: never
        functionName?: 'removePosition'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfDirectorsABI,
    'removePosition'
  >({
    abi: registerOfDirectorsABI,
    functionName: 'removePosition',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useRegisterOfDirectorsRenounceRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfDirectorsABI,
          'renounceRole'
        >['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfDirectorsABI,
        'renounceRole'
      > & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfDirectorsABI, 'renounceRole'>(
    {
      abi: registerOfDirectorsABI,
      functionName: 'renounceRole',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useRegisterOfDirectorsRevokeRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfDirectorsABI,
          'revokeRole'
        >['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfDirectorsABI,
        'revokeRole'
      > & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfDirectorsABI, 'revokeRole'>({
    abi: registerOfDirectorsABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useRegisterOfDirectorsSetDirectKeeper<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfDirectorsABI,
          'setDirectKeeper'
        >['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfDirectorsABI,
        'setDirectKeeper'
      > & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfDirectorsABI,
    'setDirectKeeper'
  >({
    abi: registerOfDirectorsABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `functionName` set to `"setOwner"`.
 */
export function useRegisterOfDirectorsSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfDirectorsABI,
          'setOwner'
        >['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfDirectorsABI,
        'setOwner'
      > & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfDirectorsABI, 'setOwner'>({
    abi: registerOfDirectorsABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useRegisterOfDirectorsSetRoleAdmin<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfDirectorsABI,
          'setRoleAdmin'
        >['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfDirectorsABI,
        'setRoleAdmin'
      > & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfDirectorsABI, 'setRoleAdmin'>(
    {
      abi: registerOfDirectorsABI,
      functionName: 'setRoleAdmin',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function useRegisterOfDirectorsTakeBackKeys<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfDirectorsABI,
          'takeBackKeys'
        >['abi'],
        'takeBackKeys'
      > & { functionName?: 'takeBackKeys' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfDirectorsABI,
        'takeBackKeys'
      > & {
        abi?: never
        functionName?: 'takeBackKeys'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfDirectorsABI, 'takeBackKeys'>(
    {
      abi: registerOfDirectorsABI,
      functionName: 'takeBackKeys',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `functionName` set to `"takePosition"`.
 */
export function useRegisterOfDirectorsTakePosition<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfDirectorsABI,
          'takePosition'
        >['abi'],
        'takePosition'
      > & { functionName?: 'takePosition' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfDirectorsABI,
        'takePosition'
      > & {
        abi?: never
        functionName?: 'takePosition'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfDirectorsABI, 'takePosition'>(
    {
      abi: registerOfDirectorsABI,
      functionName: 'takePosition',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `functionName` set to `"updatePosition"`.
 */
export function useRegisterOfDirectorsUpdatePosition<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfDirectorsABI,
          'updatePosition'
        >['abi'],
        'updatePosition'
      > & { functionName?: 'updatePosition' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfDirectorsABI,
        'updatePosition'
      > & {
        abi?: never
        functionName?: 'updatePosition'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfDirectorsABI,
    'updatePosition'
  >({
    abi: registerOfDirectorsABI,
    functionName: 'updatePosition',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfDirectorsABI}__.
 */
export function usePrepareRegisterOfDirectorsWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfDirectorsABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfDirectorsABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfDirectorsABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareRegisterOfDirectorsAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfDirectorsABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfDirectorsABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfDirectorsABI,
    'abandonRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `functionName` set to `"createPosition"`.
 */
export function usePrepareRegisterOfDirectorsCreatePosition(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfDirectorsABI,
      'createPosition'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfDirectorsABI,
    functionName: 'createPosition',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfDirectorsABI,
    'createPosition'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareRegisterOfDirectorsGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfDirectorsABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfDirectorsABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfDirectorsABI,
    'grantRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareRegisterOfDirectorsInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfDirectorsABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfDirectorsABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfDirectorsABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareRegisterOfDirectorsLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfDirectorsABI,
      'lockContents'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfDirectorsABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfDirectorsABI,
    'lockContents'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `functionName` set to `"quitPosition"`.
 */
export function usePrepareRegisterOfDirectorsQuitPosition(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfDirectorsABI,
      'quitPosition'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfDirectorsABI,
    functionName: 'quitPosition',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfDirectorsABI,
    'quitPosition'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `functionName` set to `"removeOfficer"`.
 */
export function usePrepareRegisterOfDirectorsRemoveOfficer(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfDirectorsABI,
      'removeOfficer'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfDirectorsABI,
    functionName: 'removeOfficer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfDirectorsABI,
    'removeOfficer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `functionName` set to `"removePosition"`.
 */
export function usePrepareRegisterOfDirectorsRemovePosition(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfDirectorsABI,
      'removePosition'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfDirectorsABI,
    functionName: 'removePosition',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfDirectorsABI,
    'removePosition'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareRegisterOfDirectorsRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfDirectorsABI,
      'renounceRole'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfDirectorsABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfDirectorsABI,
    'renounceRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareRegisterOfDirectorsRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfDirectorsABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfDirectorsABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfDirectorsABI,
    'revokeRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareRegisterOfDirectorsSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfDirectorsABI,
      'setDirectKeeper'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfDirectorsABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfDirectorsABI,
    'setDirectKeeper'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareRegisterOfDirectorsSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfDirectorsABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfDirectorsABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfDirectorsABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareRegisterOfDirectorsSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfDirectorsABI,
      'setRoleAdmin'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfDirectorsABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfDirectorsABI,
    'setRoleAdmin'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function usePrepareRegisterOfDirectorsTakeBackKeys(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfDirectorsABI,
      'takeBackKeys'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfDirectorsABI,
    functionName: 'takeBackKeys',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfDirectorsABI,
    'takeBackKeys'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `functionName` set to `"takePosition"`.
 */
export function usePrepareRegisterOfDirectorsTakePosition(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfDirectorsABI,
      'takePosition'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfDirectorsABI,
    functionName: 'takePosition',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfDirectorsABI,
    'takePosition'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `functionName` set to `"updatePosition"`.
 */
export function usePrepareRegisterOfDirectorsUpdatePosition(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfDirectorsABI,
      'updatePosition'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfDirectorsABI,
    functionName: 'updatePosition',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfDirectorsABI,
    'updatePosition'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfDirectorsABI}__.
 */
export function useRegisterOfDirectorsEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof registerOfDirectorsABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfDirectorsABI,
    ...config,
  } as UseContractEventConfig<typeof registerOfDirectorsABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `eventName` set to `"AddPosition"`.
 */
export function useRegisterOfDirectorsAddPositionEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfDirectorsABI, 'AddPosition'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfDirectorsABI,
    eventName: 'AddPosition',
    ...config,
  } as UseContractEventConfig<typeof registerOfDirectorsABI, 'AddPosition'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `eventName` set to `"Init"`.
 */
export function useRegisterOfDirectorsInitEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfDirectorsABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfDirectorsABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof registerOfDirectorsABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `eventName` set to `"LockContents"`.
 */
export function useRegisterOfDirectorsLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfDirectorsABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfDirectorsABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof registerOfDirectorsABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `eventName` set to `"QuitPosition"`.
 */
export function useRegisterOfDirectorsQuitPositionEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfDirectorsABI, 'QuitPosition'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfDirectorsABI,
    eventName: 'QuitPosition',
    ...config,
  } as UseContractEventConfig<typeof registerOfDirectorsABI, 'QuitPosition'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `eventName` set to `"RemoveOfficer"`.
 */
export function useRegisterOfDirectorsRemoveOfficerEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfDirectorsABI, 'RemoveOfficer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfDirectorsABI,
    eventName: 'RemoveOfficer',
    ...config,
  } as UseContractEventConfig<typeof registerOfDirectorsABI, 'RemoveOfficer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `eventName` set to `"RemovePosition"`.
 */
export function useRegisterOfDirectorsRemovePositionEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfDirectorsABI, 'RemovePosition'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfDirectorsABI,
    eventName: 'RemovePosition',
    ...config,
  } as UseContractEventConfig<typeof registerOfDirectorsABI, 'RemovePosition'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useRegisterOfDirectorsSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfDirectorsABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfDirectorsABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof registerOfDirectorsABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useRegisterOfDirectorsSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfDirectorsABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfDirectorsABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof registerOfDirectorsABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `eventName` set to `"SetRoleAdmin"`.
 */
export function useRegisterOfDirectorsSetRoleAdminEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfDirectorsABI, 'SetRoleAdmin'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfDirectorsABI,
    eventName: 'SetRoleAdmin',
    ...config,
  } as UseContractEventConfig<typeof registerOfDirectorsABI, 'SetRoleAdmin'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfDirectorsABI}__ and `eventName` set to `"TakePosition"`.
 */
export function useRegisterOfDirectorsTakePositionEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfDirectorsABI, 'TakePosition'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfDirectorsABI,
    eventName: 'TakePosition',
    ...config,
  } as UseContractEventConfig<typeof registerOfDirectorsABI, 'TakePosition'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iRegisterOfMembersABI}__.
 */
export function useIRegisterOfMembers(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iRegisterOfMembersABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfMembersABI}__.
 */
export function useIRegisterOfMembersRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iRegisterOfMembersABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfMembersABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfMembersABI,
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfMembersABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"affiliated"`.
 */
export function useIRegisterOfMembersAffiliated<
  TSelectData = ReadContractResult<typeof iRegisterOfMembersABI, 'affiliated'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfMembersABI,
      'affiliated',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfMembersABI,
    functionName: 'affiliated',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfMembersABI,
    'affiliated',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"basedOnPar"`.
 */
export function useIRegisterOfMembersBasedOnPar<
  TSelectData = ReadContractResult<typeof iRegisterOfMembersABI, 'basedOnPar'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfMembersABI,
      'basedOnPar',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfMembersABI,
    functionName: 'basedOnPar',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfMembersABI,
    'basedOnPar',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"capAtDate"`.
 */
export function useIRegisterOfMembersCapAtDate<
  TSelectData = ReadContractResult<typeof iRegisterOfMembersABI, 'capAtDate'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfMembersABI,
      'capAtDate',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfMembersABI,
    functionName: 'capAtDate',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfMembersABI,
    'capAtDate',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"controllor"`.
 */
export function useIRegisterOfMembersControllor<
  TSelectData = ReadContractResult<typeof iRegisterOfMembersABI, 'controllor'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfMembersABI,
      'controllor',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfMembersABI,
    functionName: 'controllor',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfMembersABI,
    'controllor',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"deepOfGroup"`.
 */
export function useIRegisterOfMembersDeepOfGroup<
  TSelectData = ReadContractResult<typeof iRegisterOfMembersABI, 'deepOfGroup'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfMembersABI,
      'deepOfGroup',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfMembersABI,
    functionName: 'deepOfGroup',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfMembersABI,
    'deepOfGroup',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"getMembersOfClass"`.
 */
export function useIRegisterOfMembersGetMembersOfClass<
  TSelectData = ReadContractResult<
    typeof iRegisterOfMembersABI,
    'getMembersOfClass'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfMembersABI,
      'getMembersOfClass',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfMembersABI,
    functionName: 'getMembersOfClass',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfMembersABI,
    'getMembersOfClass',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"getNumOfMembers"`.
 */
export function useIRegisterOfMembersGetNumOfMembers<
  TSelectData = ReadContractResult<
    typeof iRegisterOfMembersABI,
    'getNumOfMembers'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfMembersABI,
      'getNumOfMembers',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfMembersABI,
    functionName: 'getNumOfMembers',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfMembersABI,
    'getNumOfMembers',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"getSnapshot"`.
 */
export function useIRegisterOfMembersGetSnapshot<
  TSelectData = ReadContractResult<typeof iRegisterOfMembersABI, 'getSnapshot'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfMembersABI,
      'getSnapshot',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfMembersABI,
    functionName: 'getSnapshot',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfMembersABI,
    'getSnapshot',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"groupRep"`.
 */
export function useIRegisterOfMembersGroupRep<
  TSelectData = ReadContractResult<typeof iRegisterOfMembersABI, 'groupRep'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfMembersABI,
      'groupRep',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfMembersABI,
    functionName: 'groupRep',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfMembersABI,
    'groupRep',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"isClassMember"`.
 */
export function useIRegisterOfMembersIsClassMember<
  TSelectData = ReadContractResult<
    typeof iRegisterOfMembersABI,
    'isClassMember'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfMembersABI,
      'isClassMember',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfMembersABI,
    functionName: 'isClassMember',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfMembersABI,
    'isClassMember',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"isGroupRep"`.
 */
export function useIRegisterOfMembersIsGroupRep<
  TSelectData = ReadContractResult<typeof iRegisterOfMembersABI, 'isGroupRep'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfMembersABI,
      'isGroupRep',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfMembersABI,
    functionName: 'isGroupRep',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfMembersABI,
    'isGroupRep',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"isMember"`.
 */
export function useIRegisterOfMembersIsMember<
  TSelectData = ReadContractResult<typeof iRegisterOfMembersABI, 'isMember'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfMembersABI,
      'isMember',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfMembersABI,
    functionName: 'isMember',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfMembersABI,
    'isMember',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"isSNOfShare"`.
 */
export function useIRegisterOfMembersIsSnOfShare<
  TSelectData = ReadContractResult<typeof iRegisterOfMembersABI, 'isSNOfShare'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfMembersABI,
      'isSNOfShare',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfMembersABI,
    functionName: 'isSNOfShare',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfMembersABI,
    'isSNOfShare',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"maxQtyOfMembers"`.
 */
export function useIRegisterOfMembersMaxQtyOfMembers<
  TSelectData = ReadContractResult<
    typeof iRegisterOfMembersABI,
    'maxQtyOfMembers'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfMembersABI,
      'maxQtyOfMembers',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfMembersABI,
    functionName: 'maxQtyOfMembers',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfMembersABI,
    'maxQtyOfMembers',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"membersList"`.
 */
export function useIRegisterOfMembersMembersList<
  TSelectData = ReadContractResult<typeof iRegisterOfMembersABI, 'membersList'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfMembersABI,
      'membersList',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfMembersABI,
    functionName: 'membersList',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfMembersABI,
    'membersList',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"membersOfGroup"`.
 */
export function useIRegisterOfMembersMembersOfGroup<
  TSelectData = ReadContractResult<
    typeof iRegisterOfMembersABI,
    'membersOfGroup'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfMembersABI,
      'membersOfGroup',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfMembersABI,
    functionName: 'membersOfGroup',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfMembersABI,
    'membersOfGroup',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"ownersEquity"`.
 */
export function useIRegisterOfMembersOwnersEquity<
  TSelectData = ReadContractResult<
    typeof iRegisterOfMembersABI,
    'ownersEquity'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfMembersABI,
      'ownersEquity',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfMembersABI,
    functionName: 'ownersEquity',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfMembersABI,
    'ownersEquity',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"qtyOfGroups"`.
 */
export function useIRegisterOfMembersQtyOfGroups<
  TSelectData = ReadContractResult<typeof iRegisterOfMembersABI, 'qtyOfGroups'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfMembersABI,
      'qtyOfGroups',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfMembersABI,
    functionName: 'qtyOfGroups',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfMembersABI,
    'qtyOfGroups',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"sharesClipOfMember"`.
 */
export function useIRegisterOfMembersSharesClipOfMember<
  TSelectData = ReadContractResult<
    typeof iRegisterOfMembersABI,
    'sharesClipOfMember'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfMembersABI,
      'sharesClipOfMember',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfMembersABI,
    functionName: 'sharesClipOfMember',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfMembersABI,
    'sharesClipOfMember',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"sharesInHand"`.
 */
export function useIRegisterOfMembersSharesInHand<
  TSelectData = ReadContractResult<
    typeof iRegisterOfMembersABI,
    'sharesInHand'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfMembersABI,
      'sharesInHand',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfMembersABI,
    functionName: 'sharesInHand',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfMembersABI,
    'sharesInHand',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"sharesList"`.
 */
export function useIRegisterOfMembersSharesList<
  TSelectData = ReadContractResult<typeof iRegisterOfMembersABI, 'sharesList'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfMembersABI,
      'sharesList',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfMembersABI,
    functionName: 'sharesList',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfMembersABI,
    'sharesList',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"totalVotes"`.
 */
export function useIRegisterOfMembersTotalVotes<
  TSelectData = ReadContractResult<typeof iRegisterOfMembersABI, 'totalVotes'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfMembersABI,
      'totalVotes',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfMembersABI,
    functionName: 'totalVotes',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfMembersABI,
    'totalVotes',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"votesAtDate"`.
 */
export function useIRegisterOfMembersVotesAtDate<
  TSelectData = ReadContractResult<typeof iRegisterOfMembersABI, 'votesAtDate'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfMembersABI,
      'votesAtDate',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfMembersABI,
    functionName: 'votesAtDate',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfMembersABI,
    'votesAtDate',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"votesInHand"`.
 */
export function useIRegisterOfMembersVotesInHand<
  TSelectData = ReadContractResult<typeof iRegisterOfMembersABI, 'votesInHand'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfMembersABI,
      'votesInHand',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfMembersABI,
    functionName: 'votesInHand',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfMembersABI,
    'votesInHand',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"votesOfController"`.
 */
export function useIRegisterOfMembersVotesOfController<
  TSelectData = ReadContractResult<
    typeof iRegisterOfMembersABI,
    'votesOfController'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfMembersABI,
      'votesOfController',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfMembersABI,
    functionName: 'votesOfController',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfMembersABI,
    'votesOfController',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"votesOfGroup"`.
 */
export function useIRegisterOfMembersVotesOfGroup<
  TSelectData = ReadContractResult<
    typeof iRegisterOfMembersABI,
    'votesOfGroup'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfMembersABI,
      'votesOfGroup',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfMembersABI,
    functionName: 'votesOfGroup',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfMembersABI,
    'votesOfGroup',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfMembersABI}__.
 */
export function useIRegisterOfMembersWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iRegisterOfMembersABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfMembersABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegisterOfMembersABI, TFunctionName>({
    abi: iRegisterOfMembersABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"addMember"`.
 */
export function useIRegisterOfMembersAddMember<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfMembersABI,
          'addMember'
        >['abi'],
        'addMember'
      > & { functionName?: 'addMember' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfMembersABI,
        'addMember'
      > & {
        abi?: never
        functionName?: 'addMember'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegisterOfMembersABI, 'addMember'>({
    abi: iRegisterOfMembersABI,
    functionName: 'addMember',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"addMemberToGroup"`.
 */
export function useIRegisterOfMembersAddMemberToGroup<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfMembersABI,
          'addMemberToGroup'
        >['abi'],
        'addMemberToGroup'
      > & { functionName?: 'addMemberToGroup' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfMembersABI,
        'addMemberToGroup'
      > & {
        abi?: never
        functionName?: 'addMemberToGroup'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iRegisterOfMembersABI,
    'addMemberToGroup'
  >({
    abi: iRegisterOfMembersABI,
    functionName: 'addMemberToGroup',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"addShareToMember"`.
 */
export function useIRegisterOfMembersAddShareToMember<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfMembersABI,
          'addShareToMember'
        >['abi'],
        'addShareToMember'
      > & { functionName?: 'addShareToMember' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfMembersABI,
        'addShareToMember'
      > & {
        abi?: never
        functionName?: 'addShareToMember'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iRegisterOfMembersABI,
    'addShareToMember'
  >({
    abi: iRegisterOfMembersABI,
    functionName: 'addShareToMember',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"capDecrease"`.
 */
export function useIRegisterOfMembersCapDecrease<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfMembersABI,
          'capDecrease'
        >['abi'],
        'capDecrease'
      > & { functionName?: 'capDecrease' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfMembersABI,
        'capDecrease'
      > & {
        abi?: never
        functionName?: 'capDecrease'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegisterOfMembersABI, 'capDecrease'>({
    abi: iRegisterOfMembersABI,
    functionName: 'capDecrease',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"capIncrease"`.
 */
export function useIRegisterOfMembersCapIncrease<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfMembersABI,
          'capIncrease'
        >['abi'],
        'capIncrease'
      > & { functionName?: 'capIncrease' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfMembersABI,
        'capIncrease'
      > & {
        abi?: never
        functionName?: 'capIncrease'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegisterOfMembersABI, 'capIncrease'>({
    abi: iRegisterOfMembersABI,
    functionName: 'capIncrease',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"changeAmtOfMember"`.
 */
export function useIRegisterOfMembersChangeAmtOfMember<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfMembersABI,
          'changeAmtOfMember'
        >['abi'],
        'changeAmtOfMember'
      > & { functionName?: 'changeAmtOfMember' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfMembersABI,
        'changeAmtOfMember'
      > & {
        abi?: never
        functionName?: 'changeAmtOfMember'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iRegisterOfMembersABI,
    'changeAmtOfMember'
  >({
    abi: iRegisterOfMembersABI,
    functionName: 'changeAmtOfMember',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"removeMemberFromGroup"`.
 */
export function useIRegisterOfMembersRemoveMemberFromGroup<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfMembersABI,
          'removeMemberFromGroup'
        >['abi'],
        'removeMemberFromGroup'
      > & { functionName?: 'removeMemberFromGroup' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfMembersABI,
        'removeMemberFromGroup'
      > & {
        abi?: never
        functionName?: 'removeMemberFromGroup'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iRegisterOfMembersABI,
    'removeMemberFromGroup'
  >({
    abi: iRegisterOfMembersABI,
    functionName: 'removeMemberFromGroup',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"removeShareFromMember"`.
 */
export function useIRegisterOfMembersRemoveShareFromMember<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfMembersABI,
          'removeShareFromMember'
        >['abi'],
        'removeShareFromMember'
      > & { functionName?: 'removeShareFromMember' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfMembersABI,
        'removeShareFromMember'
      > & {
        abi?: never
        functionName?: 'removeShareFromMember'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iRegisterOfMembersABI,
    'removeShareFromMember'
  >({
    abi: iRegisterOfMembersABI,
    functionName: 'removeShareFromMember',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"setAmtBase"`.
 */
export function useIRegisterOfMembersSetAmtBase<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfMembersABI,
          'setAmtBase'
        >['abi'],
        'setAmtBase'
      > & { functionName?: 'setAmtBase' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfMembersABI,
        'setAmtBase'
      > & {
        abi?: never
        functionName?: 'setAmtBase'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegisterOfMembersABI, 'setAmtBase'>({
    abi: iRegisterOfMembersABI,
    functionName: 'setAmtBase',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"setMaxQtyOfMembers"`.
 */
export function useIRegisterOfMembersSetMaxQtyOfMembers<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfMembersABI,
          'setMaxQtyOfMembers'
        >['abi'],
        'setMaxQtyOfMembers'
      > & { functionName?: 'setMaxQtyOfMembers' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfMembersABI,
        'setMaxQtyOfMembers'
      > & {
        abi?: never
        functionName?: 'setMaxQtyOfMembers'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iRegisterOfMembersABI,
    'setMaxQtyOfMembers'
  >({
    abi: iRegisterOfMembersABI,
    functionName: 'setMaxQtyOfMembers',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"setVoteBase"`.
 */
export function useIRegisterOfMembersSetVoteBase<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfMembersABI,
          'setVoteBase'
        >['abi'],
        'setVoteBase'
      > & { functionName?: 'setVoteBase' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfMembersABI,
        'setVoteBase'
      > & {
        abi?: never
        functionName?: 'setVoteBase'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegisterOfMembersABI, 'setVoteBase'>({
    abi: iRegisterOfMembersABI,
    functionName: 'setVoteBase',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfMembersABI}__.
 */
export function usePrepareIRegisterOfMembersWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegisterOfMembersABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfMembersABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfMembersABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"addMember"`.
 */
export function usePrepareIRegisterOfMembersAddMember(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegisterOfMembersABI, 'addMember'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfMembersABI,
    functionName: 'addMember',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegisterOfMembersABI, 'addMember'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"addMemberToGroup"`.
 */
export function usePrepareIRegisterOfMembersAddMemberToGroup(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRegisterOfMembersABI,
      'addMemberToGroup'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfMembersABI,
    functionName: 'addMemberToGroup',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfMembersABI,
    'addMemberToGroup'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"addShareToMember"`.
 */
export function usePrepareIRegisterOfMembersAddShareToMember(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRegisterOfMembersABI,
      'addShareToMember'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfMembersABI,
    functionName: 'addShareToMember',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfMembersABI,
    'addShareToMember'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"capDecrease"`.
 */
export function usePrepareIRegisterOfMembersCapDecrease(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegisterOfMembersABI, 'capDecrease'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfMembersABI,
    functionName: 'capDecrease',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfMembersABI,
    'capDecrease'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"capIncrease"`.
 */
export function usePrepareIRegisterOfMembersCapIncrease(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegisterOfMembersABI, 'capIncrease'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfMembersABI,
    functionName: 'capIncrease',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfMembersABI,
    'capIncrease'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"changeAmtOfMember"`.
 */
export function usePrepareIRegisterOfMembersChangeAmtOfMember(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRegisterOfMembersABI,
      'changeAmtOfMember'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfMembersABI,
    functionName: 'changeAmtOfMember',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfMembersABI,
    'changeAmtOfMember'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"removeMemberFromGroup"`.
 */
export function usePrepareIRegisterOfMembersRemoveMemberFromGroup(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRegisterOfMembersABI,
      'removeMemberFromGroup'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfMembersABI,
    functionName: 'removeMemberFromGroup',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfMembersABI,
    'removeMemberFromGroup'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"removeShareFromMember"`.
 */
export function usePrepareIRegisterOfMembersRemoveShareFromMember(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRegisterOfMembersABI,
      'removeShareFromMember'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfMembersABI,
    functionName: 'removeShareFromMember',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfMembersABI,
    'removeShareFromMember'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"setAmtBase"`.
 */
export function usePrepareIRegisterOfMembersSetAmtBase(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegisterOfMembersABI, 'setAmtBase'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfMembersABI,
    functionName: 'setAmtBase',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfMembersABI,
    'setAmtBase'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"setMaxQtyOfMembers"`.
 */
export function usePrepareIRegisterOfMembersSetMaxQtyOfMembers(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRegisterOfMembersABI,
      'setMaxQtyOfMembers'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfMembersABI,
    functionName: 'setMaxQtyOfMembers',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfMembersABI,
    'setMaxQtyOfMembers'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"setVoteBase"`.
 */
export function usePrepareIRegisterOfMembersSetVoteBase(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegisterOfMembersABI, 'setVoteBase'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfMembersABI,
    functionName: 'setVoteBase',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfMembersABI,
    'setVoteBase'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfMembersABI}__.
 */
export function useIRegisterOfMembersEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfMembersABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfMembersABI,
    ...config,
  } as UseContractEventConfig<typeof iRegisterOfMembersABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `eventName` set to `"AddMember"`.
 */
export function useIRegisterOfMembersAddMemberEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfMembersABI, 'AddMember'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfMembersABI,
    eventName: 'AddMember',
    ...config,
  } as UseContractEventConfig<typeof iRegisterOfMembersABI, 'AddMember'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `eventName` set to `"AddMemberToGroup"`.
 */
export function useIRegisterOfMembersAddMemberToGroupEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfMembersABI, 'AddMemberToGroup'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfMembersABI,
    eventName: 'AddMemberToGroup',
    ...config,
  } as UseContractEventConfig<typeof iRegisterOfMembersABI, 'AddMemberToGroup'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `eventName` set to `"AddShareToMember"`.
 */
export function useIRegisterOfMembersAddShareToMemberEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfMembersABI, 'AddShareToMember'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfMembersABI,
    eventName: 'AddShareToMember',
    ...config,
  } as UseContractEventConfig<typeof iRegisterOfMembersABI, 'AddShareToMember'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `eventName` set to `"CapDecrease"`.
 */
export function useIRegisterOfMembersCapDecreaseEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfMembersABI, 'CapDecrease'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfMembersABI,
    eventName: 'CapDecrease',
    ...config,
  } as UseContractEventConfig<typeof iRegisterOfMembersABI, 'CapDecrease'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `eventName` set to `"CapIncrease"`.
 */
export function useIRegisterOfMembersCapIncreaseEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfMembersABI, 'CapIncrease'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfMembersABI,
    eventName: 'CapIncrease',
    ...config,
  } as UseContractEventConfig<typeof iRegisterOfMembersABI, 'CapIncrease'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `eventName` set to `"ChangeAmtOfMember"`.
 */
export function useIRegisterOfMembersChangeAmtOfMemberEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfMembersABI, 'ChangeAmtOfMember'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfMembersABI,
    eventName: 'ChangeAmtOfMember',
    ...config,
  } as UseContractEventConfig<
    typeof iRegisterOfMembersABI,
    'ChangeAmtOfMember'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `eventName` set to `"ChangeGroupRep"`.
 */
export function useIRegisterOfMembersChangeGroupRepEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfMembersABI, 'ChangeGroupRep'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfMembersABI,
    eventName: 'ChangeGroupRep',
    ...config,
  } as UseContractEventConfig<typeof iRegisterOfMembersABI, 'ChangeGroupRep'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `eventName` set to `"RemoveMemberFromGroup"`.
 */
export function useIRegisterOfMembersRemoveMemberFromGroupEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iRegisterOfMembersABI,
      'RemoveMemberFromGroup'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfMembersABI,
    eventName: 'RemoveMemberFromGroup',
    ...config,
  } as UseContractEventConfig<
    typeof iRegisterOfMembersABI,
    'RemoveMemberFromGroup'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `eventName` set to `"RemoveShareFromMember"`.
 */
export function useIRegisterOfMembersRemoveShareFromMemberEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iRegisterOfMembersABI,
      'RemoveShareFromMember'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfMembersABI,
    eventName: 'RemoveShareFromMember',
    ...config,
  } as UseContractEventConfig<
    typeof iRegisterOfMembersABI,
    'RemoveShareFromMember'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `eventName` set to `"SetAmtBase"`.
 */
export function useIRegisterOfMembersSetAmtBaseEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfMembersABI, 'SetAmtBase'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfMembersABI,
    eventName: 'SetAmtBase',
    ...config,
  } as UseContractEventConfig<typeof iRegisterOfMembersABI, 'SetAmtBase'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `eventName` set to `"SetMaxQtyOfMembers"`.
 */
export function useIRegisterOfMembersSetMaxQtyOfMembersEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfMembersABI, 'SetMaxQtyOfMembers'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfMembersABI,
    eventName: 'SetMaxQtyOfMembers',
    ...config,
  } as UseContractEventConfig<
    typeof iRegisterOfMembersABI,
    'SetMaxQtyOfMembers'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `eventName` set to `"SetVoteBase"`.
 */
export function useIRegisterOfMembersSetVoteBaseEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfMembersABI, 'SetVoteBase'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfMembersABI,
    eventName: 'SetVoteBase',
    ...config,
  } as UseContractEventConfig<typeof iRegisterOfMembersABI, 'SetVoteBase'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link registerOfMembersABI}__.
 */
export function useRegisterOfMembers(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: registerOfMembersABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__.
 */
export function useRegisterOfMembersRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof registerOfMembersABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfMembersABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"affiliated"`.
 */
export function useRegisterOfMembersAffiliated<
  TSelectData = ReadContractResult<typeof registerOfMembersABI, 'affiliated'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfMembersABI,
      'affiliated',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'affiliated',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'affiliated',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"basedOnPar"`.
 */
export function useRegisterOfMembersBasedOnPar<
  TSelectData = ReadContractResult<typeof registerOfMembersABI, 'basedOnPar'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfMembersABI,
      'basedOnPar',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'basedOnPar',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'basedOnPar',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"capAtDate"`.
 */
export function useRegisterOfMembersCapAtDate<
  TSelectData = ReadContractResult<typeof registerOfMembersABI, 'capAtDate'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfMembersABI,
      'capAtDate',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'capAtDate',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'capAtDate',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"controllor"`.
 */
export function useRegisterOfMembersControllor<
  TSelectData = ReadContractResult<typeof registerOfMembersABI, 'controllor'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfMembersABI,
      'controllor',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'controllor',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'controllor',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"deepOfGroup"`.
 */
export function useRegisterOfMembersDeepOfGroup<
  TSelectData = ReadContractResult<typeof registerOfMembersABI, 'deepOfGroup'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfMembersABI,
      'deepOfGroup',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'deepOfGroup',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'deepOfGroup',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"getDK"`.
 */
export function useRegisterOfMembersGetDk<
  TSelectData = ReadContractResult<typeof registerOfMembersABI, 'getDK'>,
>(
  config: Omit<
    UseContractReadConfig<typeof registerOfMembersABI, 'getDK', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'getDK',
    ...config,
  } as UseContractReadConfig<typeof registerOfMembersABI, 'getDK', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"getMembersOfClass"`.
 */
export function useRegisterOfMembersGetMembersOfClass<
  TSelectData = ReadContractResult<
    typeof registerOfMembersABI,
    'getMembersOfClass'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfMembersABI,
      'getMembersOfClass',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'getMembersOfClass',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'getMembersOfClass',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"getNumOfMembers"`.
 */
export function useRegisterOfMembersGetNumOfMembers<
  TSelectData = ReadContractResult<
    typeof registerOfMembersABI,
    'getNumOfMembers'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfMembersABI,
      'getNumOfMembers',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'getNumOfMembers',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'getNumOfMembers',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"getOwner"`.
 */
export function useRegisterOfMembersGetOwner<
  TSelectData = ReadContractResult<typeof registerOfMembersABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof registerOfMembersABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'getOwner',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useRegisterOfMembersGetRoleAdmin<
  TSelectData = ReadContractResult<typeof registerOfMembersABI, 'getRoleAdmin'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfMembersABI,
      'getRoleAdmin',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'getRoleAdmin',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"getSnapshot"`.
 */
export function useRegisterOfMembersGetSnapshot<
  TSelectData = ReadContractResult<typeof registerOfMembersABI, 'getSnapshot'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfMembersABI,
      'getSnapshot',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'getSnapshot',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'getSnapshot',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"groupRep"`.
 */
export function useRegisterOfMembersGroupRep<
  TSelectData = ReadContractResult<typeof registerOfMembersABI, 'groupRep'>,
>(
  config: Omit<
    UseContractReadConfig<typeof registerOfMembersABI, 'groupRep', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'groupRep',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'groupRep',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"hasRole"`.
 */
export function useRegisterOfMembersHasRole<
  TSelectData = ReadContractResult<typeof registerOfMembersABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof registerOfMembersABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'hasRole',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"isClassMember"`.
 */
export function useRegisterOfMembersIsClassMember<
  TSelectData = ReadContractResult<
    typeof registerOfMembersABI,
    'isClassMember'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfMembersABI,
      'isClassMember',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'isClassMember',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'isClassMember',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"isFinalized"`.
 */
export function useRegisterOfMembersIsFinalized<
  TSelectData = ReadContractResult<typeof registerOfMembersABI, 'isFinalized'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfMembersABI,
      'isFinalized',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'isFinalized',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'isFinalized',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"isGroupRep"`.
 */
export function useRegisterOfMembersIsGroupRep<
  TSelectData = ReadContractResult<typeof registerOfMembersABI, 'isGroupRep'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfMembersABI,
      'isGroupRep',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'isGroupRep',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'isGroupRep',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"isMember"`.
 */
export function useRegisterOfMembersIsMember<
  TSelectData = ReadContractResult<typeof registerOfMembersABI, 'isMember'>,
>(
  config: Omit<
    UseContractReadConfig<typeof registerOfMembersABI, 'isMember', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'isMember',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'isMember',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"isSNOfShare"`.
 */
export function useRegisterOfMembersIsSnOfShare<
  TSelectData = ReadContractResult<typeof registerOfMembersABI, 'isSNOfShare'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfMembersABI,
      'isSNOfShare',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'isSNOfShare',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'isSNOfShare',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"maxQtyOfMembers"`.
 */
export function useRegisterOfMembersMaxQtyOfMembers<
  TSelectData = ReadContractResult<
    typeof registerOfMembersABI,
    'maxQtyOfMembers'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfMembersABI,
      'maxQtyOfMembers',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'maxQtyOfMembers',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'maxQtyOfMembers',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"membersList"`.
 */
export function useRegisterOfMembersMembersList<
  TSelectData = ReadContractResult<typeof registerOfMembersABI, 'membersList'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfMembersABI,
      'membersList',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'membersList',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'membersList',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"membersOfGroup"`.
 */
export function useRegisterOfMembersMembersOfGroup<
  TSelectData = ReadContractResult<
    typeof registerOfMembersABI,
    'membersOfGroup'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfMembersABI,
      'membersOfGroup',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'membersOfGroup',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'membersOfGroup',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"ownersEquity"`.
 */
export function useRegisterOfMembersOwnersEquity<
  TSelectData = ReadContractResult<typeof registerOfMembersABI, 'ownersEquity'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfMembersABI,
      'ownersEquity',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'ownersEquity',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'ownersEquity',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"qtyOfGroups"`.
 */
export function useRegisterOfMembersQtyOfGroups<
  TSelectData = ReadContractResult<typeof registerOfMembersABI, 'qtyOfGroups'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfMembersABI,
      'qtyOfGroups',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'qtyOfGroups',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'qtyOfGroups',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"sharesClipOfMember"`.
 */
export function useRegisterOfMembersSharesClipOfMember<
  TSelectData = ReadContractResult<
    typeof registerOfMembersABI,
    'sharesClipOfMember'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfMembersABI,
      'sharesClipOfMember',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'sharesClipOfMember',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'sharesClipOfMember',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"sharesInHand"`.
 */
export function useRegisterOfMembersSharesInHand<
  TSelectData = ReadContractResult<typeof registerOfMembersABI, 'sharesInHand'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfMembersABI,
      'sharesInHand',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'sharesInHand',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'sharesInHand',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"sharesList"`.
 */
export function useRegisterOfMembersSharesList<
  TSelectData = ReadContractResult<typeof registerOfMembersABI, 'sharesList'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfMembersABI,
      'sharesList',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'sharesList',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'sharesList',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"totalVotes"`.
 */
export function useRegisterOfMembersTotalVotes<
  TSelectData = ReadContractResult<typeof registerOfMembersABI, 'totalVotes'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfMembersABI,
      'totalVotes',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'totalVotes',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'totalVotes',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"votesAtDate"`.
 */
export function useRegisterOfMembersVotesAtDate<
  TSelectData = ReadContractResult<typeof registerOfMembersABI, 'votesAtDate'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfMembersABI,
      'votesAtDate',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'votesAtDate',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'votesAtDate',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"votesInHand"`.
 */
export function useRegisterOfMembersVotesInHand<
  TSelectData = ReadContractResult<typeof registerOfMembersABI, 'votesInHand'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfMembersABI,
      'votesInHand',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'votesInHand',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'votesInHand',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"votesOfController"`.
 */
export function useRegisterOfMembersVotesOfController<
  TSelectData = ReadContractResult<
    typeof registerOfMembersABI,
    'votesOfController'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfMembersABI,
      'votesOfController',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'votesOfController',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'votesOfController',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"votesOfGroup"`.
 */
export function useRegisterOfMembersVotesOfGroup<
  TSelectData = ReadContractResult<typeof registerOfMembersABI, 'votesOfGroup'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfMembersABI,
      'votesOfGroup',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'votesOfGroup',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'votesOfGroup',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__.
 */
export function useRegisterOfMembersWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof registerOfMembersABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof registerOfMembersABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfMembersABI, TFunctionName>({
    abi: registerOfMembersABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useRegisterOfMembersAbandonRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfMembersABI,
          'abandonRole'
        >['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfMembersABI,
        'abandonRole'
      > & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfMembersABI, 'abandonRole'>({
    abi: registerOfMembersABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"addMember"`.
 */
export function useRegisterOfMembersAddMember<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfMembersABI,
          'addMember'
        >['abi'],
        'addMember'
      > & { functionName?: 'addMember' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfMembersABI,
        'addMember'
      > & {
        abi?: never
        functionName?: 'addMember'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfMembersABI, 'addMember'>({
    abi: registerOfMembersABI,
    functionName: 'addMember',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"addMemberToGroup"`.
 */
export function useRegisterOfMembersAddMemberToGroup<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfMembersABI,
          'addMemberToGroup'
        >['abi'],
        'addMemberToGroup'
      > & { functionName?: 'addMemberToGroup' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfMembersABI,
        'addMemberToGroup'
      > & {
        abi?: never
        functionName?: 'addMemberToGroup'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfMembersABI,
    'addMemberToGroup'
  >({
    abi: registerOfMembersABI,
    functionName: 'addMemberToGroup',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"addShareToMember"`.
 */
export function useRegisterOfMembersAddShareToMember<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfMembersABI,
          'addShareToMember'
        >['abi'],
        'addShareToMember'
      > & { functionName?: 'addShareToMember' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfMembersABI,
        'addShareToMember'
      > & {
        abi?: never
        functionName?: 'addShareToMember'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfMembersABI,
    'addShareToMember'
  >({
    abi: registerOfMembersABI,
    functionName: 'addShareToMember',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"capDecrease"`.
 */
export function useRegisterOfMembersCapDecrease<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfMembersABI,
          'capDecrease'
        >['abi'],
        'capDecrease'
      > & { functionName?: 'capDecrease' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfMembersABI,
        'capDecrease'
      > & {
        abi?: never
        functionName?: 'capDecrease'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfMembersABI, 'capDecrease'>({
    abi: registerOfMembersABI,
    functionName: 'capDecrease',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"capIncrease"`.
 */
export function useRegisterOfMembersCapIncrease<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfMembersABI,
          'capIncrease'
        >['abi'],
        'capIncrease'
      > & { functionName?: 'capIncrease' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfMembersABI,
        'capIncrease'
      > & {
        abi?: never
        functionName?: 'capIncrease'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfMembersABI, 'capIncrease'>({
    abi: registerOfMembersABI,
    functionName: 'capIncrease',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"changeAmtOfMember"`.
 */
export function useRegisterOfMembersChangeAmtOfMember<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfMembersABI,
          'changeAmtOfMember'
        >['abi'],
        'changeAmtOfMember'
      > & { functionName?: 'changeAmtOfMember' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfMembersABI,
        'changeAmtOfMember'
      > & {
        abi?: never
        functionName?: 'changeAmtOfMember'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfMembersABI,
    'changeAmtOfMember'
  >({
    abi: registerOfMembersABI,
    functionName: 'changeAmtOfMember',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"grantRole"`.
 */
export function useRegisterOfMembersGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfMembersABI,
          'grantRole'
        >['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfMembersABI,
        'grantRole'
      > & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfMembersABI, 'grantRole'>({
    abi: registerOfMembersABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"init"`.
 */
export function useRegisterOfMembersInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof registerOfMembersABI, 'init'>['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof registerOfMembersABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfMembersABI, 'init'>({
    abi: registerOfMembersABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"lockContents"`.
 */
export function useRegisterOfMembersLockContents<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfMembersABI,
          'lockContents'
        >['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfMembersABI,
        'lockContents'
      > & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfMembersABI, 'lockContents'>({
    abi: registerOfMembersABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"removeMemberFromGroup"`.
 */
export function useRegisterOfMembersRemoveMemberFromGroup<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfMembersABI,
          'removeMemberFromGroup'
        >['abi'],
        'removeMemberFromGroup'
      > & { functionName?: 'removeMemberFromGroup' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfMembersABI,
        'removeMemberFromGroup'
      > & {
        abi?: never
        functionName?: 'removeMemberFromGroup'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfMembersABI,
    'removeMemberFromGroup'
  >({
    abi: registerOfMembersABI,
    functionName: 'removeMemberFromGroup',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"removeShareFromMember"`.
 */
export function useRegisterOfMembersRemoveShareFromMember<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfMembersABI,
          'removeShareFromMember'
        >['abi'],
        'removeShareFromMember'
      > & { functionName?: 'removeShareFromMember' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfMembersABI,
        'removeShareFromMember'
      > & {
        abi?: never
        functionName?: 'removeShareFromMember'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfMembersABI,
    'removeShareFromMember'
  >({
    abi: registerOfMembersABI,
    functionName: 'removeShareFromMember',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useRegisterOfMembersRenounceRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfMembersABI,
          'renounceRole'
        >['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfMembersABI,
        'renounceRole'
      > & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfMembersABI, 'renounceRole'>({
    abi: registerOfMembersABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useRegisterOfMembersRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfMembersABI,
          'revokeRole'
        >['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfMembersABI,
        'revokeRole'
      > & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfMembersABI, 'revokeRole'>({
    abi: registerOfMembersABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"setAmtBase"`.
 */
export function useRegisterOfMembersSetAmtBase<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfMembersABI,
          'setAmtBase'
        >['abi'],
        'setAmtBase'
      > & { functionName?: 'setAmtBase' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfMembersABI,
        'setAmtBase'
      > & {
        abi?: never
        functionName?: 'setAmtBase'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfMembersABI, 'setAmtBase'>({
    abi: registerOfMembersABI,
    functionName: 'setAmtBase',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useRegisterOfMembersSetDirectKeeper<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfMembersABI,
          'setDirectKeeper'
        >['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfMembersABI,
        'setDirectKeeper'
      > & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfMembersABI,
    'setDirectKeeper'
  >({
    abi: registerOfMembersABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"setMaxQtyOfMembers"`.
 */
export function useRegisterOfMembersSetMaxQtyOfMembers<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfMembersABI,
          'setMaxQtyOfMembers'
        >['abi'],
        'setMaxQtyOfMembers'
      > & { functionName?: 'setMaxQtyOfMembers' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfMembersABI,
        'setMaxQtyOfMembers'
      > & {
        abi?: never
        functionName?: 'setMaxQtyOfMembers'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfMembersABI,
    'setMaxQtyOfMembers'
  >({
    abi: registerOfMembersABI,
    functionName: 'setMaxQtyOfMembers',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"setOwner"`.
 */
export function useRegisterOfMembersSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfMembersABI,
          'setOwner'
        >['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof registerOfMembersABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfMembersABI, 'setOwner'>({
    abi: registerOfMembersABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useRegisterOfMembersSetRoleAdmin<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfMembersABI,
          'setRoleAdmin'
        >['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfMembersABI,
        'setRoleAdmin'
      > & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfMembersABI, 'setRoleAdmin'>({
    abi: registerOfMembersABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"setVoteBase"`.
 */
export function useRegisterOfMembersSetVoteBase<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfMembersABI,
          'setVoteBase'
        >['abi'],
        'setVoteBase'
      > & { functionName?: 'setVoteBase' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfMembersABI,
        'setVoteBase'
      > & {
        abi?: never
        functionName?: 'setVoteBase'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfMembersABI, 'setVoteBase'>({
    abi: registerOfMembersABI,
    functionName: 'setVoteBase',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function useRegisterOfMembersTakeBackKeys<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfMembersABI,
          'takeBackKeys'
        >['abi'],
        'takeBackKeys'
      > & { functionName?: 'takeBackKeys' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfMembersABI,
        'takeBackKeys'
      > & {
        abi?: never
        functionName?: 'takeBackKeys'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfMembersABI, 'takeBackKeys'>({
    abi: registerOfMembersABI,
    functionName: 'takeBackKeys',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__.
 */
export function usePrepareRegisterOfMembersWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfMembersABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfMembersABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfMembersABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareRegisterOfMembersAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfMembersABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfMembersABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfMembersABI,
    'abandonRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"addMember"`.
 */
export function usePrepareRegisterOfMembersAddMember(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfMembersABI, 'addMember'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfMembersABI,
    functionName: 'addMember',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfMembersABI, 'addMember'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"addMemberToGroup"`.
 */
export function usePrepareRegisterOfMembersAddMemberToGroup(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfMembersABI,
      'addMemberToGroup'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfMembersABI,
    functionName: 'addMemberToGroup',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfMembersABI,
    'addMemberToGroup'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"addShareToMember"`.
 */
export function usePrepareRegisterOfMembersAddShareToMember(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfMembersABI,
      'addShareToMember'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfMembersABI,
    functionName: 'addShareToMember',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfMembersABI,
    'addShareToMember'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"capDecrease"`.
 */
export function usePrepareRegisterOfMembersCapDecrease(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfMembersABI, 'capDecrease'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfMembersABI,
    functionName: 'capDecrease',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfMembersABI,
    'capDecrease'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"capIncrease"`.
 */
export function usePrepareRegisterOfMembersCapIncrease(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfMembersABI, 'capIncrease'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfMembersABI,
    functionName: 'capIncrease',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfMembersABI,
    'capIncrease'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"changeAmtOfMember"`.
 */
export function usePrepareRegisterOfMembersChangeAmtOfMember(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfMembersABI,
      'changeAmtOfMember'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfMembersABI,
    functionName: 'changeAmtOfMember',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfMembersABI,
    'changeAmtOfMember'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareRegisterOfMembersGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfMembersABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfMembersABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfMembersABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareRegisterOfMembersInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfMembersABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfMembersABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfMembersABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareRegisterOfMembersLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfMembersABI, 'lockContents'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfMembersABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfMembersABI,
    'lockContents'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"removeMemberFromGroup"`.
 */
export function usePrepareRegisterOfMembersRemoveMemberFromGroup(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfMembersABI,
      'removeMemberFromGroup'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfMembersABI,
    functionName: 'removeMemberFromGroup',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfMembersABI,
    'removeMemberFromGroup'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"removeShareFromMember"`.
 */
export function usePrepareRegisterOfMembersRemoveShareFromMember(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfMembersABI,
      'removeShareFromMember'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfMembersABI,
    functionName: 'removeShareFromMember',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfMembersABI,
    'removeShareFromMember'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareRegisterOfMembersRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfMembersABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfMembersABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfMembersABI,
    'renounceRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareRegisterOfMembersRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfMembersABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfMembersABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfMembersABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"setAmtBase"`.
 */
export function usePrepareRegisterOfMembersSetAmtBase(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfMembersABI, 'setAmtBase'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfMembersABI,
    functionName: 'setAmtBase',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfMembersABI, 'setAmtBase'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareRegisterOfMembersSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfMembersABI,
      'setDirectKeeper'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfMembersABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfMembersABI,
    'setDirectKeeper'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"setMaxQtyOfMembers"`.
 */
export function usePrepareRegisterOfMembersSetMaxQtyOfMembers(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfMembersABI,
      'setMaxQtyOfMembers'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfMembersABI,
    functionName: 'setMaxQtyOfMembers',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfMembersABI,
    'setMaxQtyOfMembers'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareRegisterOfMembersSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfMembersABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfMembersABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfMembersABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareRegisterOfMembersSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfMembersABI, 'setRoleAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfMembersABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfMembersABI,
    'setRoleAdmin'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"setVoteBase"`.
 */
export function usePrepareRegisterOfMembersSetVoteBase(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfMembersABI, 'setVoteBase'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfMembersABI,
    functionName: 'setVoteBase',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfMembersABI,
    'setVoteBase'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function usePrepareRegisterOfMembersTakeBackKeys(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfMembersABI, 'takeBackKeys'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfMembersABI,
    functionName: 'takeBackKeys',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfMembersABI,
    'takeBackKeys'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfMembersABI}__.
 */
export function useRegisterOfMembersEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof registerOfMembersABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfMembersABI,
    ...config,
  } as UseContractEventConfig<typeof registerOfMembersABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfMembersABI}__ and `eventName` set to `"AddMember"`.
 */
export function useRegisterOfMembersAddMemberEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfMembersABI, 'AddMember'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfMembersABI,
    eventName: 'AddMember',
    ...config,
  } as UseContractEventConfig<typeof registerOfMembersABI, 'AddMember'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfMembersABI}__ and `eventName` set to `"AddMemberToGroup"`.
 */
export function useRegisterOfMembersAddMemberToGroupEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfMembersABI, 'AddMemberToGroup'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfMembersABI,
    eventName: 'AddMemberToGroup',
    ...config,
  } as UseContractEventConfig<typeof registerOfMembersABI, 'AddMemberToGroup'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfMembersABI}__ and `eventName` set to `"AddShareToMember"`.
 */
export function useRegisterOfMembersAddShareToMemberEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfMembersABI, 'AddShareToMember'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfMembersABI,
    eventName: 'AddShareToMember',
    ...config,
  } as UseContractEventConfig<typeof registerOfMembersABI, 'AddShareToMember'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfMembersABI}__ and `eventName` set to `"CapDecrease"`.
 */
export function useRegisterOfMembersCapDecreaseEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfMembersABI, 'CapDecrease'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfMembersABI,
    eventName: 'CapDecrease',
    ...config,
  } as UseContractEventConfig<typeof registerOfMembersABI, 'CapDecrease'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfMembersABI}__ and `eventName` set to `"CapIncrease"`.
 */
export function useRegisterOfMembersCapIncreaseEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfMembersABI, 'CapIncrease'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfMembersABI,
    eventName: 'CapIncrease',
    ...config,
  } as UseContractEventConfig<typeof registerOfMembersABI, 'CapIncrease'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfMembersABI}__ and `eventName` set to `"ChangeAmtOfMember"`.
 */
export function useRegisterOfMembersChangeAmtOfMemberEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfMembersABI, 'ChangeAmtOfMember'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfMembersABI,
    eventName: 'ChangeAmtOfMember',
    ...config,
  } as UseContractEventConfig<typeof registerOfMembersABI, 'ChangeAmtOfMember'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfMembersABI}__ and `eventName` set to `"ChangeGroupRep"`.
 */
export function useRegisterOfMembersChangeGroupRepEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfMembersABI, 'ChangeGroupRep'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfMembersABI,
    eventName: 'ChangeGroupRep',
    ...config,
  } as UseContractEventConfig<typeof registerOfMembersABI, 'ChangeGroupRep'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfMembersABI}__ and `eventName` set to `"Init"`.
 */
export function useRegisterOfMembersInitEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfMembersABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfMembersABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof registerOfMembersABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfMembersABI}__ and `eventName` set to `"LockContents"`.
 */
export function useRegisterOfMembersLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfMembersABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfMembersABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof registerOfMembersABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfMembersABI}__ and `eventName` set to `"RemoveMemberFromGroup"`.
 */
export function useRegisterOfMembersRemoveMemberFromGroupEvent(
  config: Omit<
    UseContractEventConfig<
      typeof registerOfMembersABI,
      'RemoveMemberFromGroup'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfMembersABI,
    eventName: 'RemoveMemberFromGroup',
    ...config,
  } as UseContractEventConfig<
    typeof registerOfMembersABI,
    'RemoveMemberFromGroup'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfMembersABI}__ and `eventName` set to `"RemoveShareFromMember"`.
 */
export function useRegisterOfMembersRemoveShareFromMemberEvent(
  config: Omit<
    UseContractEventConfig<
      typeof registerOfMembersABI,
      'RemoveShareFromMember'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfMembersABI,
    eventName: 'RemoveShareFromMember',
    ...config,
  } as UseContractEventConfig<
    typeof registerOfMembersABI,
    'RemoveShareFromMember'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfMembersABI}__ and `eventName` set to `"SetAmtBase"`.
 */
export function useRegisterOfMembersSetAmtBaseEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfMembersABI, 'SetAmtBase'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfMembersABI,
    eventName: 'SetAmtBase',
    ...config,
  } as UseContractEventConfig<typeof registerOfMembersABI, 'SetAmtBase'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfMembersABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useRegisterOfMembersSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfMembersABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfMembersABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof registerOfMembersABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfMembersABI}__ and `eventName` set to `"SetMaxQtyOfMembers"`.
 */
export function useRegisterOfMembersSetMaxQtyOfMembersEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfMembersABI, 'SetMaxQtyOfMembers'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfMembersABI,
    eventName: 'SetMaxQtyOfMembers',
    ...config,
  } as UseContractEventConfig<
    typeof registerOfMembersABI,
    'SetMaxQtyOfMembers'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfMembersABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useRegisterOfMembersSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfMembersABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfMembersABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof registerOfMembersABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfMembersABI}__ and `eventName` set to `"SetRoleAdmin"`.
 */
export function useRegisterOfMembersSetRoleAdminEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfMembersABI, 'SetRoleAdmin'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfMembersABI,
    eventName: 'SetRoleAdmin',
    ...config,
  } as UseContractEventConfig<typeof registerOfMembersABI, 'SetRoleAdmin'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfMembersABI}__ and `eventName` set to `"SetVoteBase"`.
 */
export function useRegisterOfMembersSetVoteBaseEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfMembersABI, 'SetVoteBase'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfMembersABI,
    eventName: 'SetVoteBase',
    ...config,
  } as UseContractEventConfig<typeof registerOfMembersABI, 'SetVoteBase'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iRegisterOfOptionsABI}__.
 */
export function useIRegisterOfOptions(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iRegisterOfOptionsABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfOptionsABI}__.
 */
export function useIRegisterOfOptionsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iRegisterOfOptionsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfOptionsABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfOptionsABI,
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfOptionsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfOptionsABI}__ and `functionName` set to `"counterOfBriefs"`.
 */
export function useIRegisterOfOptionsCounterOfBriefs<
  TSelectData = ReadContractResult<
    typeof iRegisterOfOptionsABI,
    'counterOfBriefs'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfOptionsABI,
      'counterOfBriefs',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfOptionsABI,
    functionName: 'counterOfBriefs',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfOptionsABI,
    'counterOfBriefs',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfOptionsABI}__ and `functionName` set to `"counterOfOptions"`.
 */
export function useIRegisterOfOptionsCounterOfOptions<
  TSelectData = ReadContractResult<
    typeof iRegisterOfOptionsABI,
    'counterOfOptions'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfOptionsABI,
      'counterOfOptions',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfOptionsABI,
    functionName: 'counterOfOptions',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfOptionsABI,
    'counterOfOptions',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfOptionsABI}__ and `functionName` set to `"createSwapOrder"`.
 */
export function useIRegisterOfOptionsCreateSwapOrder<
  TSelectData = ReadContractResult<
    typeof iRegisterOfOptionsABI,
    'createSwapOrder'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfOptionsABI,
      'createSwapOrder',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfOptionsABI,
    functionName: 'createSwapOrder',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfOptionsABI,
    'createSwapOrder',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfOptionsABI}__ and `functionName` set to `"getAllBriefsOfOption"`.
 */
export function useIRegisterOfOptionsGetAllBriefsOfOption<
  TSelectData = ReadContractResult<
    typeof iRegisterOfOptionsABI,
    'getAllBriefsOfOption'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfOptionsABI,
      'getAllBriefsOfOption',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfOptionsABI,
    functionName: 'getAllBriefsOfOption',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfOptionsABI,
    'getAllBriefsOfOption',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfOptionsABI}__ and `functionName` set to `"getAllOptions"`.
 */
export function useIRegisterOfOptionsGetAllOptions<
  TSelectData = ReadContractResult<
    typeof iRegisterOfOptionsABI,
    'getAllOptions'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfOptionsABI,
      'getAllOptions',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfOptionsABI,
    functionName: 'getAllOptions',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfOptionsABI,
    'getAllOptions',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfOptionsABI}__ and `functionName` set to `"getAllOraclesOfOption"`.
 */
export function useIRegisterOfOptionsGetAllOraclesOfOption<
  TSelectData = ReadContractResult<
    typeof iRegisterOfOptionsABI,
    'getAllOraclesOfOption'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfOptionsABI,
      'getAllOraclesOfOption',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfOptionsABI,
    functionName: 'getAllOraclesOfOption',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfOptionsABI,
    'getAllOraclesOfOption',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfOptionsABI}__ and `functionName` set to `"getBrief"`.
 */
export function useIRegisterOfOptionsGetBrief<
  TSelectData = ReadContractResult<typeof iRegisterOfOptionsABI, 'getBrief'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfOptionsABI,
      'getBrief',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfOptionsABI,
    functionName: 'getBrief',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfOptionsABI,
    'getBrief',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfOptionsABI}__ and `functionName` set to `"getLatestOracle"`.
 */
export function useIRegisterOfOptionsGetLatestOracle<
  TSelectData = ReadContractResult<
    typeof iRegisterOfOptionsABI,
    'getLatestOracle'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfOptionsABI,
      'getLatestOracle',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfOptionsABI,
    functionName: 'getLatestOracle',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfOptionsABI,
    'getLatestOracle',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfOptionsABI}__ and `functionName` set to `"getObligorsOfOption"`.
 */
export function useIRegisterOfOptionsGetObligorsOfOption<
  TSelectData = ReadContractResult<
    typeof iRegisterOfOptionsABI,
    'getObligorsOfOption'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfOptionsABI,
      'getObligorsOfOption',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfOptionsABI,
    functionName: 'getObligorsOfOption',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfOptionsABI,
    'getObligorsOfOption',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfOptionsABI}__ and `functionName` set to `"getOption"`.
 */
export function useIRegisterOfOptionsGetOption<
  TSelectData = ReadContractResult<typeof iRegisterOfOptionsABI, 'getOption'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfOptionsABI,
      'getOption',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfOptionsABI,
    functionName: 'getOption',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfOptionsABI,
    'getOption',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfOptionsABI}__ and `functionName` set to `"getOracleAtDate"`.
 */
export function useIRegisterOfOptionsGetOracleAtDate<
  TSelectData = ReadContractResult<
    typeof iRegisterOfOptionsABI,
    'getOracleAtDate'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfOptionsABI,
      'getOracleAtDate',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfOptionsABI,
    functionName: 'getOracleAtDate',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfOptionsABI,
    'getOracleAtDate',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfOptionsABI}__ and `functionName` set to `"isObligor"`.
 */
export function useIRegisterOfOptionsIsObligor<
  TSelectData = ReadContractResult<typeof iRegisterOfOptionsABI, 'isObligor'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfOptionsABI,
      'isObligor',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfOptionsABI,
    functionName: 'isObligor',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfOptionsABI,
    'isObligor',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfOptionsABI}__ and `functionName` set to `"isOption"`.
 */
export function useIRegisterOfOptionsIsOption<
  TSelectData = ReadContractResult<typeof iRegisterOfOptionsABI, 'isOption'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfOptionsABI,
      'isOption',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfOptionsABI,
    functionName: 'isOption',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfOptionsABI,
    'isOption',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfOptionsABI}__ and `functionName` set to `"isRightholder"`.
 */
export function useIRegisterOfOptionsIsRightholder<
  TSelectData = ReadContractResult<
    typeof iRegisterOfOptionsABI,
    'isRightholder'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfOptionsABI,
      'isRightholder',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfOptionsABI,
    functionName: 'isRightholder',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfOptionsABI,
    'isRightholder',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfOptionsABI}__ and `functionName` set to `"qtyOfOptions"`.
 */
export function useIRegisterOfOptionsQtyOfOptions<
  TSelectData = ReadContractResult<
    typeof iRegisterOfOptionsABI,
    'qtyOfOptions'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfOptionsABI,
      'qtyOfOptions',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfOptionsABI,
    functionName: 'qtyOfOptions',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfOptionsABI,
    'qtyOfOptions',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfOptionsABI}__.
 */
export function useIRegisterOfOptionsWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iRegisterOfOptionsABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfOptionsABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegisterOfOptionsABI, TFunctionName>({
    abi: iRegisterOfOptionsABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfOptionsABI}__ and `functionName` set to `"addObligorIntoOption"`.
 */
export function useIRegisterOfOptionsAddObligorIntoOption<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfOptionsABI,
          'addObligorIntoOption'
        >['abi'],
        'addObligorIntoOption'
      > & { functionName?: 'addObligorIntoOption' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfOptionsABI,
        'addObligorIntoOption'
      > & {
        abi?: never
        functionName?: 'addObligorIntoOption'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iRegisterOfOptionsABI,
    'addObligorIntoOption'
  >({
    abi: iRegisterOfOptionsABI,
    functionName: 'addObligorIntoOption',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfOptionsABI}__ and `functionName` set to `"createOption"`.
 */
export function useIRegisterOfOptionsCreateOption<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfOptionsABI,
          'createOption'
        >['abi'],
        'createOption'
      > & { functionName?: 'createOption' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfOptionsABI,
        'createOption'
      > & {
        abi?: never
        functionName?: 'createOption'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegisterOfOptionsABI, 'createOption'>({
    abi: iRegisterOfOptionsABI,
    functionName: 'createOption',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfOptionsABI}__ and `functionName` set to `"execOption"`.
 */
export function useIRegisterOfOptionsExecOption<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfOptionsABI,
          'execOption'
        >['abi'],
        'execOption'
      > & { functionName?: 'execOption' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfOptionsABI,
        'execOption'
      > & {
        abi?: never
        functionName?: 'execOption'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegisterOfOptionsABI, 'execOption'>({
    abi: iRegisterOfOptionsABI,
    functionName: 'execOption',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfOptionsABI}__ and `functionName` set to `"issueOption"`.
 */
export function useIRegisterOfOptionsIssueOption<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfOptionsABI,
          'issueOption'
        >['abi'],
        'issueOption'
      > & { functionName?: 'issueOption' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfOptionsABI,
        'issueOption'
      > & {
        abi?: never
        functionName?: 'issueOption'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegisterOfOptionsABI, 'issueOption'>({
    abi: iRegisterOfOptionsABI,
    functionName: 'issueOption',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfOptionsABI}__ and `functionName` set to `"regOptionTerms"`.
 */
export function useIRegisterOfOptionsRegOptionTerms<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfOptionsABI,
          'regOptionTerms'
        >['abi'],
        'regOptionTerms'
      > & { functionName?: 'regOptionTerms' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfOptionsABI,
        'regOptionTerms'
      > & {
        abi?: never
        functionName?: 'regOptionTerms'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iRegisterOfOptionsABI,
    'regOptionTerms'
  >({
    abi: iRegisterOfOptionsABI,
    functionName: 'regOptionTerms',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfOptionsABI}__ and `functionName` set to `"regSwapOrder"`.
 */
export function useIRegisterOfOptionsRegSwapOrder<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfOptionsABI,
          'regSwapOrder'
        >['abi'],
        'regSwapOrder'
      > & { functionName?: 'regSwapOrder' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfOptionsABI,
        'regSwapOrder'
      > & {
        abi?: never
        functionName?: 'regSwapOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegisterOfOptionsABI, 'regSwapOrder'>({
    abi: iRegisterOfOptionsABI,
    functionName: 'regSwapOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfOptionsABI}__ and `functionName` set to `"removeObligorFromOption"`.
 */
export function useIRegisterOfOptionsRemoveObligorFromOption<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfOptionsABI,
          'removeObligorFromOption'
        >['abi'],
        'removeObligorFromOption'
      > & { functionName?: 'removeObligorFromOption' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfOptionsABI,
        'removeObligorFromOption'
      > & {
        abi?: never
        functionName?: 'removeObligorFromOption'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iRegisterOfOptionsABI,
    'removeObligorFromOption'
  >({
    abi: iRegisterOfOptionsABI,
    functionName: 'removeObligorFromOption',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfOptionsABI}__ and `functionName` set to `"updateOracle"`.
 */
export function useIRegisterOfOptionsUpdateOracle<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfOptionsABI,
          'updateOracle'
        >['abi'],
        'updateOracle'
      > & { functionName?: 'updateOracle' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfOptionsABI,
        'updateOracle'
      > & {
        abi?: never
        functionName?: 'updateOracle'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegisterOfOptionsABI, 'updateOracle'>({
    abi: iRegisterOfOptionsABI,
    functionName: 'updateOracle',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfOptionsABI}__ and `functionName` set to `"updateStateOfBrief"`.
 */
export function useIRegisterOfOptionsUpdateStateOfBrief<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfOptionsABI,
          'updateStateOfBrief'
        >['abi'],
        'updateStateOfBrief'
      > & { functionName?: 'updateStateOfBrief' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfOptionsABI,
        'updateStateOfBrief'
      > & {
        abi?: never
        functionName?: 'updateStateOfBrief'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iRegisterOfOptionsABI,
    'updateStateOfBrief'
  >({
    abi: iRegisterOfOptionsABI,
    functionName: 'updateStateOfBrief',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfOptionsABI}__.
 */
export function usePrepareIRegisterOfOptionsWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegisterOfOptionsABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfOptionsABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfOptionsABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfOptionsABI}__ and `functionName` set to `"addObligorIntoOption"`.
 */
export function usePrepareIRegisterOfOptionsAddObligorIntoOption(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRegisterOfOptionsABI,
      'addObligorIntoOption'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfOptionsABI,
    functionName: 'addObligorIntoOption',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfOptionsABI,
    'addObligorIntoOption'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfOptionsABI}__ and `functionName` set to `"createOption"`.
 */
export function usePrepareIRegisterOfOptionsCreateOption(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegisterOfOptionsABI, 'createOption'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfOptionsABI,
    functionName: 'createOption',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfOptionsABI,
    'createOption'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfOptionsABI}__ and `functionName` set to `"execOption"`.
 */
export function usePrepareIRegisterOfOptionsExecOption(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegisterOfOptionsABI, 'execOption'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfOptionsABI,
    functionName: 'execOption',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfOptionsABI,
    'execOption'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfOptionsABI}__ and `functionName` set to `"issueOption"`.
 */
export function usePrepareIRegisterOfOptionsIssueOption(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegisterOfOptionsABI, 'issueOption'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfOptionsABI,
    functionName: 'issueOption',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfOptionsABI,
    'issueOption'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfOptionsABI}__ and `functionName` set to `"regOptionTerms"`.
 */
export function usePrepareIRegisterOfOptionsRegOptionTerms(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRegisterOfOptionsABI,
      'regOptionTerms'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfOptionsABI,
    functionName: 'regOptionTerms',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfOptionsABI,
    'regOptionTerms'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfOptionsABI}__ and `functionName` set to `"regSwapOrder"`.
 */
export function usePrepareIRegisterOfOptionsRegSwapOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegisterOfOptionsABI, 'regSwapOrder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfOptionsABI,
    functionName: 'regSwapOrder',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfOptionsABI,
    'regSwapOrder'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfOptionsABI}__ and `functionName` set to `"removeObligorFromOption"`.
 */
export function usePrepareIRegisterOfOptionsRemoveObligorFromOption(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRegisterOfOptionsABI,
      'removeObligorFromOption'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfOptionsABI,
    functionName: 'removeObligorFromOption',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfOptionsABI,
    'removeObligorFromOption'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfOptionsABI}__ and `functionName` set to `"updateOracle"`.
 */
export function usePrepareIRegisterOfOptionsUpdateOracle(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegisterOfOptionsABI, 'updateOracle'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfOptionsABI,
    functionName: 'updateOracle',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfOptionsABI,
    'updateOracle'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfOptionsABI}__ and `functionName` set to `"updateStateOfBrief"`.
 */
export function usePrepareIRegisterOfOptionsUpdateStateOfBrief(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRegisterOfOptionsABI,
      'updateStateOfBrief'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfOptionsABI,
    functionName: 'updateStateOfBrief',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfOptionsABI,
    'updateStateOfBrief'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfOptionsABI}__.
 */
export function useIRegisterOfOptionsEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfOptionsABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfOptionsABI,
    ...config,
  } as UseContractEventConfig<typeof iRegisterOfOptionsABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfOptionsABI}__ and `eventName` set to `"AddObligorIntoOpt"`.
 */
export function useIRegisterOfOptionsAddObligorIntoOptEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfOptionsABI, 'AddObligorIntoOpt'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfOptionsABI,
    eventName: 'AddObligorIntoOpt',
    ...config,
  } as UseContractEventConfig<
    typeof iRegisterOfOptionsABI,
    'AddObligorIntoOpt'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfOptionsABI}__ and `eventName` set to `"CreateOpt"`.
 */
export function useIRegisterOfOptionsCreateOptEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfOptionsABI, 'CreateOpt'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfOptionsABI,
    eventName: 'CreateOpt',
    ...config,
  } as UseContractEventConfig<typeof iRegisterOfOptionsABI, 'CreateOpt'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfOptionsABI}__ and `eventName` set to `"ExecOpt"`.
 */
export function useIRegisterOfOptionsExecOptEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfOptionsABI, 'ExecOpt'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfOptionsABI,
    eventName: 'ExecOpt',
    ...config,
  } as UseContractEventConfig<typeof iRegisterOfOptionsABI, 'ExecOpt'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfOptionsABI}__ and `eventName` set to `"IssueOpt"`.
 */
export function useIRegisterOfOptionsIssueOptEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfOptionsABI, 'IssueOpt'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfOptionsABI,
    eventName: 'IssueOpt',
    ...config,
  } as UseContractEventConfig<typeof iRegisterOfOptionsABI, 'IssueOpt'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfOptionsABI}__ and `eventName` set to `"RegSwapOrder"`.
 */
export function useIRegisterOfOptionsRegSwapOrderEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfOptionsABI, 'RegSwapOrder'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfOptionsABI,
    eventName: 'RegSwapOrder',
    ...config,
  } as UseContractEventConfig<typeof iRegisterOfOptionsABI, 'RegSwapOrder'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfOptionsABI}__ and `eventName` set to `"RemoveObligorFromOpt"`.
 */
export function useIRegisterOfOptionsRemoveObligorFromOptEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iRegisterOfOptionsABI,
      'RemoveObligorFromOpt'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfOptionsABI,
    eventName: 'RemoveObligorFromOpt',
    ...config,
  } as UseContractEventConfig<
    typeof iRegisterOfOptionsABI,
    'RemoveObligorFromOpt'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfOptionsABI}__ and `eventName` set to `"UpdateOracle"`.
 */
export function useIRegisterOfOptionsUpdateOracleEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfOptionsABI, 'UpdateOracle'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfOptionsABI,
    eventName: 'UpdateOracle',
    ...config,
  } as UseContractEventConfig<typeof iRegisterOfOptionsABI, 'UpdateOracle'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfOptionsABI}__ and `eventName` set to `"UpdateStateOfBrief"`.
 */
export function useIRegisterOfOptionsUpdateStateOfBriefEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfOptionsABI, 'UpdateStateOfBrief'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfOptionsABI,
    eventName: 'UpdateStateOfBrief',
    ...config,
  } as UseContractEventConfig<
    typeof iRegisterOfOptionsABI,
    'UpdateStateOfBrief'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link registerOfOptionsABI}__.
 */
export function useRegisterOfOptions(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: registerOfOptionsABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfOptionsABI}__.
 */
export function useRegisterOfOptionsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof registerOfOptionsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfOptionsABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfOptionsABI,
    ...config,
  } as UseContractReadConfig<
    typeof registerOfOptionsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"counterOfBriefs"`.
 */
export function useRegisterOfOptionsCounterOfBriefs<
  TSelectData = ReadContractResult<
    typeof registerOfOptionsABI,
    'counterOfBriefs'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfOptionsABI,
      'counterOfBriefs',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfOptionsABI,
    functionName: 'counterOfBriefs',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfOptionsABI,
    'counterOfBriefs',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"counterOfOptions"`.
 */
export function useRegisterOfOptionsCounterOfOptions<
  TSelectData = ReadContractResult<
    typeof registerOfOptionsABI,
    'counterOfOptions'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfOptionsABI,
      'counterOfOptions',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfOptionsABI,
    functionName: 'counterOfOptions',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfOptionsABI,
    'counterOfOptions',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"createSwapOrder"`.
 */
export function useRegisterOfOptionsCreateSwapOrder<
  TSelectData = ReadContractResult<
    typeof registerOfOptionsABI,
    'createSwapOrder'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfOptionsABI,
      'createSwapOrder',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfOptionsABI,
    functionName: 'createSwapOrder',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfOptionsABI,
    'createSwapOrder',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"getAllBriefsOfOption"`.
 */
export function useRegisterOfOptionsGetAllBriefsOfOption<
  TSelectData = ReadContractResult<
    typeof registerOfOptionsABI,
    'getAllBriefsOfOption'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfOptionsABI,
      'getAllBriefsOfOption',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfOptionsABI,
    functionName: 'getAllBriefsOfOption',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfOptionsABI,
    'getAllBriefsOfOption',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"getAllOptions"`.
 */
export function useRegisterOfOptionsGetAllOptions<
  TSelectData = ReadContractResult<
    typeof registerOfOptionsABI,
    'getAllOptions'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfOptionsABI,
      'getAllOptions',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfOptionsABI,
    functionName: 'getAllOptions',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfOptionsABI,
    'getAllOptions',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"getAllOraclesOfOption"`.
 */
export function useRegisterOfOptionsGetAllOraclesOfOption<
  TSelectData = ReadContractResult<
    typeof registerOfOptionsABI,
    'getAllOraclesOfOption'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfOptionsABI,
      'getAllOraclesOfOption',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfOptionsABI,
    functionName: 'getAllOraclesOfOption',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfOptionsABI,
    'getAllOraclesOfOption',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"getBrief"`.
 */
export function useRegisterOfOptionsGetBrief<
  TSelectData = ReadContractResult<typeof registerOfOptionsABI, 'getBrief'>,
>(
  config: Omit<
    UseContractReadConfig<typeof registerOfOptionsABI, 'getBrief', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfOptionsABI,
    functionName: 'getBrief',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfOptionsABI,
    'getBrief',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"getDK"`.
 */
export function useRegisterOfOptionsGetDk<
  TSelectData = ReadContractResult<typeof registerOfOptionsABI, 'getDK'>,
>(
  config: Omit<
    UseContractReadConfig<typeof registerOfOptionsABI, 'getDK', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfOptionsABI,
    functionName: 'getDK',
    ...config,
  } as UseContractReadConfig<typeof registerOfOptionsABI, 'getDK', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"getLatestOracle"`.
 */
export function useRegisterOfOptionsGetLatestOracle<
  TSelectData = ReadContractResult<
    typeof registerOfOptionsABI,
    'getLatestOracle'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfOptionsABI,
      'getLatestOracle',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfOptionsABI,
    functionName: 'getLatestOracle',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfOptionsABI,
    'getLatestOracle',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"getObligorsOfOption"`.
 */
export function useRegisterOfOptionsGetObligorsOfOption<
  TSelectData = ReadContractResult<
    typeof registerOfOptionsABI,
    'getObligorsOfOption'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfOptionsABI,
      'getObligorsOfOption',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfOptionsABI,
    functionName: 'getObligorsOfOption',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfOptionsABI,
    'getObligorsOfOption',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"getOption"`.
 */
export function useRegisterOfOptionsGetOption<
  TSelectData = ReadContractResult<typeof registerOfOptionsABI, 'getOption'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfOptionsABI,
      'getOption',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfOptionsABI,
    functionName: 'getOption',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfOptionsABI,
    'getOption',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"getOracleAtDate"`.
 */
export function useRegisterOfOptionsGetOracleAtDate<
  TSelectData = ReadContractResult<
    typeof registerOfOptionsABI,
    'getOracleAtDate'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfOptionsABI,
      'getOracleAtDate',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfOptionsABI,
    functionName: 'getOracleAtDate',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfOptionsABI,
    'getOracleAtDate',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"getOwner"`.
 */
export function useRegisterOfOptionsGetOwner<
  TSelectData = ReadContractResult<typeof registerOfOptionsABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof registerOfOptionsABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfOptionsABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfOptionsABI,
    'getOwner',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useRegisterOfOptionsGetRoleAdmin<
  TSelectData = ReadContractResult<typeof registerOfOptionsABI, 'getRoleAdmin'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfOptionsABI,
      'getRoleAdmin',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfOptionsABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfOptionsABI,
    'getRoleAdmin',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"hasRole"`.
 */
export function useRegisterOfOptionsHasRole<
  TSelectData = ReadContractResult<typeof registerOfOptionsABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof registerOfOptionsABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfOptionsABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfOptionsABI,
    'hasRole',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"isFinalized"`.
 */
export function useRegisterOfOptionsIsFinalized<
  TSelectData = ReadContractResult<typeof registerOfOptionsABI, 'isFinalized'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfOptionsABI,
      'isFinalized',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfOptionsABI,
    functionName: 'isFinalized',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfOptionsABI,
    'isFinalized',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"isObligor"`.
 */
export function useRegisterOfOptionsIsObligor<
  TSelectData = ReadContractResult<typeof registerOfOptionsABI, 'isObligor'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfOptionsABI,
      'isObligor',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfOptionsABI,
    functionName: 'isObligor',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfOptionsABI,
    'isObligor',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"isOption"`.
 */
export function useRegisterOfOptionsIsOption<
  TSelectData = ReadContractResult<typeof registerOfOptionsABI, 'isOption'>,
>(
  config: Omit<
    UseContractReadConfig<typeof registerOfOptionsABI, 'isOption', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfOptionsABI,
    functionName: 'isOption',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfOptionsABI,
    'isOption',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"isRightholder"`.
 */
export function useRegisterOfOptionsIsRightholder<
  TSelectData = ReadContractResult<
    typeof registerOfOptionsABI,
    'isRightholder'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfOptionsABI,
      'isRightholder',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfOptionsABI,
    functionName: 'isRightholder',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfOptionsABI,
    'isRightholder',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"qtyOfOptions"`.
 */
export function useRegisterOfOptionsQtyOfOptions<
  TSelectData = ReadContractResult<typeof registerOfOptionsABI, 'qtyOfOptions'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfOptionsABI,
      'qtyOfOptions',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfOptionsABI,
    functionName: 'qtyOfOptions',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfOptionsABI,
    'qtyOfOptions',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfOptionsABI}__.
 */
export function useRegisterOfOptionsWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof registerOfOptionsABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof registerOfOptionsABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfOptionsABI, TFunctionName>({
    abi: registerOfOptionsABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useRegisterOfOptionsAbandonRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfOptionsABI,
          'abandonRole'
        >['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfOptionsABI,
        'abandonRole'
      > & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfOptionsABI, 'abandonRole'>({
    abi: registerOfOptionsABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"addObligorIntoOption"`.
 */
export function useRegisterOfOptionsAddObligorIntoOption<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfOptionsABI,
          'addObligorIntoOption'
        >['abi'],
        'addObligorIntoOption'
      > & { functionName?: 'addObligorIntoOption' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfOptionsABI,
        'addObligorIntoOption'
      > & {
        abi?: never
        functionName?: 'addObligorIntoOption'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfOptionsABI,
    'addObligorIntoOption'
  >({
    abi: registerOfOptionsABI,
    functionName: 'addObligorIntoOption',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"createOption"`.
 */
export function useRegisterOfOptionsCreateOption<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfOptionsABI,
          'createOption'
        >['abi'],
        'createOption'
      > & { functionName?: 'createOption' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfOptionsABI,
        'createOption'
      > & {
        abi?: never
        functionName?: 'createOption'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfOptionsABI, 'createOption'>({
    abi: registerOfOptionsABI,
    functionName: 'createOption',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"execOption"`.
 */
export function useRegisterOfOptionsExecOption<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfOptionsABI,
          'execOption'
        >['abi'],
        'execOption'
      > & { functionName?: 'execOption' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfOptionsABI,
        'execOption'
      > & {
        abi?: never
        functionName?: 'execOption'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfOptionsABI, 'execOption'>({
    abi: registerOfOptionsABI,
    functionName: 'execOption',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"grantRole"`.
 */
export function useRegisterOfOptionsGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfOptionsABI,
          'grantRole'
        >['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfOptionsABI,
        'grantRole'
      > & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfOptionsABI, 'grantRole'>({
    abi: registerOfOptionsABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"init"`.
 */
export function useRegisterOfOptionsInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof registerOfOptionsABI, 'init'>['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof registerOfOptionsABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfOptionsABI, 'init'>({
    abi: registerOfOptionsABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"issueOption"`.
 */
export function useRegisterOfOptionsIssueOption<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfOptionsABI,
          'issueOption'
        >['abi'],
        'issueOption'
      > & { functionName?: 'issueOption' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfOptionsABI,
        'issueOption'
      > & {
        abi?: never
        functionName?: 'issueOption'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfOptionsABI, 'issueOption'>({
    abi: registerOfOptionsABI,
    functionName: 'issueOption',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"lockContents"`.
 */
export function useRegisterOfOptionsLockContents<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfOptionsABI,
          'lockContents'
        >['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfOptionsABI,
        'lockContents'
      > & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfOptionsABI, 'lockContents'>({
    abi: registerOfOptionsABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"regOptionTerms"`.
 */
export function useRegisterOfOptionsRegOptionTerms<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfOptionsABI,
          'regOptionTerms'
        >['abi'],
        'regOptionTerms'
      > & { functionName?: 'regOptionTerms' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfOptionsABI,
        'regOptionTerms'
      > & {
        abi?: never
        functionName?: 'regOptionTerms'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfOptionsABI, 'regOptionTerms'>(
    {
      abi: registerOfOptionsABI,
      functionName: 'regOptionTerms',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"regSwapOrder"`.
 */
export function useRegisterOfOptionsRegSwapOrder<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfOptionsABI,
          'regSwapOrder'
        >['abi'],
        'regSwapOrder'
      > & { functionName?: 'regSwapOrder' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfOptionsABI,
        'regSwapOrder'
      > & {
        abi?: never
        functionName?: 'regSwapOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfOptionsABI, 'regSwapOrder'>({
    abi: registerOfOptionsABI,
    functionName: 'regSwapOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"removeObligorFromOption"`.
 */
export function useRegisterOfOptionsRemoveObligorFromOption<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfOptionsABI,
          'removeObligorFromOption'
        >['abi'],
        'removeObligorFromOption'
      > & { functionName?: 'removeObligorFromOption' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfOptionsABI,
        'removeObligorFromOption'
      > & {
        abi?: never
        functionName?: 'removeObligorFromOption'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfOptionsABI,
    'removeObligorFromOption'
  >({
    abi: registerOfOptionsABI,
    functionName: 'removeObligorFromOption',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useRegisterOfOptionsRenounceRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfOptionsABI,
          'renounceRole'
        >['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfOptionsABI,
        'renounceRole'
      > & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfOptionsABI, 'renounceRole'>({
    abi: registerOfOptionsABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useRegisterOfOptionsRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfOptionsABI,
          'revokeRole'
        >['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfOptionsABI,
        'revokeRole'
      > & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfOptionsABI, 'revokeRole'>({
    abi: registerOfOptionsABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useRegisterOfOptionsSetDirectKeeper<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfOptionsABI,
          'setDirectKeeper'
        >['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfOptionsABI,
        'setDirectKeeper'
      > & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfOptionsABI,
    'setDirectKeeper'
  >({
    abi: registerOfOptionsABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"setOwner"`.
 */
export function useRegisterOfOptionsSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfOptionsABI,
          'setOwner'
        >['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof registerOfOptionsABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfOptionsABI, 'setOwner'>({
    abi: registerOfOptionsABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useRegisterOfOptionsSetRoleAdmin<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfOptionsABI,
          'setRoleAdmin'
        >['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfOptionsABI,
        'setRoleAdmin'
      > & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfOptionsABI, 'setRoleAdmin'>({
    abi: registerOfOptionsABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function useRegisterOfOptionsTakeBackKeys<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfOptionsABI,
          'takeBackKeys'
        >['abi'],
        'takeBackKeys'
      > & { functionName?: 'takeBackKeys' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfOptionsABI,
        'takeBackKeys'
      > & {
        abi?: never
        functionName?: 'takeBackKeys'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfOptionsABI, 'takeBackKeys'>({
    abi: registerOfOptionsABI,
    functionName: 'takeBackKeys',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"updateOracle"`.
 */
export function useRegisterOfOptionsUpdateOracle<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfOptionsABI,
          'updateOracle'
        >['abi'],
        'updateOracle'
      > & { functionName?: 'updateOracle' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfOptionsABI,
        'updateOracle'
      > & {
        abi?: never
        functionName?: 'updateOracle'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfOptionsABI, 'updateOracle'>({
    abi: registerOfOptionsABI,
    functionName: 'updateOracle',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"updateStateOfBrief"`.
 */
export function useRegisterOfOptionsUpdateStateOfBrief<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfOptionsABI,
          'updateStateOfBrief'
        >['abi'],
        'updateStateOfBrief'
      > & { functionName?: 'updateStateOfBrief' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfOptionsABI,
        'updateStateOfBrief'
      > & {
        abi?: never
        functionName?: 'updateStateOfBrief'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfOptionsABI,
    'updateStateOfBrief'
  >({
    abi: registerOfOptionsABI,
    functionName: 'updateStateOfBrief',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfOptionsABI}__.
 */
export function usePrepareRegisterOfOptionsWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfOptionsABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfOptionsABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfOptionsABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareRegisterOfOptionsAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfOptionsABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfOptionsABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfOptionsABI,
    'abandonRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"addObligorIntoOption"`.
 */
export function usePrepareRegisterOfOptionsAddObligorIntoOption(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfOptionsABI,
      'addObligorIntoOption'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfOptionsABI,
    functionName: 'addObligorIntoOption',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfOptionsABI,
    'addObligorIntoOption'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"createOption"`.
 */
export function usePrepareRegisterOfOptionsCreateOption(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfOptionsABI, 'createOption'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfOptionsABI,
    functionName: 'createOption',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfOptionsABI,
    'createOption'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"execOption"`.
 */
export function usePrepareRegisterOfOptionsExecOption(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfOptionsABI, 'execOption'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfOptionsABI,
    functionName: 'execOption',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfOptionsABI, 'execOption'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareRegisterOfOptionsGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfOptionsABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfOptionsABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfOptionsABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareRegisterOfOptionsInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfOptionsABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfOptionsABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfOptionsABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"issueOption"`.
 */
export function usePrepareRegisterOfOptionsIssueOption(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfOptionsABI, 'issueOption'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfOptionsABI,
    functionName: 'issueOption',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfOptionsABI,
    'issueOption'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareRegisterOfOptionsLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfOptionsABI, 'lockContents'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfOptionsABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfOptionsABI,
    'lockContents'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"regOptionTerms"`.
 */
export function usePrepareRegisterOfOptionsRegOptionTerms(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfOptionsABI,
      'regOptionTerms'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfOptionsABI,
    functionName: 'regOptionTerms',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfOptionsABI,
    'regOptionTerms'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"regSwapOrder"`.
 */
export function usePrepareRegisterOfOptionsRegSwapOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfOptionsABI, 'regSwapOrder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfOptionsABI,
    functionName: 'regSwapOrder',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfOptionsABI,
    'regSwapOrder'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"removeObligorFromOption"`.
 */
export function usePrepareRegisterOfOptionsRemoveObligorFromOption(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfOptionsABI,
      'removeObligorFromOption'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfOptionsABI,
    functionName: 'removeObligorFromOption',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfOptionsABI,
    'removeObligorFromOption'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareRegisterOfOptionsRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfOptionsABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfOptionsABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfOptionsABI,
    'renounceRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareRegisterOfOptionsRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfOptionsABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfOptionsABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfOptionsABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareRegisterOfOptionsSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfOptionsABI,
      'setDirectKeeper'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfOptionsABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfOptionsABI,
    'setDirectKeeper'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareRegisterOfOptionsSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfOptionsABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfOptionsABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfOptionsABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareRegisterOfOptionsSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfOptionsABI, 'setRoleAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfOptionsABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfOptionsABI,
    'setRoleAdmin'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function usePrepareRegisterOfOptionsTakeBackKeys(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfOptionsABI, 'takeBackKeys'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfOptionsABI,
    functionName: 'takeBackKeys',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfOptionsABI,
    'takeBackKeys'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"updateOracle"`.
 */
export function usePrepareRegisterOfOptionsUpdateOracle(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfOptionsABI, 'updateOracle'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfOptionsABI,
    functionName: 'updateOracle',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfOptionsABI,
    'updateOracle'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfOptionsABI}__ and `functionName` set to `"updateStateOfBrief"`.
 */
export function usePrepareRegisterOfOptionsUpdateStateOfBrief(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfOptionsABI,
      'updateStateOfBrief'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfOptionsABI,
    functionName: 'updateStateOfBrief',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfOptionsABI,
    'updateStateOfBrief'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfOptionsABI}__.
 */
export function useRegisterOfOptionsEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof registerOfOptionsABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfOptionsABI,
    ...config,
  } as UseContractEventConfig<typeof registerOfOptionsABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfOptionsABI}__ and `eventName` set to `"AddObligorIntoOpt"`.
 */
export function useRegisterOfOptionsAddObligorIntoOptEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfOptionsABI, 'AddObligorIntoOpt'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfOptionsABI,
    eventName: 'AddObligorIntoOpt',
    ...config,
  } as UseContractEventConfig<typeof registerOfOptionsABI, 'AddObligorIntoOpt'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfOptionsABI}__ and `eventName` set to `"CreateOpt"`.
 */
export function useRegisterOfOptionsCreateOptEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfOptionsABI, 'CreateOpt'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfOptionsABI,
    eventName: 'CreateOpt',
    ...config,
  } as UseContractEventConfig<typeof registerOfOptionsABI, 'CreateOpt'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfOptionsABI}__ and `eventName` set to `"ExecOpt"`.
 */
export function useRegisterOfOptionsExecOptEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfOptionsABI, 'ExecOpt'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfOptionsABI,
    eventName: 'ExecOpt',
    ...config,
  } as UseContractEventConfig<typeof registerOfOptionsABI, 'ExecOpt'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfOptionsABI}__ and `eventName` set to `"Init"`.
 */
export function useRegisterOfOptionsInitEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfOptionsABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfOptionsABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof registerOfOptionsABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfOptionsABI}__ and `eventName` set to `"IssueOpt"`.
 */
export function useRegisterOfOptionsIssueOptEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfOptionsABI, 'IssueOpt'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfOptionsABI,
    eventName: 'IssueOpt',
    ...config,
  } as UseContractEventConfig<typeof registerOfOptionsABI, 'IssueOpt'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfOptionsABI}__ and `eventName` set to `"LockContents"`.
 */
export function useRegisterOfOptionsLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfOptionsABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfOptionsABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof registerOfOptionsABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfOptionsABI}__ and `eventName` set to `"RegSwapOrder"`.
 */
export function useRegisterOfOptionsRegSwapOrderEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfOptionsABI, 'RegSwapOrder'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfOptionsABI,
    eventName: 'RegSwapOrder',
    ...config,
  } as UseContractEventConfig<typeof registerOfOptionsABI, 'RegSwapOrder'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfOptionsABI}__ and `eventName` set to `"RemoveObligorFromOpt"`.
 */
export function useRegisterOfOptionsRemoveObligorFromOptEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfOptionsABI, 'RemoveObligorFromOpt'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfOptionsABI,
    eventName: 'RemoveObligorFromOpt',
    ...config,
  } as UseContractEventConfig<
    typeof registerOfOptionsABI,
    'RemoveObligorFromOpt'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfOptionsABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useRegisterOfOptionsSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfOptionsABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfOptionsABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof registerOfOptionsABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfOptionsABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useRegisterOfOptionsSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfOptionsABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfOptionsABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof registerOfOptionsABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfOptionsABI}__ and `eventName` set to `"SetRoleAdmin"`.
 */
export function useRegisterOfOptionsSetRoleAdminEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfOptionsABI, 'SetRoleAdmin'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfOptionsABI,
    eventName: 'SetRoleAdmin',
    ...config,
  } as UseContractEventConfig<typeof registerOfOptionsABI, 'SetRoleAdmin'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfOptionsABI}__ and `eventName` set to `"UpdateOracle"`.
 */
export function useRegisterOfOptionsUpdateOracleEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfOptionsABI, 'UpdateOracle'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfOptionsABI,
    eventName: 'UpdateOracle',
    ...config,
  } as UseContractEventConfig<typeof registerOfOptionsABI, 'UpdateOracle'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfOptionsABI}__ and `eventName` set to `"UpdateStateOfBrief"`.
 */
export function useRegisterOfOptionsUpdateStateOfBriefEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfOptionsABI, 'UpdateStateOfBrief'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfOptionsABI,
    eventName: 'UpdateStateOfBrief',
    ...config,
  } as UseContractEventConfig<
    typeof registerOfOptionsABI,
    'UpdateStateOfBrief'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iRegisterOfPledgesABI}__.
 */
export function useIRegisterOfPledges(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iRegisterOfPledgesABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfPledgesABI}__.
 */
export function useIRegisterOfPledgesRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iRegisterOfPledgesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfPledgesABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfPledgesABI,
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfPledgesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfPledgesABI}__ and `functionName` set to `"counterOfPledges"`.
 */
export function useIRegisterOfPledgesCounterOfPledges<
  TSelectData = ReadContractResult<
    typeof iRegisterOfPledgesABI,
    'counterOfPledges'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfPledgesABI,
      'counterOfPledges',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfPledgesABI,
    functionName: 'counterOfPledges',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfPledgesABI,
    'counterOfPledges',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfPledgesABI}__ and `functionName` set to `"getAllPledges"`.
 */
export function useIRegisterOfPledgesGetAllPledges<
  TSelectData = ReadContractResult<
    typeof iRegisterOfPledgesABI,
    'getAllPledges'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfPledgesABI,
      'getAllPledges',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfPledgesABI,
    functionName: 'getAllPledges',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfPledgesABI,
    'getAllPledges',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfPledgesABI}__ and `functionName` set to `"getPledge"`.
 */
export function useIRegisterOfPledgesGetPledge<
  TSelectData = ReadContractResult<typeof iRegisterOfPledgesABI, 'getPledge'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfPledgesABI,
      'getPledge',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfPledgesABI,
    functionName: 'getPledge',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfPledgesABI,
    'getPledge',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfPledgesABI}__ and `functionName` set to `"getPledgesOfShare"`.
 */
export function useIRegisterOfPledgesGetPledgesOfShare<
  TSelectData = ReadContractResult<
    typeof iRegisterOfPledgesABI,
    'getPledgesOfShare'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfPledgesABI,
      'getPledgesOfShare',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfPledgesABI,
    functionName: 'getPledgesOfShare',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfPledgesABI,
    'getPledgesOfShare',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfPledgesABI}__ and `functionName` set to `"getSNList"`.
 */
export function useIRegisterOfPledgesGetSnList<
  TSelectData = ReadContractResult<typeof iRegisterOfPledgesABI, 'getSNList'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfPledgesABI,
      'getSNList',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfPledgesABI,
    functionName: 'getSNList',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfPledgesABI,
    'getSNList',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfPledgesABI}__ and `functionName` set to `"isPledge"`.
 */
export function useIRegisterOfPledgesIsPledge<
  TSelectData = ReadContractResult<typeof iRegisterOfPledgesABI, 'isPledge'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfPledgesABI,
      'isPledge',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfPledgesABI,
    functionName: 'isPledge',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfPledgesABI,
    'isPledge',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfPledgesABI}__.
 */
export function useIRegisterOfPledgesWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iRegisterOfPledgesABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfPledgesABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegisterOfPledgesABI, TFunctionName>({
    abi: iRegisterOfPledgesABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfPledgesABI}__ and `functionName` set to `"createPledge"`.
 */
export function useIRegisterOfPledgesCreatePledge<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfPledgesABI,
          'createPledge'
        >['abi'],
        'createPledge'
      > & { functionName?: 'createPledge' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfPledgesABI,
        'createPledge'
      > & {
        abi?: never
        functionName?: 'createPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegisterOfPledgesABI, 'createPledge'>({
    abi: iRegisterOfPledgesABI,
    functionName: 'createPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfPledgesABI}__ and `functionName` set to `"execPledge"`.
 */
export function useIRegisterOfPledgesExecPledge<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfPledgesABI,
          'execPledge'
        >['abi'],
        'execPledge'
      > & { functionName?: 'execPledge' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfPledgesABI,
        'execPledge'
      > & {
        abi?: never
        functionName?: 'execPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegisterOfPledgesABI, 'execPledge'>({
    abi: iRegisterOfPledgesABI,
    functionName: 'execPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfPledgesABI}__ and `functionName` set to `"extendPledge"`.
 */
export function useIRegisterOfPledgesExtendPledge<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfPledgesABI,
          'extendPledge'
        >['abi'],
        'extendPledge'
      > & { functionName?: 'extendPledge' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfPledgesABI,
        'extendPledge'
      > & {
        abi?: never
        functionName?: 'extendPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegisterOfPledgesABI, 'extendPledge'>({
    abi: iRegisterOfPledgesABI,
    functionName: 'extendPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfPledgesABI}__ and `functionName` set to `"issuePledge"`.
 */
export function useIRegisterOfPledgesIssuePledge<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfPledgesABI,
          'issuePledge'
        >['abi'],
        'issuePledge'
      > & { functionName?: 'issuePledge' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfPledgesABI,
        'issuePledge'
      > & {
        abi?: never
        functionName?: 'issuePledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegisterOfPledgesABI, 'issuePledge'>({
    abi: iRegisterOfPledgesABI,
    functionName: 'issuePledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfPledgesABI}__ and `functionName` set to `"lockPledge"`.
 */
export function useIRegisterOfPledgesLockPledge<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfPledgesABI,
          'lockPledge'
        >['abi'],
        'lockPledge'
      > & { functionName?: 'lockPledge' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfPledgesABI,
        'lockPledge'
      > & {
        abi?: never
        functionName?: 'lockPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegisterOfPledgesABI, 'lockPledge'>({
    abi: iRegisterOfPledgesABI,
    functionName: 'lockPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfPledgesABI}__ and `functionName` set to `"refundDebt"`.
 */
export function useIRegisterOfPledgesRefundDebt<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfPledgesABI,
          'refundDebt'
        >['abi'],
        'refundDebt'
      > & { functionName?: 'refundDebt' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfPledgesABI,
        'refundDebt'
      > & {
        abi?: never
        functionName?: 'refundDebt'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegisterOfPledgesABI, 'refundDebt'>({
    abi: iRegisterOfPledgesABI,
    functionName: 'refundDebt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfPledgesABI}__ and `functionName` set to `"regPledge"`.
 */
export function useIRegisterOfPledgesRegPledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfPledgesABI,
          'regPledge'
        >['abi'],
        'regPledge'
      > & { functionName?: 'regPledge' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfPledgesABI,
        'regPledge'
      > & {
        abi?: never
        functionName?: 'regPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegisterOfPledgesABI, 'regPledge'>({
    abi: iRegisterOfPledgesABI,
    functionName: 'regPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfPledgesABI}__ and `functionName` set to `"releasePledge"`.
 */
export function useIRegisterOfPledgesReleasePledge<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfPledgesABI,
          'releasePledge'
        >['abi'],
        'releasePledge'
      > & { functionName?: 'releasePledge' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfPledgesABI,
        'releasePledge'
      > & {
        abi?: never
        functionName?: 'releasePledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegisterOfPledgesABI, 'releasePledge'>(
    {
      abi: iRegisterOfPledgesABI,
      functionName: 'releasePledge',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfPledgesABI}__ and `functionName` set to `"revokePledge"`.
 */
export function useIRegisterOfPledgesRevokePledge<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfPledgesABI,
          'revokePledge'
        >['abi'],
        'revokePledge'
      > & { functionName?: 'revokePledge' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfPledgesABI,
        'revokePledge'
      > & {
        abi?: never
        functionName?: 'revokePledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegisterOfPledgesABI, 'revokePledge'>({
    abi: iRegisterOfPledgesABI,
    functionName: 'revokePledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfPledgesABI}__ and `functionName` set to `"transferPledge"`.
 */
export function useIRegisterOfPledgesTransferPledge<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfPledgesABI,
          'transferPledge'
        >['abi'],
        'transferPledge'
      > & { functionName?: 'transferPledge' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfPledgesABI,
        'transferPledge'
      > & {
        abi?: never
        functionName?: 'transferPledge'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iRegisterOfPledgesABI,
    'transferPledge'
  >({
    abi: iRegisterOfPledgesABI,
    functionName: 'transferPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfPledgesABI}__.
 */
export function usePrepareIRegisterOfPledgesWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegisterOfPledgesABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfPledgesABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfPledgesABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfPledgesABI}__ and `functionName` set to `"createPledge"`.
 */
export function usePrepareIRegisterOfPledgesCreatePledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegisterOfPledgesABI, 'createPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfPledgesABI,
    functionName: 'createPledge',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfPledgesABI,
    'createPledge'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfPledgesABI}__ and `functionName` set to `"execPledge"`.
 */
export function usePrepareIRegisterOfPledgesExecPledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegisterOfPledgesABI, 'execPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfPledgesABI,
    functionName: 'execPledge',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfPledgesABI,
    'execPledge'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfPledgesABI}__ and `functionName` set to `"extendPledge"`.
 */
export function usePrepareIRegisterOfPledgesExtendPledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegisterOfPledgesABI, 'extendPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfPledgesABI,
    functionName: 'extendPledge',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfPledgesABI,
    'extendPledge'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfPledgesABI}__ and `functionName` set to `"issuePledge"`.
 */
export function usePrepareIRegisterOfPledgesIssuePledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegisterOfPledgesABI, 'issuePledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfPledgesABI,
    functionName: 'issuePledge',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfPledgesABI,
    'issuePledge'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfPledgesABI}__ and `functionName` set to `"lockPledge"`.
 */
export function usePrepareIRegisterOfPledgesLockPledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegisterOfPledgesABI, 'lockPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfPledgesABI,
    functionName: 'lockPledge',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfPledgesABI,
    'lockPledge'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfPledgesABI}__ and `functionName` set to `"refundDebt"`.
 */
export function usePrepareIRegisterOfPledgesRefundDebt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegisterOfPledgesABI, 'refundDebt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfPledgesABI,
    functionName: 'refundDebt',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfPledgesABI,
    'refundDebt'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfPledgesABI}__ and `functionName` set to `"regPledge"`.
 */
export function usePrepareIRegisterOfPledgesRegPledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegisterOfPledgesABI, 'regPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfPledgesABI,
    functionName: 'regPledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegisterOfPledgesABI, 'regPledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfPledgesABI}__ and `functionName` set to `"releasePledge"`.
 */
export function usePrepareIRegisterOfPledgesReleasePledge(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRegisterOfPledgesABI,
      'releasePledge'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfPledgesABI,
    functionName: 'releasePledge',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfPledgesABI,
    'releasePledge'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfPledgesABI}__ and `functionName` set to `"revokePledge"`.
 */
export function usePrepareIRegisterOfPledgesRevokePledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegisterOfPledgesABI, 'revokePledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfPledgesABI,
    functionName: 'revokePledge',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfPledgesABI,
    'revokePledge'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfPledgesABI}__ and `functionName` set to `"transferPledge"`.
 */
export function usePrepareIRegisterOfPledgesTransferPledge(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRegisterOfPledgesABI,
      'transferPledge'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfPledgesABI,
    functionName: 'transferPledge',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfPledgesABI,
    'transferPledge'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfPledgesABI}__.
 */
export function useIRegisterOfPledgesEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfPledgesABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfPledgesABI,
    ...config,
  } as UseContractEventConfig<typeof iRegisterOfPledgesABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfPledgesABI}__ and `eventName` set to `"CreatePledge"`.
 */
export function useIRegisterOfPledgesCreatePledgeEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfPledgesABI, 'CreatePledge'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfPledgesABI,
    eventName: 'CreatePledge',
    ...config,
  } as UseContractEventConfig<typeof iRegisterOfPledgesABI, 'CreatePledge'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfPledgesABI}__ and `eventName` set to `"ExecPledge"`.
 */
export function useIRegisterOfPledgesExecPledgeEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfPledgesABI, 'ExecPledge'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfPledgesABI,
    eventName: 'ExecPledge',
    ...config,
  } as UseContractEventConfig<typeof iRegisterOfPledgesABI, 'ExecPledge'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfPledgesABI}__ and `eventName` set to `"ExtendPledge"`.
 */
export function useIRegisterOfPledgesExtendPledgeEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfPledgesABI, 'ExtendPledge'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfPledgesABI,
    eventName: 'ExtendPledge',
    ...config,
  } as UseContractEventConfig<typeof iRegisterOfPledgesABI, 'ExtendPledge'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfPledgesABI}__ and `eventName` set to `"LockPledge"`.
 */
export function useIRegisterOfPledgesLockPledgeEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfPledgesABI, 'LockPledge'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfPledgesABI,
    eventName: 'LockPledge',
    ...config,
  } as UseContractEventConfig<typeof iRegisterOfPledgesABI, 'LockPledge'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfPledgesABI}__ and `eventName` set to `"RefundDebt"`.
 */
export function useIRegisterOfPledgesRefundDebtEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfPledgesABI, 'RefundDebt'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfPledgesABI,
    eventName: 'RefundDebt',
    ...config,
  } as UseContractEventConfig<typeof iRegisterOfPledgesABI, 'RefundDebt'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfPledgesABI}__ and `eventName` set to `"ReleasePledge"`.
 */
export function useIRegisterOfPledgesReleasePledgeEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfPledgesABI, 'ReleasePledge'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfPledgesABI,
    eventName: 'ReleasePledge',
    ...config,
  } as UseContractEventConfig<typeof iRegisterOfPledgesABI, 'ReleasePledge'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfPledgesABI}__ and `eventName` set to `"RevokePledge"`.
 */
export function useIRegisterOfPledgesRevokePledgeEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfPledgesABI, 'RevokePledge'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfPledgesABI,
    eventName: 'RevokePledge',
    ...config,
  } as UseContractEventConfig<typeof iRegisterOfPledgesABI, 'RevokePledge'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfPledgesABI}__ and `eventName` set to `"TransferPledge"`.
 */
export function useIRegisterOfPledgesTransferPledgeEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfPledgesABI, 'TransferPledge'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfPledgesABI,
    eventName: 'TransferPledge',
    ...config,
  } as UseContractEventConfig<typeof iRegisterOfPledgesABI, 'TransferPledge'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link registerOfPledgesABI}__.
 */
export function useRegisterOfPledges(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: registerOfPledgesABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfPledgesABI}__.
 */
export function useRegisterOfPledgesRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof registerOfPledgesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfPledgesABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfPledgesABI,
    ...config,
  } as UseContractReadConfig<
    typeof registerOfPledgesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfPledgesABI}__ and `functionName` set to `"counterOfPledges"`.
 */
export function useRegisterOfPledgesCounterOfPledges<
  TSelectData = ReadContractResult<
    typeof registerOfPledgesABI,
    'counterOfPledges'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfPledgesABI,
      'counterOfPledges',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfPledgesABI,
    functionName: 'counterOfPledges',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfPledgesABI,
    'counterOfPledges',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfPledgesABI}__ and `functionName` set to `"getAllPledges"`.
 */
export function useRegisterOfPledgesGetAllPledges<
  TSelectData = ReadContractResult<
    typeof registerOfPledgesABI,
    'getAllPledges'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfPledgesABI,
      'getAllPledges',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfPledgesABI,
    functionName: 'getAllPledges',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfPledgesABI,
    'getAllPledges',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfPledgesABI}__ and `functionName` set to `"getDK"`.
 */
export function useRegisterOfPledgesGetDk<
  TSelectData = ReadContractResult<typeof registerOfPledgesABI, 'getDK'>,
>(
  config: Omit<
    UseContractReadConfig<typeof registerOfPledgesABI, 'getDK', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfPledgesABI,
    functionName: 'getDK',
    ...config,
  } as UseContractReadConfig<typeof registerOfPledgesABI, 'getDK', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfPledgesABI}__ and `functionName` set to `"getOwner"`.
 */
export function useRegisterOfPledgesGetOwner<
  TSelectData = ReadContractResult<typeof registerOfPledgesABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof registerOfPledgesABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfPledgesABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfPledgesABI,
    'getOwner',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfPledgesABI}__ and `functionName` set to `"getPledge"`.
 */
export function useRegisterOfPledgesGetPledge<
  TSelectData = ReadContractResult<typeof registerOfPledgesABI, 'getPledge'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfPledgesABI,
      'getPledge',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfPledgesABI,
    functionName: 'getPledge',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfPledgesABI,
    'getPledge',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfPledgesABI}__ and `functionName` set to `"getPledgesOfShare"`.
 */
export function useRegisterOfPledgesGetPledgesOfShare<
  TSelectData = ReadContractResult<
    typeof registerOfPledgesABI,
    'getPledgesOfShare'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfPledgesABI,
      'getPledgesOfShare',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfPledgesABI,
    functionName: 'getPledgesOfShare',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfPledgesABI,
    'getPledgesOfShare',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfPledgesABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useRegisterOfPledgesGetRoleAdmin<
  TSelectData = ReadContractResult<typeof registerOfPledgesABI, 'getRoleAdmin'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfPledgesABI,
      'getRoleAdmin',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfPledgesABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfPledgesABI,
    'getRoleAdmin',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfPledgesABI}__ and `functionName` set to `"getSNList"`.
 */
export function useRegisterOfPledgesGetSnList<
  TSelectData = ReadContractResult<typeof registerOfPledgesABI, 'getSNList'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfPledgesABI,
      'getSNList',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfPledgesABI,
    functionName: 'getSNList',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfPledgesABI,
    'getSNList',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfPledgesABI}__ and `functionName` set to `"hasRole"`.
 */
export function useRegisterOfPledgesHasRole<
  TSelectData = ReadContractResult<typeof registerOfPledgesABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof registerOfPledgesABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfPledgesABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfPledgesABI,
    'hasRole',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfPledgesABI}__ and `functionName` set to `"isFinalized"`.
 */
export function useRegisterOfPledgesIsFinalized<
  TSelectData = ReadContractResult<typeof registerOfPledgesABI, 'isFinalized'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfPledgesABI,
      'isFinalized',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfPledgesABI,
    functionName: 'isFinalized',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfPledgesABI,
    'isFinalized',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfPledgesABI}__ and `functionName` set to `"isPledge"`.
 */
export function useRegisterOfPledgesIsPledge<
  TSelectData = ReadContractResult<typeof registerOfPledgesABI, 'isPledge'>,
>(
  config: Omit<
    UseContractReadConfig<typeof registerOfPledgesABI, 'isPledge', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfPledgesABI,
    functionName: 'isPledge',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfPledgesABI,
    'isPledge',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfPledgesABI}__.
 */
export function useRegisterOfPledgesWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof registerOfPledgesABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof registerOfPledgesABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfPledgesABI, TFunctionName>({
    abi: registerOfPledgesABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfPledgesABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useRegisterOfPledgesAbandonRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfPledgesABI,
          'abandonRole'
        >['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfPledgesABI,
        'abandonRole'
      > & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfPledgesABI, 'abandonRole'>({
    abi: registerOfPledgesABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfPledgesABI}__ and `functionName` set to `"createPledge"`.
 */
export function useRegisterOfPledgesCreatePledge<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfPledgesABI,
          'createPledge'
        >['abi'],
        'createPledge'
      > & { functionName?: 'createPledge' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfPledgesABI,
        'createPledge'
      > & {
        abi?: never
        functionName?: 'createPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfPledgesABI, 'createPledge'>({
    abi: registerOfPledgesABI,
    functionName: 'createPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfPledgesABI}__ and `functionName` set to `"execPledge"`.
 */
export function useRegisterOfPledgesExecPledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfPledgesABI,
          'execPledge'
        >['abi'],
        'execPledge'
      > & { functionName?: 'execPledge' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfPledgesABI,
        'execPledge'
      > & {
        abi?: never
        functionName?: 'execPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfPledgesABI, 'execPledge'>({
    abi: registerOfPledgesABI,
    functionName: 'execPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfPledgesABI}__ and `functionName` set to `"extendPledge"`.
 */
export function useRegisterOfPledgesExtendPledge<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfPledgesABI,
          'extendPledge'
        >['abi'],
        'extendPledge'
      > & { functionName?: 'extendPledge' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfPledgesABI,
        'extendPledge'
      > & {
        abi?: never
        functionName?: 'extendPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfPledgesABI, 'extendPledge'>({
    abi: registerOfPledgesABI,
    functionName: 'extendPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfPledgesABI}__ and `functionName` set to `"grantRole"`.
 */
export function useRegisterOfPledgesGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfPledgesABI,
          'grantRole'
        >['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfPledgesABI,
        'grantRole'
      > & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfPledgesABI, 'grantRole'>({
    abi: registerOfPledgesABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfPledgesABI}__ and `functionName` set to `"init"`.
 */
export function useRegisterOfPledgesInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof registerOfPledgesABI, 'init'>['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof registerOfPledgesABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfPledgesABI, 'init'>({
    abi: registerOfPledgesABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfPledgesABI}__ and `functionName` set to `"issuePledge"`.
 */
export function useRegisterOfPledgesIssuePledge<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfPledgesABI,
          'issuePledge'
        >['abi'],
        'issuePledge'
      > & { functionName?: 'issuePledge' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfPledgesABI,
        'issuePledge'
      > & {
        abi?: never
        functionName?: 'issuePledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfPledgesABI, 'issuePledge'>({
    abi: registerOfPledgesABI,
    functionName: 'issuePledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfPledgesABI}__ and `functionName` set to `"lockContents"`.
 */
export function useRegisterOfPledgesLockContents<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfPledgesABI,
          'lockContents'
        >['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfPledgesABI,
        'lockContents'
      > & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfPledgesABI, 'lockContents'>({
    abi: registerOfPledgesABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfPledgesABI}__ and `functionName` set to `"lockPledge"`.
 */
export function useRegisterOfPledgesLockPledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfPledgesABI,
          'lockPledge'
        >['abi'],
        'lockPledge'
      > & { functionName?: 'lockPledge' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfPledgesABI,
        'lockPledge'
      > & {
        abi?: never
        functionName?: 'lockPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfPledgesABI, 'lockPledge'>({
    abi: registerOfPledgesABI,
    functionName: 'lockPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfPledgesABI}__ and `functionName` set to `"refundDebt"`.
 */
export function useRegisterOfPledgesRefundDebt<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfPledgesABI,
          'refundDebt'
        >['abi'],
        'refundDebt'
      > & { functionName?: 'refundDebt' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfPledgesABI,
        'refundDebt'
      > & {
        abi?: never
        functionName?: 'refundDebt'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfPledgesABI, 'refundDebt'>({
    abi: registerOfPledgesABI,
    functionName: 'refundDebt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfPledgesABI}__ and `functionName` set to `"regPledge"`.
 */
export function useRegisterOfPledgesRegPledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfPledgesABI,
          'regPledge'
        >['abi'],
        'regPledge'
      > & { functionName?: 'regPledge' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfPledgesABI,
        'regPledge'
      > & {
        abi?: never
        functionName?: 'regPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfPledgesABI, 'regPledge'>({
    abi: registerOfPledgesABI,
    functionName: 'regPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfPledgesABI}__ and `functionName` set to `"releasePledge"`.
 */
export function useRegisterOfPledgesReleasePledge<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfPledgesABI,
          'releasePledge'
        >['abi'],
        'releasePledge'
      > & { functionName?: 'releasePledge' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfPledgesABI,
        'releasePledge'
      > & {
        abi?: never
        functionName?: 'releasePledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfPledgesABI, 'releasePledge'>({
    abi: registerOfPledgesABI,
    functionName: 'releasePledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfPledgesABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useRegisterOfPledgesRenounceRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfPledgesABI,
          'renounceRole'
        >['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfPledgesABI,
        'renounceRole'
      > & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfPledgesABI, 'renounceRole'>({
    abi: registerOfPledgesABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfPledgesABI}__ and `functionName` set to `"revokePledge"`.
 */
export function useRegisterOfPledgesRevokePledge<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfPledgesABI,
          'revokePledge'
        >['abi'],
        'revokePledge'
      > & { functionName?: 'revokePledge' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfPledgesABI,
        'revokePledge'
      > & {
        abi?: never
        functionName?: 'revokePledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfPledgesABI, 'revokePledge'>({
    abi: registerOfPledgesABI,
    functionName: 'revokePledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfPledgesABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useRegisterOfPledgesRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfPledgesABI,
          'revokeRole'
        >['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfPledgesABI,
        'revokeRole'
      > & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfPledgesABI, 'revokeRole'>({
    abi: registerOfPledgesABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfPledgesABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useRegisterOfPledgesSetDirectKeeper<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfPledgesABI,
          'setDirectKeeper'
        >['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfPledgesABI,
        'setDirectKeeper'
      > & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfPledgesABI,
    'setDirectKeeper'
  >({
    abi: registerOfPledgesABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfPledgesABI}__ and `functionName` set to `"setOwner"`.
 */
export function useRegisterOfPledgesSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfPledgesABI,
          'setOwner'
        >['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof registerOfPledgesABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfPledgesABI, 'setOwner'>({
    abi: registerOfPledgesABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfPledgesABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useRegisterOfPledgesSetRoleAdmin<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfPledgesABI,
          'setRoleAdmin'
        >['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfPledgesABI,
        'setRoleAdmin'
      > & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfPledgesABI, 'setRoleAdmin'>({
    abi: registerOfPledgesABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfPledgesABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function useRegisterOfPledgesTakeBackKeys<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfPledgesABI,
          'takeBackKeys'
        >['abi'],
        'takeBackKeys'
      > & { functionName?: 'takeBackKeys' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfPledgesABI,
        'takeBackKeys'
      > & {
        abi?: never
        functionName?: 'takeBackKeys'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfPledgesABI, 'takeBackKeys'>({
    abi: registerOfPledgesABI,
    functionName: 'takeBackKeys',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfPledgesABI}__ and `functionName` set to `"transferPledge"`.
 */
export function useRegisterOfPledgesTransferPledge<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfPledgesABI,
          'transferPledge'
        >['abi'],
        'transferPledge'
      > & { functionName?: 'transferPledge' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfPledgesABI,
        'transferPledge'
      > & {
        abi?: never
        functionName?: 'transferPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfPledgesABI, 'transferPledge'>(
    {
      abi: registerOfPledgesABI,
      functionName: 'transferPledge',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfPledgesABI}__.
 */
export function usePrepareRegisterOfPledgesWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfPledgesABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfPledgesABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfPledgesABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfPledgesABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareRegisterOfPledgesAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfPledgesABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfPledgesABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfPledgesABI,
    'abandonRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfPledgesABI}__ and `functionName` set to `"createPledge"`.
 */
export function usePrepareRegisterOfPledgesCreatePledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfPledgesABI, 'createPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfPledgesABI,
    functionName: 'createPledge',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfPledgesABI,
    'createPledge'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfPledgesABI}__ and `functionName` set to `"execPledge"`.
 */
export function usePrepareRegisterOfPledgesExecPledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfPledgesABI, 'execPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfPledgesABI,
    functionName: 'execPledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfPledgesABI, 'execPledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfPledgesABI}__ and `functionName` set to `"extendPledge"`.
 */
export function usePrepareRegisterOfPledgesExtendPledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfPledgesABI, 'extendPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfPledgesABI,
    functionName: 'extendPledge',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfPledgesABI,
    'extendPledge'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfPledgesABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareRegisterOfPledgesGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfPledgesABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfPledgesABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfPledgesABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfPledgesABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareRegisterOfPledgesInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfPledgesABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfPledgesABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfPledgesABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfPledgesABI}__ and `functionName` set to `"issuePledge"`.
 */
export function usePrepareRegisterOfPledgesIssuePledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfPledgesABI, 'issuePledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfPledgesABI,
    functionName: 'issuePledge',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfPledgesABI,
    'issuePledge'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfPledgesABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareRegisterOfPledgesLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfPledgesABI, 'lockContents'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfPledgesABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfPledgesABI,
    'lockContents'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfPledgesABI}__ and `functionName` set to `"lockPledge"`.
 */
export function usePrepareRegisterOfPledgesLockPledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfPledgesABI, 'lockPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfPledgesABI,
    functionName: 'lockPledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfPledgesABI, 'lockPledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfPledgesABI}__ and `functionName` set to `"refundDebt"`.
 */
export function usePrepareRegisterOfPledgesRefundDebt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfPledgesABI, 'refundDebt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfPledgesABI,
    functionName: 'refundDebt',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfPledgesABI, 'refundDebt'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfPledgesABI}__ and `functionName` set to `"regPledge"`.
 */
export function usePrepareRegisterOfPledgesRegPledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfPledgesABI, 'regPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfPledgesABI,
    functionName: 'regPledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfPledgesABI, 'regPledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfPledgesABI}__ and `functionName` set to `"releasePledge"`.
 */
export function usePrepareRegisterOfPledgesReleasePledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfPledgesABI, 'releasePledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfPledgesABI,
    functionName: 'releasePledge',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfPledgesABI,
    'releasePledge'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfPledgesABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareRegisterOfPledgesRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfPledgesABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfPledgesABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfPledgesABI,
    'renounceRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfPledgesABI}__ and `functionName` set to `"revokePledge"`.
 */
export function usePrepareRegisterOfPledgesRevokePledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfPledgesABI, 'revokePledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfPledgesABI,
    functionName: 'revokePledge',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfPledgesABI,
    'revokePledge'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfPledgesABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareRegisterOfPledgesRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfPledgesABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfPledgesABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfPledgesABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfPledgesABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareRegisterOfPledgesSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfPledgesABI,
      'setDirectKeeper'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfPledgesABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfPledgesABI,
    'setDirectKeeper'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfPledgesABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareRegisterOfPledgesSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfPledgesABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfPledgesABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfPledgesABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfPledgesABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareRegisterOfPledgesSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfPledgesABI, 'setRoleAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfPledgesABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfPledgesABI,
    'setRoleAdmin'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfPledgesABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function usePrepareRegisterOfPledgesTakeBackKeys(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfPledgesABI, 'takeBackKeys'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfPledgesABI,
    functionName: 'takeBackKeys',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfPledgesABI,
    'takeBackKeys'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfPledgesABI}__ and `functionName` set to `"transferPledge"`.
 */
export function usePrepareRegisterOfPledgesTransferPledge(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfPledgesABI,
      'transferPledge'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfPledgesABI,
    functionName: 'transferPledge',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfPledgesABI,
    'transferPledge'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfPledgesABI}__.
 */
export function useRegisterOfPledgesEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof registerOfPledgesABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfPledgesABI,
    ...config,
  } as UseContractEventConfig<typeof registerOfPledgesABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfPledgesABI}__ and `eventName` set to `"CreatePledge"`.
 */
export function useRegisterOfPledgesCreatePledgeEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfPledgesABI, 'CreatePledge'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfPledgesABI,
    eventName: 'CreatePledge',
    ...config,
  } as UseContractEventConfig<typeof registerOfPledgesABI, 'CreatePledge'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfPledgesABI}__ and `eventName` set to `"ExecPledge"`.
 */
export function useRegisterOfPledgesExecPledgeEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfPledgesABI, 'ExecPledge'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfPledgesABI,
    eventName: 'ExecPledge',
    ...config,
  } as UseContractEventConfig<typeof registerOfPledgesABI, 'ExecPledge'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfPledgesABI}__ and `eventName` set to `"ExtendPledge"`.
 */
export function useRegisterOfPledgesExtendPledgeEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfPledgesABI, 'ExtendPledge'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfPledgesABI,
    eventName: 'ExtendPledge',
    ...config,
  } as UseContractEventConfig<typeof registerOfPledgesABI, 'ExtendPledge'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfPledgesABI}__ and `eventName` set to `"Init"`.
 */
export function useRegisterOfPledgesInitEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfPledgesABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfPledgesABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof registerOfPledgesABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfPledgesABI}__ and `eventName` set to `"LockContents"`.
 */
export function useRegisterOfPledgesLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfPledgesABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfPledgesABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof registerOfPledgesABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfPledgesABI}__ and `eventName` set to `"LockPledge"`.
 */
export function useRegisterOfPledgesLockPledgeEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfPledgesABI, 'LockPledge'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfPledgesABI,
    eventName: 'LockPledge',
    ...config,
  } as UseContractEventConfig<typeof registerOfPledgesABI, 'LockPledge'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfPledgesABI}__ and `eventName` set to `"RefundDebt"`.
 */
export function useRegisterOfPledgesRefundDebtEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfPledgesABI, 'RefundDebt'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfPledgesABI,
    eventName: 'RefundDebt',
    ...config,
  } as UseContractEventConfig<typeof registerOfPledgesABI, 'RefundDebt'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfPledgesABI}__ and `eventName` set to `"ReleasePledge"`.
 */
export function useRegisterOfPledgesReleasePledgeEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfPledgesABI, 'ReleasePledge'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfPledgesABI,
    eventName: 'ReleasePledge',
    ...config,
  } as UseContractEventConfig<typeof registerOfPledgesABI, 'ReleasePledge'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfPledgesABI}__ and `eventName` set to `"RevokePledge"`.
 */
export function useRegisterOfPledgesRevokePledgeEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfPledgesABI, 'RevokePledge'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfPledgesABI,
    eventName: 'RevokePledge',
    ...config,
  } as UseContractEventConfig<typeof registerOfPledgesABI, 'RevokePledge'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfPledgesABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useRegisterOfPledgesSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfPledgesABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfPledgesABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof registerOfPledgesABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfPledgesABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useRegisterOfPledgesSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfPledgesABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfPledgesABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof registerOfPledgesABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfPledgesABI}__ and `eventName` set to `"SetRoleAdmin"`.
 */
export function useRegisterOfPledgesSetRoleAdminEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfPledgesABI, 'SetRoleAdmin'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfPledgesABI,
    eventName: 'SetRoleAdmin',
    ...config,
  } as UseContractEventConfig<typeof registerOfPledgesABI, 'SetRoleAdmin'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfPledgesABI}__ and `eventName` set to `"TransferPledge"`.
 */
export function useRegisterOfPledgesTransferPledgeEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfPledgesABI, 'TransferPledge'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfPledgesABI,
    eventName: 'TransferPledge',
    ...config,
  } as UseContractEventConfig<typeof registerOfPledgesABI, 'TransferPledge'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iRegisterOfSwapsABI}__.
 */
export function useIRegisterOfSwaps(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iRegisterOfSwapsABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfSwapsABI}__.
 */
export function useIRegisterOfSwapsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iRegisterOfSwapsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfSwapsABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfSwapsABI,
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfSwapsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `functionName` set to `"counterOfSwap"`.
 */
export function useIRegisterOfSwapsCounterOfSwap<
  TSelectData = ReadContractResult<typeof iRegisterOfSwapsABI, 'counterOfSwap'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfSwapsABI,
      'counterOfSwap',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfSwapsABI,
    functionName: 'counterOfSwap',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfSwapsABI,
    'counterOfSwap',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `functionName` set to `"getAllSwaps"`.
 */
export function useIRegisterOfSwapsGetAllSwaps<
  TSelectData = ReadContractResult<typeof iRegisterOfSwapsABI, 'getAllSwaps'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfSwapsABI,
      'getAllSwaps',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfSwapsABI,
    functionName: 'getAllSwaps',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfSwapsABI,
    'getAllSwaps',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `functionName` set to `"getSNList"`.
 */
export function useIRegisterOfSwapsGetSnList<
  TSelectData = ReadContractResult<typeof iRegisterOfSwapsABI, 'getSNList'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRegisterOfSwapsABI, 'getSNList', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfSwapsABI,
    functionName: 'getSNList',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfSwapsABI,
    'getSNList',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `functionName` set to `"getSwap"`.
 */
export function useIRegisterOfSwapsGetSwap<
  TSelectData = ReadContractResult<typeof iRegisterOfSwapsABI, 'getSwap'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRegisterOfSwapsABI, 'getSwap', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfSwapsABI,
    functionName: 'getSwap',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfSwapsABI,
    'getSwap',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `functionName` set to `"isSwapSN"`.
 */
export function useIRegisterOfSwapsIsSwapSn<
  TSelectData = ReadContractResult<typeof iRegisterOfSwapsABI, 'isSwapSN'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRegisterOfSwapsABI, 'isSwapSN', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfSwapsABI,
    functionName: 'isSwapSN',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfSwapsABI,
    'isSwapSN',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `functionName` set to `"isSwapSeq"`.
 */
export function useIRegisterOfSwapsIsSwapSeq<
  TSelectData = ReadContractResult<typeof iRegisterOfSwapsABI, 'isSwapSeq'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRegisterOfSwapsABI, 'isSwapSeq', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfSwapsABI,
    functionName: 'isSwapSeq',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfSwapsABI,
    'isSwapSeq',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfSwapsABI}__.
 */
export function useIRegisterOfSwapsWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iRegisterOfSwapsABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfSwapsABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegisterOfSwapsABI, TFunctionName>({
    abi: iRegisterOfSwapsABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `functionName` set to `"createSwap"`.
 */
export function useIRegisterOfSwapsCreateSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfSwapsABI,
          'createSwap'
        >['abi'],
        'createSwap'
      > & { functionName?: 'createSwap' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfSwapsABI,
        'createSwap'
      > & {
        abi?: never
        functionName?: 'createSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegisterOfSwapsABI, 'createSwap'>({
    abi: iRegisterOfSwapsABI,
    functionName: 'createSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `functionName` set to `"crystalizeSwap"`.
 */
export function useIRegisterOfSwapsCrystalizeSwap<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfSwapsABI,
          'crystalizeSwap'
        >['abi'],
        'crystalizeSwap'
      > & { functionName?: 'crystalizeSwap' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfSwapsABI,
        'crystalizeSwap'
      > & {
        abi?: never
        functionName?: 'crystalizeSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegisterOfSwapsABI, 'crystalizeSwap'>({
    abi: iRegisterOfSwapsABI,
    functionName: 'crystalizeSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `functionName` set to `"execSwap"`.
 */
export function useIRegisterOfSwapsExecSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfSwapsABI,
          'execSwap'
        >['abi'],
        'execSwap'
      > & { functionName?: 'execSwap' }
    : UseContractWriteConfig<TMode, typeof iRegisterOfSwapsABI, 'execSwap'> & {
        abi?: never
        functionName?: 'execSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegisterOfSwapsABI, 'execSwap'>({
    abi: iRegisterOfSwapsABI,
    functionName: 'execSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `functionName` set to `"issueSwap"`.
 */
export function useIRegisterOfSwapsIssueSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfSwapsABI,
          'issueSwap'
        >['abi'],
        'issueSwap'
      > & { functionName?: 'issueSwap' }
    : UseContractWriteConfig<TMode, typeof iRegisterOfSwapsABI, 'issueSwap'> & {
        abi?: never
        functionName?: 'issueSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegisterOfSwapsABI, 'issueSwap'>({
    abi: iRegisterOfSwapsABI,
    functionName: 'issueSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `functionName` set to `"lockSwap"`.
 */
export function useIRegisterOfSwapsLockSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfSwapsABI,
          'lockSwap'
        >['abi'],
        'lockSwap'
      > & { functionName?: 'lockSwap' }
    : UseContractWriteConfig<TMode, typeof iRegisterOfSwapsABI, 'lockSwap'> & {
        abi?: never
        functionName?: 'lockSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegisterOfSwapsABI, 'lockSwap'>({
    abi: iRegisterOfSwapsABI,
    functionName: 'lockSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `functionName` set to `"regSwap"`.
 */
export function useIRegisterOfSwapsRegSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfSwapsABI,
          'regSwap'
        >['abi'],
        'regSwap'
      > & { functionName?: 'regSwap' }
    : UseContractWriteConfig<TMode, typeof iRegisterOfSwapsABI, 'regSwap'> & {
        abi?: never
        functionName?: 'regSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegisterOfSwapsABI, 'regSwap'>({
    abi: iRegisterOfSwapsABI,
    functionName: 'regSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `functionName` set to `"releaseSwap"`.
 */
export function useIRegisterOfSwapsReleaseSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfSwapsABI,
          'releaseSwap'
        >['abi'],
        'releaseSwap'
      > & { functionName?: 'releaseSwap' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfSwapsABI,
        'releaseSwap'
      > & {
        abi?: never
        functionName?: 'releaseSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegisterOfSwapsABI, 'releaseSwap'>({
    abi: iRegisterOfSwapsABI,
    functionName: 'releaseSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `functionName` set to `"revokeSwap"`.
 */
export function useIRegisterOfSwapsRevokeSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfSwapsABI,
          'revokeSwap'
        >['abi'],
        'revokeSwap'
      > & { functionName?: 'revokeSwap' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfSwapsABI,
        'revokeSwap'
      > & {
        abi?: never
        functionName?: 'revokeSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegisterOfSwapsABI, 'revokeSwap'>({
    abi: iRegisterOfSwapsABI,
    functionName: 'revokeSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `functionName` set to `"transferSwap"`.
 */
export function useIRegisterOfSwapsTransferSwap<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfSwapsABI,
          'transferSwap'
        >['abi'],
        'transferSwap'
      > & { functionName?: 'transferSwap' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfSwapsABI,
        'transferSwap'
      > & {
        abi?: never
        functionName?: 'transferSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegisterOfSwapsABI, 'transferSwap'>({
    abi: iRegisterOfSwapsABI,
    functionName: 'transferSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfSwapsABI}__.
 */
export function usePrepareIRegisterOfSwapsWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegisterOfSwapsABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfSwapsABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegisterOfSwapsABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `functionName` set to `"createSwap"`.
 */
export function usePrepareIRegisterOfSwapsCreateSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegisterOfSwapsABI, 'createSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfSwapsABI,
    functionName: 'createSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegisterOfSwapsABI, 'createSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `functionName` set to `"crystalizeSwap"`.
 */
export function usePrepareIRegisterOfSwapsCrystalizeSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegisterOfSwapsABI, 'crystalizeSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfSwapsABI,
    functionName: 'crystalizeSwap',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfSwapsABI,
    'crystalizeSwap'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `functionName` set to `"execSwap"`.
 */
export function usePrepareIRegisterOfSwapsExecSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegisterOfSwapsABI, 'execSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfSwapsABI,
    functionName: 'execSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegisterOfSwapsABI, 'execSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `functionName` set to `"issueSwap"`.
 */
export function usePrepareIRegisterOfSwapsIssueSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegisterOfSwapsABI, 'issueSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfSwapsABI,
    functionName: 'issueSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegisterOfSwapsABI, 'issueSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `functionName` set to `"lockSwap"`.
 */
export function usePrepareIRegisterOfSwapsLockSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegisterOfSwapsABI, 'lockSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfSwapsABI,
    functionName: 'lockSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegisterOfSwapsABI, 'lockSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `functionName` set to `"regSwap"`.
 */
export function usePrepareIRegisterOfSwapsRegSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegisterOfSwapsABI, 'regSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfSwapsABI,
    functionName: 'regSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegisterOfSwapsABI, 'regSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `functionName` set to `"releaseSwap"`.
 */
export function usePrepareIRegisterOfSwapsReleaseSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegisterOfSwapsABI, 'releaseSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfSwapsABI,
    functionName: 'releaseSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegisterOfSwapsABI, 'releaseSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `functionName` set to `"revokeSwap"`.
 */
export function usePrepareIRegisterOfSwapsRevokeSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegisterOfSwapsABI, 'revokeSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfSwapsABI,
    functionName: 'revokeSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegisterOfSwapsABI, 'revokeSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `functionName` set to `"transferSwap"`.
 */
export function usePrepareIRegisterOfSwapsTransferSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegisterOfSwapsABI, 'transferSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfSwapsABI,
    functionName: 'transferSwap',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfSwapsABI,
    'transferSwap'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfSwapsABI}__.
 */
export function useIRegisterOfSwapsEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfSwapsABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfSwapsABI,
    ...config,
  } as UseContractEventConfig<typeof iRegisterOfSwapsABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `eventName` set to `"CreateSwap"`.
 */
export function useIRegisterOfSwapsCreateSwapEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfSwapsABI, 'CreateSwap'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfSwapsABI,
    eventName: 'CreateSwap',
    ...config,
  } as UseContractEventConfig<typeof iRegisterOfSwapsABI, 'CreateSwap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `eventName` set to `"CrystalizeSwap"`.
 */
export function useIRegisterOfSwapsCrystalizeSwapEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfSwapsABI, 'CrystalizeSwap'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfSwapsABI,
    eventName: 'CrystalizeSwap',
    ...config,
  } as UseContractEventConfig<typeof iRegisterOfSwapsABI, 'CrystalizeSwap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `eventName` set to `"ExecSwap"`.
 */
export function useIRegisterOfSwapsExecSwapEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfSwapsABI, 'ExecSwap'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfSwapsABI,
    eventName: 'ExecSwap',
    ...config,
  } as UseContractEventConfig<typeof iRegisterOfSwapsABI, 'ExecSwap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `eventName` set to `"LockSwap"`.
 */
export function useIRegisterOfSwapsLockSwapEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfSwapsABI, 'LockSwap'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfSwapsABI,
    eventName: 'LockSwap',
    ...config,
  } as UseContractEventConfig<typeof iRegisterOfSwapsABI, 'LockSwap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `eventName` set to `"ReleaseSwap"`.
 */
export function useIRegisterOfSwapsReleaseSwapEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfSwapsABI, 'ReleaseSwap'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfSwapsABI,
    eventName: 'ReleaseSwap',
    ...config,
  } as UseContractEventConfig<typeof iRegisterOfSwapsABI, 'ReleaseSwap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `eventName` set to `"RevokeSwap"`.
 */
export function useIRegisterOfSwapsRevokeSwapEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfSwapsABI, 'RevokeSwap'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfSwapsABI,
    eventName: 'RevokeSwap',
    ...config,
  } as UseContractEventConfig<typeof iRegisterOfSwapsABI, 'RevokeSwap'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link registerOfSwapsABI}__.
 */
export function useRegisterOfSwaps(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: registerOfSwapsABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfSwapsABI}__.
 */
export function useRegisterOfSwapsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof registerOfSwapsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfSwapsABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfSwapsABI,
    ...config,
  } as UseContractReadConfig<
    typeof registerOfSwapsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"counterOfSwap"`.
 */
export function useRegisterOfSwapsCounterOfSwap<
  TSelectData = ReadContractResult<typeof registerOfSwapsABI, 'counterOfSwap'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfSwapsABI,
      'counterOfSwap',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfSwapsABI,
    functionName: 'counterOfSwap',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfSwapsABI,
    'counterOfSwap',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"getAllSwaps"`.
 */
export function useRegisterOfSwapsGetAllSwaps<
  TSelectData = ReadContractResult<typeof registerOfSwapsABI, 'getAllSwaps'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfSwapsABI,
      'getAllSwaps',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfSwapsABI,
    functionName: 'getAllSwaps',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfSwapsABI,
    'getAllSwaps',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"getDK"`.
 */
export function useRegisterOfSwapsGetDk<
  TSelectData = ReadContractResult<typeof registerOfSwapsABI, 'getDK'>,
>(
  config: Omit<
    UseContractReadConfig<typeof registerOfSwapsABI, 'getDK', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfSwapsABI,
    functionName: 'getDK',
    ...config,
  } as UseContractReadConfig<typeof registerOfSwapsABI, 'getDK', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"getOwner"`.
 */
export function useRegisterOfSwapsGetOwner<
  TSelectData = ReadContractResult<typeof registerOfSwapsABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof registerOfSwapsABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfSwapsABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfSwapsABI,
    'getOwner',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useRegisterOfSwapsGetRoleAdmin<
  TSelectData = ReadContractResult<typeof registerOfSwapsABI, 'getRoleAdmin'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfSwapsABI,
      'getRoleAdmin',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfSwapsABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfSwapsABI,
    'getRoleAdmin',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"getSNList"`.
 */
export function useRegisterOfSwapsGetSnList<
  TSelectData = ReadContractResult<typeof registerOfSwapsABI, 'getSNList'>,
>(
  config: Omit<
    UseContractReadConfig<typeof registerOfSwapsABI, 'getSNList', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfSwapsABI,
    functionName: 'getSNList',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfSwapsABI,
    'getSNList',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"getSwap"`.
 */
export function useRegisterOfSwapsGetSwap<
  TSelectData = ReadContractResult<typeof registerOfSwapsABI, 'getSwap'>,
>(
  config: Omit<
    UseContractReadConfig<typeof registerOfSwapsABI, 'getSwap', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfSwapsABI,
    functionName: 'getSwap',
    ...config,
  } as UseContractReadConfig<typeof registerOfSwapsABI, 'getSwap', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"hasRole"`.
 */
export function useRegisterOfSwapsHasRole<
  TSelectData = ReadContractResult<typeof registerOfSwapsABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof registerOfSwapsABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfSwapsABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof registerOfSwapsABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"isFinalized"`.
 */
export function useRegisterOfSwapsIsFinalized<
  TSelectData = ReadContractResult<typeof registerOfSwapsABI, 'isFinalized'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfSwapsABI,
      'isFinalized',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfSwapsABI,
    functionName: 'isFinalized',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfSwapsABI,
    'isFinalized',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"isSwapSN"`.
 */
export function useRegisterOfSwapsIsSwapSn<
  TSelectData = ReadContractResult<typeof registerOfSwapsABI, 'isSwapSN'>,
>(
  config: Omit<
    UseContractReadConfig<typeof registerOfSwapsABI, 'isSwapSN', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfSwapsABI,
    functionName: 'isSwapSN',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfSwapsABI,
    'isSwapSN',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"isSwapSeq"`.
 */
export function useRegisterOfSwapsIsSwapSeq<
  TSelectData = ReadContractResult<typeof registerOfSwapsABI, 'isSwapSeq'>,
>(
  config: Omit<
    UseContractReadConfig<typeof registerOfSwapsABI, 'isSwapSeq', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfSwapsABI,
    functionName: 'isSwapSeq',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfSwapsABI,
    'isSwapSeq',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__.
 */
export function useRegisterOfSwapsWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof registerOfSwapsABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof registerOfSwapsABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfSwapsABI, TFunctionName>({
    abi: registerOfSwapsABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useRegisterOfSwapsAbandonRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfSwapsABI,
          'abandonRole'
        >['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfSwapsABI,
        'abandonRole'
      > & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfSwapsABI, 'abandonRole'>({
    abi: registerOfSwapsABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"createSwap"`.
 */
export function useRegisterOfSwapsCreateSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfSwapsABI,
          'createSwap'
        >['abi'],
        'createSwap'
      > & { functionName?: 'createSwap' }
    : UseContractWriteConfig<TMode, typeof registerOfSwapsABI, 'createSwap'> & {
        abi?: never
        functionName?: 'createSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfSwapsABI, 'createSwap'>({
    abi: registerOfSwapsABI,
    functionName: 'createSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"crystalizeSwap"`.
 */
export function useRegisterOfSwapsCrystalizeSwap<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfSwapsABI,
          'crystalizeSwap'
        >['abi'],
        'crystalizeSwap'
      > & { functionName?: 'crystalizeSwap' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfSwapsABI,
        'crystalizeSwap'
      > & {
        abi?: never
        functionName?: 'crystalizeSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfSwapsABI, 'crystalizeSwap'>({
    abi: registerOfSwapsABI,
    functionName: 'crystalizeSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"execSwap"`.
 */
export function useRegisterOfSwapsExecSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfSwapsABI,
          'execSwap'
        >['abi'],
        'execSwap'
      > & { functionName?: 'execSwap' }
    : UseContractWriteConfig<TMode, typeof registerOfSwapsABI, 'execSwap'> & {
        abi?: never
        functionName?: 'execSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfSwapsABI, 'execSwap'>({
    abi: registerOfSwapsABI,
    functionName: 'execSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"grantRole"`.
 */
export function useRegisterOfSwapsGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfSwapsABI,
          'grantRole'
        >['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof registerOfSwapsABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfSwapsABI, 'grantRole'>({
    abi: registerOfSwapsABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"init"`.
 */
export function useRegisterOfSwapsInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof registerOfSwapsABI, 'init'>['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof registerOfSwapsABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfSwapsABI, 'init'>({
    abi: registerOfSwapsABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"issueSwap"`.
 */
export function useRegisterOfSwapsIssueSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfSwapsABI,
          'issueSwap'
        >['abi'],
        'issueSwap'
      > & { functionName?: 'issueSwap' }
    : UseContractWriteConfig<TMode, typeof registerOfSwapsABI, 'issueSwap'> & {
        abi?: never
        functionName?: 'issueSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfSwapsABI, 'issueSwap'>({
    abi: registerOfSwapsABI,
    functionName: 'issueSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"lockContents"`.
 */
export function useRegisterOfSwapsLockContents<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfSwapsABI,
          'lockContents'
        >['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfSwapsABI,
        'lockContents'
      > & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfSwapsABI, 'lockContents'>({
    abi: registerOfSwapsABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"lockSwap"`.
 */
export function useRegisterOfSwapsLockSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfSwapsABI,
          'lockSwap'
        >['abi'],
        'lockSwap'
      > & { functionName?: 'lockSwap' }
    : UseContractWriteConfig<TMode, typeof registerOfSwapsABI, 'lockSwap'> & {
        abi?: never
        functionName?: 'lockSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfSwapsABI, 'lockSwap'>({
    abi: registerOfSwapsABI,
    functionName: 'lockSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"regSwap"`.
 */
export function useRegisterOfSwapsRegSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof registerOfSwapsABI, 'regSwap'>['abi'],
        'regSwap'
      > & { functionName?: 'regSwap' }
    : UseContractWriteConfig<TMode, typeof registerOfSwapsABI, 'regSwap'> & {
        abi?: never
        functionName?: 'regSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfSwapsABI, 'regSwap'>({
    abi: registerOfSwapsABI,
    functionName: 'regSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"releaseSwap"`.
 */
export function useRegisterOfSwapsReleaseSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfSwapsABI,
          'releaseSwap'
        >['abi'],
        'releaseSwap'
      > & { functionName?: 'releaseSwap' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfSwapsABI,
        'releaseSwap'
      > & {
        abi?: never
        functionName?: 'releaseSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfSwapsABI, 'releaseSwap'>({
    abi: registerOfSwapsABI,
    functionName: 'releaseSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useRegisterOfSwapsRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfSwapsABI,
          'renounceRole'
        >['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfSwapsABI,
        'renounceRole'
      > & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfSwapsABI, 'renounceRole'>({
    abi: registerOfSwapsABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useRegisterOfSwapsRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfSwapsABI,
          'revokeRole'
        >['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof registerOfSwapsABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfSwapsABI, 'revokeRole'>({
    abi: registerOfSwapsABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"revokeSwap"`.
 */
export function useRegisterOfSwapsRevokeSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfSwapsABI,
          'revokeSwap'
        >['abi'],
        'revokeSwap'
      > & { functionName?: 'revokeSwap' }
    : UseContractWriteConfig<TMode, typeof registerOfSwapsABI, 'revokeSwap'> & {
        abi?: never
        functionName?: 'revokeSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfSwapsABI, 'revokeSwap'>({
    abi: registerOfSwapsABI,
    functionName: 'revokeSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useRegisterOfSwapsSetDirectKeeper<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfSwapsABI,
          'setDirectKeeper'
        >['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfSwapsABI,
        'setDirectKeeper'
      > & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfSwapsABI, 'setDirectKeeper'>({
    abi: registerOfSwapsABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"setOwner"`.
 */
export function useRegisterOfSwapsSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfSwapsABI,
          'setOwner'
        >['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof registerOfSwapsABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfSwapsABI, 'setOwner'>({
    abi: registerOfSwapsABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useRegisterOfSwapsSetRoleAdmin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfSwapsABI,
          'setRoleAdmin'
        >['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfSwapsABI,
        'setRoleAdmin'
      > & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfSwapsABI, 'setRoleAdmin'>({
    abi: registerOfSwapsABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function useRegisterOfSwapsTakeBackKeys<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfSwapsABI,
          'takeBackKeys'
        >['abi'],
        'takeBackKeys'
      > & { functionName?: 'takeBackKeys' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfSwapsABI,
        'takeBackKeys'
      > & {
        abi?: never
        functionName?: 'takeBackKeys'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfSwapsABI, 'takeBackKeys'>({
    abi: registerOfSwapsABI,
    functionName: 'takeBackKeys',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"transferSwap"`.
 */
export function useRegisterOfSwapsTransferSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfSwapsABI,
          'transferSwap'
        >['abi'],
        'transferSwap'
      > & { functionName?: 'transferSwap' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfSwapsABI,
        'transferSwap'
      > & {
        abi?: never
        functionName?: 'transferSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfSwapsABI, 'transferSwap'>({
    abi: registerOfSwapsABI,
    functionName: 'transferSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__.
 */
export function usePrepareRegisterOfSwapsWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfSwapsABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfSwapsABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfSwapsABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareRegisterOfSwapsAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfSwapsABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'abandonRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"createSwap"`.
 */
export function usePrepareRegisterOfSwapsCreateSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'createSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfSwapsABI,
    functionName: 'createSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'createSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"crystalizeSwap"`.
 */
export function usePrepareRegisterOfSwapsCrystalizeSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'crystalizeSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfSwapsABI,
    functionName: 'crystalizeSwap',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfSwapsABI,
    'crystalizeSwap'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"execSwap"`.
 */
export function usePrepareRegisterOfSwapsExecSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'execSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfSwapsABI,
    functionName: 'execSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'execSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareRegisterOfSwapsGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfSwapsABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareRegisterOfSwapsInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfSwapsABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"issueSwap"`.
 */
export function usePrepareRegisterOfSwapsIssueSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'issueSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfSwapsABI,
    functionName: 'issueSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'issueSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareRegisterOfSwapsLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'lockContents'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfSwapsABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'lockContents'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"lockSwap"`.
 */
export function usePrepareRegisterOfSwapsLockSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'lockSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfSwapsABI,
    functionName: 'lockSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'lockSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"regSwap"`.
 */
export function usePrepareRegisterOfSwapsRegSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'regSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfSwapsABI,
    functionName: 'regSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'regSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"releaseSwap"`.
 */
export function usePrepareRegisterOfSwapsReleaseSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'releaseSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfSwapsABI,
    functionName: 'releaseSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'releaseSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareRegisterOfSwapsRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfSwapsABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareRegisterOfSwapsRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfSwapsABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"revokeSwap"`.
 */
export function usePrepareRegisterOfSwapsRevokeSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'revokeSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfSwapsABI,
    functionName: 'revokeSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'revokeSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareRegisterOfSwapsSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'setDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfSwapsABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfSwapsABI,
    'setDirectKeeper'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareRegisterOfSwapsSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfSwapsABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareRegisterOfSwapsSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'setRoleAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfSwapsABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'setRoleAdmin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function usePrepareRegisterOfSwapsTakeBackKeys(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'takeBackKeys'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfSwapsABI,
    functionName: 'takeBackKeys',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'takeBackKeys'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"transferSwap"`.
 */
export function usePrepareRegisterOfSwapsTransferSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'transferSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfSwapsABI,
    functionName: 'transferSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'transferSwap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfSwapsABI}__.
 */
export function useRegisterOfSwapsEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof registerOfSwapsABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfSwapsABI,
    ...config,
  } as UseContractEventConfig<typeof registerOfSwapsABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfSwapsABI}__ and `eventName` set to `"CreateSwap"`.
 */
export function useRegisterOfSwapsCreateSwapEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfSwapsABI, 'CreateSwap'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfSwapsABI,
    eventName: 'CreateSwap',
    ...config,
  } as UseContractEventConfig<typeof registerOfSwapsABI, 'CreateSwap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfSwapsABI}__ and `eventName` set to `"CrystalizeSwap"`.
 */
export function useRegisterOfSwapsCrystalizeSwapEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfSwapsABI, 'CrystalizeSwap'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfSwapsABI,
    eventName: 'CrystalizeSwap',
    ...config,
  } as UseContractEventConfig<typeof registerOfSwapsABI, 'CrystalizeSwap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfSwapsABI}__ and `eventName` set to `"ExecSwap"`.
 */
export function useRegisterOfSwapsExecSwapEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfSwapsABI, 'ExecSwap'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfSwapsABI,
    eventName: 'ExecSwap',
    ...config,
  } as UseContractEventConfig<typeof registerOfSwapsABI, 'ExecSwap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfSwapsABI}__ and `eventName` set to `"Init"`.
 */
export function useRegisterOfSwapsInitEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfSwapsABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfSwapsABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof registerOfSwapsABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfSwapsABI}__ and `eventName` set to `"LockContents"`.
 */
export function useRegisterOfSwapsLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfSwapsABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfSwapsABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof registerOfSwapsABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfSwapsABI}__ and `eventName` set to `"LockSwap"`.
 */
export function useRegisterOfSwapsLockSwapEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfSwapsABI, 'LockSwap'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfSwapsABI,
    eventName: 'LockSwap',
    ...config,
  } as UseContractEventConfig<typeof registerOfSwapsABI, 'LockSwap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfSwapsABI}__ and `eventName` set to `"ReleaseSwap"`.
 */
export function useRegisterOfSwapsReleaseSwapEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfSwapsABI, 'ReleaseSwap'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfSwapsABI,
    eventName: 'ReleaseSwap',
    ...config,
  } as UseContractEventConfig<typeof registerOfSwapsABI, 'ReleaseSwap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfSwapsABI}__ and `eventName` set to `"RevokeSwap"`.
 */
export function useRegisterOfSwapsRevokeSwapEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfSwapsABI, 'RevokeSwap'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfSwapsABI,
    eventName: 'RevokeSwap',
    ...config,
  } as UseContractEventConfig<typeof registerOfSwapsABI, 'RevokeSwap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfSwapsABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useRegisterOfSwapsSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfSwapsABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfSwapsABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof registerOfSwapsABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfSwapsABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useRegisterOfSwapsSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfSwapsABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfSwapsABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof registerOfSwapsABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfSwapsABI}__ and `eventName` set to `"SetRoleAdmin"`.
 */
export function useRegisterOfSwapsSetRoleAdminEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfSwapsABI, 'SetRoleAdmin'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfSwapsABI,
    eventName: 'SetRoleAdmin',
    ...config,
  } as UseContractEventConfig<typeof registerOfSwapsABI, 'SetRoleAdmin'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link accessControlABI}__.
 */
export function useAccessControl(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: accessControlABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__.
 */
export function useAccessControlRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof accessControlABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof accessControlABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlABI,
    ...config,
  } as UseContractReadConfig<
    typeof accessControlABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"getDK"`.
 */
export function useAccessControlGetDk<
  TSelectData = ReadContractResult<typeof accessControlABI, 'getDK'>,
>(
  config: Omit<
    UseContractReadConfig<typeof accessControlABI, 'getDK', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlABI,
    functionName: 'getDK',
    ...config,
  } as UseContractReadConfig<typeof accessControlABI, 'getDK', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"getOwner"`.
 */
export function useAccessControlGetOwner<
  TSelectData = ReadContractResult<typeof accessControlABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof accessControlABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<typeof accessControlABI, 'getOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useAccessControlGetRoleAdmin<
  TSelectData = ReadContractResult<typeof accessControlABI, 'getRoleAdmin'>,
>(
  config: Omit<
    UseContractReadConfig<typeof accessControlABI, 'getRoleAdmin', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<
    typeof accessControlABI,
    'getRoleAdmin',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"hasRole"`.
 */
export function useAccessControlHasRole<
  TSelectData = ReadContractResult<typeof accessControlABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof accessControlABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof accessControlABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"isFinalized"`.
 */
export function useAccessControlIsFinalized<
  TSelectData = ReadContractResult<typeof accessControlABI, 'isFinalized'>,
>(
  config: Omit<
    UseContractReadConfig<typeof accessControlABI, 'isFinalized', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlABI,
    functionName: 'isFinalized',
    ...config,
  } as UseContractReadConfig<
    typeof accessControlABI,
    'isFinalized',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__.
 */
export function useAccessControlWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof accessControlABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof accessControlABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof accessControlABI, TFunctionName>({
    abi: accessControlABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useAccessControlAbandonRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof accessControlABI,
          'abandonRole'
        >['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<TMode, typeof accessControlABI, 'abandonRole'> & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof accessControlABI, 'abandonRole'>({
    abi: accessControlABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"grantRole"`.
 */
export function useAccessControlGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof accessControlABI, 'grantRole'>['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof accessControlABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof accessControlABI, 'grantRole'>({
    abi: accessControlABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"init"`.
 */
export function useAccessControlInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof accessControlABI, 'init'>['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof accessControlABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof accessControlABI, 'init'>({
    abi: accessControlABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"lockContents"`.
 */
export function useAccessControlLockContents<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof accessControlABI,
          'lockContents'
        >['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<TMode, typeof accessControlABI, 'lockContents'> & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof accessControlABI, 'lockContents'>({
    abi: accessControlABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useAccessControlRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof accessControlABI,
          'renounceRole'
        >['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<TMode, typeof accessControlABI, 'renounceRole'> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof accessControlABI, 'renounceRole'>({
    abi: accessControlABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useAccessControlRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof accessControlABI,
          'revokeRole'
        >['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof accessControlABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof accessControlABI, 'revokeRole'>({
    abi: accessControlABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useAccessControlSetDirectKeeper<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof accessControlABI,
          'setDirectKeeper'
        >['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof accessControlABI,
        'setDirectKeeper'
      > & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof accessControlABI, 'setDirectKeeper'>({
    abi: accessControlABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"setOwner"`.
 */
export function useAccessControlSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof accessControlABI, 'setOwner'>['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof accessControlABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof accessControlABI, 'setOwner'>({
    abi: accessControlABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useAccessControlSetRoleAdmin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof accessControlABI,
          'setRoleAdmin'
        >['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<TMode, typeof accessControlABI, 'setRoleAdmin'> & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof accessControlABI, 'setRoleAdmin'>({
    abi: accessControlABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function useAccessControlTakeBackKeys<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof accessControlABI,
          'takeBackKeys'
        >['abi'],
        'takeBackKeys'
      > & { functionName?: 'takeBackKeys' }
    : UseContractWriteConfig<TMode, typeof accessControlABI, 'takeBackKeys'> & {
        abi?: never
        functionName?: 'takeBackKeys'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof accessControlABI, 'takeBackKeys'>({
    abi: accessControlABI,
    functionName: 'takeBackKeys',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__.
 */
export function usePrepareAccessControlWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareAccessControlAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlABI, 'abandonRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareAccessControlGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareAccessControlInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareAccessControlLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlABI, 'lockContents'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlABI, 'lockContents'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareAccessControlRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareAccessControlRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareAccessControlSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlABI, 'setDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof accessControlABI,
    'setDirectKeeper'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareAccessControlSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareAccessControlSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlABI, 'setRoleAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlABI, 'setRoleAdmin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function usePrepareAccessControlTakeBackKeys(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlABI, 'takeBackKeys'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    functionName: 'takeBackKeys',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlABI, 'takeBackKeys'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlABI}__.
 */
export function useAccessControlEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof accessControlABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlABI,
    ...config,
  } as UseContractEventConfig<typeof accessControlABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlABI}__ and `eventName` set to `"Init"`.
 */
export function useAccessControlInitEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof accessControlABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlABI}__ and `eventName` set to `"LockContents"`.
 */
export function useAccessControlLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof accessControlABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useAccessControlSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof accessControlABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useAccessControlSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof accessControlABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlABI}__ and `eventName` set to `"SetRoleAdmin"`.
 */
export function useAccessControlSetRoleAdminEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlABI, 'SetRoleAdmin'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlABI,
    eventName: 'SetRoleAdmin',
    ...config,
  } as UseContractEventConfig<typeof accessControlABI, 'SetRoleAdmin'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function useIAccessControl(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iAccessControlABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function useIAccessControlRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iAccessControlABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAccessControlABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iAccessControlABI,
    ...config,
  } as UseContractReadConfig<
    typeof iAccessControlABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"getDK"`.
 */
export function useIAccessControlGetDk<
  TSelectData = ReadContractResult<typeof iAccessControlABI, 'getDK'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAccessControlABI, 'getDK', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAccessControlABI,
    functionName: 'getDK',
    ...config,
  } as UseContractReadConfig<typeof iAccessControlABI, 'getDK', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"getOwner"`.
 */
export function useIAccessControlGetOwner<
  TSelectData = ReadContractResult<typeof iAccessControlABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAccessControlABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAccessControlABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<typeof iAccessControlABI, 'getOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useIAccessControlGetRoleAdmin<
  TSelectData = ReadContractResult<typeof iAccessControlABI, 'getRoleAdmin'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iAccessControlABI,
      'getRoleAdmin',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAccessControlABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<
    typeof iAccessControlABI,
    'getRoleAdmin',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"hasRole"`.
 */
export function useIAccessControlHasRole<
  TSelectData = ReadContractResult<typeof iAccessControlABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAccessControlABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAccessControlABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof iAccessControlABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"isFinalized"`.
 */
export function useIAccessControlIsFinalized<
  TSelectData = ReadContractResult<typeof iAccessControlABI, 'isFinalized'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAccessControlABI, 'isFinalized', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAccessControlABI,
    functionName: 'isFinalized',
    ...config,
  } as UseContractReadConfig<
    typeof iAccessControlABI,
    'isFinalized',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function useIAccessControlWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iAccessControlABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iAccessControlABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAccessControlABI, TFunctionName>({
    abi: iAccessControlABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useIAccessControlAbandonRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iAccessControlABI,
          'abandonRole'
        >['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<TMode, typeof iAccessControlABI, 'abandonRole'> & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAccessControlABI, 'abandonRole'>({
    abi: iAccessControlABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"grantRole"`.
 */
export function useIAccessControlGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iAccessControlABI,
          'grantRole'
        >['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof iAccessControlABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAccessControlABI, 'grantRole'>({
    abi: iAccessControlABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"init"`.
 */
export function useIAccessControlInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iAccessControlABI, 'init'>['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof iAccessControlABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAccessControlABI, 'init'>({
    abi: iAccessControlABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"lockContents"`.
 */
export function useIAccessControlLockContents<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iAccessControlABI,
          'lockContents'
        >['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<
        TMode,
        typeof iAccessControlABI,
        'lockContents'
      > & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAccessControlABI, 'lockContents'>({
    abi: iAccessControlABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useIAccessControlRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iAccessControlABI,
          'renounceRole'
        >['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<
        TMode,
        typeof iAccessControlABI,
        'renounceRole'
      > & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAccessControlABI, 'renounceRole'>({
    abi: iAccessControlABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useIAccessControlRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iAccessControlABI,
          'revokeRole'
        >['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof iAccessControlABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAccessControlABI, 'revokeRole'>({
    abi: iAccessControlABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useIAccessControlSetDirectKeeper<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iAccessControlABI,
          'setDirectKeeper'
        >['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof iAccessControlABI,
        'setDirectKeeper'
      > & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAccessControlABI, 'setDirectKeeper'>({
    abi: iAccessControlABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"setOwner"`.
 */
export function useIAccessControlSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iAccessControlABI, 'setOwner'>['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof iAccessControlABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAccessControlABI, 'setOwner'>({
    abi: iAccessControlABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useIAccessControlSetRoleAdmin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iAccessControlABI,
          'setRoleAdmin'
        >['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<
        TMode,
        typeof iAccessControlABI,
        'setRoleAdmin'
      > & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAccessControlABI, 'setRoleAdmin'>({
    abi: iAccessControlABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function useIAccessControlTakeBackKeys<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iAccessControlABI,
          'takeBackKeys'
        >['abi'],
        'takeBackKeys'
      > & { functionName?: 'takeBackKeys' }
    : UseContractWriteConfig<
        TMode,
        typeof iAccessControlABI,
        'takeBackKeys'
      > & {
        abi?: never
        functionName?: 'takeBackKeys'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAccessControlABI, 'takeBackKeys'>({
    abi: iAccessControlABI,
    functionName: 'takeBackKeys',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function usePrepareIAccessControlWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareIAccessControlAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlABI, 'abandonRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareIAccessControlGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareIAccessControlInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareIAccessControlLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlABI, 'lockContents'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlABI, 'lockContents'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareIAccessControlRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareIAccessControlRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareIAccessControlSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlABI, 'setDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iAccessControlABI,
    'setDirectKeeper'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareIAccessControlSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareIAccessControlSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlABI, 'setRoleAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlABI, 'setRoleAdmin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function usePrepareIAccessControlTakeBackKeys(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlABI, 'takeBackKeys'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    functionName: 'takeBackKeys',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlABI, 'takeBackKeys'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function useIAccessControlEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlABI,
    ...config,
  } as UseContractEventConfig<typeof iAccessControlABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlABI}__ and `eventName` set to `"Init"`.
 */
export function useIAccessControlInitEvent(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof iAccessControlABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlABI}__ and `eventName` set to `"LockContents"`.
 */
export function useIAccessControlLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof iAccessControlABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useIAccessControlSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof iAccessControlABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useIAccessControlSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof iAccessControlABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlABI}__ and `eventName` set to `"SetRoleAdmin"`.
 */
export function useIAccessControlSetRoleAdminEvent(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlABI, 'SetRoleAdmin'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlABI,
    eventName: 'SetRoleAdmin',
    ...config,
  } as UseContractEventConfig<typeof iAccessControlABI, 'SetRoleAdmin'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link filesFolderABI}__.
 */
export function useFilesFolder(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: filesFolderABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link filesFolderABI}__.
 */
export function useFilesFolderRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof filesFolderABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof filesFolderABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: filesFolderABI,
    ...config,
  } as UseContractReadConfig<typeof filesFolderABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"closingDeadline"`.
 */
export function useFilesFolderClosingDeadline<
  TSelectData = ReadContractResult<typeof filesFolderABI, 'closingDeadline'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof filesFolderABI,
      'closingDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: filesFolderABI,
    functionName: 'closingDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof filesFolderABI,
    'closingDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"dtExecDeadline"`.
 */
export function useFilesFolderDtExecDeadline<
  TSelectData = ReadContractResult<typeof filesFolderABI, 'dtExecDeadline'>,
>(
  config: Omit<
    UseContractReadConfig<typeof filesFolderABI, 'dtExecDeadline', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: filesFolderABI,
    functionName: 'dtExecDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof filesFolderABI,
    'dtExecDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"frExecDeadline"`.
 */
export function useFilesFolderFrExecDeadline<
  TSelectData = ReadContractResult<typeof filesFolderABI, 'frExecDeadline'>,
>(
  config: Omit<
    UseContractReadConfig<typeof filesFolderABI, 'frExecDeadline', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: filesFolderABI,
    functionName: 'frExecDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof filesFolderABI,
    'frExecDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"getDK"`.
 */
export function useFilesFolderGetDk<
  TSelectData = ReadContractResult<typeof filesFolderABI, 'getDK'>,
>(
  config: Omit<
    UseContractReadConfig<typeof filesFolderABI, 'getDK', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: filesFolderABI,
    functionName: 'getDK',
    ...config,
  } as UseContractReadConfig<typeof filesFolderABI, 'getDK', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"getFile"`.
 */
export function useFilesFolderGetFile<
  TSelectData = ReadContractResult<typeof filesFolderABI, 'getFile'>,
>(
  config: Omit<
    UseContractReadConfig<typeof filesFolderABI, 'getFile', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: filesFolderABI,
    functionName: 'getFile',
    ...config,
  } as UseContractReadConfig<typeof filesFolderABI, 'getFile', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"getFilesList"`.
 */
export function useFilesFolderGetFilesList<
  TSelectData = ReadContractResult<typeof filesFolderABI, 'getFilesList'>,
>(
  config: Omit<
    UseContractReadConfig<typeof filesFolderABI, 'getFilesList', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: filesFolderABI,
    functionName: 'getFilesList',
    ...config,
  } as UseContractReadConfig<
    typeof filesFolderABI,
    'getFilesList',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"getHeadOfFile"`.
 */
export function useFilesFolderGetHeadOfFile<
  TSelectData = ReadContractResult<typeof filesFolderABI, 'getHeadOfFile'>,
>(
  config: Omit<
    UseContractReadConfig<typeof filesFolderABI, 'getHeadOfFile', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: filesFolderABI,
    functionName: 'getHeadOfFile',
    ...config,
  } as UseContractReadConfig<
    typeof filesFolderABI,
    'getHeadOfFile',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"getOwner"`.
 */
export function useFilesFolderGetOwner<
  TSelectData = ReadContractResult<typeof filesFolderABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof filesFolderABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: filesFolderABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<typeof filesFolderABI, 'getOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useFilesFolderGetRoleAdmin<
  TSelectData = ReadContractResult<typeof filesFolderABI, 'getRoleAdmin'>,
>(
  config: Omit<
    UseContractReadConfig<typeof filesFolderABI, 'getRoleAdmin', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: filesFolderABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<
    typeof filesFolderABI,
    'getRoleAdmin',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"hasRole"`.
 */
export function useFilesFolderHasRole<
  TSelectData = ReadContractResult<typeof filesFolderABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof filesFolderABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: filesFolderABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof filesFolderABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"isFinalized"`.
 */
export function useFilesFolderIsFinalized<
  TSelectData = ReadContractResult<typeof filesFolderABI, 'isFinalized'>,
>(
  config: Omit<
    UseContractReadConfig<typeof filesFolderABI, 'isFinalized', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: filesFolderABI,
    functionName: 'isFinalized',
    ...config,
  } as UseContractReadConfig<typeof filesFolderABI, 'isFinalized', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"isRegistered"`.
 */
export function useFilesFolderIsRegistered<
  TSelectData = ReadContractResult<typeof filesFolderABI, 'isRegistered'>,
>(
  config: Omit<
    UseContractReadConfig<typeof filesFolderABI, 'isRegistered', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: filesFolderABI,
    functionName: 'isRegistered',
    ...config,
  } as UseContractReadConfig<
    typeof filesFolderABI,
    'isRegistered',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"qtyOfFiles"`.
 */
export function useFilesFolderQtyOfFiles<
  TSelectData = ReadContractResult<typeof filesFolderABI, 'qtyOfFiles'>,
>(
  config: Omit<
    UseContractReadConfig<typeof filesFolderABI, 'qtyOfFiles', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: filesFolderABI,
    functionName: 'qtyOfFiles',
    ...config,
  } as UseContractReadConfig<typeof filesFolderABI, 'qtyOfFiles', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"signingDeadline"`.
 */
export function useFilesFolderSigningDeadline<
  TSelectData = ReadContractResult<typeof filesFolderABI, 'signingDeadline'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof filesFolderABI,
      'signingDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: filesFolderABI,
    functionName: 'signingDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof filesFolderABI,
    'signingDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"terminateStartpoint"`.
 */
export function useFilesFolderTerminateStartpoint<
  TSelectData = ReadContractResult<
    typeof filesFolderABI,
    'terminateStartpoint'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof filesFolderABI,
      'terminateStartpoint',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: filesFolderABI,
    functionName: 'terminateStartpoint',
    ...config,
  } as UseContractReadConfig<
    typeof filesFolderABI,
    'terminateStartpoint',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"votingDeadline"`.
 */
export function useFilesFolderVotingDeadline<
  TSelectData = ReadContractResult<typeof filesFolderABI, 'votingDeadline'>,
>(
  config: Omit<
    UseContractReadConfig<typeof filesFolderABI, 'votingDeadline', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: filesFolderABI,
    functionName: 'votingDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof filesFolderABI,
    'votingDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link filesFolderABI}__.
 */
export function useFilesFolderWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof filesFolderABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof filesFolderABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof filesFolderABI, TFunctionName>({
    abi: filesFolderABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useFilesFolderAbandonRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof filesFolderABI, 'abandonRole'>['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<TMode, typeof filesFolderABI, 'abandonRole'> & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof filesFolderABI, 'abandonRole'>({
    abi: filesFolderABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"circulateFile"`.
 */
export function useFilesFolderCirculateFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof filesFolderABI,
          'circulateFile'
        >['abi'],
        'circulateFile'
      > & { functionName?: 'circulateFile' }
    : UseContractWriteConfig<TMode, typeof filesFolderABI, 'circulateFile'> & {
        abi?: never
        functionName?: 'circulateFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof filesFolderABI, 'circulateFile'>({
    abi: filesFolderABI,
    functionName: 'circulateFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"execFile"`.
 */
export function useFilesFolderExecFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof filesFolderABI, 'execFile'>['abi'],
        'execFile'
      > & { functionName?: 'execFile' }
    : UseContractWriteConfig<TMode, typeof filesFolderABI, 'execFile'> & {
        abi?: never
        functionName?: 'execFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof filesFolderABI, 'execFile'>({
    abi: filesFolderABI,
    functionName: 'execFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"grantRole"`.
 */
export function useFilesFolderGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof filesFolderABI, 'grantRole'>['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof filesFolderABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof filesFolderABI, 'grantRole'>({
    abi: filesFolderABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"init"`.
 */
export function useFilesFolderInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof filesFolderABI, 'init'>['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof filesFolderABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof filesFolderABI, 'init'>({
    abi: filesFolderABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"lockContents"`.
 */
export function useFilesFolderLockContents<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof filesFolderABI,
          'lockContents'
        >['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<TMode, typeof filesFolderABI, 'lockContents'> & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof filesFolderABI, 'lockContents'>({
    abi: filesFolderABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"proposeFile"`.
 */
export function useFilesFolderProposeFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof filesFolderABI, 'proposeFile'>['abi'],
        'proposeFile'
      > & { functionName?: 'proposeFile' }
    : UseContractWriteConfig<TMode, typeof filesFolderABI, 'proposeFile'> & {
        abi?: never
        functionName?: 'proposeFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof filesFolderABI, 'proposeFile'>({
    abi: filesFolderABI,
    functionName: 'proposeFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"regFile"`.
 */
export function useFilesFolderRegFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof filesFolderABI, 'regFile'>['abi'],
        'regFile'
      > & { functionName?: 'regFile' }
    : UseContractWriteConfig<TMode, typeof filesFolderABI, 'regFile'> & {
        abi?: never
        functionName?: 'regFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof filesFolderABI, 'regFile'>({
    abi: filesFolderABI,
    functionName: 'regFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useFilesFolderRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof filesFolderABI,
          'renounceRole'
        >['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<TMode, typeof filesFolderABI, 'renounceRole'> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof filesFolderABI, 'renounceRole'>({
    abi: filesFolderABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useFilesFolderRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof filesFolderABI, 'revokeRole'>['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof filesFolderABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof filesFolderABI, 'revokeRole'>({
    abi: filesFolderABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useFilesFolderSetDirectKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof filesFolderABI,
          'setDirectKeeper'
        >['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof filesFolderABI,
        'setDirectKeeper'
      > & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof filesFolderABI, 'setDirectKeeper'>({
    abi: filesFolderABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"setOwner"`.
 */
export function useFilesFolderSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof filesFolderABI, 'setOwner'>['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof filesFolderABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof filesFolderABI, 'setOwner'>({
    abi: filesFolderABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useFilesFolderSetRoleAdmin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof filesFolderABI,
          'setRoleAdmin'
        >['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<TMode, typeof filesFolderABI, 'setRoleAdmin'> & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof filesFolderABI, 'setRoleAdmin'>({
    abi: filesFolderABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"setStateOfFile"`.
 */
export function useFilesFolderSetStateOfFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof filesFolderABI,
          'setStateOfFile'
        >['abi'],
        'setStateOfFile'
      > & { functionName?: 'setStateOfFile' }
    : UseContractWriteConfig<TMode, typeof filesFolderABI, 'setStateOfFile'> & {
        abi?: never
        functionName?: 'setStateOfFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof filesFolderABI, 'setStateOfFile'>({
    abi: filesFolderABI,
    functionName: 'setStateOfFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function useFilesFolderTakeBackKeys<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof filesFolderABI,
          'takeBackKeys'
        >['abi'],
        'takeBackKeys'
      > & { functionName?: 'takeBackKeys' }
    : UseContractWriteConfig<TMode, typeof filesFolderABI, 'takeBackKeys'> & {
        abi?: never
        functionName?: 'takeBackKeys'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof filesFolderABI, 'takeBackKeys'>({
    abi: filesFolderABI,
    functionName: 'takeBackKeys',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"terminateFile"`.
 */
export function useFilesFolderTerminateFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof filesFolderABI,
          'terminateFile'
        >['abi'],
        'terminateFile'
      > & { functionName?: 'terminateFile' }
    : UseContractWriteConfig<TMode, typeof filesFolderABI, 'terminateFile'> & {
        abi?: never
        functionName?: 'terminateFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof filesFolderABI, 'terminateFile'>({
    abi: filesFolderABI,
    functionName: 'terminateFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"voteCountingForFile"`.
 */
export function useFilesFolderVoteCountingForFile<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof filesFolderABI,
          'voteCountingForFile'
        >['abi'],
        'voteCountingForFile'
      > & { functionName?: 'voteCountingForFile' }
    : UseContractWriteConfig<
        TMode,
        typeof filesFolderABI,
        'voteCountingForFile'
      > & {
        abi?: never
        functionName?: 'voteCountingForFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof filesFolderABI, 'voteCountingForFile'>({
    abi: filesFolderABI,
    functionName: 'voteCountingForFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link filesFolderABI}__.
 */
export function usePrepareFilesFolderWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof filesFolderABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: filesFolderABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof filesFolderABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareFilesFolderAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof filesFolderABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: filesFolderABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof filesFolderABI, 'abandonRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"circulateFile"`.
 */
export function usePrepareFilesFolderCirculateFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof filesFolderABI, 'circulateFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: filesFolderABI,
    functionName: 'circulateFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof filesFolderABI, 'circulateFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"execFile"`.
 */
export function usePrepareFilesFolderExecFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof filesFolderABI, 'execFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: filesFolderABI,
    functionName: 'execFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof filesFolderABI, 'execFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareFilesFolderGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof filesFolderABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: filesFolderABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof filesFolderABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareFilesFolderInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof filesFolderABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: filesFolderABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof filesFolderABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareFilesFolderLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<typeof filesFolderABI, 'lockContents'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: filesFolderABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<typeof filesFolderABI, 'lockContents'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"proposeFile"`.
 */
export function usePrepareFilesFolderProposeFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof filesFolderABI, 'proposeFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: filesFolderABI,
    functionName: 'proposeFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof filesFolderABI, 'proposeFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"regFile"`.
 */
export function usePrepareFilesFolderRegFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof filesFolderABI, 'regFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: filesFolderABI,
    functionName: 'regFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof filesFolderABI, 'regFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareFilesFolderRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof filesFolderABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: filesFolderABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof filesFolderABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareFilesFolderRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof filesFolderABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: filesFolderABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof filesFolderABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareFilesFolderSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof filesFolderABI, 'setDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: filesFolderABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof filesFolderABI, 'setDirectKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareFilesFolderSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof filesFolderABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: filesFolderABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof filesFolderABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareFilesFolderSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof filesFolderABI, 'setRoleAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: filesFolderABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof filesFolderABI, 'setRoleAdmin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"setStateOfFile"`.
 */
export function usePrepareFilesFolderSetStateOfFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof filesFolderABI, 'setStateOfFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: filesFolderABI,
    functionName: 'setStateOfFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof filesFolderABI, 'setStateOfFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function usePrepareFilesFolderTakeBackKeys(
  config: Omit<
    UsePrepareContractWriteConfig<typeof filesFolderABI, 'takeBackKeys'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: filesFolderABI,
    functionName: 'takeBackKeys',
    ...config,
  } as UsePrepareContractWriteConfig<typeof filesFolderABI, 'takeBackKeys'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"terminateFile"`.
 */
export function usePrepareFilesFolderTerminateFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof filesFolderABI, 'terminateFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: filesFolderABI,
    functionName: 'terminateFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof filesFolderABI, 'terminateFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"voteCountingForFile"`.
 */
export function usePrepareFilesFolderVoteCountingForFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof filesFolderABI, 'voteCountingForFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: filesFolderABI,
    functionName: 'voteCountingForFile',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof filesFolderABI,
    'voteCountingForFile'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link filesFolderABI}__.
 */
export function useFilesFolderEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof filesFolderABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: filesFolderABI,
    ...config,
  } as UseContractEventConfig<typeof filesFolderABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link filesFolderABI}__ and `eventName` set to `"Init"`.
 */
export function useFilesFolderInitEvent(
  config: Omit<
    UseContractEventConfig<typeof filesFolderABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: filesFolderABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof filesFolderABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link filesFolderABI}__ and `eventName` set to `"LockContents"`.
 */
export function useFilesFolderLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof filesFolderABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: filesFolderABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof filesFolderABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link filesFolderABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useFilesFolderSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof filesFolderABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: filesFolderABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof filesFolderABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link filesFolderABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useFilesFolderSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof filesFolderABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: filesFolderABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof filesFolderABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link filesFolderABI}__ and `eventName` set to `"SetRoleAdmin"`.
 */
export function useFilesFolderSetRoleAdminEvent(
  config: Omit<
    UseContractEventConfig<typeof filesFolderABI, 'SetRoleAdmin'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: filesFolderABI,
    eventName: 'SetRoleAdmin',
    ...config,
  } as UseContractEventConfig<typeof filesFolderABI, 'SetRoleAdmin'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link filesFolderABI}__ and `eventName` set to `"UpdateStateOfFile"`.
 */
export function useFilesFolderUpdateStateOfFileEvent(
  config: Omit<
    UseContractEventConfig<typeof filesFolderABI, 'UpdateStateOfFile'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: filesFolderABI,
    eventName: 'UpdateStateOfFile',
    ...config,
  } as UseContractEventConfig<typeof filesFolderABI, 'UpdateStateOfFile'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iFilesFolderABI}__.
 */
export function useIFilesFolder(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iFilesFolderABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iFilesFolderABI}__.
 */
export function useIFilesFolderRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iFilesFolderABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iFilesFolderABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iFilesFolderABI,
    ...config,
  } as UseContractReadConfig<
    typeof iFilesFolderABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iFilesFolderABI}__ and `functionName` set to `"closingDeadline"`.
 */
export function useIFilesFolderClosingDeadline<
  TSelectData = ReadContractResult<typeof iFilesFolderABI, 'closingDeadline'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iFilesFolderABI,
      'closingDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iFilesFolderABI,
    functionName: 'closingDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof iFilesFolderABI,
    'closingDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iFilesFolderABI}__ and `functionName` set to `"dtExecDeadline"`.
 */
export function useIFilesFolderDtExecDeadline<
  TSelectData = ReadContractResult<typeof iFilesFolderABI, 'dtExecDeadline'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iFilesFolderABI,
      'dtExecDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iFilesFolderABI,
    functionName: 'dtExecDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof iFilesFolderABI,
    'dtExecDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iFilesFolderABI}__ and `functionName` set to `"frExecDeadline"`.
 */
export function useIFilesFolderFrExecDeadline<
  TSelectData = ReadContractResult<typeof iFilesFolderABI, 'frExecDeadline'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iFilesFolderABI,
      'frExecDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iFilesFolderABI,
    functionName: 'frExecDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof iFilesFolderABI,
    'frExecDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iFilesFolderABI}__ and `functionName` set to `"getFile"`.
 */
export function useIFilesFolderGetFile<
  TSelectData = ReadContractResult<typeof iFilesFolderABI, 'getFile'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iFilesFolderABI, 'getFile', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iFilesFolderABI,
    functionName: 'getFile',
    ...config,
  } as UseContractReadConfig<typeof iFilesFolderABI, 'getFile', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iFilesFolderABI}__ and `functionName` set to `"getFilesList"`.
 */
export function useIFilesFolderGetFilesList<
  TSelectData = ReadContractResult<typeof iFilesFolderABI, 'getFilesList'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iFilesFolderABI, 'getFilesList', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iFilesFolderABI,
    functionName: 'getFilesList',
    ...config,
  } as UseContractReadConfig<
    typeof iFilesFolderABI,
    'getFilesList',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iFilesFolderABI}__ and `functionName` set to `"getHeadOfFile"`.
 */
export function useIFilesFolderGetHeadOfFile<
  TSelectData = ReadContractResult<typeof iFilesFolderABI, 'getHeadOfFile'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iFilesFolderABI, 'getHeadOfFile', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iFilesFolderABI,
    functionName: 'getHeadOfFile',
    ...config,
  } as UseContractReadConfig<
    typeof iFilesFolderABI,
    'getHeadOfFile',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iFilesFolderABI}__ and `functionName` set to `"isRegistered"`.
 */
export function useIFilesFolderIsRegistered<
  TSelectData = ReadContractResult<typeof iFilesFolderABI, 'isRegistered'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iFilesFolderABI, 'isRegistered', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iFilesFolderABI,
    functionName: 'isRegistered',
    ...config,
  } as UseContractReadConfig<
    typeof iFilesFolderABI,
    'isRegistered',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iFilesFolderABI}__ and `functionName` set to `"qtyOfFiles"`.
 */
export function useIFilesFolderQtyOfFiles<
  TSelectData = ReadContractResult<typeof iFilesFolderABI, 'qtyOfFiles'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iFilesFolderABI, 'qtyOfFiles', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iFilesFolderABI,
    functionName: 'qtyOfFiles',
    ...config,
  } as UseContractReadConfig<typeof iFilesFolderABI, 'qtyOfFiles', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iFilesFolderABI}__ and `functionName` set to `"signingDeadline"`.
 */
export function useIFilesFolderSigningDeadline<
  TSelectData = ReadContractResult<typeof iFilesFolderABI, 'signingDeadline'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iFilesFolderABI,
      'signingDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iFilesFolderABI,
    functionName: 'signingDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof iFilesFolderABI,
    'signingDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iFilesFolderABI}__ and `functionName` set to `"terminateStartpoint"`.
 */
export function useIFilesFolderTerminateStartpoint<
  TSelectData = ReadContractResult<
    typeof iFilesFolderABI,
    'terminateStartpoint'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iFilesFolderABI,
      'terminateStartpoint',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iFilesFolderABI,
    functionName: 'terminateStartpoint',
    ...config,
  } as UseContractReadConfig<
    typeof iFilesFolderABI,
    'terminateStartpoint',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iFilesFolderABI}__ and `functionName` set to `"votingDeadline"`.
 */
export function useIFilesFolderVotingDeadline<
  TSelectData = ReadContractResult<typeof iFilesFolderABI, 'votingDeadline'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iFilesFolderABI,
      'votingDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iFilesFolderABI,
    functionName: 'votingDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof iFilesFolderABI,
    'votingDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iFilesFolderABI}__.
 */
export function useIFilesFolderWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iFilesFolderABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iFilesFolderABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iFilesFolderABI, TFunctionName>({
    abi: iFilesFolderABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iFilesFolderABI}__ and `functionName` set to `"circulateFile"`.
 */
export function useIFilesFolderCirculateFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iFilesFolderABI,
          'circulateFile'
        >['abi'],
        'circulateFile'
      > & { functionName?: 'circulateFile' }
    : UseContractWriteConfig<TMode, typeof iFilesFolderABI, 'circulateFile'> & {
        abi?: never
        functionName?: 'circulateFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iFilesFolderABI, 'circulateFile'>({
    abi: iFilesFolderABI,
    functionName: 'circulateFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iFilesFolderABI}__ and `functionName` set to `"execFile"`.
 */
export function useIFilesFolderExecFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iFilesFolderABI, 'execFile'>['abi'],
        'execFile'
      > & { functionName?: 'execFile' }
    : UseContractWriteConfig<TMode, typeof iFilesFolderABI, 'execFile'> & {
        abi?: never
        functionName?: 'execFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iFilesFolderABI, 'execFile'>({
    abi: iFilesFolderABI,
    functionName: 'execFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iFilesFolderABI}__ and `functionName` set to `"proposeFile"`.
 */
export function useIFilesFolderProposeFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iFilesFolderABI,
          'proposeFile'
        >['abi'],
        'proposeFile'
      > & { functionName?: 'proposeFile' }
    : UseContractWriteConfig<TMode, typeof iFilesFolderABI, 'proposeFile'> & {
        abi?: never
        functionName?: 'proposeFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iFilesFolderABI, 'proposeFile'>({
    abi: iFilesFolderABI,
    functionName: 'proposeFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iFilesFolderABI}__ and `functionName` set to `"regFile"`.
 */
export function useIFilesFolderRegFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iFilesFolderABI, 'regFile'>['abi'],
        'regFile'
      > & { functionName?: 'regFile' }
    : UseContractWriteConfig<TMode, typeof iFilesFolderABI, 'regFile'> & {
        abi?: never
        functionName?: 'regFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iFilesFolderABI, 'regFile'>({
    abi: iFilesFolderABI,
    functionName: 'regFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iFilesFolderABI}__ and `functionName` set to `"setStateOfFile"`.
 */
export function useIFilesFolderSetStateOfFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iFilesFolderABI,
          'setStateOfFile'
        >['abi'],
        'setStateOfFile'
      > & { functionName?: 'setStateOfFile' }
    : UseContractWriteConfig<
        TMode,
        typeof iFilesFolderABI,
        'setStateOfFile'
      > & {
        abi?: never
        functionName?: 'setStateOfFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iFilesFolderABI, 'setStateOfFile'>({
    abi: iFilesFolderABI,
    functionName: 'setStateOfFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iFilesFolderABI}__ and `functionName` set to `"terminateFile"`.
 */
export function useIFilesFolderTerminateFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iFilesFolderABI,
          'terminateFile'
        >['abi'],
        'terminateFile'
      > & { functionName?: 'terminateFile' }
    : UseContractWriteConfig<TMode, typeof iFilesFolderABI, 'terminateFile'> & {
        abi?: never
        functionName?: 'terminateFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iFilesFolderABI, 'terminateFile'>({
    abi: iFilesFolderABI,
    functionName: 'terminateFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iFilesFolderABI}__ and `functionName` set to `"voteCountingForFile"`.
 */
export function useIFilesFolderVoteCountingForFile<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iFilesFolderABI,
          'voteCountingForFile'
        >['abi'],
        'voteCountingForFile'
      > & { functionName?: 'voteCountingForFile' }
    : UseContractWriteConfig<
        TMode,
        typeof iFilesFolderABI,
        'voteCountingForFile'
      > & {
        abi?: never
        functionName?: 'voteCountingForFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iFilesFolderABI, 'voteCountingForFile'>(
    {
      abi: iFilesFolderABI,
      functionName: 'voteCountingForFile',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iFilesFolderABI}__.
 */
export function usePrepareIFilesFolderWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iFilesFolderABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iFilesFolderABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iFilesFolderABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iFilesFolderABI}__ and `functionName` set to `"circulateFile"`.
 */
export function usePrepareIFilesFolderCirculateFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iFilesFolderABI, 'circulateFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iFilesFolderABI,
    functionName: 'circulateFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iFilesFolderABI, 'circulateFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iFilesFolderABI}__ and `functionName` set to `"execFile"`.
 */
export function usePrepareIFilesFolderExecFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iFilesFolderABI, 'execFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iFilesFolderABI,
    functionName: 'execFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iFilesFolderABI, 'execFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iFilesFolderABI}__ and `functionName` set to `"proposeFile"`.
 */
export function usePrepareIFilesFolderProposeFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iFilesFolderABI, 'proposeFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iFilesFolderABI,
    functionName: 'proposeFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iFilesFolderABI, 'proposeFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iFilesFolderABI}__ and `functionName` set to `"regFile"`.
 */
export function usePrepareIFilesFolderRegFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iFilesFolderABI, 'regFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iFilesFolderABI,
    functionName: 'regFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iFilesFolderABI, 'regFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iFilesFolderABI}__ and `functionName` set to `"setStateOfFile"`.
 */
export function usePrepareIFilesFolderSetStateOfFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iFilesFolderABI, 'setStateOfFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iFilesFolderABI,
    functionName: 'setStateOfFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iFilesFolderABI, 'setStateOfFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iFilesFolderABI}__ and `functionName` set to `"terminateFile"`.
 */
export function usePrepareIFilesFolderTerminateFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iFilesFolderABI, 'terminateFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iFilesFolderABI,
    functionName: 'terminateFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iFilesFolderABI, 'terminateFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iFilesFolderABI}__ and `functionName` set to `"voteCountingForFile"`.
 */
export function usePrepareIFilesFolderVoteCountingForFile(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iFilesFolderABI,
      'voteCountingForFile'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iFilesFolderABI,
    functionName: 'voteCountingForFile',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iFilesFolderABI,
    'voteCountingForFile'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iFilesFolderABI}__.
 */
export function useIFilesFolderEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iFilesFolderABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iFilesFolderABI,
    ...config,
  } as UseContractEventConfig<typeof iFilesFolderABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iFilesFolderABI}__ and `eventName` set to `"UpdateStateOfFile"`.
 */
export function useIFilesFolderUpdateStateOfFileEvent(
  config: Omit<
    UseContractEventConfig<typeof iFilesFolderABI, 'UpdateStateOfFile'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iFilesFolderABI,
    eventName: 'UpdateStateOfFile',
    ...config,
  } as UseContractEventConfig<typeof iFilesFolderABI, 'UpdateStateOfFile'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iMeetingMinutesABI}__.
 */
export function useIMeetingMinutes(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iMeetingMinutesABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMeetingMinutesABI}__.
 */
export function useIMeetingMinutesRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iMeetingMinutesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iMeetingMinutesABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iMeetingMinutesABI,
    ...config,
  } as UseContractReadConfig<
    typeof iMeetingMinutesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"getBallot"`.
 */
export function useIMeetingMinutesGetBallot<
  TSelectData = ReadContractResult<typeof iMeetingMinutesABI, 'getBallot'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMeetingMinutesABI, 'getBallot', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMeetingMinutesABI,
    functionName: 'getBallot',
    ...config,
  } as UseContractReadConfig<
    typeof iMeetingMinutesABI,
    'getBallot',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"getCaseOfAttitude"`.
 */
export function useIMeetingMinutesGetCaseOfAttitude<
  TSelectData = ReadContractResult<
    typeof iMeetingMinutesABI,
    'getCaseOfAttitude'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iMeetingMinutesABI,
      'getCaseOfAttitude',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMeetingMinutesABI,
    functionName: 'getCaseOfAttitude',
    ...config,
  } as UseContractReadConfig<
    typeof iMeetingMinutesABI,
    'getCaseOfAttitude',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"getDelegateOf"`.
 */
export function useIMeetingMinutesGetDelegateOf<
  TSelectData = ReadContractResult<typeof iMeetingMinutesABI, 'getDelegateOf'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iMeetingMinutesABI,
      'getDelegateOf',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMeetingMinutesABI,
    functionName: 'getDelegateOf',
    ...config,
  } as UseContractReadConfig<
    typeof iMeetingMinutesABI,
    'getDelegateOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"getMotion"`.
 */
export function useIMeetingMinutesGetMotion<
  TSelectData = ReadContractResult<typeof iMeetingMinutesABI, 'getMotion'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMeetingMinutesABI, 'getMotion', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMeetingMinutesABI,
    functionName: 'getMotion',
    ...config,
  } as UseContractReadConfig<
    typeof iMeetingMinutesABI,
    'getMotion',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"getSeqList"`.
 */
export function useIMeetingMinutesGetSeqList<
  TSelectData = ReadContractResult<typeof iMeetingMinutesABI, 'getSeqList'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMeetingMinutesABI, 'getSeqList', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMeetingMinutesABI,
    functionName: 'getSeqList',
    ...config,
  } as UseContractReadConfig<
    typeof iMeetingMinutesABI,
    'getSeqList',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"getVoterOfDelegateMap"`.
 */
export function useIMeetingMinutesGetVoterOfDelegateMap<
  TSelectData = ReadContractResult<
    typeof iMeetingMinutesABI,
    'getVoterOfDelegateMap'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iMeetingMinutesABI,
      'getVoterOfDelegateMap',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMeetingMinutesABI,
    functionName: 'getVoterOfDelegateMap',
    ...config,
  } as UseContractReadConfig<
    typeof iMeetingMinutesABI,
    'getVoterOfDelegateMap',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"isPassed"`.
 */
export function useIMeetingMinutesIsPassed<
  TSelectData = ReadContractResult<typeof iMeetingMinutesABI, 'isPassed'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMeetingMinutesABI, 'isPassed', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMeetingMinutesABI,
    functionName: 'isPassed',
    ...config,
  } as UseContractReadConfig<
    typeof iMeetingMinutesABI,
    'isPassed',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"isProposed"`.
 */
export function useIMeetingMinutesIsProposed<
  TSelectData = ReadContractResult<typeof iMeetingMinutesABI, 'isProposed'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMeetingMinutesABI, 'isProposed', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMeetingMinutesABI,
    functionName: 'isProposed',
    ...config,
  } as UseContractReadConfig<
    typeof iMeetingMinutesABI,
    'isProposed',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"isVoted"`.
 */
export function useIMeetingMinutesIsVoted<
  TSelectData = ReadContractResult<typeof iMeetingMinutesABI, 'isVoted'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMeetingMinutesABI, 'isVoted', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMeetingMinutesABI,
    functionName: 'isVoted',
    ...config,
  } as UseContractReadConfig<typeof iMeetingMinutesABI, 'isVoted', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"isVotedFor"`.
 */
export function useIMeetingMinutesIsVotedFor<
  TSelectData = ReadContractResult<typeof iMeetingMinutesABI, 'isVotedFor'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMeetingMinutesABI, 'isVotedFor', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMeetingMinutesABI,
    functionName: 'isVotedFor',
    ...config,
  } as UseContractReadConfig<
    typeof iMeetingMinutesABI,
    'isVotedFor',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"voteEnded"`.
 */
export function useIMeetingMinutesVoteEnded<
  TSelectData = ReadContractResult<typeof iMeetingMinutesABI, 'voteEnded'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMeetingMinutesABI, 'voteEnded', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMeetingMinutesABI,
    functionName: 'voteEnded',
    ...config,
  } as UseContractReadConfig<
    typeof iMeetingMinutesABI,
    'voteEnded',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"voteStarted"`.
 */
export function useIMeetingMinutesVoteStarted<
  TSelectData = ReadContractResult<typeof iMeetingMinutesABI, 'voteStarted'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iMeetingMinutesABI,
      'voteStarted',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMeetingMinutesABI,
    functionName: 'voteStarted',
    ...config,
  } as UseContractReadConfig<
    typeof iMeetingMinutesABI,
    'voteStarted',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMeetingMinutesABI}__.
 */
export function useIMeetingMinutesWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iMeetingMinutesABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof iMeetingMinutesABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMeetingMinutesABI, TFunctionName>({
    abi: iMeetingMinutesABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"castVoteInBoardMeeting"`.
 */
export function useIMeetingMinutesCastVoteInBoardMeeting<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iMeetingMinutesABI,
          'castVoteInBoardMeeting'
        >['abi'],
        'castVoteInBoardMeeting'
      > & { functionName?: 'castVoteInBoardMeeting' }
    : UseContractWriteConfig<
        TMode,
        typeof iMeetingMinutesABI,
        'castVoteInBoardMeeting'
      > & {
        abi?: never
        functionName?: 'castVoteInBoardMeeting'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iMeetingMinutesABI,
    'castVoteInBoardMeeting'
  >({
    abi: iMeetingMinutesABI,
    functionName: 'castVoteInBoardMeeting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"castVoteInGeneralMeeting"`.
 */
export function useIMeetingMinutesCastVoteInGeneralMeeting<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iMeetingMinutesABI,
          'castVoteInGeneralMeeting'
        >['abi'],
        'castVoteInGeneralMeeting'
      > & { functionName?: 'castVoteInGeneralMeeting' }
    : UseContractWriteConfig<
        TMode,
        typeof iMeetingMinutesABI,
        'castVoteInGeneralMeeting'
      > & {
        abi?: never
        functionName?: 'castVoteInGeneralMeeting'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iMeetingMinutesABI,
    'castVoteInGeneralMeeting'
  >({
    abi: iMeetingMinutesABI,
    functionName: 'castVoteInGeneralMeeting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"createAction"`.
 */
export function useIMeetingMinutesCreateAction<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iMeetingMinutesABI,
          'createAction'
        >['abi'],
        'createAction'
      > & { functionName?: 'createAction' }
    : UseContractWriteConfig<
        TMode,
        typeof iMeetingMinutesABI,
        'createAction'
      > & {
        abi?: never
        functionName?: 'createAction'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMeetingMinutesABI, 'createAction'>({
    abi: iMeetingMinutesABI,
    functionName: 'createAction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"createMotionToApproveDoc"`.
 */
export function useIMeetingMinutesCreateMotionToApproveDoc<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iMeetingMinutesABI,
          'createMotionToApproveDoc'
        >['abi'],
        'createMotionToApproveDoc'
      > & { functionName?: 'createMotionToApproveDoc' }
    : UseContractWriteConfig<
        TMode,
        typeof iMeetingMinutesABI,
        'createMotionToApproveDoc'
      > & {
        abi?: never
        functionName?: 'createMotionToApproveDoc'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iMeetingMinutesABI,
    'createMotionToApproveDoc'
  >({
    abi: iMeetingMinutesABI,
    functionName: 'createMotionToApproveDoc',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"createMotionToRemoveOfficer"`.
 */
export function useIMeetingMinutesCreateMotionToRemoveOfficer<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iMeetingMinutesABI,
          'createMotionToRemoveOfficer'
        >['abi'],
        'createMotionToRemoveOfficer'
      > & { functionName?: 'createMotionToRemoveOfficer' }
    : UseContractWriteConfig<
        TMode,
        typeof iMeetingMinutesABI,
        'createMotionToRemoveOfficer'
      > & {
        abi?: never
        functionName?: 'createMotionToRemoveOfficer'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iMeetingMinutesABI,
    'createMotionToRemoveOfficer'
  >({
    abi: iMeetingMinutesABI,
    functionName: 'createMotionToRemoveOfficer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"entrustDelegate"`.
 */
export function useIMeetingMinutesEntrustDelegate<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iMeetingMinutesABI,
          'entrustDelegate'
        >['abi'],
        'entrustDelegate'
      > & { functionName?: 'entrustDelegate' }
    : UseContractWriteConfig<
        TMode,
        typeof iMeetingMinutesABI,
        'entrustDelegate'
      > & {
        abi?: never
        functionName?: 'entrustDelegate'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMeetingMinutesABI, 'entrustDelegate'>({
    abi: iMeetingMinutesABI,
    functionName: 'entrustDelegate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"execAction"`.
 */
export function useIMeetingMinutesExecAction<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iMeetingMinutesABI,
          'execAction'
        >['abi'],
        'execAction'
      > & { functionName?: 'execAction' }
    : UseContractWriteConfig<TMode, typeof iMeetingMinutesABI, 'execAction'> & {
        abi?: never
        functionName?: 'execAction'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMeetingMinutesABI, 'execAction'>({
    abi: iMeetingMinutesABI,
    functionName: 'execAction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"execResolution"`.
 */
export function useIMeetingMinutesExecResolution<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iMeetingMinutesABI,
          'execResolution'
        >['abi'],
        'execResolution'
      > & { functionName?: 'execResolution' }
    : UseContractWriteConfig<
        TMode,
        typeof iMeetingMinutesABI,
        'execResolution'
      > & {
        abi?: never
        functionName?: 'execResolution'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMeetingMinutesABI, 'execResolution'>({
    abi: iMeetingMinutesABI,
    functionName: 'execResolution',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"nominateOfficer"`.
 */
export function useIMeetingMinutesNominateOfficer<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iMeetingMinutesABI,
          'nominateOfficer'
        >['abi'],
        'nominateOfficer'
      > & { functionName?: 'nominateOfficer' }
    : UseContractWriteConfig<
        TMode,
        typeof iMeetingMinutesABI,
        'nominateOfficer'
      > & {
        abi?: never
        functionName?: 'nominateOfficer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMeetingMinutesABI, 'nominateOfficer'>({
    abi: iMeetingMinutesABI,
    functionName: 'nominateOfficer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"proposeMotionToBoard"`.
 */
export function useIMeetingMinutesProposeMotionToBoard<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iMeetingMinutesABI,
          'proposeMotionToBoard'
        >['abi'],
        'proposeMotionToBoard'
      > & { functionName?: 'proposeMotionToBoard' }
    : UseContractWriteConfig<
        TMode,
        typeof iMeetingMinutesABI,
        'proposeMotionToBoard'
      > & {
        abi?: never
        functionName?: 'proposeMotionToBoard'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iMeetingMinutesABI,
    'proposeMotionToBoard'
  >({
    abi: iMeetingMinutesABI,
    functionName: 'proposeMotionToBoard',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"proposeMotionToGeneralMeeting"`.
 */
export function useIMeetingMinutesProposeMotionToGeneralMeeting<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iMeetingMinutesABI,
          'proposeMotionToGeneralMeeting'
        >['abi'],
        'proposeMotionToGeneralMeeting'
      > & { functionName?: 'proposeMotionToGeneralMeeting' }
    : UseContractWriteConfig<
        TMode,
        typeof iMeetingMinutesABI,
        'proposeMotionToGeneralMeeting'
      > & {
        abi?: never
        functionName?: 'proposeMotionToGeneralMeeting'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iMeetingMinutesABI,
    'proposeMotionToGeneralMeeting'
  >({
    abi: iMeetingMinutesABI,
    functionName: 'proposeMotionToGeneralMeeting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"voteCounting"`.
 */
export function useIMeetingMinutesVoteCounting<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iMeetingMinutesABI,
          'voteCounting'
        >['abi'],
        'voteCounting'
      > & { functionName?: 'voteCounting' }
    : UseContractWriteConfig<
        TMode,
        typeof iMeetingMinutesABI,
        'voteCounting'
      > & {
        abi?: never
        functionName?: 'voteCounting'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMeetingMinutesABI, 'voteCounting'>({
    abi: iMeetingMinutesABI,
    functionName: 'voteCounting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMeetingMinutesABI}__.
 */
export function usePrepareIMeetingMinutesWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMeetingMinutesABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMeetingMinutesABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMeetingMinutesABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"castVoteInBoardMeeting"`.
 */
export function usePrepareIMeetingMinutesCastVoteInBoardMeeting(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iMeetingMinutesABI,
      'castVoteInBoardMeeting'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMeetingMinutesABI,
    functionName: 'castVoteInBoardMeeting',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iMeetingMinutesABI,
    'castVoteInBoardMeeting'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"castVoteInGeneralMeeting"`.
 */
export function usePrepareIMeetingMinutesCastVoteInGeneralMeeting(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iMeetingMinutesABI,
      'castVoteInGeneralMeeting'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMeetingMinutesABI,
    functionName: 'castVoteInGeneralMeeting',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iMeetingMinutesABI,
    'castVoteInGeneralMeeting'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"createAction"`.
 */
export function usePrepareIMeetingMinutesCreateAction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMeetingMinutesABI, 'createAction'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMeetingMinutesABI,
    functionName: 'createAction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMeetingMinutesABI, 'createAction'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"createMotionToApproveDoc"`.
 */
export function usePrepareIMeetingMinutesCreateMotionToApproveDoc(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iMeetingMinutesABI,
      'createMotionToApproveDoc'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMeetingMinutesABI,
    functionName: 'createMotionToApproveDoc',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iMeetingMinutesABI,
    'createMotionToApproveDoc'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"createMotionToRemoveOfficer"`.
 */
export function usePrepareIMeetingMinutesCreateMotionToRemoveOfficer(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iMeetingMinutesABI,
      'createMotionToRemoveOfficer'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMeetingMinutesABI,
    functionName: 'createMotionToRemoveOfficer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iMeetingMinutesABI,
    'createMotionToRemoveOfficer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"entrustDelegate"`.
 */
export function usePrepareIMeetingMinutesEntrustDelegate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMeetingMinutesABI, 'entrustDelegate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMeetingMinutesABI,
    functionName: 'entrustDelegate',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iMeetingMinutesABI,
    'entrustDelegate'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"execAction"`.
 */
export function usePrepareIMeetingMinutesExecAction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMeetingMinutesABI, 'execAction'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMeetingMinutesABI,
    functionName: 'execAction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMeetingMinutesABI, 'execAction'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"execResolution"`.
 */
export function usePrepareIMeetingMinutesExecResolution(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMeetingMinutesABI, 'execResolution'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMeetingMinutesABI,
    functionName: 'execResolution',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iMeetingMinutesABI,
    'execResolution'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"nominateOfficer"`.
 */
export function usePrepareIMeetingMinutesNominateOfficer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMeetingMinutesABI, 'nominateOfficer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMeetingMinutesABI,
    functionName: 'nominateOfficer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iMeetingMinutesABI,
    'nominateOfficer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"proposeMotionToBoard"`.
 */
export function usePrepareIMeetingMinutesProposeMotionToBoard(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iMeetingMinutesABI,
      'proposeMotionToBoard'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMeetingMinutesABI,
    functionName: 'proposeMotionToBoard',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iMeetingMinutesABI,
    'proposeMotionToBoard'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"proposeMotionToGeneralMeeting"`.
 */
export function usePrepareIMeetingMinutesProposeMotionToGeneralMeeting(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iMeetingMinutesABI,
      'proposeMotionToGeneralMeeting'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMeetingMinutesABI,
    functionName: 'proposeMotionToGeneralMeeting',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iMeetingMinutesABI,
    'proposeMotionToGeneralMeeting'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"voteCounting"`.
 */
export function usePrepareIMeetingMinutesVoteCounting(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMeetingMinutesABI, 'voteCounting'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMeetingMinutesABI,
    functionName: 'voteCounting',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMeetingMinutesABI, 'voteCounting'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iMeetingMinutesABI}__.
 */
export function useIMeetingMinutesEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iMeetingMinutesABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iMeetingMinutesABI,
    ...config,
  } as UseContractEventConfig<typeof iMeetingMinutesABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `eventName` set to `"CastVoteInBoardMeeting"`.
 */
export function useIMeetingMinutesCastVoteInBoardMeetingEvent(
  config: Omit<
    UseContractEventConfig<typeof iMeetingMinutesABI, 'CastVoteInBoardMeeting'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iMeetingMinutesABI,
    eventName: 'CastVoteInBoardMeeting',
    ...config,
  } as UseContractEventConfig<
    typeof iMeetingMinutesABI,
    'CastVoteInBoardMeeting'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `eventName` set to `"CastVoteInGeneralMeeting"`.
 */
export function useIMeetingMinutesCastVoteInGeneralMeetingEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iMeetingMinutesABI,
      'CastVoteInGeneralMeeting'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iMeetingMinutesABI,
    eventName: 'CastVoteInGeneralMeeting',
    ...config,
  } as UseContractEventConfig<
    typeof iMeetingMinutesABI,
    'CastVoteInGeneralMeeting'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `eventName` set to `"CreateMotion"`.
 */
export function useIMeetingMinutesCreateMotionEvent(
  config: Omit<
    UseContractEventConfig<typeof iMeetingMinutesABI, 'CreateMotion'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iMeetingMinutesABI,
    eventName: 'CreateMotion',
    ...config,
  } as UseContractEventConfig<typeof iMeetingMinutesABI, 'CreateMotion'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `eventName` set to `"EntrustDelegate"`.
 */
export function useIMeetingMinutesEntrustDelegateEvent(
  config: Omit<
    UseContractEventConfig<typeof iMeetingMinutesABI, 'EntrustDelegate'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iMeetingMinutesABI,
    eventName: 'EntrustDelegate',
    ...config,
  } as UseContractEventConfig<typeof iMeetingMinutesABI, 'EntrustDelegate'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `eventName` set to `"ExecResolution"`.
 */
export function useIMeetingMinutesExecResolutionEvent(
  config: Omit<
    UseContractEventConfig<typeof iMeetingMinutesABI, 'ExecResolution'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iMeetingMinutesABI,
    eventName: 'ExecResolution',
    ...config,
  } as UseContractEventConfig<typeof iMeetingMinutesABI, 'ExecResolution'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `eventName` set to `"ProposeMotionToBoard"`.
 */
export function useIMeetingMinutesProposeMotionToBoardEvent(
  config: Omit<
    UseContractEventConfig<typeof iMeetingMinutesABI, 'ProposeMotionToBoard'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iMeetingMinutesABI,
    eventName: 'ProposeMotionToBoard',
    ...config,
  } as UseContractEventConfig<
    typeof iMeetingMinutesABI,
    'ProposeMotionToBoard'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `eventName` set to `"ProposeMotionToGeneralMeeting"`.
 */
export function useIMeetingMinutesProposeMotionToGeneralMeetingEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iMeetingMinutesABI,
      'ProposeMotionToGeneralMeeting'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iMeetingMinutesABI,
    eventName: 'ProposeMotionToGeneralMeeting',
    ...config,
  } as UseContractEventConfig<
    typeof iMeetingMinutesABI,
    'ProposeMotionToGeneralMeeting'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `eventName` set to `"VoteCounting"`.
 */
export function useIMeetingMinutesVoteCountingEvent(
  config: Omit<
    UseContractEventConfig<typeof iMeetingMinutesABI, 'VoteCounting'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iMeetingMinutesABI,
    eventName: 'VoteCounting',
    ...config,
  } as UseContractEventConfig<typeof iMeetingMinutesABI, 'VoteCounting'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iSigPageABI}__.
 */
export function useISigPage(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iSigPageABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSigPageABI}__.
 */
export function useISigPageRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iSigPageABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSigPageABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iSigPageABI,
    ...config,
  } as UseContractReadConfig<typeof iSigPageABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"circulated"`.
 */
export function useISigPageCirculated<
  TSelectData = ReadContractResult<typeof iSigPageABI, 'circulated'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSigPageABI, 'circulated', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSigPageABI,
    functionName: 'circulated',
    ...config,
  } as UseContractReadConfig<typeof iSigPageABI, 'circulated', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"established"`.
 */
export function useISigPageEstablished<
  TSelectData = ReadContractResult<typeof iSigPageABI, 'established'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSigPageABI, 'established', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSigPageABI,
    functionName: 'established',
    ...config,
  } as UseContractReadConfig<typeof iSigPageABI, 'established', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"getBuyers"`.
 */
export function useISigPageGetBuyers<
  TSelectData = ReadContractResult<typeof iSigPageABI, 'getBuyers'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSigPageABI, 'getBuyers', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSigPageABI,
    functionName: 'getBuyers',
    ...config,
  } as UseContractReadConfig<typeof iSigPageABI, 'getBuyers', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"getCirculateDate"`.
 */
export function useISigPageGetCirculateDate<
  TSelectData = ReadContractResult<typeof iSigPageABI, 'getCirculateDate'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSigPageABI, 'getCirculateDate', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSigPageABI,
    functionName: 'getCirculateDate',
    ...config,
  } as UseContractReadConfig<
    typeof iSigPageABI,
    'getCirculateDate',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"getClosingDays"`.
 */
export function useISigPageGetClosingDays<
  TSelectData = ReadContractResult<typeof iSigPageABI, 'getClosingDays'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSigPageABI, 'getClosingDays', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSigPageABI,
    functionName: 'getClosingDays',
    ...config,
  } as UseContractReadConfig<typeof iSigPageABI, 'getClosingDays', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"getClosingDeadline"`.
 */
export function useISigPageGetClosingDeadline<
  TSelectData = ReadContractResult<typeof iSigPageABI, 'getClosingDeadline'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSigPageABI,
      'getClosingDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSigPageABI,
    functionName: 'getClosingDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof iSigPageABI,
    'getClosingDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"getParasOfPage"`.
 */
export function useISigPageGetParasOfPage<
  TSelectData = ReadContractResult<typeof iSigPageABI, 'getParasOfPage'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSigPageABI, 'getParasOfPage', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSigPageABI,
    functionName: 'getParasOfPage',
    ...config,
  } as UseContractReadConfig<typeof iSigPageABI, 'getParasOfPage', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"getParties"`.
 */
export function useISigPageGetParties<
  TSelectData = ReadContractResult<typeof iSigPageABI, 'getParties'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSigPageABI, 'getParties', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSigPageABI,
    functionName: 'getParties',
    ...config,
  } as UseContractReadConfig<typeof iSigPageABI, 'getParties', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"getSellers"`.
 */
export function useISigPageGetSellers<
  TSelectData = ReadContractResult<typeof iSigPageABI, 'getSellers'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSigPageABI, 'getSellers', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSigPageABI,
    functionName: 'getSellers',
    ...config,
  } as UseContractReadConfig<typeof iSigPageABI, 'getSellers', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"getSigDeadline"`.
 */
export function useISigPageGetSigDeadline<
  TSelectData = ReadContractResult<typeof iSigPageABI, 'getSigDeadline'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSigPageABI, 'getSigDeadline', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSigPageABI,
    functionName: 'getSigDeadline',
    ...config,
  } as UseContractReadConfig<typeof iSigPageABI, 'getSigDeadline', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"getSigOfParty"`.
 */
export function useISigPageGetSigOfParty<
  TSelectData = ReadContractResult<typeof iSigPageABI, 'getSigOfParty'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSigPageABI, 'getSigOfParty', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSigPageABI,
    functionName: 'getSigOfParty',
    ...config,
  } as UseContractReadConfig<typeof iSigPageABI, 'getSigOfParty', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"getSigningDays"`.
 */
export function useISigPageGetSigningDays<
  TSelectData = ReadContractResult<typeof iSigPageABI, 'getSigningDays'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSigPageABI, 'getSigningDays', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSigPageABI,
    functionName: 'getSigningDays',
    ...config,
  } as UseContractReadConfig<typeof iSigPageABI, 'getSigningDays', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"getSigsOfPage"`.
 */
export function useISigPageGetSigsOfPage<
  TSelectData = ReadContractResult<typeof iSigPageABI, 'getSigsOfPage'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSigPageABI, 'getSigsOfPage', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSigPageABI,
    functionName: 'getSigsOfPage',
    ...config,
  } as UseContractReadConfig<typeof iSigPageABI, 'getSigsOfPage', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"isBuyer"`.
 */
export function useISigPageIsBuyer<
  TSelectData = ReadContractResult<typeof iSigPageABI, 'isBuyer'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSigPageABI, 'isBuyer', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSigPageABI,
    functionName: 'isBuyer',
    ...config,
  } as UseContractReadConfig<typeof iSigPageABI, 'isBuyer', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"isInitSigner"`.
 */
export function useISigPageIsInitSigner<
  TSelectData = ReadContractResult<typeof iSigPageABI, 'isInitSigner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSigPageABI, 'isInitSigner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSigPageABI,
    functionName: 'isInitSigner',
    ...config,
  } as UseContractReadConfig<typeof iSigPageABI, 'isInitSigner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"isParty"`.
 */
export function useISigPageIsParty<
  TSelectData = ReadContractResult<typeof iSigPageABI, 'isParty'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSigPageABI, 'isParty', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSigPageABI,
    functionName: 'isParty',
    ...config,
  } as UseContractReadConfig<typeof iSigPageABI, 'isParty', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"isSeller"`.
 */
export function useISigPageIsSeller<
  TSelectData = ReadContractResult<typeof iSigPageABI, 'isSeller'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSigPageABI, 'isSeller', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSigPageABI,
    functionName: 'isSeller',
    ...config,
  } as UseContractReadConfig<typeof iSigPageABI, 'isSeller', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"isSigner"`.
 */
export function useISigPageIsSigner<
  TSelectData = ReadContractResult<typeof iSigPageABI, 'isSigner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSigPageABI, 'isSigner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSigPageABI,
    functionName: 'isSigner',
    ...config,
  } as UseContractReadConfig<typeof iSigPageABI, 'isSigner', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSigPageABI}__.
 */
export function useISigPageWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iSigPageABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iSigPageABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iSigPageABI, TFunctionName>({
    abi: iSigPageABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"addBlank"`.
 */
export function useISigPageAddBlank<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iSigPageABI, 'addBlank'>['abi'],
        'addBlank'
      > & { functionName?: 'addBlank' }
    : UseContractWriteConfig<TMode, typeof iSigPageABI, 'addBlank'> & {
        abi?: never
        functionName?: 'addBlank'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iSigPageABI, 'addBlank'>({
    abi: iSigPageABI,
    functionName: 'addBlank',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"circulateDoc"`.
 */
export function useISigPageCirculateDoc<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iSigPageABI, 'circulateDoc'>['abi'],
        'circulateDoc'
      > & { functionName?: 'circulateDoc' }
    : UseContractWriteConfig<TMode, typeof iSigPageABI, 'circulateDoc'> & {
        abi?: never
        functionName?: 'circulateDoc'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iSigPageABI, 'circulateDoc'>({
    abi: iSigPageABI,
    functionName: 'circulateDoc',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"regSig"`.
 */
export function useISigPageRegSig<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iSigPageABI, 'regSig'>['abi'],
        'regSig'
      > & { functionName?: 'regSig' }
    : UseContractWriteConfig<TMode, typeof iSigPageABI, 'regSig'> & {
        abi?: never
        functionName?: 'regSig'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iSigPageABI, 'regSig'>({
    abi: iSigPageABI,
    functionName: 'regSig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"removeBlank"`.
 */
export function useISigPageRemoveBlank<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iSigPageABI, 'removeBlank'>['abi'],
        'removeBlank'
      > & { functionName?: 'removeBlank' }
    : UseContractWriteConfig<TMode, typeof iSigPageABI, 'removeBlank'> & {
        abi?: never
        functionName?: 'removeBlank'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iSigPageABI, 'removeBlank'>({
    abi: iSigPageABI,
    functionName: 'removeBlank',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"setTiming"`.
 */
export function useISigPageSetTiming<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iSigPageABI, 'setTiming'>['abi'],
        'setTiming'
      > & { functionName?: 'setTiming' }
    : UseContractWriteConfig<TMode, typeof iSigPageABI, 'setTiming'> & {
        abi?: never
        functionName?: 'setTiming'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iSigPageABI, 'setTiming'>({
    abi: iSigPageABI,
    functionName: 'setTiming',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"signDoc"`.
 */
export function useISigPageSignDoc<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iSigPageABI, 'signDoc'>['abi'],
        'signDoc'
      > & { functionName?: 'signDoc' }
    : UseContractWriteConfig<TMode, typeof iSigPageABI, 'signDoc'> & {
        abi?: never
        functionName?: 'signDoc'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iSigPageABI, 'signDoc'>({
    abi: iSigPageABI,
    functionName: 'signDoc',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSigPageABI}__.
 */
export function usePrepareISigPageWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSigPageABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSigPageABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSigPageABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"addBlank"`.
 */
export function usePrepareISigPageAddBlank(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSigPageABI, 'addBlank'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSigPageABI,
    functionName: 'addBlank',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSigPageABI, 'addBlank'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"circulateDoc"`.
 */
export function usePrepareISigPageCirculateDoc(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSigPageABI, 'circulateDoc'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSigPageABI,
    functionName: 'circulateDoc',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSigPageABI, 'circulateDoc'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"regSig"`.
 */
export function usePrepareISigPageRegSig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSigPageABI, 'regSig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSigPageABI,
    functionName: 'regSig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSigPageABI, 'regSig'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"removeBlank"`.
 */
export function usePrepareISigPageRemoveBlank(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSigPageABI, 'removeBlank'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSigPageABI,
    functionName: 'removeBlank',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSigPageABI, 'removeBlank'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"setTiming"`.
 */
export function usePrepareISigPageSetTiming(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSigPageABI, 'setTiming'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSigPageABI,
    functionName: 'setTiming',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSigPageABI, 'setTiming'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"signDoc"`.
 */
export function usePrepareISigPageSignDoc(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSigPageABI, 'signDoc'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSigPageABI,
    functionName: 'signDoc',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSigPageABI, 'signDoc'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSigPageABI}__.
 */
export function useISigPageEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iSigPageABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSigPageABI,
    ...config,
  } as UseContractEventConfig<typeof iSigPageABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSigPageABI}__ and `eventName` set to `"CirculateDoc"`.
 */
export function useISigPageCirculateDocEvent(
  config: Omit<
    UseContractEventConfig<typeof iSigPageABI, 'CirculateDoc'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSigPageABI,
    eventName: 'CirculateDoc',
    ...config,
  } as UseContractEventConfig<typeof iSigPageABI, 'CirculateDoc'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link meetingMinutesABI}__.
 */
export function useMeetingMinutes(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: meetingMinutesABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link meetingMinutesABI}__.
 */
export function useMeetingMinutesRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof meetingMinutesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof meetingMinutesABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: meetingMinutesABI,
    ...config,
  } as UseContractReadConfig<
    typeof meetingMinutesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"getBallot"`.
 */
export function useMeetingMinutesGetBallot<
  TSelectData = ReadContractResult<typeof meetingMinutesABI, 'getBallot'>,
>(
  config: Omit<
    UseContractReadConfig<typeof meetingMinutesABI, 'getBallot', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: meetingMinutesABI,
    functionName: 'getBallot',
    ...config,
  } as UseContractReadConfig<
    typeof meetingMinutesABI,
    'getBallot',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"getCaseOfAttitude"`.
 */
export function useMeetingMinutesGetCaseOfAttitude<
  TSelectData = ReadContractResult<
    typeof meetingMinutesABI,
    'getCaseOfAttitude'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof meetingMinutesABI,
      'getCaseOfAttitude',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: meetingMinutesABI,
    functionName: 'getCaseOfAttitude',
    ...config,
  } as UseContractReadConfig<
    typeof meetingMinutesABI,
    'getCaseOfAttitude',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"getDK"`.
 */
export function useMeetingMinutesGetDk<
  TSelectData = ReadContractResult<typeof meetingMinutesABI, 'getDK'>,
>(
  config: Omit<
    UseContractReadConfig<typeof meetingMinutesABI, 'getDK', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: meetingMinutesABI,
    functionName: 'getDK',
    ...config,
  } as UseContractReadConfig<typeof meetingMinutesABI, 'getDK', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"getDelegateOf"`.
 */
export function useMeetingMinutesGetDelegateOf<
  TSelectData = ReadContractResult<typeof meetingMinutesABI, 'getDelegateOf'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof meetingMinutesABI,
      'getDelegateOf',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: meetingMinutesABI,
    functionName: 'getDelegateOf',
    ...config,
  } as UseContractReadConfig<
    typeof meetingMinutesABI,
    'getDelegateOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"getMotion"`.
 */
export function useMeetingMinutesGetMotion<
  TSelectData = ReadContractResult<typeof meetingMinutesABI, 'getMotion'>,
>(
  config: Omit<
    UseContractReadConfig<typeof meetingMinutesABI, 'getMotion', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: meetingMinutesABI,
    functionName: 'getMotion',
    ...config,
  } as UseContractReadConfig<
    typeof meetingMinutesABI,
    'getMotion',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"getOwner"`.
 */
export function useMeetingMinutesGetOwner<
  TSelectData = ReadContractResult<typeof meetingMinutesABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof meetingMinutesABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: meetingMinutesABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<typeof meetingMinutesABI, 'getOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useMeetingMinutesGetRoleAdmin<
  TSelectData = ReadContractResult<typeof meetingMinutesABI, 'getRoleAdmin'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof meetingMinutesABI,
      'getRoleAdmin',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: meetingMinutesABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<
    typeof meetingMinutesABI,
    'getRoleAdmin',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"getSeqList"`.
 */
export function useMeetingMinutesGetSeqList<
  TSelectData = ReadContractResult<typeof meetingMinutesABI, 'getSeqList'>,
>(
  config: Omit<
    UseContractReadConfig<typeof meetingMinutesABI, 'getSeqList', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: meetingMinutesABI,
    functionName: 'getSeqList',
    ...config,
  } as UseContractReadConfig<
    typeof meetingMinutesABI,
    'getSeqList',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"getVoterOfDelegateMap"`.
 */
export function useMeetingMinutesGetVoterOfDelegateMap<
  TSelectData = ReadContractResult<
    typeof meetingMinutesABI,
    'getVoterOfDelegateMap'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof meetingMinutesABI,
      'getVoterOfDelegateMap',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: meetingMinutesABI,
    functionName: 'getVoterOfDelegateMap',
    ...config,
  } as UseContractReadConfig<
    typeof meetingMinutesABI,
    'getVoterOfDelegateMap',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"hasRole"`.
 */
export function useMeetingMinutesHasRole<
  TSelectData = ReadContractResult<typeof meetingMinutesABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof meetingMinutesABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: meetingMinutesABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof meetingMinutesABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"isFinalized"`.
 */
export function useMeetingMinutesIsFinalized<
  TSelectData = ReadContractResult<typeof meetingMinutesABI, 'isFinalized'>,
>(
  config: Omit<
    UseContractReadConfig<typeof meetingMinutesABI, 'isFinalized', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: meetingMinutesABI,
    functionName: 'isFinalized',
    ...config,
  } as UseContractReadConfig<
    typeof meetingMinutesABI,
    'isFinalized',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"isPassed"`.
 */
export function useMeetingMinutesIsPassed<
  TSelectData = ReadContractResult<typeof meetingMinutesABI, 'isPassed'>,
>(
  config: Omit<
    UseContractReadConfig<typeof meetingMinutesABI, 'isPassed', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: meetingMinutesABI,
    functionName: 'isPassed',
    ...config,
  } as UseContractReadConfig<typeof meetingMinutesABI, 'isPassed', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"isProposed"`.
 */
export function useMeetingMinutesIsProposed<
  TSelectData = ReadContractResult<typeof meetingMinutesABI, 'isProposed'>,
>(
  config: Omit<
    UseContractReadConfig<typeof meetingMinutesABI, 'isProposed', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: meetingMinutesABI,
    functionName: 'isProposed',
    ...config,
  } as UseContractReadConfig<
    typeof meetingMinutesABI,
    'isProposed',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"isVoted"`.
 */
export function useMeetingMinutesIsVoted<
  TSelectData = ReadContractResult<typeof meetingMinutesABI, 'isVoted'>,
>(
  config: Omit<
    UseContractReadConfig<typeof meetingMinutesABI, 'isVoted', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: meetingMinutesABI,
    functionName: 'isVoted',
    ...config,
  } as UseContractReadConfig<typeof meetingMinutesABI, 'isVoted', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"isVotedFor"`.
 */
export function useMeetingMinutesIsVotedFor<
  TSelectData = ReadContractResult<typeof meetingMinutesABI, 'isVotedFor'>,
>(
  config: Omit<
    UseContractReadConfig<typeof meetingMinutesABI, 'isVotedFor', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: meetingMinutesABI,
    functionName: 'isVotedFor',
    ...config,
  } as UseContractReadConfig<
    typeof meetingMinutesABI,
    'isVotedFor',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"voteEnded"`.
 */
export function useMeetingMinutesVoteEnded<
  TSelectData = ReadContractResult<typeof meetingMinutesABI, 'voteEnded'>,
>(
  config: Omit<
    UseContractReadConfig<typeof meetingMinutesABI, 'voteEnded', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: meetingMinutesABI,
    functionName: 'voteEnded',
    ...config,
  } as UseContractReadConfig<
    typeof meetingMinutesABI,
    'voteEnded',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"voteStarted"`.
 */
export function useMeetingMinutesVoteStarted<
  TSelectData = ReadContractResult<typeof meetingMinutesABI, 'voteStarted'>,
>(
  config: Omit<
    UseContractReadConfig<typeof meetingMinutesABI, 'voteStarted', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: meetingMinutesABI,
    functionName: 'voteStarted',
    ...config,
  } as UseContractReadConfig<
    typeof meetingMinutesABI,
    'voteStarted',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__.
 */
export function useMeetingMinutesWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof meetingMinutesABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof meetingMinutesABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof meetingMinutesABI, TFunctionName>({
    abi: meetingMinutesABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useMeetingMinutesAbandonRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof meetingMinutesABI,
          'abandonRole'
        >['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<TMode, typeof meetingMinutesABI, 'abandonRole'> & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof meetingMinutesABI, 'abandonRole'>({
    abi: meetingMinutesABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"castVoteInBoardMeeting"`.
 */
export function useMeetingMinutesCastVoteInBoardMeeting<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof meetingMinutesABI,
          'castVoteInBoardMeeting'
        >['abi'],
        'castVoteInBoardMeeting'
      > & { functionName?: 'castVoteInBoardMeeting' }
    : UseContractWriteConfig<
        TMode,
        typeof meetingMinutesABI,
        'castVoteInBoardMeeting'
      > & {
        abi?: never
        functionName?: 'castVoteInBoardMeeting'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof meetingMinutesABI,
    'castVoteInBoardMeeting'
  >({
    abi: meetingMinutesABI,
    functionName: 'castVoteInBoardMeeting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"castVoteInGeneralMeeting"`.
 */
export function useMeetingMinutesCastVoteInGeneralMeeting<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof meetingMinutesABI,
          'castVoteInGeneralMeeting'
        >['abi'],
        'castVoteInGeneralMeeting'
      > & { functionName?: 'castVoteInGeneralMeeting' }
    : UseContractWriteConfig<
        TMode,
        typeof meetingMinutesABI,
        'castVoteInGeneralMeeting'
      > & {
        abi?: never
        functionName?: 'castVoteInGeneralMeeting'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof meetingMinutesABI,
    'castVoteInGeneralMeeting'
  >({
    abi: meetingMinutesABI,
    functionName: 'castVoteInGeneralMeeting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"createAction"`.
 */
export function useMeetingMinutesCreateAction<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof meetingMinutesABI,
          'createAction'
        >['abi'],
        'createAction'
      > & { functionName?: 'createAction' }
    : UseContractWriteConfig<
        TMode,
        typeof meetingMinutesABI,
        'createAction'
      > & {
        abi?: never
        functionName?: 'createAction'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof meetingMinutesABI, 'createAction'>({
    abi: meetingMinutesABI,
    functionName: 'createAction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"createMotionToApproveDoc"`.
 */
export function useMeetingMinutesCreateMotionToApproveDoc<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof meetingMinutesABI,
          'createMotionToApproveDoc'
        >['abi'],
        'createMotionToApproveDoc'
      > & { functionName?: 'createMotionToApproveDoc' }
    : UseContractWriteConfig<
        TMode,
        typeof meetingMinutesABI,
        'createMotionToApproveDoc'
      > & {
        abi?: never
        functionName?: 'createMotionToApproveDoc'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof meetingMinutesABI,
    'createMotionToApproveDoc'
  >({
    abi: meetingMinutesABI,
    functionName: 'createMotionToApproveDoc',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"createMotionToRemoveOfficer"`.
 */
export function useMeetingMinutesCreateMotionToRemoveOfficer<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof meetingMinutesABI,
          'createMotionToRemoveOfficer'
        >['abi'],
        'createMotionToRemoveOfficer'
      > & { functionName?: 'createMotionToRemoveOfficer' }
    : UseContractWriteConfig<
        TMode,
        typeof meetingMinutesABI,
        'createMotionToRemoveOfficer'
      > & {
        abi?: never
        functionName?: 'createMotionToRemoveOfficer'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof meetingMinutesABI,
    'createMotionToRemoveOfficer'
  >({
    abi: meetingMinutesABI,
    functionName: 'createMotionToRemoveOfficer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"entrustDelegate"`.
 */
export function useMeetingMinutesEntrustDelegate<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof meetingMinutesABI,
          'entrustDelegate'
        >['abi'],
        'entrustDelegate'
      > & { functionName?: 'entrustDelegate' }
    : UseContractWriteConfig<
        TMode,
        typeof meetingMinutesABI,
        'entrustDelegate'
      > & {
        abi?: never
        functionName?: 'entrustDelegate'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof meetingMinutesABI, 'entrustDelegate'>({
    abi: meetingMinutesABI,
    functionName: 'entrustDelegate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"execAction"`.
 */
export function useMeetingMinutesExecAction<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof meetingMinutesABI,
          'execAction'
        >['abi'],
        'execAction'
      > & { functionName?: 'execAction' }
    : UseContractWriteConfig<TMode, typeof meetingMinutesABI, 'execAction'> & {
        abi?: never
        functionName?: 'execAction'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof meetingMinutesABI, 'execAction'>({
    abi: meetingMinutesABI,
    functionName: 'execAction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"execResolution"`.
 */
export function useMeetingMinutesExecResolution<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof meetingMinutesABI,
          'execResolution'
        >['abi'],
        'execResolution'
      > & { functionName?: 'execResolution' }
    : UseContractWriteConfig<
        TMode,
        typeof meetingMinutesABI,
        'execResolution'
      > & {
        abi?: never
        functionName?: 'execResolution'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof meetingMinutesABI, 'execResolution'>({
    abi: meetingMinutesABI,
    functionName: 'execResolution',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"grantRole"`.
 */
export function useMeetingMinutesGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof meetingMinutesABI,
          'grantRole'
        >['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof meetingMinutesABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof meetingMinutesABI, 'grantRole'>({
    abi: meetingMinutesABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"init"`.
 */
export function useMeetingMinutesInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof meetingMinutesABI, 'init'>['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof meetingMinutesABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof meetingMinutesABI, 'init'>({
    abi: meetingMinutesABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"lockContents"`.
 */
export function useMeetingMinutesLockContents<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof meetingMinutesABI,
          'lockContents'
        >['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<
        TMode,
        typeof meetingMinutesABI,
        'lockContents'
      > & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof meetingMinutesABI, 'lockContents'>({
    abi: meetingMinutesABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"nominateOfficer"`.
 */
export function useMeetingMinutesNominateOfficer<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof meetingMinutesABI,
          'nominateOfficer'
        >['abi'],
        'nominateOfficer'
      > & { functionName?: 'nominateOfficer' }
    : UseContractWriteConfig<
        TMode,
        typeof meetingMinutesABI,
        'nominateOfficer'
      > & {
        abi?: never
        functionName?: 'nominateOfficer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof meetingMinutesABI, 'nominateOfficer'>({
    abi: meetingMinutesABI,
    functionName: 'nominateOfficer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"proposeMotionToBoard"`.
 */
export function useMeetingMinutesProposeMotionToBoard<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof meetingMinutesABI,
          'proposeMotionToBoard'
        >['abi'],
        'proposeMotionToBoard'
      > & { functionName?: 'proposeMotionToBoard' }
    : UseContractWriteConfig<
        TMode,
        typeof meetingMinutesABI,
        'proposeMotionToBoard'
      > & {
        abi?: never
        functionName?: 'proposeMotionToBoard'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof meetingMinutesABI,
    'proposeMotionToBoard'
  >({
    abi: meetingMinutesABI,
    functionName: 'proposeMotionToBoard',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"proposeMotionToGeneralMeeting"`.
 */
export function useMeetingMinutesProposeMotionToGeneralMeeting<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof meetingMinutesABI,
          'proposeMotionToGeneralMeeting'
        >['abi'],
        'proposeMotionToGeneralMeeting'
      > & { functionName?: 'proposeMotionToGeneralMeeting' }
    : UseContractWriteConfig<
        TMode,
        typeof meetingMinutesABI,
        'proposeMotionToGeneralMeeting'
      > & {
        abi?: never
        functionName?: 'proposeMotionToGeneralMeeting'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof meetingMinutesABI,
    'proposeMotionToGeneralMeeting'
  >({
    abi: meetingMinutesABI,
    functionName: 'proposeMotionToGeneralMeeting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useMeetingMinutesRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof meetingMinutesABI,
          'renounceRole'
        >['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<
        TMode,
        typeof meetingMinutesABI,
        'renounceRole'
      > & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof meetingMinutesABI, 'renounceRole'>({
    abi: meetingMinutesABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useMeetingMinutesRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof meetingMinutesABI,
          'revokeRole'
        >['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof meetingMinutesABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof meetingMinutesABI, 'revokeRole'>({
    abi: meetingMinutesABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useMeetingMinutesSetDirectKeeper<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof meetingMinutesABI,
          'setDirectKeeper'
        >['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof meetingMinutesABI,
        'setDirectKeeper'
      > & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof meetingMinutesABI, 'setDirectKeeper'>({
    abi: meetingMinutesABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"setOwner"`.
 */
export function useMeetingMinutesSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof meetingMinutesABI, 'setOwner'>['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof meetingMinutesABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof meetingMinutesABI, 'setOwner'>({
    abi: meetingMinutesABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useMeetingMinutesSetRoleAdmin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof meetingMinutesABI,
          'setRoleAdmin'
        >['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<
        TMode,
        typeof meetingMinutesABI,
        'setRoleAdmin'
      > & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof meetingMinutesABI, 'setRoleAdmin'>({
    abi: meetingMinutesABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function useMeetingMinutesTakeBackKeys<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof meetingMinutesABI,
          'takeBackKeys'
        >['abi'],
        'takeBackKeys'
      > & { functionName?: 'takeBackKeys' }
    : UseContractWriteConfig<
        TMode,
        typeof meetingMinutesABI,
        'takeBackKeys'
      > & {
        abi?: never
        functionName?: 'takeBackKeys'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof meetingMinutesABI, 'takeBackKeys'>({
    abi: meetingMinutesABI,
    functionName: 'takeBackKeys',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"voteCounting"`.
 */
export function useMeetingMinutesVoteCounting<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof meetingMinutesABI,
          'voteCounting'
        >['abi'],
        'voteCounting'
      > & { functionName?: 'voteCounting' }
    : UseContractWriteConfig<
        TMode,
        typeof meetingMinutesABI,
        'voteCounting'
      > & {
        abi?: never
        functionName?: 'voteCounting'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof meetingMinutesABI, 'voteCounting'>({
    abi: meetingMinutesABI,
    functionName: 'voteCounting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__.
 */
export function usePrepareMeetingMinutesWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof meetingMinutesABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: meetingMinutesABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof meetingMinutesABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareMeetingMinutesAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof meetingMinutesABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: meetingMinutesABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof meetingMinutesABI, 'abandonRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"castVoteInBoardMeeting"`.
 */
export function usePrepareMeetingMinutesCastVoteInBoardMeeting(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof meetingMinutesABI,
      'castVoteInBoardMeeting'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: meetingMinutesABI,
    functionName: 'castVoteInBoardMeeting',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof meetingMinutesABI,
    'castVoteInBoardMeeting'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"castVoteInGeneralMeeting"`.
 */
export function usePrepareMeetingMinutesCastVoteInGeneralMeeting(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof meetingMinutesABI,
      'castVoteInGeneralMeeting'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: meetingMinutesABI,
    functionName: 'castVoteInGeneralMeeting',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof meetingMinutesABI,
    'castVoteInGeneralMeeting'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"createAction"`.
 */
export function usePrepareMeetingMinutesCreateAction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof meetingMinutesABI, 'createAction'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: meetingMinutesABI,
    functionName: 'createAction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof meetingMinutesABI, 'createAction'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"createMotionToApproveDoc"`.
 */
export function usePrepareMeetingMinutesCreateMotionToApproveDoc(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof meetingMinutesABI,
      'createMotionToApproveDoc'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: meetingMinutesABI,
    functionName: 'createMotionToApproveDoc',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof meetingMinutesABI,
    'createMotionToApproveDoc'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"createMotionToRemoveOfficer"`.
 */
export function usePrepareMeetingMinutesCreateMotionToRemoveOfficer(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof meetingMinutesABI,
      'createMotionToRemoveOfficer'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: meetingMinutesABI,
    functionName: 'createMotionToRemoveOfficer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof meetingMinutesABI,
    'createMotionToRemoveOfficer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"entrustDelegate"`.
 */
export function usePrepareMeetingMinutesEntrustDelegate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof meetingMinutesABI, 'entrustDelegate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: meetingMinutesABI,
    functionName: 'entrustDelegate',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof meetingMinutesABI,
    'entrustDelegate'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"execAction"`.
 */
export function usePrepareMeetingMinutesExecAction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof meetingMinutesABI, 'execAction'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: meetingMinutesABI,
    functionName: 'execAction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof meetingMinutesABI, 'execAction'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"execResolution"`.
 */
export function usePrepareMeetingMinutesExecResolution(
  config: Omit<
    UsePrepareContractWriteConfig<typeof meetingMinutesABI, 'execResolution'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: meetingMinutesABI,
    functionName: 'execResolution',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof meetingMinutesABI,
    'execResolution'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareMeetingMinutesGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof meetingMinutesABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: meetingMinutesABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof meetingMinutesABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareMeetingMinutesInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof meetingMinutesABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: meetingMinutesABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof meetingMinutesABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareMeetingMinutesLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<typeof meetingMinutesABI, 'lockContents'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: meetingMinutesABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<typeof meetingMinutesABI, 'lockContents'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"nominateOfficer"`.
 */
export function usePrepareMeetingMinutesNominateOfficer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof meetingMinutesABI, 'nominateOfficer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: meetingMinutesABI,
    functionName: 'nominateOfficer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof meetingMinutesABI,
    'nominateOfficer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"proposeMotionToBoard"`.
 */
export function usePrepareMeetingMinutesProposeMotionToBoard(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof meetingMinutesABI,
      'proposeMotionToBoard'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: meetingMinutesABI,
    functionName: 'proposeMotionToBoard',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof meetingMinutesABI,
    'proposeMotionToBoard'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"proposeMotionToGeneralMeeting"`.
 */
export function usePrepareMeetingMinutesProposeMotionToGeneralMeeting(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof meetingMinutesABI,
      'proposeMotionToGeneralMeeting'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: meetingMinutesABI,
    functionName: 'proposeMotionToGeneralMeeting',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof meetingMinutesABI,
    'proposeMotionToGeneralMeeting'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareMeetingMinutesRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof meetingMinutesABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: meetingMinutesABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof meetingMinutesABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareMeetingMinutesRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof meetingMinutesABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: meetingMinutesABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof meetingMinutesABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareMeetingMinutesSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof meetingMinutesABI, 'setDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: meetingMinutesABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof meetingMinutesABI,
    'setDirectKeeper'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareMeetingMinutesSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof meetingMinutesABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: meetingMinutesABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof meetingMinutesABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareMeetingMinutesSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof meetingMinutesABI, 'setRoleAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: meetingMinutesABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof meetingMinutesABI, 'setRoleAdmin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function usePrepareMeetingMinutesTakeBackKeys(
  config: Omit<
    UsePrepareContractWriteConfig<typeof meetingMinutesABI, 'takeBackKeys'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: meetingMinutesABI,
    functionName: 'takeBackKeys',
    ...config,
  } as UsePrepareContractWriteConfig<typeof meetingMinutesABI, 'takeBackKeys'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"voteCounting"`.
 */
export function usePrepareMeetingMinutesVoteCounting(
  config: Omit<
    UsePrepareContractWriteConfig<typeof meetingMinutesABI, 'voteCounting'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: meetingMinutesABI,
    functionName: 'voteCounting',
    ...config,
  } as UsePrepareContractWriteConfig<typeof meetingMinutesABI, 'voteCounting'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link meetingMinutesABI}__.
 */
export function useMeetingMinutesEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof meetingMinutesABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: meetingMinutesABI,
    ...config,
  } as UseContractEventConfig<typeof meetingMinutesABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link meetingMinutesABI}__ and `eventName` set to `"CastVoteInBoardMeeting"`.
 */
export function useMeetingMinutesCastVoteInBoardMeetingEvent(
  config: Omit<
    UseContractEventConfig<typeof meetingMinutesABI, 'CastVoteInBoardMeeting'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: meetingMinutesABI,
    eventName: 'CastVoteInBoardMeeting',
    ...config,
  } as UseContractEventConfig<
    typeof meetingMinutesABI,
    'CastVoteInBoardMeeting'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link meetingMinutesABI}__ and `eventName` set to `"CastVoteInGeneralMeeting"`.
 */
export function useMeetingMinutesCastVoteInGeneralMeetingEvent(
  config: Omit<
    UseContractEventConfig<
      typeof meetingMinutesABI,
      'CastVoteInGeneralMeeting'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: meetingMinutesABI,
    eventName: 'CastVoteInGeneralMeeting',
    ...config,
  } as UseContractEventConfig<
    typeof meetingMinutesABI,
    'CastVoteInGeneralMeeting'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link meetingMinutesABI}__ and `eventName` set to `"CreateMotion"`.
 */
export function useMeetingMinutesCreateMotionEvent(
  config: Omit<
    UseContractEventConfig<typeof meetingMinutesABI, 'CreateMotion'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: meetingMinutesABI,
    eventName: 'CreateMotion',
    ...config,
  } as UseContractEventConfig<typeof meetingMinutesABI, 'CreateMotion'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link meetingMinutesABI}__ and `eventName` set to `"EntrustDelegate"`.
 */
export function useMeetingMinutesEntrustDelegateEvent(
  config: Omit<
    UseContractEventConfig<typeof meetingMinutesABI, 'EntrustDelegate'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: meetingMinutesABI,
    eventName: 'EntrustDelegate',
    ...config,
  } as UseContractEventConfig<typeof meetingMinutesABI, 'EntrustDelegate'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link meetingMinutesABI}__ and `eventName` set to `"ExecResolution"`.
 */
export function useMeetingMinutesExecResolutionEvent(
  config: Omit<
    UseContractEventConfig<typeof meetingMinutesABI, 'ExecResolution'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: meetingMinutesABI,
    eventName: 'ExecResolution',
    ...config,
  } as UseContractEventConfig<typeof meetingMinutesABI, 'ExecResolution'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link meetingMinutesABI}__ and `eventName` set to `"Init"`.
 */
export function useMeetingMinutesInitEvent(
  config: Omit<
    UseContractEventConfig<typeof meetingMinutesABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: meetingMinutesABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof meetingMinutesABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link meetingMinutesABI}__ and `eventName` set to `"LockContents"`.
 */
export function useMeetingMinutesLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof meetingMinutesABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: meetingMinutesABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof meetingMinutesABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link meetingMinutesABI}__ and `eventName` set to `"ProposeMotionToBoard"`.
 */
export function useMeetingMinutesProposeMotionToBoardEvent(
  config: Omit<
    UseContractEventConfig<typeof meetingMinutesABI, 'ProposeMotionToBoard'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: meetingMinutesABI,
    eventName: 'ProposeMotionToBoard',
    ...config,
  } as UseContractEventConfig<typeof meetingMinutesABI, 'ProposeMotionToBoard'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link meetingMinutesABI}__ and `eventName` set to `"ProposeMotionToGeneralMeeting"`.
 */
export function useMeetingMinutesProposeMotionToGeneralMeetingEvent(
  config: Omit<
    UseContractEventConfig<
      typeof meetingMinutesABI,
      'ProposeMotionToGeneralMeeting'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: meetingMinutesABI,
    eventName: 'ProposeMotionToGeneralMeeting',
    ...config,
  } as UseContractEventConfig<
    typeof meetingMinutesABI,
    'ProposeMotionToGeneralMeeting'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link meetingMinutesABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useMeetingMinutesSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof meetingMinutesABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: meetingMinutesABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof meetingMinutesABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link meetingMinutesABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useMeetingMinutesSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof meetingMinutesABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: meetingMinutesABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof meetingMinutesABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link meetingMinutesABI}__ and `eventName` set to `"SetRoleAdmin"`.
 */
export function useMeetingMinutesSetRoleAdminEvent(
  config: Omit<
    UseContractEventConfig<typeof meetingMinutesABI, 'SetRoleAdmin'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: meetingMinutesABI,
    eventName: 'SetRoleAdmin',
    ...config,
  } as UseContractEventConfig<typeof meetingMinutesABI, 'SetRoleAdmin'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link meetingMinutesABI}__ and `eventName` set to `"VoteCounting"`.
 */
export function useMeetingMinutesVoteCountingEvent(
  config: Omit<
    UseContractEventConfig<typeof meetingMinutesABI, 'VoteCounting'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: meetingMinutesABI,
    eventName: 'VoteCounting',
    ...config,
  } as UseContractEventConfig<typeof meetingMinutesABI, 'VoteCounting'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link sigPageABI}__.
 */
export function useSigPage(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: sigPageABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sigPageABI}__.
 */
export function useSigPageRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof sigPageABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof sigPageABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: sigPageABI,
    ...config,
  } as UseContractReadConfig<typeof sigPageABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"circulated"`.
 */
export function useSigPageCirculated<
  TSelectData = ReadContractResult<typeof sigPageABI, 'circulated'>,
>(
  config: Omit<
    UseContractReadConfig<typeof sigPageABI, 'circulated', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sigPageABI,
    functionName: 'circulated',
    ...config,
  } as UseContractReadConfig<typeof sigPageABI, 'circulated', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"established"`.
 */
export function useSigPageEstablished<
  TSelectData = ReadContractResult<typeof sigPageABI, 'established'>,
>(
  config: Omit<
    UseContractReadConfig<typeof sigPageABI, 'established', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sigPageABI,
    functionName: 'established',
    ...config,
  } as UseContractReadConfig<typeof sigPageABI, 'established', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"getBuyers"`.
 */
export function useSigPageGetBuyers<
  TSelectData = ReadContractResult<typeof sigPageABI, 'getBuyers'>,
>(
  config: Omit<
    UseContractReadConfig<typeof sigPageABI, 'getBuyers', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sigPageABI,
    functionName: 'getBuyers',
    ...config,
  } as UseContractReadConfig<typeof sigPageABI, 'getBuyers', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"getCirculateDate"`.
 */
export function useSigPageGetCirculateDate<
  TSelectData = ReadContractResult<typeof sigPageABI, 'getCirculateDate'>,
>(
  config: Omit<
    UseContractReadConfig<typeof sigPageABI, 'getCirculateDate', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sigPageABI,
    functionName: 'getCirculateDate',
    ...config,
  } as UseContractReadConfig<
    typeof sigPageABI,
    'getCirculateDate',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"getClosingDays"`.
 */
export function useSigPageGetClosingDays<
  TSelectData = ReadContractResult<typeof sigPageABI, 'getClosingDays'>,
>(
  config: Omit<
    UseContractReadConfig<typeof sigPageABI, 'getClosingDays', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sigPageABI,
    functionName: 'getClosingDays',
    ...config,
  } as UseContractReadConfig<typeof sigPageABI, 'getClosingDays', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"getClosingDeadline"`.
 */
export function useSigPageGetClosingDeadline<
  TSelectData = ReadContractResult<typeof sigPageABI, 'getClosingDeadline'>,
>(
  config: Omit<
    UseContractReadConfig<typeof sigPageABI, 'getClosingDeadline', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sigPageABI,
    functionName: 'getClosingDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof sigPageABI,
    'getClosingDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"getDK"`.
 */
export function useSigPageGetDk<
  TSelectData = ReadContractResult<typeof sigPageABI, 'getDK'>,
>(
  config: Omit<
    UseContractReadConfig<typeof sigPageABI, 'getDK', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sigPageABI,
    functionName: 'getDK',
    ...config,
  } as UseContractReadConfig<typeof sigPageABI, 'getDK', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"getOwner"`.
 */
export function useSigPageGetOwner<
  TSelectData = ReadContractResult<typeof sigPageABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof sigPageABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sigPageABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<typeof sigPageABI, 'getOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"getParasOfPage"`.
 */
export function useSigPageGetParasOfPage<
  TSelectData = ReadContractResult<typeof sigPageABI, 'getParasOfPage'>,
>(
  config: Omit<
    UseContractReadConfig<typeof sigPageABI, 'getParasOfPage', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sigPageABI,
    functionName: 'getParasOfPage',
    ...config,
  } as UseContractReadConfig<typeof sigPageABI, 'getParasOfPage', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"getParties"`.
 */
export function useSigPageGetParties<
  TSelectData = ReadContractResult<typeof sigPageABI, 'getParties'>,
>(
  config: Omit<
    UseContractReadConfig<typeof sigPageABI, 'getParties', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sigPageABI,
    functionName: 'getParties',
    ...config,
  } as UseContractReadConfig<typeof sigPageABI, 'getParties', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useSigPageGetRoleAdmin<
  TSelectData = ReadContractResult<typeof sigPageABI, 'getRoleAdmin'>,
>(
  config: Omit<
    UseContractReadConfig<typeof sigPageABI, 'getRoleAdmin', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sigPageABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<typeof sigPageABI, 'getRoleAdmin', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"getSellers"`.
 */
export function useSigPageGetSellers<
  TSelectData = ReadContractResult<typeof sigPageABI, 'getSellers'>,
>(
  config: Omit<
    UseContractReadConfig<typeof sigPageABI, 'getSellers', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sigPageABI,
    functionName: 'getSellers',
    ...config,
  } as UseContractReadConfig<typeof sigPageABI, 'getSellers', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"getSigDeadline"`.
 */
export function useSigPageGetSigDeadline<
  TSelectData = ReadContractResult<typeof sigPageABI, 'getSigDeadline'>,
>(
  config: Omit<
    UseContractReadConfig<typeof sigPageABI, 'getSigDeadline', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sigPageABI,
    functionName: 'getSigDeadline',
    ...config,
  } as UseContractReadConfig<typeof sigPageABI, 'getSigDeadline', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"getSigOfParty"`.
 */
export function useSigPageGetSigOfParty<
  TSelectData = ReadContractResult<typeof sigPageABI, 'getSigOfParty'>,
>(
  config: Omit<
    UseContractReadConfig<typeof sigPageABI, 'getSigOfParty', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sigPageABI,
    functionName: 'getSigOfParty',
    ...config,
  } as UseContractReadConfig<typeof sigPageABI, 'getSigOfParty', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"getSigningDays"`.
 */
export function useSigPageGetSigningDays<
  TSelectData = ReadContractResult<typeof sigPageABI, 'getSigningDays'>,
>(
  config: Omit<
    UseContractReadConfig<typeof sigPageABI, 'getSigningDays', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sigPageABI,
    functionName: 'getSigningDays',
    ...config,
  } as UseContractReadConfig<typeof sigPageABI, 'getSigningDays', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"getSigsOfPage"`.
 */
export function useSigPageGetSigsOfPage<
  TSelectData = ReadContractResult<typeof sigPageABI, 'getSigsOfPage'>,
>(
  config: Omit<
    UseContractReadConfig<typeof sigPageABI, 'getSigsOfPage', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sigPageABI,
    functionName: 'getSigsOfPage',
    ...config,
  } as UseContractReadConfig<typeof sigPageABI, 'getSigsOfPage', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"hasRole"`.
 */
export function useSigPageHasRole<
  TSelectData = ReadContractResult<typeof sigPageABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof sigPageABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sigPageABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof sigPageABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"isBuyer"`.
 */
export function useSigPageIsBuyer<
  TSelectData = ReadContractResult<typeof sigPageABI, 'isBuyer'>,
>(
  config: Omit<
    UseContractReadConfig<typeof sigPageABI, 'isBuyer', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sigPageABI,
    functionName: 'isBuyer',
    ...config,
  } as UseContractReadConfig<typeof sigPageABI, 'isBuyer', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"isFinalized"`.
 */
export function useSigPageIsFinalized<
  TSelectData = ReadContractResult<typeof sigPageABI, 'isFinalized'>,
>(
  config: Omit<
    UseContractReadConfig<typeof sigPageABI, 'isFinalized', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sigPageABI,
    functionName: 'isFinalized',
    ...config,
  } as UseContractReadConfig<typeof sigPageABI, 'isFinalized', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"isInitSigner"`.
 */
export function useSigPageIsInitSigner<
  TSelectData = ReadContractResult<typeof sigPageABI, 'isInitSigner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof sigPageABI, 'isInitSigner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sigPageABI,
    functionName: 'isInitSigner',
    ...config,
  } as UseContractReadConfig<typeof sigPageABI, 'isInitSigner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"isParty"`.
 */
export function useSigPageIsParty<
  TSelectData = ReadContractResult<typeof sigPageABI, 'isParty'>,
>(
  config: Omit<
    UseContractReadConfig<typeof sigPageABI, 'isParty', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sigPageABI,
    functionName: 'isParty',
    ...config,
  } as UseContractReadConfig<typeof sigPageABI, 'isParty', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"isSeller"`.
 */
export function useSigPageIsSeller<
  TSelectData = ReadContractResult<typeof sigPageABI, 'isSeller'>,
>(
  config: Omit<
    UseContractReadConfig<typeof sigPageABI, 'isSeller', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sigPageABI,
    functionName: 'isSeller',
    ...config,
  } as UseContractReadConfig<typeof sigPageABI, 'isSeller', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"isSigner"`.
 */
export function useSigPageIsSigner<
  TSelectData = ReadContractResult<typeof sigPageABI, 'isSigner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof sigPageABI, 'isSigner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sigPageABI,
    functionName: 'isSigner',
    ...config,
  } as UseContractReadConfig<typeof sigPageABI, 'isSigner', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sigPageABI}__.
 */
export function useSigPageWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sigPageABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof sigPageABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof sigPageABI, TFunctionName>({
    abi: sigPageABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useSigPageAbandonRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sigPageABI, 'abandonRole'>['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<TMode, typeof sigPageABI, 'abandonRole'> & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof sigPageABI, 'abandonRole'>({
    abi: sigPageABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"addBlank"`.
 */
export function useSigPageAddBlank<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sigPageABI, 'addBlank'>['abi'],
        'addBlank'
      > & { functionName?: 'addBlank' }
    : UseContractWriteConfig<TMode, typeof sigPageABI, 'addBlank'> & {
        abi?: never
        functionName?: 'addBlank'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof sigPageABI, 'addBlank'>({
    abi: sigPageABI,
    functionName: 'addBlank',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"circulateDoc"`.
 */
export function useSigPageCirculateDoc<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sigPageABI, 'circulateDoc'>['abi'],
        'circulateDoc'
      > & { functionName?: 'circulateDoc' }
    : UseContractWriteConfig<TMode, typeof sigPageABI, 'circulateDoc'> & {
        abi?: never
        functionName?: 'circulateDoc'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof sigPageABI, 'circulateDoc'>({
    abi: sigPageABI,
    functionName: 'circulateDoc',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"grantRole"`.
 */
export function useSigPageGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sigPageABI, 'grantRole'>['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof sigPageABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof sigPageABI, 'grantRole'>({
    abi: sigPageABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"init"`.
 */
export function useSigPageInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sigPageABI, 'init'>['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof sigPageABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof sigPageABI, 'init'>({
    abi: sigPageABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"lockContents"`.
 */
export function useSigPageLockContents<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sigPageABI, 'lockContents'>['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<TMode, typeof sigPageABI, 'lockContents'> & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof sigPageABI, 'lockContents'>({
    abi: sigPageABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"regSig"`.
 */
export function useSigPageRegSig<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sigPageABI, 'regSig'>['abi'],
        'regSig'
      > & { functionName?: 'regSig' }
    : UseContractWriteConfig<TMode, typeof sigPageABI, 'regSig'> & {
        abi?: never
        functionName?: 'regSig'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof sigPageABI, 'regSig'>({
    abi: sigPageABI,
    functionName: 'regSig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"removeBlank"`.
 */
export function useSigPageRemoveBlank<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sigPageABI, 'removeBlank'>['abi'],
        'removeBlank'
      > & { functionName?: 'removeBlank' }
    : UseContractWriteConfig<TMode, typeof sigPageABI, 'removeBlank'> & {
        abi?: never
        functionName?: 'removeBlank'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof sigPageABI, 'removeBlank'>({
    abi: sigPageABI,
    functionName: 'removeBlank',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useSigPageRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sigPageABI, 'renounceRole'>['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<TMode, typeof sigPageABI, 'renounceRole'> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof sigPageABI, 'renounceRole'>({
    abi: sigPageABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useSigPageRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sigPageABI, 'revokeRole'>['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof sigPageABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof sigPageABI, 'revokeRole'>({
    abi: sigPageABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useSigPageSetDirectKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sigPageABI, 'setDirectKeeper'>['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<TMode, typeof sigPageABI, 'setDirectKeeper'> & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof sigPageABI, 'setDirectKeeper'>({
    abi: sigPageABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"setOwner"`.
 */
export function useSigPageSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sigPageABI, 'setOwner'>['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof sigPageABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof sigPageABI, 'setOwner'>({
    abi: sigPageABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useSigPageSetRoleAdmin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sigPageABI, 'setRoleAdmin'>['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<TMode, typeof sigPageABI, 'setRoleAdmin'> & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof sigPageABI, 'setRoleAdmin'>({
    abi: sigPageABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"setTiming"`.
 */
export function useSigPageSetTiming<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sigPageABI, 'setTiming'>['abi'],
        'setTiming'
      > & { functionName?: 'setTiming' }
    : UseContractWriteConfig<TMode, typeof sigPageABI, 'setTiming'> & {
        abi?: never
        functionName?: 'setTiming'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof sigPageABI, 'setTiming'>({
    abi: sigPageABI,
    functionName: 'setTiming',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"signDoc"`.
 */
export function useSigPageSignDoc<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sigPageABI, 'signDoc'>['abi'],
        'signDoc'
      > & { functionName?: 'signDoc' }
    : UseContractWriteConfig<TMode, typeof sigPageABI, 'signDoc'> & {
        abi?: never
        functionName?: 'signDoc'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof sigPageABI, 'signDoc'>({
    abi: sigPageABI,
    functionName: 'signDoc',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function useSigPageTakeBackKeys<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sigPageABI, 'takeBackKeys'>['abi'],
        'takeBackKeys'
      > & { functionName?: 'takeBackKeys' }
    : UseContractWriteConfig<TMode, typeof sigPageABI, 'takeBackKeys'> & {
        abi?: never
        functionName?: 'takeBackKeys'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof sigPageABI, 'takeBackKeys'>({
    abi: sigPageABI,
    functionName: 'takeBackKeys',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sigPageABI}__.
 */
export function usePrepareSigPageWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sigPageABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sigPageABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof sigPageABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareSigPageAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sigPageABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sigPageABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sigPageABI, 'abandonRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"addBlank"`.
 */
export function usePrepareSigPageAddBlank(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sigPageABI, 'addBlank'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sigPageABI,
    functionName: 'addBlank',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sigPageABI, 'addBlank'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"circulateDoc"`.
 */
export function usePrepareSigPageCirculateDoc(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sigPageABI, 'circulateDoc'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sigPageABI,
    functionName: 'circulateDoc',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sigPageABI, 'circulateDoc'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareSigPageGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sigPageABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sigPageABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sigPageABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareSigPageInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sigPageABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sigPageABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sigPageABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareSigPageLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sigPageABI, 'lockContents'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sigPageABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sigPageABI, 'lockContents'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"regSig"`.
 */
export function usePrepareSigPageRegSig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sigPageABI, 'regSig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sigPageABI,
    functionName: 'regSig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sigPageABI, 'regSig'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"removeBlank"`.
 */
export function usePrepareSigPageRemoveBlank(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sigPageABI, 'removeBlank'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sigPageABI,
    functionName: 'removeBlank',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sigPageABI, 'removeBlank'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareSigPageRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sigPageABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sigPageABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sigPageABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareSigPageRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sigPageABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sigPageABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sigPageABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareSigPageSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sigPageABI, 'setDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sigPageABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sigPageABI, 'setDirectKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareSigPageSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sigPageABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sigPageABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sigPageABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareSigPageSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sigPageABI, 'setRoleAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sigPageABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sigPageABI, 'setRoleAdmin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"setTiming"`.
 */
export function usePrepareSigPageSetTiming(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sigPageABI, 'setTiming'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sigPageABI,
    functionName: 'setTiming',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sigPageABI, 'setTiming'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"signDoc"`.
 */
export function usePrepareSigPageSignDoc(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sigPageABI, 'signDoc'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sigPageABI,
    functionName: 'signDoc',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sigPageABI, 'signDoc'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function usePrepareSigPageTakeBackKeys(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sigPageABI, 'takeBackKeys'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sigPageABI,
    functionName: 'takeBackKeys',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sigPageABI, 'takeBackKeys'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sigPageABI}__.
 */
export function useSigPageEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof sigPageABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: sigPageABI,
    ...config,
  } as UseContractEventConfig<typeof sigPageABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sigPageABI}__ and `eventName` set to `"CirculateDoc"`.
 */
export function useSigPageCirculateDocEvent(
  config: Omit<
    UseContractEventConfig<typeof sigPageABI, 'CirculateDoc'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: sigPageABI,
    eventName: 'CirculateDoc',
    ...config,
  } as UseContractEventConfig<typeof sigPageABI, 'CirculateDoc'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sigPageABI}__ and `eventName` set to `"Init"`.
 */
export function useSigPageInitEvent(
  config: Omit<
    UseContractEventConfig<typeof sigPageABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: sigPageABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof sigPageABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sigPageABI}__ and `eventName` set to `"LockContents"`.
 */
export function useSigPageLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof sigPageABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: sigPageABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof sigPageABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sigPageABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useSigPageSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof sigPageABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: sigPageABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof sigPageABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sigPageABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useSigPageSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof sigPageABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: sigPageABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof sigPageABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sigPageABI}__ and `eventName` set to `"SetRoleAdmin"`.
 */
export function useSigPageSetRoleAdminEvent(
  config: Omit<
    UseContractEventConfig<typeof sigPageABI, 'SetRoleAdmin'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: sigPageABI,
    eventName: 'SetRoleAdmin',
    ...config,
  } as UseContractEventConfig<typeof sigPageABI, 'SetRoleAdmin'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link arrayUtilsABI}__.
 */
export function useArrayUtils(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: arrayUtilsABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link arrayUtilsABI}__.
 */
export function useArrayUtilsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof arrayUtilsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof arrayUtilsABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: arrayUtilsABI,
    ...config,
  } as UseContractReadConfig<typeof arrayUtilsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link arrayUtilsABI}__ and `functionName` set to `"combine"`.
 */
export function useArrayUtilsCombine<
  TSelectData = ReadContractResult<typeof arrayUtilsABI, 'combine'>,
>(
  config: Omit<
    UseContractReadConfig<typeof arrayUtilsABI, 'combine', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: arrayUtilsABI,
    functionName: 'combine',
    ...config,
  } as UseContractReadConfig<typeof arrayUtilsABI, 'combine', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link arrayUtilsABI}__ and `functionName` set to `"filter"`.
 */
export function useArrayUtilsFilter<
  TSelectData = ReadContractResult<typeof arrayUtilsABI, 'filter'>,
>(
  config: Omit<
    UseContractReadConfig<typeof arrayUtilsABI, 'filter', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: arrayUtilsABI,
    functionName: 'filter',
    ...config,
  } as UseContractReadConfig<typeof arrayUtilsABI, 'filter', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link arrayUtilsABI}__ and `functionName` set to `"fullyCoveredBy"`.
 */
export function useArrayUtilsFullyCoveredBy<
  TSelectData = ReadContractResult<typeof arrayUtilsABI, 'fullyCoveredBy'>,
>(
  config: Omit<
    UseContractReadConfig<typeof arrayUtilsABI, 'fullyCoveredBy', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: arrayUtilsABI,
    functionName: 'fullyCoveredBy',
    ...config,
  } as UseContractReadConfig<
    typeof arrayUtilsABI,
    'fullyCoveredBy',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link arrayUtilsABI}__ and `functionName` set to `"merge"`.
 */
export function useArrayUtilsMerge<
  TSelectData = ReadContractResult<typeof arrayUtilsABI, 'merge'>,
>(
  config: Omit<
    UseContractReadConfig<typeof arrayUtilsABI, 'merge', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: arrayUtilsABI,
    functionName: 'merge',
    ...config,
  } as UseContractReadConfig<typeof arrayUtilsABI, 'merge', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link arrayUtilsABI}__ and `functionName` set to `"minus"`.
 */
export function useArrayUtilsMinus<
  TSelectData = ReadContractResult<typeof arrayUtilsABI, 'minus'>,
>(
  config: Omit<
    UseContractReadConfig<typeof arrayUtilsABI, 'minus', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: arrayUtilsABI,
    functionName: 'minus',
    ...config,
  } as UseContractReadConfig<typeof arrayUtilsABI, 'minus', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link arrayUtilsABI}__ and `functionName` set to `"refine"`.
 */
export function useArrayUtilsRefine<
  TSelectData = ReadContractResult<typeof arrayUtilsABI, 'refine'>,
>(
  config: Omit<
    UseContractReadConfig<typeof arrayUtilsABI, 'refine', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: arrayUtilsABI,
    functionName: 'refine',
    ...config,
  } as UseContractReadConfig<typeof arrayUtilsABI, 'refine', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link arrayUtilsABI}__ and `functionName` set to `"resize"`.
 */
export function useArrayUtilsResize<
  TSelectData = ReadContractResult<typeof arrayUtilsABI, 'resize'>,
>(
  config: Omit<
    UseContractReadConfig<typeof arrayUtilsABI, 'resize', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: arrayUtilsABI,
    functionName: 'resize',
    ...config,
  } as UseContractReadConfig<typeof arrayUtilsABI, 'resize', TSelectData>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link condsRepoABI}__.
 */
export function useCondsRepo(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: condsRepoABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link condsRepoABI}__.
 */
export function useCondsRepoRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof condsRepoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof condsRepoABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: condsRepoABI,
    ...config,
  } as UseContractReadConfig<typeof condsRepoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link condsRepoABI}__ and `functionName` set to `"checkCond"`.
 */
export function useCondsRepoCheckCond<
  TSelectData = ReadContractResult<typeof condsRepoABI, 'checkCond'>,
>(
  config: Omit<
    UseContractReadConfig<typeof condsRepoABI, 'checkCond', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: condsRepoABI,
    functionName: 'checkCond',
    ...config,
  } as UseContractReadConfig<typeof condsRepoABI, 'checkCond', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link condsRepoABI}__ and `functionName` set to `"checkCondsOfThree"`.
 */
export function useCondsRepoCheckCondsOfThree<
  TSelectData = ReadContractResult<typeof condsRepoABI, 'checkCondsOfThree'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof condsRepoABI,
      'checkCondsOfThree',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: condsRepoABI,
    functionName: 'checkCondsOfThree',
    ...config,
  } as UseContractReadConfig<
    typeof condsRepoABI,
    'checkCondsOfThree',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link condsRepoABI}__ and `functionName` set to `"checkCondsOfTwo"`.
 */
export function useCondsRepoCheckCondsOfTwo<
  TSelectData = ReadContractResult<typeof condsRepoABI, 'checkCondsOfTwo'>,
>(
  config: Omit<
    UseContractReadConfig<typeof condsRepoABI, 'checkCondsOfTwo', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: condsRepoABI,
    functionName: 'checkCondsOfTwo',
    ...config,
  } as UseContractReadConfig<
    typeof condsRepoABI,
    'checkCondsOfTwo',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link condsRepoABI}__ and `functionName` set to `"checkSoleCond"`.
 */
export function useCondsRepoCheckSoleCond<
  TSelectData = ReadContractResult<typeof condsRepoABI, 'checkSoleCond'>,
>(
  config: Omit<
    UseContractReadConfig<typeof condsRepoABI, 'checkSoleCond', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: condsRepoABI,
    functionName: 'checkSoleCond',
    ...config,
  } as UseContractReadConfig<typeof condsRepoABI, 'checkSoleCond', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link condsRepoABI}__ and `functionName` set to `"codifyCond"`.
 */
export function useCondsRepoCodifyCond<
  TSelectData = ReadContractResult<typeof condsRepoABI, 'codifyCond'>,
>(
  config: Omit<
    UseContractReadConfig<typeof condsRepoABI, 'codifyCond', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: condsRepoABI,
    functionName: 'codifyCond',
    ...config,
  } as UseContractReadConfig<typeof condsRepoABI, 'codifyCond', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link condsRepoABI}__ and `functionName` set to `"snParser"`.
 */
export function useCondsRepoSnParser<
  TSelectData = ReadContractResult<typeof condsRepoABI, 'snParser'>,
>(
  config: Omit<
    UseContractReadConfig<typeof condsRepoABI, 'snParser', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: condsRepoABI,
    functionName: 'snParser',
    ...config,
  } as UseContractReadConfig<typeof condsRepoABI, 'snParser', TSelectData>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link dtClaimsABI}__.
 */
export function useDtClaims(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: dtClaimsABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dtClaimsABI}__.
 */
export function useDtClaimsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof dtClaimsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof dtClaimsABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: dtClaimsABI,
    ...config,
  } as UseContractReadConfig<typeof dtClaimsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dtClaimsABI}__ and `functionName` set to `"codifyHead"`.
 */
export function useDtClaimsCodifyHead<
  TSelectData = ReadContractResult<typeof dtClaimsABI, 'codifyHead'>,
>(
  config: Omit<
    UseContractReadConfig<typeof dtClaimsABI, 'codifyHead', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dtClaimsABI,
    functionName: 'codifyHead',
    ...config,
  } as UseContractReadConfig<typeof dtClaimsABI, 'codifyHead', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dtClaimsABI}__ and `functionName` set to `"snParser"`.
 */
export function useDtClaimsSnParser<
  TSelectData = ReadContractResult<typeof dtClaimsABI, 'snParser'>,
>(
  config: Omit<
    UseContractReadConfig<typeof dtClaimsABI, 'snParser', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dtClaimsABI,
    functionName: 'snParser',
    ...config,
  } as UseContractReadConfig<typeof dtClaimsABI, 'snParser', TSelectData>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link dealsRepoABI}__.
 */
export function useDealsRepo(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: dealsRepoABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dealsRepoABI}__.
 */
export function useDealsRepoRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof dealsRepoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof dealsRepoABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: dealsRepoABI,
    ...config,
  } as UseContractReadConfig<typeof dealsRepoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dealsRepoABI}__ and `functionName` set to `"codifyHead"`.
 */
export function useDealsRepoCodifyHead<
  TSelectData = ReadContractResult<typeof dealsRepoABI, 'codifyHead'>,
>(
  config: Omit<
    UseContractReadConfig<typeof dealsRepoABI, 'codifyHead', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dealsRepoABI,
    functionName: 'codifyHead',
    ...config,
  } as UseContractReadConfig<typeof dealsRepoABI, 'codifyHead', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dealsRepoABI}__ and `functionName` set to `"snParser"`.
 */
export function useDealsRepoSnParser<
  TSelectData = ReadContractResult<typeof dealsRepoABI, 'snParser'>,
>(
  config: Omit<
    UseContractReadConfig<typeof dealsRepoABI, 'snParser', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dealsRepoABI,
    functionName: 'snParser',
    ...config,
  } as UseContractReadConfig<typeof dealsRepoABI, 'snParser', TSelectData>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link docsRepoABI}__.
 */
export function useDocsRepo(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: docsRepoABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link docsRepoABI}__.
 */
export function useDocsRepoRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof docsRepoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof docsRepoABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: docsRepoABI,
    ...config,
  } as UseContractReadConfig<typeof docsRepoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link docsRepoABI}__ and `functionName` set to `"codifyHead"`.
 */
export function useDocsRepoCodifyHead<
  TSelectData = ReadContractResult<typeof docsRepoABI, 'codifyHead'>,
>(
  config: Omit<
    UseContractReadConfig<typeof docsRepoABI, 'codifyHead', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: docsRepoABI,
    functionName: 'codifyHead',
    ...config,
  } as UseContractReadConfig<typeof docsRepoABI, 'codifyHead', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link docsRepoABI}__ and `functionName` set to `"snParser"`.
 */
export function useDocsRepoSnParser<
  TSelectData = ReadContractResult<typeof docsRepoABI, 'snParser'>,
>(
  config: Omit<
    UseContractReadConfig<typeof docsRepoABI, 'snParser', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: docsRepoABI,
    functionName: 'snParser',
    ...config,
  } as UseContractReadConfig<typeof docsRepoABI, 'snParser', TSelectData>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link lockersRepoABI}__.
 */
export function useLockersRepo(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: lockersRepoABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lockersRepoABI}__.
 */
export function useLockersRepoRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof lockersRepoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof lockersRepoABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: lockersRepoABI,
    ...config,
  } as UseContractReadConfig<typeof lockersRepoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lockersRepoABI}__ and `functionName` set to `"codifyHead"`.
 */
export function useLockersRepoCodifyHead<
  TSelectData = ReadContractResult<typeof lockersRepoABI, 'codifyHead'>,
>(
  config: Omit<
    UseContractReadConfig<typeof lockersRepoABI, 'codifyHead', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lockersRepoABI,
    functionName: 'codifyHead',
    ...config,
  } as UseContractReadConfig<typeof lockersRepoABI, 'codifyHead', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lockersRepoABI}__ and `functionName` set to `"headSnParser"`.
 */
export function useLockersRepoHeadSnParser<
  TSelectData = ReadContractResult<typeof lockersRepoABI, 'headSnParser'>,
>(
  config: Omit<
    UseContractReadConfig<typeof lockersRepoABI, 'headSnParser', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lockersRepoABI,
    functionName: 'headSnParser',
    ...config,
  } as UseContractReadConfig<
    typeof lockersRepoABI,
    'headSnParser',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link motionsRepoABI}__.
 */
export function useMotionsRepo(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: motionsRepoABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link motionsRepoABI}__.
 */
export function useMotionsRepoRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof motionsRepoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof motionsRepoABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: motionsRepoABI,
    ...config,
  } as UseContractReadConfig<typeof motionsRepoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link motionsRepoABI}__ and `functionName` set to `"codifyHead"`.
 */
export function useMotionsRepoCodifyHead<
  TSelectData = ReadContractResult<typeof motionsRepoABI, 'codifyHead'>,
>(
  config: Omit<
    UseContractReadConfig<typeof motionsRepoABI, 'codifyHead', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: motionsRepoABI,
    functionName: 'codifyHead',
    ...config,
  } as UseContractReadConfig<typeof motionsRepoABI, 'codifyHead', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link motionsRepoABI}__ and `functionName` set to `"snParser"`.
 */
export function useMotionsRepoSnParser<
  TSelectData = ReadContractResult<typeof motionsRepoABI, 'snParser'>,
>(
  config: Omit<
    UseContractReadConfig<typeof motionsRepoABI, 'snParser', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: motionsRepoABI,
    functionName: 'snParser',
    ...config,
  } as UseContractReadConfig<typeof motionsRepoABI, 'snParser', TSelectData>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link officersRepoABI}__.
 */
export function useOfficersRepo(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: officersRepoABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link officersRepoABI}__.
 */
export function useOfficersRepoRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof officersRepoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof officersRepoABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: officersRepoABI,
    ...config,
  } as UseContractReadConfig<
    typeof officersRepoABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link officersRepoABI}__ and `functionName` set to `"codifyPosition"`.
 */
export function useOfficersRepoCodifyPosition<
  TSelectData = ReadContractResult<typeof officersRepoABI, 'codifyPosition'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof officersRepoABI,
      'codifyPosition',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: officersRepoABI,
    functionName: 'codifyPosition',
    ...config,
  } as UseContractReadConfig<
    typeof officersRepoABI,
    'codifyPosition',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link officersRepoABI}__ and `functionName` set to `"snParser"`.
 */
export function useOfficersRepoSnParser<
  TSelectData = ReadContractResult<typeof officersRepoABI, 'snParser'>,
>(
  config: Omit<
    UseContractReadConfig<typeof officersRepoABI, 'snParser', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: officersRepoABI,
    functionName: 'snParser',
    ...config,
  } as UseContractReadConfig<typeof officersRepoABI, 'snParser', TSelectData>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link optionsRepoABI}__.
 */
export function useOptionsRepo(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: optionsRepoABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link optionsRepoABI}__.
 */
export function useOptionsRepoRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof optionsRepoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof optionsRepoABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: optionsRepoABI,
    ...config,
  } as UseContractReadConfig<typeof optionsRepoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link optionsRepoABI}__ and `functionName` set to `"codifyBrief"`.
 */
export function useOptionsRepoCodifyBrief<
  TSelectData = ReadContractResult<typeof optionsRepoABI, 'codifyBrief'>,
>(
  config: Omit<
    UseContractReadConfig<typeof optionsRepoABI, 'codifyBrief', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: optionsRepoABI,
    functionName: 'codifyBrief',
    ...config,
  } as UseContractReadConfig<typeof optionsRepoABI, 'codifyBrief', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link optionsRepoABI}__ and `functionName` set to `"codifyHead"`.
 */
export function useOptionsRepoCodifyHead<
  TSelectData = ReadContractResult<typeof optionsRepoABI, 'codifyHead'>,
>(
  config: Omit<
    UseContractReadConfig<typeof optionsRepoABI, 'codifyHead', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: optionsRepoABI,
    functionName: 'codifyHead',
    ...config,
  } as UseContractReadConfig<typeof optionsRepoABI, 'codifyHead', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link optionsRepoABI}__ and `functionName` set to `"snParser"`.
 */
export function useOptionsRepoSnParser<
  TSelectData = ReadContractResult<typeof optionsRepoABI, 'snParser'>,
>(
  config: Omit<
    UseContractReadConfig<typeof optionsRepoABI, 'snParser', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: optionsRepoABI,
    functionName: 'snParser',
    ...config,
  } as UseContractReadConfig<typeof optionsRepoABI, 'snParser', TSelectData>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link pledgesRepoABI}__.
 */
export function usePledgesRepo(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: pledgesRepoABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pledgesRepoABI}__.
 */
export function usePledgesRepoRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof pledgesRepoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pledgesRepoABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: pledgesRepoABI,
    ...config,
  } as UseContractReadConfig<typeof pledgesRepoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pledgesRepoABI}__ and `functionName` set to `"codifyHead"`.
 */
export function usePledgesRepoCodifyHead<
  TSelectData = ReadContractResult<typeof pledgesRepoABI, 'codifyHead'>,
>(
  config: Omit<
    UseContractReadConfig<typeof pledgesRepoABI, 'codifyHead', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pledgesRepoABI,
    functionName: 'codifyHead',
    ...config,
  } as UseContractReadConfig<typeof pledgesRepoABI, 'codifyHead', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pledgesRepoABI}__ and `functionName` set to `"snParser"`.
 */
export function usePledgesRepoSnParser<
  TSelectData = ReadContractResult<typeof pledgesRepoABI, 'snParser'>,
>(
  config: Omit<
    UseContractReadConfig<typeof pledgesRepoABI, 'snParser', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pledgesRepoABI,
    functionName: 'snParser',
    ...config,
  } as UseContractReadConfig<typeof pledgesRepoABI, 'snParser', TSelectData>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link rulesParserABI}__.
 */
export function useRulesParser(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: rulesParserABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rulesParserABI}__.
 */
export function useRulesParserRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof rulesParserABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof rulesParserABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: rulesParserABI,
    ...config,
  } as UseContractReadConfig<typeof rulesParserABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rulesParserABI}__ and `functionName` set to `"firstRefusalRuleParser"`.
 */
export function useRulesParserFirstRefusalRuleParser<
  TSelectData = ReadContractResult<
    typeof rulesParserABI,
    'firstRefusalRuleParser'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof rulesParserABI,
      'firstRefusalRuleParser',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rulesParserABI,
    functionName: 'firstRefusalRuleParser',
    ...config,
  } as UseContractReadConfig<
    typeof rulesParserABI,
    'firstRefusalRuleParser',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rulesParserABI}__ and `functionName` set to `"governanceRuleParser"`.
 */
export function useRulesParserGovernanceRuleParser<
  TSelectData = ReadContractResult<
    typeof rulesParserABI,
    'governanceRuleParser'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof rulesParserABI,
      'governanceRuleParser',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rulesParserABI,
    functionName: 'governanceRuleParser',
    ...config,
  } as UseContractReadConfig<
    typeof rulesParserABI,
    'governanceRuleParser',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rulesParserABI}__ and `functionName` set to `"groupUpdateOrderParser"`.
 */
export function useRulesParserGroupUpdateOrderParser<
  TSelectData = ReadContractResult<
    typeof rulesParserABI,
    'groupUpdateOrderParser'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof rulesParserABI,
      'groupUpdateOrderParser',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rulesParserABI,
    functionName: 'groupUpdateOrderParser',
    ...config,
  } as UseContractReadConfig<
    typeof rulesParserABI,
    'groupUpdateOrderParser',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rulesParserABI}__ and `functionName` set to `"linkRuleParser"`.
 */
export function useRulesParserLinkRuleParser<
  TSelectData = ReadContractResult<typeof rulesParserABI, 'linkRuleParser'>,
>(
  config: Omit<
    UseContractReadConfig<typeof rulesParserABI, 'linkRuleParser', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rulesParserABI,
    functionName: 'linkRuleParser',
    ...config,
  } as UseContractReadConfig<
    typeof rulesParserABI,
    'linkRuleParser',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rulesParserABI}__ and `functionName` set to `"positionAllocateRuleParser"`.
 */
export function useRulesParserPositionAllocateRuleParser<
  TSelectData = ReadContractResult<
    typeof rulesParserABI,
    'positionAllocateRuleParser'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof rulesParserABI,
      'positionAllocateRuleParser',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rulesParserABI,
    functionName: 'positionAllocateRuleParser',
    ...config,
  } as UseContractReadConfig<
    typeof rulesParserABI,
    'positionAllocateRuleParser',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rulesParserABI}__ and `functionName` set to `"votingRuleParser"`.
 */
export function useRulesParserVotingRuleParser<
  TSelectData = ReadContractResult<typeof rulesParserABI, 'votingRuleParser'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof rulesParserABI,
      'votingRuleParser',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rulesParserABI,
    functionName: 'votingRuleParser',
    ...config,
  } as UseContractReadConfig<
    typeof rulesParserABI,
    'votingRuleParser',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link sharesRepoABI}__.
 */
export function useSharesRepo(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: sharesRepoABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sharesRepoABI}__.
 */
export function useSharesRepoRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof sharesRepoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof sharesRepoABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: sharesRepoABI,
    ...config,
  } as UseContractReadConfig<typeof sharesRepoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sharesRepoABI}__ and `functionName` set to `"codifyHead"`.
 */
export function useSharesRepoCodifyHead<
  TSelectData = ReadContractResult<typeof sharesRepoABI, 'codifyHead'>,
>(
  config: Omit<
    UseContractReadConfig<typeof sharesRepoABI, 'codifyHead', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sharesRepoABI,
    functionName: 'codifyHead',
    ...config,
  } as UseContractReadConfig<typeof sharesRepoABI, 'codifyHead', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sharesRepoABI}__ and `functionName` set to `"snParser"`.
 */
export function useSharesRepoSnParser<
  TSelectData = ReadContractResult<typeof sharesRepoABI, 'snParser'>,
>(
  config: Omit<
    UseContractReadConfig<typeof sharesRepoABI, 'snParser', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sharesRepoABI,
    functionName: 'snParser',
    ...config,
  } as UseContractReadConfig<typeof sharesRepoABI, 'snParser', TSelectData>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link swapsRepoABI}__.
 */
export function useSwapsRepo(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: swapsRepoABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link swapsRepoABI}__.
 */
export function useSwapsRepoRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof swapsRepoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof swapsRepoABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: swapsRepoABI,
    ...config,
  } as UseContractReadConfig<typeof swapsRepoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link swapsRepoABI}__ and `functionName` set to `"codifyHead"`.
 */
export function useSwapsRepoCodifyHead<
  TSelectData = ReadContractResult<typeof swapsRepoABI, 'codifyHead'>,
>(
  config: Omit<
    UseContractReadConfig<typeof swapsRepoABI, 'codifyHead', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: swapsRepoABI,
    functionName: 'codifyHead',
    ...config,
  } as UseContractReadConfig<typeof swapsRepoABI, 'codifyHead', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link swapsRepoABI}__ and `functionName` set to `"snParser"`.
 */
export function useSwapsRepoSnParser<
  TSelectData = ReadContractResult<typeof swapsRepoABI, 'snParser'>,
>(
  config: Omit<
    UseContractReadConfig<typeof swapsRepoABI, 'snParser', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: swapsRepoABI,
    functionName: 'snParser',
    ...config,
  } as UseContractReadConfig<typeof swapsRepoABI, 'snParser', TSelectData>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link usersRepoABI}__.
 */
export function useUsersRepo(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: usersRepoABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link usersRepoABI}__.
 */
export function useUsersRepoRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof usersRepoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof usersRepoABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: usersRepoABI,
    ...config,
  } as UseContractReadConfig<typeof usersRepoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link usersRepoABI}__ and `functionName` set to `"infoParser"`.
 */
export function useUsersRepoInfoParser<
  TSelectData = ReadContractResult<typeof usersRepoABI, 'infoParser'>,
>(
  config: Omit<
    UseContractReadConfig<typeof usersRepoABI, 'infoParser', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: usersRepoABI,
    functionName: 'infoParser',
    ...config,
  } as UseContractReadConfig<typeof usersRepoABI, 'infoParser', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link usersRepoABI}__ and `functionName` set to `"ruleParser"`.
 */
export function useUsersRepoRuleParser<
  TSelectData = ReadContractResult<typeof usersRepoABI, 'ruleParser'>,
>(
  config: Omit<
    UseContractReadConfig<typeof usersRepoABI, 'ruleParser', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: usersRepoABI,
    functionName: 'ruleParser',
    ...config,
  } as UseContractReadConfig<typeof usersRepoABI, 'ruleParser', TSelectData>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link alongsABI}__.
 */
export function useAlongs(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: alongsABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link alongsABI}__.
 */
export function useAlongsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof alongsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof alongsABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: alongsABI, ...config } as UseContractReadConfig<
    typeof alongsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link alongsABI}__ and `functionName` set to `"getDK"`.
 */
export function useAlongsGetDk<
  TSelectData = ReadContractResult<typeof alongsABI, 'getDK'>,
>(
  config: Omit<
    UseContractReadConfig<typeof alongsABI, 'getDK', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: alongsABI,
    functionName: 'getDK',
    ...config,
  } as UseContractReadConfig<typeof alongsABI, 'getDK', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link alongsABI}__ and `functionName` set to `"getDraggers"`.
 */
export function useAlongsGetDraggers<
  TSelectData = ReadContractResult<typeof alongsABI, 'getDraggers'>,
>(
  config: Omit<
    UseContractReadConfig<typeof alongsABI, 'getDraggers', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: alongsABI,
    functionName: 'getDraggers',
    ...config,
  } as UseContractReadConfig<typeof alongsABI, 'getDraggers', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link alongsABI}__ and `functionName` set to `"getFollowers"`.
 */
export function useAlongsGetFollowers<
  TSelectData = ReadContractResult<typeof alongsABI, 'getFollowers'>,
>(
  config: Omit<
    UseContractReadConfig<typeof alongsABI, 'getFollowers', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: alongsABI,
    functionName: 'getFollowers',
    ...config,
  } as UseContractReadConfig<typeof alongsABI, 'getFollowers', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link alongsABI}__ and `functionName` set to `"getLinkRule"`.
 */
export function useAlongsGetLinkRule<
  TSelectData = ReadContractResult<typeof alongsABI, 'getLinkRule'>,
>(
  config: Omit<
    UseContractReadConfig<typeof alongsABI, 'getLinkRule', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: alongsABI,
    functionName: 'getLinkRule',
    ...config,
  } as UseContractReadConfig<typeof alongsABI, 'getLinkRule', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link alongsABI}__ and `functionName` set to `"getOwner"`.
 */
export function useAlongsGetOwner<
  TSelectData = ReadContractResult<typeof alongsABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof alongsABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: alongsABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<typeof alongsABI, 'getOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link alongsABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useAlongsGetRoleAdmin<
  TSelectData = ReadContractResult<typeof alongsABI, 'getRoleAdmin'>,
>(
  config: Omit<
    UseContractReadConfig<typeof alongsABI, 'getRoleAdmin', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: alongsABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<typeof alongsABI, 'getRoleAdmin', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link alongsABI}__ and `functionName` set to `"hasRole"`.
 */
export function useAlongsHasRole<
  TSelectData = ReadContractResult<typeof alongsABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof alongsABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: alongsABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof alongsABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link alongsABI}__ and `functionName` set to `"isDragger"`.
 */
export function useAlongsIsDragger<
  TSelectData = ReadContractResult<typeof alongsABI, 'isDragger'>,
>(
  config: Omit<
    UseContractReadConfig<typeof alongsABI, 'isDragger', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: alongsABI,
    functionName: 'isDragger',
    ...config,
  } as UseContractReadConfig<typeof alongsABI, 'isDragger', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link alongsABI}__ and `functionName` set to `"isFinalized"`.
 */
export function useAlongsIsFinalized<
  TSelectData = ReadContractResult<typeof alongsABI, 'isFinalized'>,
>(
  config: Omit<
    UseContractReadConfig<typeof alongsABI, 'isFinalized', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: alongsABI,
    functionName: 'isFinalized',
    ...config,
  } as UseContractReadConfig<typeof alongsABI, 'isFinalized', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link alongsABI}__ and `functionName` set to `"isFollower"`.
 */
export function useAlongsIsFollower<
  TSelectData = ReadContractResult<typeof alongsABI, 'isFollower'>,
>(
  config: Omit<
    UseContractReadConfig<typeof alongsABI, 'isFollower', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: alongsABI,
    functionName: 'isFollower',
    ...config,
  } as UseContractReadConfig<typeof alongsABI, 'isFollower', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link alongsABI}__ and `functionName` set to `"isTriggered"`.
 */
export function useAlongsIsTriggered<
  TSelectData = ReadContractResult<typeof alongsABI, 'isTriggered'>,
>(
  config: Omit<
    UseContractReadConfig<typeof alongsABI, 'isTriggered', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: alongsABI,
    functionName: 'isTriggered',
    ...config,
  } as UseContractReadConfig<typeof alongsABI, 'isTriggered', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link alongsABI}__ and `functionName` set to `"priceCheck"`.
 */
export function useAlongsPriceCheck<
  TSelectData = ReadContractResult<typeof alongsABI, 'priceCheck'>,
>(
  config: Omit<
    UseContractReadConfig<typeof alongsABI, 'priceCheck', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: alongsABI,
    functionName: 'priceCheck',
    ...config,
  } as UseContractReadConfig<typeof alongsABI, 'priceCheck', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link alongsABI}__.
 */
export function useAlongsWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof alongsABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof alongsABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof alongsABI, TFunctionName>({
    abi: alongsABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link alongsABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useAlongsAbandonRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof alongsABI, 'abandonRole'>['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<TMode, typeof alongsABI, 'abandonRole'> & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof alongsABI, 'abandonRole'>({
    abi: alongsABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link alongsABI}__ and `functionName` set to `"addDragger"`.
 */
export function useAlongsAddDragger<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof alongsABI, 'addDragger'>['abi'],
        'addDragger'
      > & { functionName?: 'addDragger' }
    : UseContractWriteConfig<TMode, typeof alongsABI, 'addDragger'> & {
        abi?: never
        functionName?: 'addDragger'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof alongsABI, 'addDragger'>({
    abi: alongsABI,
    functionName: 'addDragger',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link alongsABI}__ and `functionName` set to `"addFollower"`.
 */
export function useAlongsAddFollower<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof alongsABI, 'addFollower'>['abi'],
        'addFollower'
      > & { functionName?: 'addFollower' }
    : UseContractWriteConfig<TMode, typeof alongsABI, 'addFollower'> & {
        abi?: never
        functionName?: 'addFollower'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof alongsABI, 'addFollower'>({
    abi: alongsABI,
    functionName: 'addFollower',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link alongsABI}__ and `functionName` set to `"grantRole"`.
 */
export function useAlongsGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof alongsABI, 'grantRole'>['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof alongsABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof alongsABI, 'grantRole'>({
    abi: alongsABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link alongsABI}__ and `functionName` set to `"init"`.
 */
export function useAlongsInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof alongsABI, 'init'>['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof alongsABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof alongsABI, 'init'>({
    abi: alongsABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link alongsABI}__ and `functionName` set to `"lockContents"`.
 */
export function useAlongsLockContents<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof alongsABI, 'lockContents'>['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<TMode, typeof alongsABI, 'lockContents'> & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof alongsABI, 'lockContents'>({
    abi: alongsABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link alongsABI}__ and `functionName` set to `"removeDragger"`.
 */
export function useAlongsRemoveDragger<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof alongsABI, 'removeDragger'>['abi'],
        'removeDragger'
      > & { functionName?: 'removeDragger' }
    : UseContractWriteConfig<TMode, typeof alongsABI, 'removeDragger'> & {
        abi?: never
        functionName?: 'removeDragger'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof alongsABI, 'removeDragger'>({
    abi: alongsABI,
    functionName: 'removeDragger',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link alongsABI}__ and `functionName` set to `"removeFollower"`.
 */
export function useAlongsRemoveFollower<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof alongsABI, 'removeFollower'>['abi'],
        'removeFollower'
      > & { functionName?: 'removeFollower' }
    : UseContractWriteConfig<TMode, typeof alongsABI, 'removeFollower'> & {
        abi?: never
        functionName?: 'removeFollower'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof alongsABI, 'removeFollower'>({
    abi: alongsABI,
    functionName: 'removeFollower',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link alongsABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useAlongsRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof alongsABI, 'renounceRole'>['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<TMode, typeof alongsABI, 'renounceRole'> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof alongsABI, 'renounceRole'>({
    abi: alongsABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link alongsABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useAlongsRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof alongsABI, 'revokeRole'>['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof alongsABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof alongsABI, 'revokeRole'>({
    abi: alongsABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link alongsABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useAlongsSetDirectKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof alongsABI, 'setDirectKeeper'>['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<TMode, typeof alongsABI, 'setDirectKeeper'> & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof alongsABI, 'setDirectKeeper'>({
    abi: alongsABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link alongsABI}__ and `functionName` set to `"setOwner"`.
 */
export function useAlongsSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof alongsABI, 'setOwner'>['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof alongsABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof alongsABI, 'setOwner'>({
    abi: alongsABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link alongsABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useAlongsSetRoleAdmin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof alongsABI, 'setRoleAdmin'>['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<TMode, typeof alongsABI, 'setRoleAdmin'> & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof alongsABI, 'setRoleAdmin'>({
    abi: alongsABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link alongsABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function useAlongsTakeBackKeys<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof alongsABI, 'takeBackKeys'>['abi'],
        'takeBackKeys'
      > & { functionName?: 'takeBackKeys' }
    : UseContractWriteConfig<TMode, typeof alongsABI, 'takeBackKeys'> & {
        abi?: never
        functionName?: 'takeBackKeys'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof alongsABI, 'takeBackKeys'>({
    abi: alongsABI,
    functionName: 'takeBackKeys',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link alongsABI}__.
 */
export function usePrepareAlongsWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof alongsABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: alongsABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof alongsABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link alongsABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareAlongsAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof alongsABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: alongsABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof alongsABI, 'abandonRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link alongsABI}__ and `functionName` set to `"addDragger"`.
 */
export function usePrepareAlongsAddDragger(
  config: Omit<
    UsePrepareContractWriteConfig<typeof alongsABI, 'addDragger'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: alongsABI,
    functionName: 'addDragger',
    ...config,
  } as UsePrepareContractWriteConfig<typeof alongsABI, 'addDragger'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link alongsABI}__ and `functionName` set to `"addFollower"`.
 */
export function usePrepareAlongsAddFollower(
  config: Omit<
    UsePrepareContractWriteConfig<typeof alongsABI, 'addFollower'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: alongsABI,
    functionName: 'addFollower',
    ...config,
  } as UsePrepareContractWriteConfig<typeof alongsABI, 'addFollower'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link alongsABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareAlongsGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof alongsABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: alongsABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof alongsABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link alongsABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareAlongsInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof alongsABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: alongsABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof alongsABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link alongsABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareAlongsLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<typeof alongsABI, 'lockContents'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: alongsABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<typeof alongsABI, 'lockContents'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link alongsABI}__ and `functionName` set to `"removeDragger"`.
 */
export function usePrepareAlongsRemoveDragger(
  config: Omit<
    UsePrepareContractWriteConfig<typeof alongsABI, 'removeDragger'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: alongsABI,
    functionName: 'removeDragger',
    ...config,
  } as UsePrepareContractWriteConfig<typeof alongsABI, 'removeDragger'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link alongsABI}__ and `functionName` set to `"removeFollower"`.
 */
export function usePrepareAlongsRemoveFollower(
  config: Omit<
    UsePrepareContractWriteConfig<typeof alongsABI, 'removeFollower'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: alongsABI,
    functionName: 'removeFollower',
    ...config,
  } as UsePrepareContractWriteConfig<typeof alongsABI, 'removeFollower'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link alongsABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareAlongsRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof alongsABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: alongsABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof alongsABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link alongsABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareAlongsRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof alongsABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: alongsABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof alongsABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link alongsABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareAlongsSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof alongsABI, 'setDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: alongsABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof alongsABI, 'setDirectKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link alongsABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareAlongsSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof alongsABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: alongsABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof alongsABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link alongsABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareAlongsSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof alongsABI, 'setRoleAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: alongsABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof alongsABI, 'setRoleAdmin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link alongsABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function usePrepareAlongsTakeBackKeys(
  config: Omit<
    UsePrepareContractWriteConfig<typeof alongsABI, 'takeBackKeys'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: alongsABI,
    functionName: 'takeBackKeys',
    ...config,
  } as UsePrepareContractWriteConfig<typeof alongsABI, 'takeBackKeys'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link alongsABI}__.
 */
export function useAlongsEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof alongsABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: alongsABI,
    ...config,
  } as UseContractEventConfig<typeof alongsABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link alongsABI}__ and `eventName` set to `"Init"`.
 */
export function useAlongsInitEvent(
  config: Omit<
    UseContractEventConfig<typeof alongsABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: alongsABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof alongsABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link alongsABI}__ and `eventName` set to `"LockContents"`.
 */
export function useAlongsLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof alongsABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: alongsABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof alongsABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link alongsABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useAlongsSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof alongsABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: alongsABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof alongsABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link alongsABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useAlongsSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof alongsABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: alongsABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof alongsABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link alongsABI}__ and `eventName` set to `"SetRoleAdmin"`.
 */
export function useAlongsSetRoleAdminEvent(
  config: Omit<
    UseContractEventConfig<typeof alongsABI, 'SetRoleAdmin'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: alongsABI,
    eventName: 'SetRoleAdmin',
    ...config,
  } as UseContractEventConfig<typeof alongsABI, 'SetRoleAdmin'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iAlongsABI}__.
 */
export function useIAlongs(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: iAlongsABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAlongsABI}__.
 */
export function useIAlongsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iAlongsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAlongsABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iAlongsABI,
    ...config,
  } as UseContractReadConfig<typeof iAlongsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAlongsABI}__ and `functionName` set to `"getDraggers"`.
 */
export function useIAlongsGetDraggers<
  TSelectData = ReadContractResult<typeof iAlongsABI, 'getDraggers'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAlongsABI, 'getDraggers', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAlongsABI,
    functionName: 'getDraggers',
    ...config,
  } as UseContractReadConfig<typeof iAlongsABI, 'getDraggers', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAlongsABI}__ and `functionName` set to `"getFollowers"`.
 */
export function useIAlongsGetFollowers<
  TSelectData = ReadContractResult<typeof iAlongsABI, 'getFollowers'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAlongsABI, 'getFollowers', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAlongsABI,
    functionName: 'getFollowers',
    ...config,
  } as UseContractReadConfig<typeof iAlongsABI, 'getFollowers', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAlongsABI}__ and `functionName` set to `"getLinkRule"`.
 */
export function useIAlongsGetLinkRule<
  TSelectData = ReadContractResult<typeof iAlongsABI, 'getLinkRule'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAlongsABI, 'getLinkRule', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAlongsABI,
    functionName: 'getLinkRule',
    ...config,
  } as UseContractReadConfig<typeof iAlongsABI, 'getLinkRule', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAlongsABI}__ and `functionName` set to `"isDragger"`.
 */
export function useIAlongsIsDragger<
  TSelectData = ReadContractResult<typeof iAlongsABI, 'isDragger'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAlongsABI, 'isDragger', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAlongsABI,
    functionName: 'isDragger',
    ...config,
  } as UseContractReadConfig<typeof iAlongsABI, 'isDragger', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAlongsABI}__ and `functionName` set to `"isFollower"`.
 */
export function useIAlongsIsFollower<
  TSelectData = ReadContractResult<typeof iAlongsABI, 'isFollower'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAlongsABI, 'isFollower', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAlongsABI,
    functionName: 'isFollower',
    ...config,
  } as UseContractReadConfig<typeof iAlongsABI, 'isFollower', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAlongsABI}__ and `functionName` set to `"isTriggered"`.
 */
export function useIAlongsIsTriggered<
  TSelectData = ReadContractResult<typeof iAlongsABI, 'isTriggered'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAlongsABI, 'isTriggered', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAlongsABI,
    functionName: 'isTriggered',
    ...config,
  } as UseContractReadConfig<typeof iAlongsABI, 'isTriggered', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAlongsABI}__ and `functionName` set to `"priceCheck"`.
 */
export function useIAlongsPriceCheck<
  TSelectData = ReadContractResult<typeof iAlongsABI, 'priceCheck'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAlongsABI, 'priceCheck', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAlongsABI,
    functionName: 'priceCheck',
    ...config,
  } as UseContractReadConfig<typeof iAlongsABI, 'priceCheck', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAlongsABI}__.
 */
export function useIAlongsWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iAlongsABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iAlongsABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAlongsABI, TFunctionName>({
    abi: iAlongsABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAlongsABI}__ and `functionName` set to `"addDragger"`.
 */
export function useIAlongsAddDragger<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iAlongsABI, 'addDragger'>['abi'],
        'addDragger'
      > & { functionName?: 'addDragger' }
    : UseContractWriteConfig<TMode, typeof iAlongsABI, 'addDragger'> & {
        abi?: never
        functionName?: 'addDragger'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAlongsABI, 'addDragger'>({
    abi: iAlongsABI,
    functionName: 'addDragger',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAlongsABI}__ and `functionName` set to `"addFollower"`.
 */
export function useIAlongsAddFollower<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iAlongsABI, 'addFollower'>['abi'],
        'addFollower'
      > & { functionName?: 'addFollower' }
    : UseContractWriteConfig<TMode, typeof iAlongsABI, 'addFollower'> & {
        abi?: never
        functionName?: 'addFollower'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAlongsABI, 'addFollower'>({
    abi: iAlongsABI,
    functionName: 'addFollower',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAlongsABI}__ and `functionName` set to `"removeDragger"`.
 */
export function useIAlongsRemoveDragger<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iAlongsABI, 'removeDragger'>['abi'],
        'removeDragger'
      > & { functionName?: 'removeDragger' }
    : UseContractWriteConfig<TMode, typeof iAlongsABI, 'removeDragger'> & {
        abi?: never
        functionName?: 'removeDragger'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAlongsABI, 'removeDragger'>({
    abi: iAlongsABI,
    functionName: 'removeDragger',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAlongsABI}__ and `functionName` set to `"removeFollower"`.
 */
export function useIAlongsRemoveFollower<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iAlongsABI, 'removeFollower'>['abi'],
        'removeFollower'
      > & { functionName?: 'removeFollower' }
    : UseContractWriteConfig<TMode, typeof iAlongsABI, 'removeFollower'> & {
        abi?: never
        functionName?: 'removeFollower'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAlongsABI, 'removeFollower'>({
    abi: iAlongsABI,
    functionName: 'removeFollower',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAlongsABI}__.
 */
export function usePrepareIAlongsWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAlongsABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAlongsABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAlongsABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAlongsABI}__ and `functionName` set to `"addDragger"`.
 */
export function usePrepareIAlongsAddDragger(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAlongsABI, 'addDragger'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAlongsABI,
    functionName: 'addDragger',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAlongsABI, 'addDragger'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAlongsABI}__ and `functionName` set to `"addFollower"`.
 */
export function usePrepareIAlongsAddFollower(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAlongsABI, 'addFollower'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAlongsABI,
    functionName: 'addFollower',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAlongsABI, 'addFollower'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAlongsABI}__ and `functionName` set to `"removeDragger"`.
 */
export function usePrepareIAlongsRemoveDragger(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAlongsABI, 'removeDragger'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAlongsABI,
    functionName: 'removeDragger',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAlongsABI, 'removeDragger'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAlongsABI}__ and `functionName` set to `"removeFollower"`.
 */
export function usePrepareIAlongsRemoveFollower(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAlongsABI, 'removeFollower'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAlongsABI,
    functionName: 'removeFollower',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAlongsABI, 'removeFollower'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link antiDilutionABI}__.
 */
export function useAntiDilution(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: antiDilutionABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link antiDilutionABI}__.
 */
export function useAntiDilutionRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof antiDilutionABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof antiDilutionABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: antiDilutionABI,
    ...config,
  } as UseContractReadConfig<
    typeof antiDilutionABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"getClasses"`.
 */
export function useAntiDilutionGetClasses<
  TSelectData = ReadContractResult<typeof antiDilutionABI, 'getClasses'>,
>(
  config: Omit<
    UseContractReadConfig<typeof antiDilutionABI, 'getClasses', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: antiDilutionABI,
    functionName: 'getClasses',
    ...config,
  } as UseContractReadConfig<typeof antiDilutionABI, 'getClasses', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"getDK"`.
 */
export function useAntiDilutionGetDk<
  TSelectData = ReadContractResult<typeof antiDilutionABI, 'getDK'>,
>(
  config: Omit<
    UseContractReadConfig<typeof antiDilutionABI, 'getDK', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: antiDilutionABI,
    functionName: 'getDK',
    ...config,
  } as UseContractReadConfig<typeof antiDilutionABI, 'getDK', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"getFloorPriceOfClass"`.
 */
export function useAntiDilutionGetFloorPriceOfClass<
  TSelectData = ReadContractResult<
    typeof antiDilutionABI,
    'getFloorPriceOfClass'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof antiDilutionABI,
      'getFloorPriceOfClass',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: antiDilutionABI,
    functionName: 'getFloorPriceOfClass',
    ...config,
  } as UseContractReadConfig<
    typeof antiDilutionABI,
    'getFloorPriceOfClass',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"getGiftPaid"`.
 */
export function useAntiDilutionGetGiftPaid<
  TSelectData = ReadContractResult<typeof antiDilutionABI, 'getGiftPaid'>,
>(
  config: Omit<
    UseContractReadConfig<typeof antiDilutionABI, 'getGiftPaid', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: antiDilutionABI,
    functionName: 'getGiftPaid',
    ...config,
  } as UseContractReadConfig<
    typeof antiDilutionABI,
    'getGiftPaid',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"getObligorsOfAD"`.
 */
export function useAntiDilutionGetObligorsOfAd<
  TSelectData = ReadContractResult<typeof antiDilutionABI, 'getObligorsOfAD'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof antiDilutionABI,
      'getObligorsOfAD',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: antiDilutionABI,
    functionName: 'getObligorsOfAD',
    ...config,
  } as UseContractReadConfig<
    typeof antiDilutionABI,
    'getObligorsOfAD',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"getOwner"`.
 */
export function useAntiDilutionGetOwner<
  TSelectData = ReadContractResult<typeof antiDilutionABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof antiDilutionABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: antiDilutionABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<typeof antiDilutionABI, 'getOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useAntiDilutionGetRoleAdmin<
  TSelectData = ReadContractResult<typeof antiDilutionABI, 'getRoleAdmin'>,
>(
  config: Omit<
    UseContractReadConfig<typeof antiDilutionABI, 'getRoleAdmin', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: antiDilutionABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<
    typeof antiDilutionABI,
    'getRoleAdmin',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"hasRole"`.
 */
export function useAntiDilutionHasRole<
  TSelectData = ReadContractResult<typeof antiDilutionABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof antiDilutionABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: antiDilutionABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof antiDilutionABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"isFinalized"`.
 */
export function useAntiDilutionIsFinalized<
  TSelectData = ReadContractResult<typeof antiDilutionABI, 'isFinalized'>,
>(
  config: Omit<
    UseContractReadConfig<typeof antiDilutionABI, 'isFinalized', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: antiDilutionABI,
    functionName: 'isFinalized',
    ...config,
  } as UseContractReadConfig<
    typeof antiDilutionABI,
    'isFinalized',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"isMarked"`.
 */
export function useAntiDilutionIsMarked<
  TSelectData = ReadContractResult<typeof antiDilutionABI, 'isMarked'>,
>(
  config: Omit<
    UseContractReadConfig<typeof antiDilutionABI, 'isMarked', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: antiDilutionABI,
    functionName: 'isMarked',
    ...config,
  } as UseContractReadConfig<typeof antiDilutionABI, 'isMarked', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"isObligor"`.
 */
export function useAntiDilutionIsObligor<
  TSelectData = ReadContractResult<typeof antiDilutionABI, 'isObligor'>,
>(
  config: Omit<
    UseContractReadConfig<typeof antiDilutionABI, 'isObligor', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: antiDilutionABI,
    functionName: 'isObligor',
    ...config,
  } as UseContractReadConfig<typeof antiDilutionABI, 'isObligor', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"isTriggered"`.
 */
export function useAntiDilutionIsTriggered<
  TSelectData = ReadContractResult<typeof antiDilutionABI, 'isTriggered'>,
>(
  config: Omit<
    UseContractReadConfig<typeof antiDilutionABI, 'isTriggered', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: antiDilutionABI,
    functionName: 'isTriggered',
    ...config,
  } as UseContractReadConfig<
    typeof antiDilutionABI,
    'isTriggered',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link antiDilutionABI}__.
 */
export function useAntiDilutionWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof antiDilutionABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof antiDilutionABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof antiDilutionABI, TFunctionName>({
    abi: antiDilutionABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useAntiDilutionAbandonRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof antiDilutionABI,
          'abandonRole'
        >['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<TMode, typeof antiDilutionABI, 'abandonRole'> & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof antiDilutionABI, 'abandonRole'>({
    abi: antiDilutionABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"addBenchmark"`.
 */
export function useAntiDilutionAddBenchmark<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof antiDilutionABI,
          'addBenchmark'
        >['abi'],
        'addBenchmark'
      > & { functionName?: 'addBenchmark' }
    : UseContractWriteConfig<TMode, typeof antiDilutionABI, 'addBenchmark'> & {
        abi?: never
        functionName?: 'addBenchmark'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof antiDilutionABI, 'addBenchmark'>({
    abi: antiDilutionABI,
    functionName: 'addBenchmark',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"addObligor"`.
 */
export function useAntiDilutionAddObligor<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof antiDilutionABI, 'addObligor'>['abi'],
        'addObligor'
      > & { functionName?: 'addObligor' }
    : UseContractWriteConfig<TMode, typeof antiDilutionABI, 'addObligor'> & {
        abi?: never
        functionName?: 'addObligor'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof antiDilutionABI, 'addObligor'>({
    abi: antiDilutionABI,
    functionName: 'addObligor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"grantRole"`.
 */
export function useAntiDilutionGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof antiDilutionABI, 'grantRole'>['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof antiDilutionABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof antiDilutionABI, 'grantRole'>({
    abi: antiDilutionABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"init"`.
 */
export function useAntiDilutionInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof antiDilutionABI, 'init'>['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof antiDilutionABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof antiDilutionABI, 'init'>({
    abi: antiDilutionABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"lockContents"`.
 */
export function useAntiDilutionLockContents<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof antiDilutionABI,
          'lockContents'
        >['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<TMode, typeof antiDilutionABI, 'lockContents'> & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof antiDilutionABI, 'lockContents'>({
    abi: antiDilutionABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"removeBenchmark"`.
 */
export function useAntiDilutionRemoveBenchmark<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof antiDilutionABI,
          'removeBenchmark'
        >['abi'],
        'removeBenchmark'
      > & { functionName?: 'removeBenchmark' }
    : UseContractWriteConfig<
        TMode,
        typeof antiDilutionABI,
        'removeBenchmark'
      > & {
        abi?: never
        functionName?: 'removeBenchmark'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof antiDilutionABI, 'removeBenchmark'>({
    abi: antiDilutionABI,
    functionName: 'removeBenchmark',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"removeObligor"`.
 */
export function useAntiDilutionRemoveObligor<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof antiDilutionABI,
          'removeObligor'
        >['abi'],
        'removeObligor'
      > & { functionName?: 'removeObligor' }
    : UseContractWriteConfig<TMode, typeof antiDilutionABI, 'removeObligor'> & {
        abi?: never
        functionName?: 'removeObligor'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof antiDilutionABI, 'removeObligor'>({
    abi: antiDilutionABI,
    functionName: 'removeObligor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useAntiDilutionRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof antiDilutionABI,
          'renounceRole'
        >['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<TMode, typeof antiDilutionABI, 'renounceRole'> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof antiDilutionABI, 'renounceRole'>({
    abi: antiDilutionABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useAntiDilutionRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof antiDilutionABI, 'revokeRole'>['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof antiDilutionABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof antiDilutionABI, 'revokeRole'>({
    abi: antiDilutionABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useAntiDilutionSetDirectKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof antiDilutionABI,
          'setDirectKeeper'
        >['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof antiDilutionABI,
        'setDirectKeeper'
      > & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof antiDilutionABI, 'setDirectKeeper'>({
    abi: antiDilutionABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"setOwner"`.
 */
export function useAntiDilutionSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof antiDilutionABI, 'setOwner'>['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof antiDilutionABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof antiDilutionABI, 'setOwner'>({
    abi: antiDilutionABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useAntiDilutionSetRoleAdmin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof antiDilutionABI,
          'setRoleAdmin'
        >['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<TMode, typeof antiDilutionABI, 'setRoleAdmin'> & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof antiDilutionABI, 'setRoleAdmin'>({
    abi: antiDilutionABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function useAntiDilutionTakeBackKeys<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof antiDilutionABI,
          'takeBackKeys'
        >['abi'],
        'takeBackKeys'
      > & { functionName?: 'takeBackKeys' }
    : UseContractWriteConfig<TMode, typeof antiDilutionABI, 'takeBackKeys'> & {
        abi?: never
        functionName?: 'takeBackKeys'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof antiDilutionABI, 'takeBackKeys'>({
    abi: antiDilutionABI,
    functionName: 'takeBackKeys',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link antiDilutionABI}__.
 */
export function usePrepareAntiDilutionWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof antiDilutionABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: antiDilutionABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof antiDilutionABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareAntiDilutionAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof antiDilutionABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: antiDilutionABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof antiDilutionABI, 'abandonRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"addBenchmark"`.
 */
export function usePrepareAntiDilutionAddBenchmark(
  config: Omit<
    UsePrepareContractWriteConfig<typeof antiDilutionABI, 'addBenchmark'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: antiDilutionABI,
    functionName: 'addBenchmark',
    ...config,
  } as UsePrepareContractWriteConfig<typeof antiDilutionABI, 'addBenchmark'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"addObligor"`.
 */
export function usePrepareAntiDilutionAddObligor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof antiDilutionABI, 'addObligor'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: antiDilutionABI,
    functionName: 'addObligor',
    ...config,
  } as UsePrepareContractWriteConfig<typeof antiDilutionABI, 'addObligor'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareAntiDilutionGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof antiDilutionABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: antiDilutionABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof antiDilutionABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareAntiDilutionInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof antiDilutionABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: antiDilutionABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof antiDilutionABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareAntiDilutionLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<typeof antiDilutionABI, 'lockContents'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: antiDilutionABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<typeof antiDilutionABI, 'lockContents'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"removeBenchmark"`.
 */
export function usePrepareAntiDilutionRemoveBenchmark(
  config: Omit<
    UsePrepareContractWriteConfig<typeof antiDilutionABI, 'removeBenchmark'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: antiDilutionABI,
    functionName: 'removeBenchmark',
    ...config,
  } as UsePrepareContractWriteConfig<typeof antiDilutionABI, 'removeBenchmark'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"removeObligor"`.
 */
export function usePrepareAntiDilutionRemoveObligor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof antiDilutionABI, 'removeObligor'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: antiDilutionABI,
    functionName: 'removeObligor',
    ...config,
  } as UsePrepareContractWriteConfig<typeof antiDilutionABI, 'removeObligor'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareAntiDilutionRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof antiDilutionABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: antiDilutionABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof antiDilutionABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareAntiDilutionRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof antiDilutionABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: antiDilutionABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof antiDilutionABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareAntiDilutionSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof antiDilutionABI, 'setDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: antiDilutionABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof antiDilutionABI, 'setDirectKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareAntiDilutionSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof antiDilutionABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: antiDilutionABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof antiDilutionABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareAntiDilutionSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof antiDilutionABI, 'setRoleAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: antiDilutionABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof antiDilutionABI, 'setRoleAdmin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function usePrepareAntiDilutionTakeBackKeys(
  config: Omit<
    UsePrepareContractWriteConfig<typeof antiDilutionABI, 'takeBackKeys'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: antiDilutionABI,
    functionName: 'takeBackKeys',
    ...config,
  } as UsePrepareContractWriteConfig<typeof antiDilutionABI, 'takeBackKeys'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link antiDilutionABI}__.
 */
export function useAntiDilutionEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof antiDilutionABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: antiDilutionABI,
    ...config,
  } as UseContractEventConfig<typeof antiDilutionABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link antiDilutionABI}__ and `eventName` set to `"Init"`.
 */
export function useAntiDilutionInitEvent(
  config: Omit<
    UseContractEventConfig<typeof antiDilutionABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: antiDilutionABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof antiDilutionABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link antiDilutionABI}__ and `eventName` set to `"LockContents"`.
 */
export function useAntiDilutionLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof antiDilutionABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: antiDilutionABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof antiDilutionABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link antiDilutionABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useAntiDilutionSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof antiDilutionABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: antiDilutionABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof antiDilutionABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link antiDilutionABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useAntiDilutionSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof antiDilutionABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: antiDilutionABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof antiDilutionABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link antiDilutionABI}__ and `eventName` set to `"SetRoleAdmin"`.
 */
export function useAntiDilutionSetRoleAdminEvent(
  config: Omit<
    UseContractEventConfig<typeof antiDilutionABI, 'SetRoleAdmin'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: antiDilutionABI,
    eventName: 'SetRoleAdmin',
    ...config,
  } as UseContractEventConfig<typeof antiDilutionABI, 'SetRoleAdmin'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iLockUpABI}__.
 */
export function useILockUp(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: iLockUpABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLockUpABI}__.
 */
export function useILockUpRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iLockUpABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iLockUpABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iLockUpABI,
    ...config,
  } as UseContractReadConfig<typeof iLockUpABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLockUpABI}__ and `functionName` set to `"getLocker"`.
 */
export function useILockUpGetLocker<
  TSelectData = ReadContractResult<typeof iLockUpABI, 'getLocker'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iLockUpABI, 'getLocker', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLockUpABI,
    functionName: 'getLocker',
    ...config,
  } as UseContractReadConfig<typeof iLockUpABI, 'getLocker', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLockUpABI}__ and `functionName` set to `"isExempted"`.
 */
export function useILockUpIsExempted<
  TSelectData = ReadContractResult<typeof iLockUpABI, 'isExempted'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iLockUpABI, 'isExempted', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLockUpABI,
    functionName: 'isExempted',
    ...config,
  } as UseContractReadConfig<typeof iLockUpABI, 'isExempted', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLockUpABI}__ and `functionName` set to `"isLocked"`.
 */
export function useILockUpIsLocked<
  TSelectData = ReadContractResult<typeof iLockUpABI, 'isLocked'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iLockUpABI, 'isLocked', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLockUpABI,
    functionName: 'isLocked',
    ...config,
  } as UseContractReadConfig<typeof iLockUpABI, 'isLocked', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLockUpABI}__ and `functionName` set to `"isTriggered"`.
 */
export function useILockUpIsTriggered<
  TSelectData = ReadContractResult<typeof iLockUpABI, 'isTriggered'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iLockUpABI, 'isTriggered', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLockUpABI,
    functionName: 'isTriggered',
    ...config,
  } as UseContractReadConfig<typeof iLockUpABI, 'isTriggered', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLockUpABI}__ and `functionName` set to `"lockedShares"`.
 */
export function useILockUpLockedShares<
  TSelectData = ReadContractResult<typeof iLockUpABI, 'lockedShares'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iLockUpABI, 'lockedShares', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLockUpABI,
    functionName: 'lockedShares',
    ...config,
  } as UseContractReadConfig<typeof iLockUpABI, 'lockedShares', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLockUpABI}__.
 */
export function useILockUpWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iLockUpABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iLockUpABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iLockUpABI, TFunctionName>({
    abi: iLockUpABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLockUpABI}__ and `functionName` set to `"addKeyholder"`.
 */
export function useILockUpAddKeyholder<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iLockUpABI, 'addKeyholder'>['abi'],
        'addKeyholder'
      > & { functionName?: 'addKeyholder' }
    : UseContractWriteConfig<TMode, typeof iLockUpABI, 'addKeyholder'> & {
        abi?: never
        functionName?: 'addKeyholder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iLockUpABI, 'addKeyholder'>({
    abi: iLockUpABI,
    functionName: 'addKeyholder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLockUpABI}__ and `functionName` set to `"delLocker"`.
 */
export function useILockUpDelLocker<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iLockUpABI, 'delLocker'>['abi'],
        'delLocker'
      > & { functionName?: 'delLocker' }
    : UseContractWriteConfig<TMode, typeof iLockUpABI, 'delLocker'> & {
        abi?: never
        functionName?: 'delLocker'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iLockUpABI, 'delLocker'>({
    abi: iLockUpABI,
    functionName: 'delLocker',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLockUpABI}__ and `functionName` set to `"removeKeyholder"`.
 */
export function useILockUpRemoveKeyholder<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iLockUpABI, 'removeKeyholder'>['abi'],
        'removeKeyholder'
      > & { functionName?: 'removeKeyholder' }
    : UseContractWriteConfig<TMode, typeof iLockUpABI, 'removeKeyholder'> & {
        abi?: never
        functionName?: 'removeKeyholder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iLockUpABI, 'removeKeyholder'>({
    abi: iLockUpABI,
    functionName: 'removeKeyholder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLockUpABI}__ and `functionName` set to `"setLocker"`.
 */
export function useILockUpSetLocker<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iLockUpABI, 'setLocker'>['abi'],
        'setLocker'
      > & { functionName?: 'setLocker' }
    : UseContractWriteConfig<TMode, typeof iLockUpABI, 'setLocker'> & {
        abi?: never
        functionName?: 'setLocker'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iLockUpABI, 'setLocker'>({
    abi: iLockUpABI,
    functionName: 'setLocker',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLockUpABI}__.
 */
export function usePrepareILockUpWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iLockUpABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLockUpABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iLockUpABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLockUpABI}__ and `functionName` set to `"addKeyholder"`.
 */
export function usePrepareILockUpAddKeyholder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iLockUpABI, 'addKeyholder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLockUpABI,
    functionName: 'addKeyholder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iLockUpABI, 'addKeyholder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLockUpABI}__ and `functionName` set to `"delLocker"`.
 */
export function usePrepareILockUpDelLocker(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iLockUpABI, 'delLocker'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLockUpABI,
    functionName: 'delLocker',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iLockUpABI, 'delLocker'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLockUpABI}__ and `functionName` set to `"removeKeyholder"`.
 */
export function usePrepareILockUpRemoveKeyholder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iLockUpABI, 'removeKeyholder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLockUpABI,
    functionName: 'removeKeyholder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iLockUpABI, 'removeKeyholder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLockUpABI}__ and `functionName` set to `"setLocker"`.
 */
export function usePrepareILockUpSetLocker(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iLockUpABI, 'setLocker'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLockUpABI,
    functionName: 'setLocker',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iLockUpABI, 'setLocker'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iOptionsABI}__.
 */
export function useIOptions(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iOptionsABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iOptionsABI}__.
 */
export function useIOptionsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iOptionsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iOptionsABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iOptionsABI,
    ...config,
  } as UseContractReadConfig<typeof iOptionsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iOptionsABI}__ and `functionName` set to `"counterOfOptions"`.
 */
export function useIOptionsCounterOfOptions<
  TSelectData = ReadContractResult<typeof iOptionsABI, 'counterOfOptions'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iOptionsABI, 'counterOfOptions', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iOptionsABI,
    functionName: 'counterOfOptions',
    ...config,
  } as UseContractReadConfig<
    typeof iOptionsABI,
    'counterOfOptions',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iOptionsABI}__ and `functionName` set to `"getAllOptions"`.
 */
export function useIOptionsGetAllOptions<
  TSelectData = ReadContractResult<typeof iOptionsABI, 'getAllOptions'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iOptionsABI, 'getAllOptions', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iOptionsABI,
    functionName: 'getAllOptions',
    ...config,
  } as UseContractReadConfig<typeof iOptionsABI, 'getAllOptions', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iOptionsABI}__ and `functionName` set to `"getObligorsOfOption"`.
 */
export function useIOptionsGetObligorsOfOption<
  TSelectData = ReadContractResult<typeof iOptionsABI, 'getObligorsOfOption'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iOptionsABI,
      'getObligorsOfOption',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iOptionsABI,
    functionName: 'getObligorsOfOption',
    ...config,
  } as UseContractReadConfig<
    typeof iOptionsABI,
    'getObligorsOfOption',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iOptionsABI}__ and `functionName` set to `"getOption"`.
 */
export function useIOptionsGetOption<
  TSelectData = ReadContractResult<typeof iOptionsABI, 'getOption'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iOptionsABI, 'getOption', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iOptionsABI,
    functionName: 'getOption',
    ...config,
  } as UseContractReadConfig<typeof iOptionsABI, 'getOption', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iOptionsABI}__ and `functionName` set to `"getSeqList"`.
 */
export function useIOptionsGetSeqList<
  TSelectData = ReadContractResult<typeof iOptionsABI, 'getSeqList'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iOptionsABI, 'getSeqList', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iOptionsABI,
    functionName: 'getSeqList',
    ...config,
  } as UseContractReadConfig<typeof iOptionsABI, 'getSeqList', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iOptionsABI}__ and `functionName` set to `"isObligor"`.
 */
export function useIOptionsIsObligor<
  TSelectData = ReadContractResult<typeof iOptionsABI, 'isObligor'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iOptionsABI, 'isObligor', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iOptionsABI,
    functionName: 'isObligor',
    ...config,
  } as UseContractReadConfig<typeof iOptionsABI, 'isObligor', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iOptionsABI}__ and `functionName` set to `"isOption"`.
 */
export function useIOptionsIsOption<
  TSelectData = ReadContractResult<typeof iOptionsABI, 'isOption'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iOptionsABI, 'isOption', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iOptionsABI,
    functionName: 'isOption',
    ...config,
  } as UseContractReadConfig<typeof iOptionsABI, 'isOption', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iOptionsABI}__ and `functionName` set to `"qtyOfOptions"`.
 */
export function useIOptionsQtyOfOptions<
  TSelectData = ReadContractResult<typeof iOptionsABI, 'qtyOfOptions'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iOptionsABI, 'qtyOfOptions', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iOptionsABI,
    functionName: 'qtyOfOptions',
    ...config,
  } as UseContractReadConfig<typeof iOptionsABI, 'qtyOfOptions', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iOptionsABI}__.
 */
export function useIOptionsWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iOptionsABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iOptionsABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iOptionsABI, TFunctionName>({
    abi: iOptionsABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iOptionsABI}__ and `functionName` set to `"addObligorIntoOpt"`.
 */
export function useIOptionsAddObligorIntoOpt<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iOptionsABI,
          'addObligorIntoOpt'
        >['abi'],
        'addObligorIntoOpt'
      > & { functionName?: 'addObligorIntoOpt' }
    : UseContractWriteConfig<TMode, typeof iOptionsABI, 'addObligorIntoOpt'> & {
        abi?: never
        functionName?: 'addObligorIntoOpt'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iOptionsABI, 'addObligorIntoOpt'>({
    abi: iOptionsABI,
    functionName: 'addObligorIntoOpt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iOptionsABI}__ and `functionName` set to `"createOption"`.
 */
export function useIOptionsCreateOption<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iOptionsABI, 'createOption'>['abi'],
        'createOption'
      > & { functionName?: 'createOption' }
    : UseContractWriteConfig<TMode, typeof iOptionsABI, 'createOption'> & {
        abi?: never
        functionName?: 'createOption'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iOptionsABI, 'createOption'>({
    abi: iOptionsABI,
    functionName: 'createOption',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iOptionsABI}__ and `functionName` set to `"delOption"`.
 */
export function useIOptionsDelOption<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iOptionsABI, 'delOption'>['abi'],
        'delOption'
      > & { functionName?: 'delOption' }
    : UseContractWriteConfig<TMode, typeof iOptionsABI, 'delOption'> & {
        abi?: never
        functionName?: 'delOption'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iOptionsABI, 'delOption'>({
    abi: iOptionsABI,
    functionName: 'delOption',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iOptionsABI}__ and `functionName` set to `"removeObligorFromOpt"`.
 */
export function useIOptionsRemoveObligorFromOpt<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iOptionsABI,
          'removeObligorFromOpt'
        >['abi'],
        'removeObligorFromOpt'
      > & { functionName?: 'removeObligorFromOpt' }
    : UseContractWriteConfig<
        TMode,
        typeof iOptionsABI,
        'removeObligorFromOpt'
      > & {
        abi?: never
        functionName?: 'removeObligorFromOpt'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iOptionsABI, 'removeObligorFromOpt'>({
    abi: iOptionsABI,
    functionName: 'removeObligorFromOpt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iOptionsABI}__.
 */
export function usePrepareIOptionsWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iOptionsABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iOptionsABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iOptionsABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iOptionsABI}__ and `functionName` set to `"addObligorIntoOpt"`.
 */
export function usePrepareIOptionsAddObligorIntoOpt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iOptionsABI, 'addObligorIntoOpt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iOptionsABI,
    functionName: 'addObligorIntoOpt',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iOptionsABI, 'addObligorIntoOpt'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iOptionsABI}__ and `functionName` set to `"createOption"`.
 */
export function usePrepareIOptionsCreateOption(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iOptionsABI, 'createOption'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iOptionsABI,
    functionName: 'createOption',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iOptionsABI, 'createOption'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iOptionsABI}__ and `functionName` set to `"delOption"`.
 */
export function usePrepareIOptionsDelOption(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iOptionsABI, 'delOption'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iOptionsABI,
    functionName: 'delOption',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iOptionsABI, 'delOption'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iOptionsABI}__ and `functionName` set to `"removeObligorFromOpt"`.
 */
export function usePrepareIOptionsRemoveObligorFromOpt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iOptionsABI, 'removeObligorFromOpt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iOptionsABI,
    functionName: 'removeObligorFromOpt',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iOptionsABI,
    'removeObligorFromOpt'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iAntiDilutionABI}__.
 */
export function useIAntiDilution(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iAntiDilutionABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAntiDilutionABI}__.
 */
export function useIAntiDilutionRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iAntiDilutionABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAntiDilutionABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iAntiDilutionABI,
    ...config,
  } as UseContractReadConfig<
    typeof iAntiDilutionABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAntiDilutionABI}__ and `functionName` set to `"getClasses"`.
 */
export function useIAntiDilutionGetClasses<
  TSelectData = ReadContractResult<typeof iAntiDilutionABI, 'getClasses'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAntiDilutionABI, 'getClasses', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAntiDilutionABI,
    functionName: 'getClasses',
    ...config,
  } as UseContractReadConfig<
    typeof iAntiDilutionABI,
    'getClasses',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAntiDilutionABI}__ and `functionName` set to `"getFloorPriceOfClass"`.
 */
export function useIAntiDilutionGetFloorPriceOfClass<
  TSelectData = ReadContractResult<
    typeof iAntiDilutionABI,
    'getFloorPriceOfClass'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iAntiDilutionABI,
      'getFloorPriceOfClass',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAntiDilutionABI,
    functionName: 'getFloorPriceOfClass',
    ...config,
  } as UseContractReadConfig<
    typeof iAntiDilutionABI,
    'getFloorPriceOfClass',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAntiDilutionABI}__ and `functionName` set to `"getGiftPaid"`.
 */
export function useIAntiDilutionGetGiftPaid<
  TSelectData = ReadContractResult<typeof iAntiDilutionABI, 'getGiftPaid'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAntiDilutionABI, 'getGiftPaid', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAntiDilutionABI,
    functionName: 'getGiftPaid',
    ...config,
  } as UseContractReadConfig<
    typeof iAntiDilutionABI,
    'getGiftPaid',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAntiDilutionABI}__ and `functionName` set to `"getObligorsOfAD"`.
 */
export function useIAntiDilutionGetObligorsOfAd<
  TSelectData = ReadContractResult<typeof iAntiDilutionABI, 'getObligorsOfAD'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iAntiDilutionABI,
      'getObligorsOfAD',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAntiDilutionABI,
    functionName: 'getObligorsOfAD',
    ...config,
  } as UseContractReadConfig<
    typeof iAntiDilutionABI,
    'getObligorsOfAD',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAntiDilutionABI}__ and `functionName` set to `"isMarked"`.
 */
export function useIAntiDilutionIsMarked<
  TSelectData = ReadContractResult<typeof iAntiDilutionABI, 'isMarked'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAntiDilutionABI, 'isMarked', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAntiDilutionABI,
    functionName: 'isMarked',
    ...config,
  } as UseContractReadConfig<typeof iAntiDilutionABI, 'isMarked', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAntiDilutionABI}__ and `functionName` set to `"isObligor"`.
 */
export function useIAntiDilutionIsObligor<
  TSelectData = ReadContractResult<typeof iAntiDilutionABI, 'isObligor'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAntiDilutionABI, 'isObligor', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAntiDilutionABI,
    functionName: 'isObligor',
    ...config,
  } as UseContractReadConfig<typeof iAntiDilutionABI, 'isObligor', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAntiDilutionABI}__ and `functionName` set to `"isTriggered"`.
 */
export function useIAntiDilutionIsTriggered<
  TSelectData = ReadContractResult<typeof iAntiDilutionABI, 'isTriggered'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAntiDilutionABI, 'isTriggered', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAntiDilutionABI,
    functionName: 'isTriggered',
    ...config,
  } as UseContractReadConfig<
    typeof iAntiDilutionABI,
    'isTriggered',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAntiDilutionABI}__.
 */
export function useIAntiDilutionWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iAntiDilutionABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iAntiDilutionABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAntiDilutionABI, TFunctionName>({
    abi: iAntiDilutionABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAntiDilutionABI}__ and `functionName` set to `"addBenchmark"`.
 */
export function useIAntiDilutionAddBenchmark<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iAntiDilutionABI,
          'addBenchmark'
        >['abi'],
        'addBenchmark'
      > & { functionName?: 'addBenchmark' }
    : UseContractWriteConfig<TMode, typeof iAntiDilutionABI, 'addBenchmark'> & {
        abi?: never
        functionName?: 'addBenchmark'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAntiDilutionABI, 'addBenchmark'>({
    abi: iAntiDilutionABI,
    functionName: 'addBenchmark',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAntiDilutionABI}__ and `functionName` set to `"addObligor"`.
 */
export function useIAntiDilutionAddObligor<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iAntiDilutionABI,
          'addObligor'
        >['abi'],
        'addObligor'
      > & { functionName?: 'addObligor' }
    : UseContractWriteConfig<TMode, typeof iAntiDilutionABI, 'addObligor'> & {
        abi?: never
        functionName?: 'addObligor'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAntiDilutionABI, 'addObligor'>({
    abi: iAntiDilutionABI,
    functionName: 'addObligor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAntiDilutionABI}__ and `functionName` set to `"removeBenchmark"`.
 */
export function useIAntiDilutionRemoveBenchmark<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iAntiDilutionABI,
          'removeBenchmark'
        >['abi'],
        'removeBenchmark'
      > & { functionName?: 'removeBenchmark' }
    : UseContractWriteConfig<
        TMode,
        typeof iAntiDilutionABI,
        'removeBenchmark'
      > & {
        abi?: never
        functionName?: 'removeBenchmark'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAntiDilutionABI, 'removeBenchmark'>({
    abi: iAntiDilutionABI,
    functionName: 'removeBenchmark',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAntiDilutionABI}__ and `functionName` set to `"removeObligor"`.
 */
export function useIAntiDilutionRemoveObligor<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iAntiDilutionABI,
          'removeObligor'
        >['abi'],
        'removeObligor'
      > & { functionName?: 'removeObligor' }
    : UseContractWriteConfig<
        TMode,
        typeof iAntiDilutionABI,
        'removeObligor'
      > & {
        abi?: never
        functionName?: 'removeObligor'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAntiDilutionABI, 'removeObligor'>({
    abi: iAntiDilutionABI,
    functionName: 'removeObligor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAntiDilutionABI}__.
 */
export function usePrepareIAntiDilutionWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAntiDilutionABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAntiDilutionABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAntiDilutionABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAntiDilutionABI}__ and `functionName` set to `"addBenchmark"`.
 */
export function usePrepareIAntiDilutionAddBenchmark(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAntiDilutionABI, 'addBenchmark'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAntiDilutionABI,
    functionName: 'addBenchmark',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAntiDilutionABI, 'addBenchmark'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAntiDilutionABI}__ and `functionName` set to `"addObligor"`.
 */
export function usePrepareIAntiDilutionAddObligor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAntiDilutionABI, 'addObligor'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAntiDilutionABI,
    functionName: 'addObligor',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAntiDilutionABI, 'addObligor'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAntiDilutionABI}__ and `functionName` set to `"removeBenchmark"`.
 */
export function usePrepareIAntiDilutionRemoveBenchmark(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAntiDilutionABI, 'removeBenchmark'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAntiDilutionABI,
    functionName: 'removeBenchmark',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iAntiDilutionABI,
    'removeBenchmark'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAntiDilutionABI}__ and `functionName` set to `"removeObligor"`.
 */
export function usePrepareIAntiDilutionRemoveObligor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAntiDilutionABI, 'removeObligor'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAntiDilutionABI,
    functionName: 'removeObligor',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAntiDilutionABI, 'removeObligor'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link optionsABI}__.
 */
export function useOptions(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: optionsABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link optionsABI}__.
 */
export function useOptionsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof optionsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof optionsABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: optionsABI,
    ...config,
  } as UseContractReadConfig<typeof optionsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"counterOfOptions"`.
 */
export function useOptionsCounterOfOptions<
  TSelectData = ReadContractResult<typeof optionsABI, 'counterOfOptions'>,
>(
  config: Omit<
    UseContractReadConfig<typeof optionsABI, 'counterOfOptions', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: optionsABI,
    functionName: 'counterOfOptions',
    ...config,
  } as UseContractReadConfig<
    typeof optionsABI,
    'counterOfOptions',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"getAllOptions"`.
 */
export function useOptionsGetAllOptions<
  TSelectData = ReadContractResult<typeof optionsABI, 'getAllOptions'>,
>(
  config: Omit<
    UseContractReadConfig<typeof optionsABI, 'getAllOptions', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: optionsABI,
    functionName: 'getAllOptions',
    ...config,
  } as UseContractReadConfig<typeof optionsABI, 'getAllOptions', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"getDK"`.
 */
export function useOptionsGetDk<
  TSelectData = ReadContractResult<typeof optionsABI, 'getDK'>,
>(
  config: Omit<
    UseContractReadConfig<typeof optionsABI, 'getDK', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: optionsABI,
    functionName: 'getDK',
    ...config,
  } as UseContractReadConfig<typeof optionsABI, 'getDK', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"getObligorsOfOption"`.
 */
export function useOptionsGetObligorsOfOption<
  TSelectData = ReadContractResult<typeof optionsABI, 'getObligorsOfOption'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof optionsABI,
      'getObligorsOfOption',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: optionsABI,
    functionName: 'getObligorsOfOption',
    ...config,
  } as UseContractReadConfig<
    typeof optionsABI,
    'getObligorsOfOption',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"getOption"`.
 */
export function useOptionsGetOption<
  TSelectData = ReadContractResult<typeof optionsABI, 'getOption'>,
>(
  config: Omit<
    UseContractReadConfig<typeof optionsABI, 'getOption', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: optionsABI,
    functionName: 'getOption',
    ...config,
  } as UseContractReadConfig<typeof optionsABI, 'getOption', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"getOwner"`.
 */
export function useOptionsGetOwner<
  TSelectData = ReadContractResult<typeof optionsABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof optionsABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: optionsABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<typeof optionsABI, 'getOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useOptionsGetRoleAdmin<
  TSelectData = ReadContractResult<typeof optionsABI, 'getRoleAdmin'>,
>(
  config: Omit<
    UseContractReadConfig<typeof optionsABI, 'getRoleAdmin', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: optionsABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<typeof optionsABI, 'getRoleAdmin', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"getSeqList"`.
 */
export function useOptionsGetSeqList<
  TSelectData = ReadContractResult<typeof optionsABI, 'getSeqList'>,
>(
  config: Omit<
    UseContractReadConfig<typeof optionsABI, 'getSeqList', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: optionsABI,
    functionName: 'getSeqList',
    ...config,
  } as UseContractReadConfig<typeof optionsABI, 'getSeqList', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"hasRole"`.
 */
export function useOptionsHasRole<
  TSelectData = ReadContractResult<typeof optionsABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof optionsABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: optionsABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof optionsABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"isFinalized"`.
 */
export function useOptionsIsFinalized<
  TSelectData = ReadContractResult<typeof optionsABI, 'isFinalized'>,
>(
  config: Omit<
    UseContractReadConfig<typeof optionsABI, 'isFinalized', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: optionsABI,
    functionName: 'isFinalized',
    ...config,
  } as UseContractReadConfig<typeof optionsABI, 'isFinalized', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"isObligor"`.
 */
export function useOptionsIsObligor<
  TSelectData = ReadContractResult<typeof optionsABI, 'isObligor'>,
>(
  config: Omit<
    UseContractReadConfig<typeof optionsABI, 'isObligor', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: optionsABI,
    functionName: 'isObligor',
    ...config,
  } as UseContractReadConfig<typeof optionsABI, 'isObligor', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"isOption"`.
 */
export function useOptionsIsOption<
  TSelectData = ReadContractResult<typeof optionsABI, 'isOption'>,
>(
  config: Omit<
    UseContractReadConfig<typeof optionsABI, 'isOption', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: optionsABI,
    functionName: 'isOption',
    ...config,
  } as UseContractReadConfig<typeof optionsABI, 'isOption', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"qtyOfOptions"`.
 */
export function useOptionsQtyOfOptions<
  TSelectData = ReadContractResult<typeof optionsABI, 'qtyOfOptions'>,
>(
  config: Omit<
    UseContractReadConfig<typeof optionsABI, 'qtyOfOptions', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: optionsABI,
    functionName: 'qtyOfOptions',
    ...config,
  } as UseContractReadConfig<typeof optionsABI, 'qtyOfOptions', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link optionsABI}__.
 */
export function useOptionsWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof optionsABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof optionsABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof optionsABI, TFunctionName>({
    abi: optionsABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useOptionsAbandonRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof optionsABI, 'abandonRole'>['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<TMode, typeof optionsABI, 'abandonRole'> & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof optionsABI, 'abandonRole'>({
    abi: optionsABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"addObligorIntoOpt"`.
 */
export function useOptionsAddObligorIntoOpt<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof optionsABI,
          'addObligorIntoOpt'
        >['abi'],
        'addObligorIntoOpt'
      > & { functionName?: 'addObligorIntoOpt' }
    : UseContractWriteConfig<TMode, typeof optionsABI, 'addObligorIntoOpt'> & {
        abi?: never
        functionName?: 'addObligorIntoOpt'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof optionsABI, 'addObligorIntoOpt'>({
    abi: optionsABI,
    functionName: 'addObligorIntoOpt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"createOption"`.
 */
export function useOptionsCreateOption<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof optionsABI, 'createOption'>['abi'],
        'createOption'
      > & { functionName?: 'createOption' }
    : UseContractWriteConfig<TMode, typeof optionsABI, 'createOption'> & {
        abi?: never
        functionName?: 'createOption'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof optionsABI, 'createOption'>({
    abi: optionsABI,
    functionName: 'createOption',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"delOption"`.
 */
export function useOptionsDelOption<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof optionsABI, 'delOption'>['abi'],
        'delOption'
      > & { functionName?: 'delOption' }
    : UseContractWriteConfig<TMode, typeof optionsABI, 'delOption'> & {
        abi?: never
        functionName?: 'delOption'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof optionsABI, 'delOption'>({
    abi: optionsABI,
    functionName: 'delOption',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"grantRole"`.
 */
export function useOptionsGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof optionsABI, 'grantRole'>['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof optionsABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof optionsABI, 'grantRole'>({
    abi: optionsABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"init"`.
 */
export function useOptionsInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof optionsABI, 'init'>['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof optionsABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof optionsABI, 'init'>({
    abi: optionsABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"lockContents"`.
 */
export function useOptionsLockContents<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof optionsABI, 'lockContents'>['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<TMode, typeof optionsABI, 'lockContents'> & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof optionsABI, 'lockContents'>({
    abi: optionsABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"removeObligorFromOpt"`.
 */
export function useOptionsRemoveObligorFromOpt<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof optionsABI,
          'removeObligorFromOpt'
        >['abi'],
        'removeObligorFromOpt'
      > & { functionName?: 'removeObligorFromOpt' }
    : UseContractWriteConfig<
        TMode,
        typeof optionsABI,
        'removeObligorFromOpt'
      > & {
        abi?: never
        functionName?: 'removeObligorFromOpt'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof optionsABI, 'removeObligorFromOpt'>({
    abi: optionsABI,
    functionName: 'removeObligorFromOpt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useOptionsRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof optionsABI, 'renounceRole'>['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<TMode, typeof optionsABI, 'renounceRole'> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof optionsABI, 'renounceRole'>({
    abi: optionsABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useOptionsRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof optionsABI, 'revokeRole'>['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof optionsABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof optionsABI, 'revokeRole'>({
    abi: optionsABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useOptionsSetDirectKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof optionsABI, 'setDirectKeeper'>['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<TMode, typeof optionsABI, 'setDirectKeeper'> & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof optionsABI, 'setDirectKeeper'>({
    abi: optionsABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"setOwner"`.
 */
export function useOptionsSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof optionsABI, 'setOwner'>['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof optionsABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof optionsABI, 'setOwner'>({
    abi: optionsABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useOptionsSetRoleAdmin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof optionsABI, 'setRoleAdmin'>['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<TMode, typeof optionsABI, 'setRoleAdmin'> & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof optionsABI, 'setRoleAdmin'>({
    abi: optionsABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function useOptionsTakeBackKeys<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof optionsABI, 'takeBackKeys'>['abi'],
        'takeBackKeys'
      > & { functionName?: 'takeBackKeys' }
    : UseContractWriteConfig<TMode, typeof optionsABI, 'takeBackKeys'> & {
        abi?: never
        functionName?: 'takeBackKeys'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof optionsABI, 'takeBackKeys'>({
    abi: optionsABI,
    functionName: 'takeBackKeys',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link optionsABI}__.
 */
export function usePrepareOptionsWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof optionsABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: optionsABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof optionsABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareOptionsAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof optionsABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: optionsABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof optionsABI, 'abandonRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"addObligorIntoOpt"`.
 */
export function usePrepareOptionsAddObligorIntoOpt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof optionsABI, 'addObligorIntoOpt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: optionsABI,
    functionName: 'addObligorIntoOpt',
    ...config,
  } as UsePrepareContractWriteConfig<typeof optionsABI, 'addObligorIntoOpt'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"createOption"`.
 */
export function usePrepareOptionsCreateOption(
  config: Omit<
    UsePrepareContractWriteConfig<typeof optionsABI, 'createOption'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: optionsABI,
    functionName: 'createOption',
    ...config,
  } as UsePrepareContractWriteConfig<typeof optionsABI, 'createOption'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"delOption"`.
 */
export function usePrepareOptionsDelOption(
  config: Omit<
    UsePrepareContractWriteConfig<typeof optionsABI, 'delOption'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: optionsABI,
    functionName: 'delOption',
    ...config,
  } as UsePrepareContractWriteConfig<typeof optionsABI, 'delOption'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareOptionsGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof optionsABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: optionsABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof optionsABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareOptionsInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof optionsABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: optionsABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof optionsABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareOptionsLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<typeof optionsABI, 'lockContents'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: optionsABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<typeof optionsABI, 'lockContents'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"removeObligorFromOpt"`.
 */
export function usePrepareOptionsRemoveObligorFromOpt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof optionsABI, 'removeObligorFromOpt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: optionsABI,
    functionName: 'removeObligorFromOpt',
    ...config,
  } as UsePrepareContractWriteConfig<typeof optionsABI, 'removeObligorFromOpt'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareOptionsRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof optionsABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: optionsABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof optionsABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareOptionsRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof optionsABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: optionsABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof optionsABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareOptionsSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof optionsABI, 'setDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: optionsABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof optionsABI, 'setDirectKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareOptionsSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof optionsABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: optionsABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof optionsABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareOptionsSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof optionsABI, 'setRoleAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: optionsABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof optionsABI, 'setRoleAdmin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function usePrepareOptionsTakeBackKeys(
  config: Omit<
    UsePrepareContractWriteConfig<typeof optionsABI, 'takeBackKeys'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: optionsABI,
    functionName: 'takeBackKeys',
    ...config,
  } as UsePrepareContractWriteConfig<typeof optionsABI, 'takeBackKeys'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link optionsABI}__.
 */
export function useOptionsEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof optionsABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: optionsABI,
    ...config,
  } as UseContractEventConfig<typeof optionsABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link optionsABI}__ and `eventName` set to `"Init"`.
 */
export function useOptionsInitEvent(
  config: Omit<
    UseContractEventConfig<typeof optionsABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: optionsABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof optionsABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link optionsABI}__ and `eventName` set to `"LockContents"`.
 */
export function useOptionsLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof optionsABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: optionsABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof optionsABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link optionsABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useOptionsSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof optionsABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: optionsABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof optionsABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link optionsABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useOptionsSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof optionsABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: optionsABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof optionsABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link optionsABI}__ and `eventName` set to `"SetRoleAdmin"`.
 */
export function useOptionsSetRoleAdminEvent(
  config: Omit<
    UseContractEventConfig<typeof optionsABI, 'SetRoleAdmin'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: optionsABI,
    eventName: 'SetRoleAdmin',
    ...config,
  } as UseContractEventConfig<typeof optionsABI, 'SetRoleAdmin'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link lockUpABI}__.
 */
export function useLockUp(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: lockUpABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lockUpABI}__.
 */
export function useLockUpRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof lockUpABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof lockUpABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: lockUpABI, ...config } as UseContractReadConfig<
    typeof lockUpABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"getDK"`.
 */
export function useLockUpGetDk<
  TSelectData = ReadContractResult<typeof lockUpABI, 'getDK'>,
>(
  config: Omit<
    UseContractReadConfig<typeof lockUpABI, 'getDK', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lockUpABI,
    functionName: 'getDK',
    ...config,
  } as UseContractReadConfig<typeof lockUpABI, 'getDK', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"getLocker"`.
 */
export function useLockUpGetLocker<
  TSelectData = ReadContractResult<typeof lockUpABI, 'getLocker'>,
>(
  config: Omit<
    UseContractReadConfig<typeof lockUpABI, 'getLocker', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lockUpABI,
    functionName: 'getLocker',
    ...config,
  } as UseContractReadConfig<typeof lockUpABI, 'getLocker', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"getOwner"`.
 */
export function useLockUpGetOwner<
  TSelectData = ReadContractResult<typeof lockUpABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof lockUpABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lockUpABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<typeof lockUpABI, 'getOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useLockUpGetRoleAdmin<
  TSelectData = ReadContractResult<typeof lockUpABI, 'getRoleAdmin'>,
>(
  config: Omit<
    UseContractReadConfig<typeof lockUpABI, 'getRoleAdmin', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lockUpABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<typeof lockUpABI, 'getRoleAdmin', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"hasRole"`.
 */
export function useLockUpHasRole<
  TSelectData = ReadContractResult<typeof lockUpABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof lockUpABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lockUpABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof lockUpABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"isExempted"`.
 */
export function useLockUpIsExempted<
  TSelectData = ReadContractResult<typeof lockUpABI, 'isExempted'>,
>(
  config: Omit<
    UseContractReadConfig<typeof lockUpABI, 'isExempted', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lockUpABI,
    functionName: 'isExempted',
    ...config,
  } as UseContractReadConfig<typeof lockUpABI, 'isExempted', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"isFinalized"`.
 */
export function useLockUpIsFinalized<
  TSelectData = ReadContractResult<typeof lockUpABI, 'isFinalized'>,
>(
  config: Omit<
    UseContractReadConfig<typeof lockUpABI, 'isFinalized', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lockUpABI,
    functionName: 'isFinalized',
    ...config,
  } as UseContractReadConfig<typeof lockUpABI, 'isFinalized', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"isLocked"`.
 */
export function useLockUpIsLocked<
  TSelectData = ReadContractResult<typeof lockUpABI, 'isLocked'>,
>(
  config: Omit<
    UseContractReadConfig<typeof lockUpABI, 'isLocked', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lockUpABI,
    functionName: 'isLocked',
    ...config,
  } as UseContractReadConfig<typeof lockUpABI, 'isLocked', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"isTriggered"`.
 */
export function useLockUpIsTriggered<
  TSelectData = ReadContractResult<typeof lockUpABI, 'isTriggered'>,
>(
  config: Omit<
    UseContractReadConfig<typeof lockUpABI, 'isTriggered', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lockUpABI,
    functionName: 'isTriggered',
    ...config,
  } as UseContractReadConfig<typeof lockUpABI, 'isTriggered', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"lockedShares"`.
 */
export function useLockUpLockedShares<
  TSelectData = ReadContractResult<typeof lockUpABI, 'lockedShares'>,
>(
  config: Omit<
    UseContractReadConfig<typeof lockUpABI, 'lockedShares', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lockUpABI,
    functionName: 'lockedShares',
    ...config,
  } as UseContractReadConfig<typeof lockUpABI, 'lockedShares', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lockUpABI}__.
 */
export function useLockUpWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof lockUpABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof lockUpABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lockUpABI, TFunctionName>({
    abi: lockUpABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useLockUpAbandonRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof lockUpABI, 'abandonRole'>['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<TMode, typeof lockUpABI, 'abandonRole'> & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lockUpABI, 'abandonRole'>({
    abi: lockUpABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"addKeyholder"`.
 */
export function useLockUpAddKeyholder<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof lockUpABI, 'addKeyholder'>['abi'],
        'addKeyholder'
      > & { functionName?: 'addKeyholder' }
    : UseContractWriteConfig<TMode, typeof lockUpABI, 'addKeyholder'> & {
        abi?: never
        functionName?: 'addKeyholder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lockUpABI, 'addKeyholder'>({
    abi: lockUpABI,
    functionName: 'addKeyholder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"delLocker"`.
 */
export function useLockUpDelLocker<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof lockUpABI, 'delLocker'>['abi'],
        'delLocker'
      > & { functionName?: 'delLocker' }
    : UseContractWriteConfig<TMode, typeof lockUpABI, 'delLocker'> & {
        abi?: never
        functionName?: 'delLocker'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lockUpABI, 'delLocker'>({
    abi: lockUpABI,
    functionName: 'delLocker',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"grantRole"`.
 */
export function useLockUpGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof lockUpABI, 'grantRole'>['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof lockUpABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lockUpABI, 'grantRole'>({
    abi: lockUpABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"init"`.
 */
export function useLockUpInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof lockUpABI, 'init'>['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof lockUpABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lockUpABI, 'init'>({
    abi: lockUpABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"lockContents"`.
 */
export function useLockUpLockContents<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof lockUpABI, 'lockContents'>['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<TMode, typeof lockUpABI, 'lockContents'> & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lockUpABI, 'lockContents'>({
    abi: lockUpABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"removeKeyholder"`.
 */
export function useLockUpRemoveKeyholder<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof lockUpABI, 'removeKeyholder'>['abi'],
        'removeKeyholder'
      > & { functionName?: 'removeKeyholder' }
    : UseContractWriteConfig<TMode, typeof lockUpABI, 'removeKeyholder'> & {
        abi?: never
        functionName?: 'removeKeyholder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lockUpABI, 'removeKeyholder'>({
    abi: lockUpABI,
    functionName: 'removeKeyholder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useLockUpRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof lockUpABI, 'renounceRole'>['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<TMode, typeof lockUpABI, 'renounceRole'> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lockUpABI, 'renounceRole'>({
    abi: lockUpABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useLockUpRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof lockUpABI, 'revokeRole'>['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof lockUpABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lockUpABI, 'revokeRole'>({
    abi: lockUpABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useLockUpSetDirectKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof lockUpABI, 'setDirectKeeper'>['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<TMode, typeof lockUpABI, 'setDirectKeeper'> & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lockUpABI, 'setDirectKeeper'>({
    abi: lockUpABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"setLocker"`.
 */
export function useLockUpSetLocker<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof lockUpABI, 'setLocker'>['abi'],
        'setLocker'
      > & { functionName?: 'setLocker' }
    : UseContractWriteConfig<TMode, typeof lockUpABI, 'setLocker'> & {
        abi?: never
        functionName?: 'setLocker'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lockUpABI, 'setLocker'>({
    abi: lockUpABI,
    functionName: 'setLocker',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"setOwner"`.
 */
export function useLockUpSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof lockUpABI, 'setOwner'>['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof lockUpABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lockUpABI, 'setOwner'>({
    abi: lockUpABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useLockUpSetRoleAdmin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof lockUpABI, 'setRoleAdmin'>['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<TMode, typeof lockUpABI, 'setRoleAdmin'> & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lockUpABI, 'setRoleAdmin'>({
    abi: lockUpABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function useLockUpTakeBackKeys<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof lockUpABI, 'takeBackKeys'>['abi'],
        'takeBackKeys'
      > & { functionName?: 'takeBackKeys' }
    : UseContractWriteConfig<TMode, typeof lockUpABI, 'takeBackKeys'> & {
        abi?: never
        functionName?: 'takeBackKeys'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lockUpABI, 'takeBackKeys'>({
    abi: lockUpABI,
    functionName: 'takeBackKeys',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lockUpABI}__.
 */
export function usePrepareLockUpWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lockUpABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lockUpABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof lockUpABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareLockUpAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lockUpABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lockUpABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lockUpABI, 'abandonRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"addKeyholder"`.
 */
export function usePrepareLockUpAddKeyholder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lockUpABI, 'addKeyholder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lockUpABI,
    functionName: 'addKeyholder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lockUpABI, 'addKeyholder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"delLocker"`.
 */
export function usePrepareLockUpDelLocker(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lockUpABI, 'delLocker'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lockUpABI,
    functionName: 'delLocker',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lockUpABI, 'delLocker'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareLockUpGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lockUpABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lockUpABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lockUpABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareLockUpInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lockUpABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lockUpABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lockUpABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareLockUpLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lockUpABI, 'lockContents'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lockUpABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lockUpABI, 'lockContents'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"removeKeyholder"`.
 */
export function usePrepareLockUpRemoveKeyholder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lockUpABI, 'removeKeyholder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lockUpABI,
    functionName: 'removeKeyholder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lockUpABI, 'removeKeyholder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareLockUpRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lockUpABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lockUpABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lockUpABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareLockUpRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lockUpABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lockUpABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lockUpABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareLockUpSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lockUpABI, 'setDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lockUpABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lockUpABI, 'setDirectKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"setLocker"`.
 */
export function usePrepareLockUpSetLocker(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lockUpABI, 'setLocker'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lockUpABI,
    functionName: 'setLocker',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lockUpABI, 'setLocker'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareLockUpSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lockUpABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lockUpABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lockUpABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareLockUpSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lockUpABI, 'setRoleAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lockUpABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lockUpABI, 'setRoleAdmin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"takeBackKeys"`.
 */
export function usePrepareLockUpTakeBackKeys(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lockUpABI, 'takeBackKeys'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lockUpABI,
    functionName: 'takeBackKeys',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lockUpABI, 'takeBackKeys'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lockUpABI}__.
 */
export function useLockUpEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof lockUpABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: lockUpABI,
    ...config,
  } as UseContractEventConfig<typeof lockUpABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lockUpABI}__ and `eventName` set to `"Init"`.
 */
export function useLockUpInitEvent(
  config: Omit<
    UseContractEventConfig<typeof lockUpABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: lockUpABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof lockUpABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lockUpABI}__ and `eventName` set to `"LockContents"`.
 */
export function useLockUpLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof lockUpABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: lockUpABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof lockUpABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lockUpABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useLockUpSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof lockUpABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: lockUpABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof lockUpABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lockUpABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useLockUpSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof lockUpABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: lockUpABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof lockUpABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lockUpABI}__ and `eventName` set to `"SetRoleAdmin"`.
 */
export function useLockUpSetRoleAdminEvent(
  config: Omit<
    UseContractEventConfig<typeof lockUpABI, 'SetRoleAdmin'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: lockUpABI,
    eventName: 'SetRoleAdmin',
    ...config,
  } as UseContractEventConfig<typeof lockUpABI, 'SetRoleAdmin'>)
}
