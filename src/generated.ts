// Generated by @wagmi/cli@0.1.15 on 2023/7/2 at 16:41:30
import {
  useContract,
  UseContractConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GeneralKeeper
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const generalKeeperABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'contents',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'result', internalType: 'bool', type: 'bool', indexed: true },
    ],
    name: 'ExecAction',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RemoveDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetGeneralCounsel',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'acceptAlongDeal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'acceptFirstRefusal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'sigHash', internalType: 'bytes32', type: 'bytes32' }],
    name: 'acceptSHA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'activateSHA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'attitude', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'castVote',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'attitude', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'castVoteOfGM',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'body', internalType: 'address', type: 'address' },
      { name: 'docUrl', internalType: 'bytes32', type: 'bytes32' },
      { name: 'docHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'circulateIA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'body', internalType: 'address', type: 'address' },
      { name: 'docUrl', internalType: 'bytes32', type: 'bytes32' },
      { name: 'docHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'circulateSHA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
    ],
    name: 'closeDeal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'params', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'desHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'executor', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createAction',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'params', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'desHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'executor', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createActionOfGM',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'createCorpSeal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'snOfIA', internalType: 'uint256', type: 'uint256' }],
    name: 'createIA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'doc', internalType: 'address', type: 'address' },
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'executor', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createMotionToApproveDoc',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfPos', internalType: 'uint256', type: 'uint256' }],
    name: 'createMotionToRemoveDirector',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfPos', internalType: 'uint256', type: 'uint256' }],
    name: 'createMotionToRemoveOfficer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfPld', internalType: 'bytes32', type: 'bytes32' },
      { name: 'creditor', internalType: 'uint256', type: 'uint256' },
      { name: 'guaranteeDays', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
      { name: 'guaranteedAmt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createPledge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'version', internalType: 'uint256', type: 'uint256' }],
    name: 'createSHA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfSwap', internalType: 'bytes32', type: 'bytes32' },
      { name: 'rightholder', internalType: 'uint256', type: 'uint256' },
      { name: 'paidOfConsider', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createSwap',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfConsider', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfTarget', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'crystalizeSwap',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'parValue', internalType: 'uint256', type: 'uint256' },
      { name: 'paidPar', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseCapital',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'delegate', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'entrustDelegaterForBoardMeeting',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'delegate', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'entrustDelegaterForGeneralMeeting',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'typeOfAction', internalType: 'uint256', type: 'uint256' },
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'params', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'desHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execAction',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'params', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'desHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execActionOfGM',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'execAntiDilution',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'execDragAlong',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfRule', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfRightholder', internalType: 'uint256', type: 'uint256' },
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'execFirstRefusal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' }],
    name: 'execOption',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execPledge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' }],
    name: 'execSwap',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfBrf', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execSwapOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'execTagAlong',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'extDays', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'extendPledge',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'finalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBOA',
    outputs: [
      { name: '', internalType: 'contract IBookOfIA', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBOD',
    outputs: [
      { name: '', internalType: 'contract IBookOfDirectors', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBOG',
    outputs: [
      { name: '', internalType: 'contract IBookOfGM', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBOH',
    outputs: [
      { name: '', internalType: 'contract IBookOfSHA', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBOO',
    outputs: [
      { name: '', internalType: 'contract IBookOfOptions', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBOP',
    outputs: [
      { name: '', internalType: 'contract IBookOfPledges', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBOS',
    outputs: [
      { name: '', internalType: 'contract IBookOfShares', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'title', internalType: 'uint256', type: 'uint256' }],
    name: 'getBook',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBookeeper',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getGeneralCounsel',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'title', internalType: 'uint256', type: 'uint256' }],
    name: 'getKeeper',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getROM',
    outputs: [
      {
        name: '',
        internalType: 'contract IRegisterOfMembers',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getROS',
    outputs: [
      { name: '', internalType: 'contract IRegisterOfSwaps', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSHA',
    outputs: [
      {
        name: '',
        internalType: 'contract IShareholdersAgreement',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'uint256', type: 'uint256' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'caller', internalType: 'address', type: 'address' }],
    name: 'isKeeper',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'issueNewShare',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'lockPledge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' },
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'lockSwap',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfBrf', internalType: 'uint256', type: 'uint256' },
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'lockSwapOrder',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nameOfCompany',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'candidate', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'nominateDirector',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'candidate', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'nominateOfficer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfConsider', internalType: 'uint256', type: 'uint256' },
      { name: 'paidOfConsider', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfTarget', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'placeSwapOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'doc', internalType: 'address', type: 'address' },
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'executor', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'proposeDocOfGM',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'proposeMotionToBoard',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'proposeMotionToGeneralMeeting',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
      { name: 'closingDate', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'pushToCoffer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfPos', internalType: 'uint256', type: 'uint256' }],
    name: 'quitPosition',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'refundDebt',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'title', internalType: 'uint256', type: 'uint256' },
      { name: 'book', internalType: 'address', type: 'address' },
    ],
    name: 'regBook',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'title', internalType: 'uint256', type: 'uint256' },
      { name: 'keeper', internalType: 'address', type: 'address' },
    ],
    name: 'regKeeper',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'regNumOfCompany',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
    ],
    name: 'releasePledge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
    ],
    name: 'releaseSwap',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfBrf', internalType: 'uint256', type: 'uint256' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
    ],
    name: 'releaseSwapOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'removeDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeDirector',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeOfficer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfLocker', internalType: 'bytes32', type: 'bytes32' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
    ],
    name: 'requestPaidInCapital',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfTarget', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'requestToBuy',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
    ],
    name: 'revokeDeal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokePledge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' }],
    name: 'revokeSwap',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfBrf', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeSwapOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'onPar', internalType: 'bool', type: 'bool' }],
    name: 'setAmtBase',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_name', internalType: 'string', type: 'string' },
      { name: '_symbol', internalType: 'string', type: 'string' },
    ],
    name: 'setCompInfo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'keeper', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setGeneralCounsel',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'max', internalType: 'uint256', type: 'uint256' }],
    name: 'setMaxQtyOfMembers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfLocker', internalType: 'bytes32', type: 'bytes32' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setPayInAmt',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'onPar', internalType: 'bool', type: 'bool' }],
    name: 'setVoteBase',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'signIA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sha', internalType: 'address', type: 'address' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'signSHA',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbolOfCompany',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'takeGiftShares',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'takePosition',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'takeSeat',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'terminateDeal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'buyer', internalType: 'uint256', type: 'uint256' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferPledge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'uint256', type: 'uint256' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferSwap',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferTargetShare',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'd1', internalType: 'uint256', type: 'uint256' },
      { name: 'd2', internalType: 'uint256', type: 'uint256' },
      { name: 'd3', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'updateOracle',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'voteCounting',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'voteCountingOfGM',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'snOfLocker', internalType: 'bytes32', type: 'bytes32' }],
    name: 'withdrawPayInAmt',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IRegCenter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iRegCenterABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'snOfDoc',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'body', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'CreateDoc',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'snOfLocker',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'LockPoints',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'to', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'amt', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'MintPoints',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'snOfLocker',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'hashKey',
        internalType: 'string',
        type: 'string',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ReleasePoints',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDocKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'snOfReward',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'SetReward',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'typeOfDoc',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'version',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'body', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetTemplate',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'TransferOwnership',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'to', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'amt', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'TransferPoints',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'TurnOverCenterKey',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'snOfLocker',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'hashKey',
        internalType: 'string',
        type: 'string',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'WithdrawPoints',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'snOfLocker', internalType: 'bytes32', type: 'bytes32' }],
    name: 'checkLocker',
    outputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'typeOfDoc', internalType: 'uint256', type: 'uint256' },
      { name: 'version', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'counterOfDocs',
    outputs: [{ name: 'seq', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'typeOfDoc', internalType: 'uint256', type: 'uint256' }],
    name: 'counterOfVersions',
    outputs: [{ name: 'seq', internalType: 'uint16', type: 'uint16' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'createComp',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfDoc', internalType: 'bytes32', type: 'bytes32' },
      { name: 'primeKeyOfOwner', internalType: 'address', type: 'address' },
    ],
    name: 'createDoc',
    outputs: [
      {
        name: 'doc',
        internalType: 'struct DocsRepo.Doc',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct DocsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDoc', internalType: 'uint16', type: 'uint16' },
              { name: 'version', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfDoc', internalType: 'uint64', type: 'uint64' },
              { name: 'creator', internalType: 'uint40', type: 'uint40' },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'data', internalType: 'uint32', type: 'uint32' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          { name: 'body', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'snOfDoc', internalType: 'bytes32', type: 'bytes32' }],
    name: 'docExist',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAllDocsSN',
    outputs: [{ name: '', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'typeOfDoc', internalType: 'uint256', type: 'uint256' },
      { name: 'version', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getBodiesList',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBookeeper',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'snOfDoc', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getDoc',
    outputs: [
      {
        name: 'doc',
        internalType: 'struct DocsRepo.Doc',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct DocsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDoc', internalType: 'uint16', type: 'uint16' },
              { name: 'version', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfDoc', internalType: 'uint64', type: 'uint64' },
              { name: 'creator', internalType: 'uint40', type: 'uint40' },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'data', internalType: 'uint32', type: 'uint32' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          { name: 'body', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'getDocByUserNo',
    outputs: [
      {
        name: 'doc',
        internalType: 'struct DocsRepo.Doc',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct DocsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDoc', internalType: 'uint16', type: 'uint16' },
              { name: 'version', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfDoc', internalType: 'uint64', type: 'uint64' },
              { name: 'creator', internalType: 'uint40', type: 'uint40' },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'data', internalType: 'uint32', type: 'uint32' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          { name: 'body', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDocKeeper',
    outputs: [{ name: 'keeper', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'typeOfDoc', internalType: 'uint256', type: 'uint256' },
      { name: 'version', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getDocsList',
    outputs: [
      {
        name: '',
        internalType: 'struct DocsRepo.Doc[]',
        type: 'tuple[]',
        components: [
          {
            name: 'head',
            internalType: 'struct DocsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDoc', internalType: 'uint16', type: 'uint16' },
              { name: 'version', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfDoc', internalType: 'uint64', type: 'uint64' },
              { name: 'creator', internalType: 'uint40', type: 'uint40' },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'data', internalType: 'uint32', type: 'uint32' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          { name: 'body', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'getMyUserNo',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getRewardSetting',
    outputs: [
      {
        name: '',
        internalType: 'struct UsersRepo.Reward',
        type: 'tuple',
        components: [
          { name: 'eoaRewards', internalType: 'uint32', type: 'uint32' },
          { name: 'coaRewards', internalType: 'uint32', type: 'uint32' },
          { name: 'offAmt', internalType: 'uint32', type: 'uint32' },
          { name: 'discRate', internalType: 'uint16', type: 'uint16' },
          { name: 'refundRatio', internalType: 'uint16', type: 'uint16' },
          { name: 'ceiling', internalType: 'uint64', type: 'uint64' },
          { name: 'floor', internalType: 'uint64', type: 'uint64' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'typeOfDoc', internalType: 'uint256', type: 'uint256' },
      { name: 'version', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getSNList',
    outputs: [{ name: '', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'snOfDoc', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getTemplate',
    outputs: [
      {
        name: 'doc',
        internalType: 'struct DocsRepo.Doc',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct DocsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDoc', internalType: 'uint16', type: 'uint16' },
              { name: 'version', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfDoc', internalType: 'uint64', type: 'uint64' },
              { name: 'creator', internalType: 'uint40', type: 'uint40' },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'data', internalType: 'uint32', type: 'uint32' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          { name: 'body', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'typeOfDoc', internalType: 'uint256', type: 'uint256' }],
    name: 'getTempsList',
    outputs: [
      {
        name: '',
        internalType: 'struct DocsRepo.Doc[]',
        type: 'tuple[]',
        components: [
          {
            name: 'head',
            internalType: 'struct DocsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDoc', internalType: 'uint16', type: 'uint16' },
              { name: 'version', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfDoc', internalType: 'uint64', type: 'uint64' },
              { name: 'creator', internalType: 'uint40', type: 'uint40' },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'data', internalType: 'uint32', type: 'uint32' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          { name: 'body', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getUser',
    outputs: [
      {
        name: '',
        internalType: 'struct UsersRepo.User',
        type: 'tuple',
        components: [
          { name: 'isCOA', internalType: 'bool', type: 'bool' },
          { name: 'counterOfV', internalType: 'uint32', type: 'uint32' },
          { name: 'balance', internalType: 'uint216', type: 'uint216' },
          {
            name: 'primeKey',
            internalType: 'struct UsersRepo.Key',
            type: 'tuple',
            components: [
              { name: 'pubKey', internalType: 'address', type: 'address' },
              { name: 'seqOfKey', internalType: 'uint16', type: 'uint16' },
              { name: 'dataOfKey', internalType: 'uint32', type: 'uint32' },
              { name: 'dateOfKey', internalType: 'uint48', type: 'uint48' },
            ],
          },
          {
            name: 'backupKey',
            internalType: 'struct UsersRepo.Key',
            type: 'tuple',
            components: [
              { name: 'pubKey', internalType: 'address', type: 'address' },
              { name: 'seqOfKey', internalType: 'uint16', type: 'uint16' },
              { name: 'dataOfKey', internalType: 'uint32', type: 'uint32' },
              { name: 'dateOfKey', internalType: 'uint48', type: 'uint48' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'targetAddr', internalType: 'address', type: 'address' }],
    name: 'getUserNo',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'docKeeper', internalType: 'address', type: 'address' }],
    name: 'initDocsRepo',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'isCOA',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'key', internalType: 'address', type: 'address' }],
    name: 'isKey',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfLocker', internalType: 'bytes32', type: 'bytes32' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'lockPoints',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfLocker', internalType: 'bytes32', type: 'bytes32' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mintAndLockPoints',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'uint256', type: 'uint256' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mintPoints',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'regUser',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfLocker', internalType: 'bytes32', type: 'bytes32' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
    ],
    name: 'releasePoints',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'bKey', internalType: 'address', type: 'address' }],
    name: 'setBackupKey',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'setDocSnOfUser',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'snOfReward', internalType: 'bytes32', type: 'bytes32' }],
    name: 'setReward',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfDoc', internalType: 'bytes32', type: 'bytes32' },
      { name: 'body', internalType: 'address', type: 'address' },
    ],
    name: 'setTemplate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'uint256', type: 'uint256' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferPoints',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newKeeper', internalType: 'address', type: 'address' }],
    name: 'turnOverCenterKey',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newKeeper', internalType: 'address', type: 'address' }],
    name: 'turnOverKeyOfDocsRepo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'info', internalType: 'bytes32', type: 'bytes32' }],
    name: 'updateUserInfo',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'snOfDoc', internalType: 'bytes32', type: 'bytes32' }],
    name: 'verifyDoc',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfLocker', internalType: 'bytes32', type: 'bytes32' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
    ],
    name: 'withdrawPoints',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IGeneralKeeper
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iGeneralKeeperABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'contents',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'result', internalType: 'bool', type: 'bool', indexed: true },
    ],
    name: 'ExecAction',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'acceptAlongDeal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'acceptFirstRefusal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'sigHash', internalType: 'bytes32', type: 'bytes32' }],
    name: 'acceptSHA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'activateSHA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'attitude', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'castVote',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'attitude', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'castVoteOfGM',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'body', internalType: 'address', type: 'address' },
      { name: 'docUrl', internalType: 'bytes32', type: 'bytes32' },
      { name: 'docHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'circulateIA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'body', internalType: 'address', type: 'address' },
      { name: 'docUrl', internalType: 'bytes32', type: 'bytes32' },
      { name: 'docHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'circulateSHA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
    ],
    name: 'closeDeal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'params', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'desHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'executor', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createAction',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'params', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'desHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'executor', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createActionOfGM',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'createCorpSeal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'snOfIA', internalType: 'uint256', type: 'uint256' }],
    name: 'createIA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'doc', internalType: 'address', type: 'address' },
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'executor', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createMotionToApproveDoc',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfPos', internalType: 'uint256', type: 'uint256' }],
    name: 'createMotionToRemoveDirector',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfPos', internalType: 'uint256', type: 'uint256' }],
    name: 'createMotionToRemoveOfficer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfPld', internalType: 'bytes32', type: 'bytes32' },
      { name: 'creditor', internalType: 'uint256', type: 'uint256' },
      { name: 'guaranteeDays', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
      { name: 'guaranteedAmt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createPledge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'version', internalType: 'uint256', type: 'uint256' }],
    name: 'createSHA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfSwap', internalType: 'bytes32', type: 'bytes32' },
      { name: 'rightholder', internalType: 'uint256', type: 'uint256' },
      { name: 'paidOfConsider', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createSwap',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfConsider', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfTarget', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'crystalizeSwap',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'parValue', internalType: 'uint256', type: 'uint256' },
      { name: 'paidPar', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseCapital',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'delegate', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'entrustDelegaterForBoardMeeting',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'delegate', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'entrustDelegaterForGeneralMeeting',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'typeOfAction', internalType: 'uint256', type: 'uint256' },
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'params', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'desHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execAction',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfVr', internalType: 'uint256', type: 'uint256' },
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'params', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'desHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execActionOfGM',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'execAntiDilution',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'execDragAlong',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfRule', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfRightholder', internalType: 'uint256', type: 'uint256' },
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'execFirstRefusal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' }],
    name: 'execOption',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execPledge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' }],
    name: 'execSwap',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfBrf', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execSwapOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'execTagAlong',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'extDays', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'extendPledge',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBOA',
    outputs: [
      { name: '', internalType: 'contract IBookOfIA', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBOD',
    outputs: [
      { name: '', internalType: 'contract IBookOfDirectors', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBOG',
    outputs: [
      { name: '', internalType: 'contract IBookOfGM', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBOH',
    outputs: [
      { name: '', internalType: 'contract IBookOfSHA', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBOO',
    outputs: [
      { name: '', internalType: 'contract IBookOfOptions', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBOP',
    outputs: [
      { name: '', internalType: 'contract IBookOfPledges', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBOS',
    outputs: [
      { name: '', internalType: 'contract IBookOfShares', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'title', internalType: 'uint256', type: 'uint256' }],
    name: 'getBook',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'getKeeper',
    outputs: [{ name: 'keeper', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getROM',
    outputs: [
      {
        name: '',
        internalType: 'contract IRegisterOfMembers',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getROS',
    outputs: [
      { name: '', internalType: 'contract IRegisterOfSwaps', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSHA',
    outputs: [
      {
        name: '',
        internalType: 'contract IShareholdersAgreement',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'caller', internalType: 'address', type: 'address' }],
    name: 'isKeeper',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'issueNewShare',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'lockPledge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' },
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'lockSwap',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfBrf', internalType: 'uint256', type: 'uint256' },
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'lockSwapOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'candidate', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'nominateDirector',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'candidate', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'nominateOfficer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfConsider', internalType: 'uint256', type: 'uint256' },
      { name: 'paidOfConsider', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfTarget', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'placeSwapOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'doc', internalType: 'address', type: 'address' },
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'executor', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'proposeDocOfGM',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'proposeMotionToBoard',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'proposeMotionToGeneralMeeting',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
      { name: 'closingDate', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'pushToCoffer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfPos', internalType: 'uint256', type: 'uint256' }],
    name: 'quitPosition',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'refundDebt',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'title', internalType: 'uint256', type: 'uint256' },
      { name: 'keeper', internalType: 'address', type: 'address' },
    ],
    name: 'regBook',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'title', internalType: 'uint256', type: 'uint256' },
      { name: 'keeper', internalType: 'address', type: 'address' },
    ],
    name: 'regKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
    ],
    name: 'releasePledge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
    ],
    name: 'releaseSwap',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfBrf', internalType: 'uint256', type: 'uint256' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
    ],
    name: 'releaseSwapOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeDirector',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeOfficer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfLocker', internalType: 'bytes32', type: 'bytes32' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
    ],
    name: 'requestPaidInCapital',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfTarget', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'requestToBuy',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
    ],
    name: 'revokeDeal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokePledge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' }],
    name: 'revokeSwap',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfBrf', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeSwapOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'onPar', internalType: 'bool', type: 'bool' }],
    name: 'setAmtBase',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_name', internalType: 'string', type: 'string' },
      { name: '_symbol', internalType: 'string', type: 'string' },
    ],
    name: 'setCompInfo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'max', internalType: 'uint256', type: 'uint256' }],
    name: 'setMaxQtyOfMembers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfLocker', internalType: 'bytes32', type: 'bytes32' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setPayInAmt',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'onPar', internalType: 'bool', type: 'bool' }],
    name: 'setVoteBase',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'signIA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sha', internalType: 'address', type: 'address' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'signSHA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'takeGiftShares',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'takePosition',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'takeSeat',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'terminateDeal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'buyer', internalType: 'uint256', type: 'uint256' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferPledge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'uint256', type: 'uint256' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferSwap',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferTargetShare',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'd1', internalType: 'uint256', type: 'uint256' },
      { name: 'd2', internalType: 'uint256', type: 'uint256' },
      { name: 'd3', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'updateOracle',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'voteCounting',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'voteCountingOfGM',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'snOfLocker', internalType: 'bytes32', type: 'bytes32' }],
    name: 'withdrawPayInAmt',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// RegCenter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const regCenterABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'snOfDoc',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'body', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'CreateDoc',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'snOfLocker',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'LockPoints',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'to', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'amt', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'MintPoints',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'snOfLocker',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'hashKey',
        internalType: 'string',
        type: 'string',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ReleasePoints',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDocKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'snOfReward',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'SetReward',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'typeOfDoc',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'version',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'body', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SetTemplate',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'TransferOwnership',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'to', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'amt', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'TransferPoints',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'TurnOverCenterKey',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'snOfLocker',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'hashKey',
        internalType: 'string',
        type: 'string',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'WithdrawPoints',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'snOfLocker', internalType: 'bytes32', type: 'bytes32' }],
    name: 'checkLocker',
    outputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'typeOfDoc', internalType: 'uint256', type: 'uint256' },
      { name: 'version', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'counterOfDocs',
    outputs: [{ name: 'seq', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'typeOfDoc', internalType: 'uint256', type: 'uint256' }],
    name: 'counterOfVersions',
    outputs: [{ name: 'seq', internalType: 'uint16', type: 'uint16' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'createComp',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfDoc', internalType: 'bytes32', type: 'bytes32' },
      { name: 'primeKeyOfOwner', internalType: 'address', type: 'address' },
    ],
    name: 'createDoc',
    outputs: [
      {
        name: 'doc',
        internalType: 'struct DocsRepo.Doc',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct DocsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDoc', internalType: 'uint16', type: 'uint16' },
              { name: 'version', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfDoc', internalType: 'uint64', type: 'uint64' },
              { name: 'creator', internalType: 'uint40', type: 'uint40' },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'data', internalType: 'uint32', type: 'uint32' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          { name: 'body', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'snOfDoc', internalType: 'bytes32', type: 'bytes32' }],
    name: 'docExist',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAllDocsSN',
    outputs: [{ name: '', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'typeOfDoc', internalType: 'uint256', type: 'uint256' },
      { name: 'version', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getBodiesList',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBookeeper',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'snOfDoc', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getDoc',
    outputs: [
      {
        name: 'doc',
        internalType: 'struct DocsRepo.Doc',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct DocsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDoc', internalType: 'uint16', type: 'uint16' },
              { name: 'version', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfDoc', internalType: 'uint64', type: 'uint64' },
              { name: 'creator', internalType: 'uint40', type: 'uint40' },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'data', internalType: 'uint32', type: 'uint32' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          { name: 'body', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'getDocByUserNo',
    outputs: [
      {
        name: 'doc',
        internalType: 'struct DocsRepo.Doc',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct DocsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDoc', internalType: 'uint16', type: 'uint16' },
              { name: 'version', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfDoc', internalType: 'uint64', type: 'uint64' },
              { name: 'creator', internalType: 'uint40', type: 'uint40' },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'data', internalType: 'uint32', type: 'uint32' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          { name: 'body', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDocKeeper',
    outputs: [{ name: 'keeper', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'typeOfDoc', internalType: 'uint256', type: 'uint256' },
      { name: 'version', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getDocsList',
    outputs: [
      {
        name: '',
        internalType: 'struct DocsRepo.Doc[]',
        type: 'tuple[]',
        components: [
          {
            name: 'head',
            internalType: 'struct DocsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDoc', internalType: 'uint16', type: 'uint16' },
              { name: 'version', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfDoc', internalType: 'uint64', type: 'uint64' },
              { name: 'creator', internalType: 'uint40', type: 'uint40' },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'data', internalType: 'uint32', type: 'uint32' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          { name: 'body', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getMyUserNo',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getRewardSetting',
    outputs: [
      {
        name: '',
        internalType: 'struct UsersRepo.Reward',
        type: 'tuple',
        components: [
          { name: 'eoaRewards', internalType: 'uint32', type: 'uint32' },
          { name: 'coaRewards', internalType: 'uint32', type: 'uint32' },
          { name: 'offAmt', internalType: 'uint32', type: 'uint32' },
          { name: 'discRate', internalType: 'uint16', type: 'uint16' },
          { name: 'refundRatio', internalType: 'uint16', type: 'uint16' },
          { name: 'ceiling', internalType: 'uint64', type: 'uint64' },
          { name: 'floor', internalType: 'uint64', type: 'uint64' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'typeOfDoc', internalType: 'uint256', type: 'uint256' },
      { name: 'version', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getSNList',
    outputs: [{ name: '', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'snOfDoc', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getTemplate',
    outputs: [
      {
        name: 'doc',
        internalType: 'struct DocsRepo.Doc',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct DocsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDoc', internalType: 'uint16', type: 'uint16' },
              { name: 'version', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfDoc', internalType: 'uint64', type: 'uint64' },
              { name: 'creator', internalType: 'uint40', type: 'uint40' },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'data', internalType: 'uint32', type: 'uint32' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          { name: 'body', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'typeOfDoc', internalType: 'uint256', type: 'uint256' }],
    name: 'getTempsList',
    outputs: [
      {
        name: '',
        internalType: 'struct DocsRepo.Doc[]',
        type: 'tuple[]',
        components: [
          {
            name: 'head',
            internalType: 'struct DocsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDoc', internalType: 'uint16', type: 'uint16' },
              { name: 'version', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfDoc', internalType: 'uint64', type: 'uint64' },
              { name: 'creator', internalType: 'uint40', type: 'uint40' },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'data', internalType: 'uint32', type: 'uint32' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          { name: 'body', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getUser',
    outputs: [
      {
        name: '',
        internalType: 'struct UsersRepo.User',
        type: 'tuple',
        components: [
          { name: 'isCOA', internalType: 'bool', type: 'bool' },
          { name: 'counterOfV', internalType: 'uint32', type: 'uint32' },
          { name: 'balance', internalType: 'uint216', type: 'uint216' },
          {
            name: 'primeKey',
            internalType: 'struct UsersRepo.Key',
            type: 'tuple',
            components: [
              { name: 'pubKey', internalType: 'address', type: 'address' },
              { name: 'seqOfKey', internalType: 'uint16', type: 'uint16' },
              { name: 'dataOfKey', internalType: 'uint32', type: 'uint32' },
              { name: 'dateOfKey', internalType: 'uint48', type: 'uint48' },
            ],
          },
          {
            name: 'backupKey',
            internalType: 'struct UsersRepo.Key',
            type: 'tuple',
            components: [
              { name: 'pubKey', internalType: 'address', type: 'address' },
              { name: 'seqOfKey', internalType: 'uint16', type: 'uint16' },
              { name: 'dataOfKey', internalType: 'uint32', type: 'uint32' },
              { name: 'dateOfKey', internalType: 'uint48', type: 'uint48' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'targetAddr', internalType: 'address', type: 'address' }],
    name: 'getUserNo',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'docKeeper', internalType: 'address', type: 'address' }],
    name: 'initDocsRepo',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'isCOA',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'key', internalType: 'address', type: 'address' }],
    name: 'isKey',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfLocker', internalType: 'bytes32', type: 'bytes32' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'lockPoints',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfLocker', internalType: 'bytes32', type: 'bytes32' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mintAndLockPoints',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'uint256', type: 'uint256' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mintPoints',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'regUser',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfLocker', internalType: 'bytes32', type: 'bytes32' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
    ],
    name: 'releasePoints',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'bKey', internalType: 'address', type: 'address' }],
    name: 'setBackupKey',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'setDocSnOfUser',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'snOfReward', internalType: 'bytes32', type: 'bytes32' }],
    name: 'setReward',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfDoc', internalType: 'bytes32', type: 'bytes32' },
      { name: 'body', internalType: 'address', type: 'address' },
    ],
    name: 'setTemplate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'uint256', type: 'uint256' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferPoints',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newKeeper', internalType: 'address', type: 'address' }],
    name: 'turnOverCenterKey',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newKeeper', internalType: 'address', type: 'address' }],
    name: 'turnOverKeyOfDocsRepo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'info', internalType: 'bytes32', type: 'bytes32' }],
    name: 'updateUserInfo',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'snOfDoc', internalType: 'bytes32', type: 'bytes32' }],
    name: 'verifyDoc',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfLocker', internalType: 'bytes32', type: 'bytes32' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
    ],
    name: 'withdrawPoints',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BOAKeeper
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const boaKeeperABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RemoveDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetGeneralCounsel',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'docUrl', internalType: 'bytes32', type: 'bytes32' },
      { name: 'docHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'circulateIA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'closeDeal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'version', internalType: 'uint256', type: 'uint256' },
      { name: 'primeKeyOfCaller', internalType: 'address', type: 'address' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createIA',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'finalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBookeeper',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getGeneralCounsel',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'uint256', type: 'uint256' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'issueNewShare',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
      { name: 'closingDate', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'pushToCoffer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'removeDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
    ],
    name: 'revokeDeal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'keeper', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setGeneralCounsel',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'signIA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'terminateDeal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferTargetShare',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BODKeeper
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const bodKeeperABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RemoveDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetGeneralCounsel',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'attitude', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'castVote',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'params', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'desHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'executor', internalType: 'uint256', type: 'uint256' },
      { name: 'proposer', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createAction',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'doc', internalType: 'address', type: 'address' },
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'executor', internalType: 'uint256', type: 'uint256' },
      { name: 'proposer', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createMotionToApproveDoc',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'nominator', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createMotionToRemoveOfficer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'delegate', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'entrustDelegaterForBoardMeeting',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'typeOfAction', internalType: 'uint256', type: 'uint256' },
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'params', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'desHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execAction',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'finalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBookeeper',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getGeneralCounsel',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'uint256', type: 'uint256' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'candidate', internalType: 'uint256', type: 'uint256' },
      { name: 'nominator', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'nominateOfficer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'proposeMotionToBoard',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quitPosition',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'removeDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeOfficer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'keeper', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setGeneralCounsel',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'takePosition',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'voteCounting',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BOGKeeper
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const bogKeeperABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RemoveDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetGeneralCounsel',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'attitude', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'castVoteOfGM',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'params', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'desHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'executor', internalType: 'uint256', type: 'uint256' },
      { name: 'proposer', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createActionOfGM',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createMotionToRemoveDirector',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'delegate', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'entrustDelegaterForGeneralMeeting',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'typeOfAction', internalType: 'uint256', type: 'uint256' },
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'params', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'desHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execActionOfGM',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'finalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBookeeper',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getGeneralCounsel',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'uint256', type: 'uint256' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'candidate', internalType: 'uint256', type: 'uint256' },
      { name: 'nominator', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'nominateDirector',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'doc', internalType: 'address', type: 'address' },
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'executor', internalType: 'uint256', type: 'uint256' },
      { name: 'proposer', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'proposeDocOfGM',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'proposeMotionToGeneralMeeting',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'removeDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeDirector',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'keeper', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setGeneralCounsel',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'takeSeat',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'voteCountingOfGM',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BOHKeeper
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const bohKeeperABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RemoveDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetGeneralCounsel',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'acceptSHA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sha', internalType: 'address', type: 'address' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'activateSHA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sha', internalType: 'address', type: 'address' },
      { name: 'docUrl', internalType: 'bytes32', type: 'bytes32' },
      { name: 'docHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'circulateSHA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'version', internalType: 'uint256', type: 'uint256' },
      { name: 'primeKeyOfCaller', internalType: 'address', type: 'address' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createSHA',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'finalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBookeeper',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getGeneralCounsel',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'uint256', type: 'uint256' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'removeDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'keeper', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setGeneralCounsel',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sha', internalType: 'address', type: 'address' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'signSHA',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BOOKeeper
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const booKeeperABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RemoveDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetGeneralCounsel',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execOption',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfBrf', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execSwapOrder',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'finalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBookeeper',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getGeneralCounsel',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'uint256', type: 'uint256' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfBrf', internalType: 'uint256', type: 'uint256' },
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'lockSwapOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfConsider', internalType: 'uint256', type: 'uint256' },
      { name: 'paidOfConsider', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfTarget', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'placeSwapOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfBrf', internalType: 'uint256', type: 'uint256' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'releaseSwapOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'removeDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfBrf', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeSwapOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'keeper', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setGeneralCounsel',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'd1', internalType: 'uint256', type: 'uint256' },
      { name: 'd2', internalType: 'uint256', type: 'uint256' },
      { name: 'd3', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'updateOracle',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BOPKeeper
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const bopKeeperABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RemoveDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetGeneralCounsel',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfPld', internalType: 'bytes32', type: 'bytes32' },
      { name: 'creditor', internalType: 'uint256', type: 'uint256' },
      { name: 'guaranteeDays', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
      { name: 'guaranteedAmt', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createPledge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execPledge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'extDays', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'extendPledge',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'finalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBookeeper',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getGeneralCounsel',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'uint256', type: 'uint256' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'lockPledge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'refundDebt',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'releasePledge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'removeDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokePledge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'keeper', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setGeneralCounsel',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'buyer', internalType: 'uint256', type: 'uint256' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferPledge',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BOSKeeper
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const bosKeeperABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RemoveDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetGeneralCounsel',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseCapital',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'finalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBookeeper',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getGeneralCounsel',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'uint256', type: 'uint256' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'removeDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfLocker', internalType: 'bytes32', type: 'bytes32' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'requestPaidInCapital',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'keeper', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setGeneralCounsel',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfLocker', internalType: 'bytes32', type: 'bytes32' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setPayInAmt',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'snOfLocker', internalType: 'bytes32', type: 'bytes32' }],
    name: 'withdrawPayInAmt',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IBOAKeeper
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iboaKeeperABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'docUrl', internalType: 'bytes32', type: 'bytes32' },
      { name: 'docHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'circulateIA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'closeDeal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'version', internalType: 'uint256', type: 'uint256' },
      { name: 'primeKeyOfCaller', internalType: 'address', type: 'address' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createIA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'issueNewShare',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
      { name: 'closingDate', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'pushToCoffer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
    ],
    name: 'revokeDeal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'signIA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'terminateDeal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferTargetShare',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IBODKeeper
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ibodKeeperABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'attitude', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'castVote',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'params', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'desHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'executor', internalType: 'uint256', type: 'uint256' },
      { name: 'proposer', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createAction',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'doc', internalType: 'address', type: 'address' },
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'executor', internalType: 'uint256', type: 'uint256' },
      { name: 'proposer', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createMotionToApproveDoc',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'nominator', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createMotionToRemoveOfficer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'delegate', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'entrustDelegaterForBoardMeeting',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'typeOfAction', internalType: 'uint256', type: 'uint256' },
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'params', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'desHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execAction',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'candidate', internalType: 'uint256', type: 'uint256' },
      { name: 'nominator', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'nominateOfficer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'proposeMotionToBoard',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quitPosition',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeOfficer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'takePosition',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'voteCounting',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IBOGKeeper
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ibogKeeperABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'attitude', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'castVoteOfGM',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'params', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'desHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'executor', internalType: 'uint256', type: 'uint256' },
      { name: 'proposer', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createActionOfGM',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createMotionToRemoveDirector',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'motionId', internalType: 'uint256', type: 'uint256' },
      { name: 'delegate', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'entrustDelegaterForGeneralMeeting',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'typeOfAction', internalType: 'uint256', type: 'uint256' },
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'params', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'desHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execActionOfGM',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'candidate', internalType: 'uint256', type: 'uint256' },
      { name: 'nominator', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'nominateDirector',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'doc', internalType: 'address', type: 'address' },
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'executor', internalType: 'uint256', type: 'uint256' },
      { name: 'proposer', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'proposeDocOfGM',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'proposeMotionToGeneralMeeting',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeDirector',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'takeSeat',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'voteCountingOfGM',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IBOHKeeper
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ibohKeeperABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'acceptSHA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sha', internalType: 'address', type: 'address' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'activateSHA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sha', internalType: 'address', type: 'address' },
      { name: 'docUrl', internalType: 'bytes32', type: 'bytes32' },
      { name: 'docHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'circulateSHA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'version', internalType: 'uint256', type: 'uint256' },
      { name: 'primeKeyOfCaller', internalType: 'address', type: 'address' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createSHA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sha', internalType: 'address', type: 'address' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'signSHA',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IBOOKeeper
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ibooKeeperABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execOption',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfBrf', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execSwapOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfBrf', internalType: 'uint256', type: 'uint256' },
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'lockSwapOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfConsider', internalType: 'uint256', type: 'uint256' },
      { name: 'paidOfConsider', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfTarget', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'placeSwapOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfBrf', internalType: 'uint256', type: 'uint256' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'releaseSwapOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfBrf', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeSwapOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'd1', internalType: 'uint256', type: 'uint256' },
      { name: 'd2', internalType: 'uint256', type: 'uint256' },
      { name: 'd3', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'updateOracle',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IBOPKeeper
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ibopKeeperABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfPld', internalType: 'bytes32', type: 'bytes32' },
      { name: 'creditor', internalType: 'uint256', type: 'uint256' },
      { name: 'guaranteeDays', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
      { name: 'guaranteedAmt', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createPledge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execPledge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'extDays', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'extendPledge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'lockPledge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'refundDebt',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'releasePledge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokePledge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'buyer', internalType: 'uint256', type: 'uint256' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferPledge',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IBOSKeeper
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ibosKeeperABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseCapital',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfLocker', internalType: 'bytes32', type: 'bytes32' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'requestPaidInCapital',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfLocker', internalType: 'bytes32', type: 'bytes32' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setPayInAmt',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'snOfLocker', internalType: 'bytes32', type: 'bytes32' }],
    name: 'withdrawPayInAmt',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IROMKeeper
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iromKeeperABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'onPar', internalType: 'bool', type: 'bool' }],
    name: 'setAmtBase',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'max', internalType: 'uint256', type: 'uint256' }],
    name: 'setMaxQtyOfMembers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'onPar', internalType: 'bool', type: 'bool' }],
    name: 'setVoteBase',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IROSKeeper
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const irosKeeperABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfSwap', internalType: 'bytes32', type: 'bytes32' },
      { name: 'rightholder', internalType: 'uint256', type: 'uint256' },
      { name: 'paidOfConsider', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createSwap',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfConsider', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfTarget', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'crystalizeSwap',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execSwap',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' },
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'lockSwap',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'releaseSwap',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfTarget', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'requestToBuy',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeSwap',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'uint256', type: 'uint256' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferSwap',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ISHAKeeper
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ishaKeeperABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'acceptAlongDeal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'acceptFirstRefusal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'dragAlong', internalType: 'bool', type: 'bool' },
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'execAlongRight',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'execAntiDilution',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfFRRule', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfRightholder', internalType: 'uint256', type: 'uint256' },
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'execFirstRefusal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'takeGiftShares',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ROMKeeper
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const romKeeperABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RemoveDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetGeneralCounsel',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'finalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBookeeper',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getGeneralCounsel',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'uint256', type: 'uint256' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'removeDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'onPar', internalType: 'bool', type: 'bool' }],
    name: 'setAmtBase',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'keeper', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setGeneralCounsel',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'max', internalType: 'uint256', type: 'uint256' }],
    name: 'setMaxQtyOfMembers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'onPar', internalType: 'bool', type: 'bool' }],
    name: 'setVoteBase',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ROSKeeper
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const rosKeeperABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RemoveDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetGeneralCounsel',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfSwap', internalType: 'bytes32', type: 'bytes32' },
      { name: 'rightholder', internalType: 'uint256', type: 'uint256' },
      { name: 'paidOfConsider', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createSwap',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfConsider', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfTarget', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'crystalizeSwap',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execSwap',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'finalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBookeeper',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getGeneralCounsel',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'uint256', type: 'uint256' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' },
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'lockSwap',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'releaseSwap',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'removeDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfTarget', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'requestToBuy',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeSwap',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'keeper', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setGeneralCounsel',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'uint256', type: 'uint256' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferSwap',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SHAKeeper
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const shaKeeperABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RemoveDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetGeneralCounsel',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'acceptAlongDeal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'acceptFirstRefusal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'dragAlong', internalType: 'bool', type: 'bool' },
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'execAlongRight',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'execAntiDilution',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfFRRule', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfRightholder', internalType: 'uint256', type: 'uint256' },
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'execFirstRefusal',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'finalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBookeeper',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getGeneralCounsel',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'uint256', type: 'uint256' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'removeDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'keeper', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setGeneralCounsel',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'takeGiftShares',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BookOfIA
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const bookOfIaABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'seqOfDeal',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'AcceptFirstRefusalClaims',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address', indexed: true },
      { name: 'dragAlong', internalType: 'bool', type: 'bool', indexed: true },
      {
        name: 'seqOfDeal',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'paid',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'par', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'claimer',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sigHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
    ],
    name: 'ExecAlongRight',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'seqOfDeal',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'caller',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ExecFirstRefusalRight',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RemoveDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetGeneralCounsel',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'body', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'state',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'UpdateStateOfFile',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'acceptFirstRefusalClaims',
    outputs: [
      {
        name: 'output',
        internalType: 'struct FRClaims.Claim[]',
        type: 'tuple[]',
        components: [
          { name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' },
          { name: 'rightholder', internalType: 'uint40', type: 'uint40' },
          { name: 'weight', internalType: 'uint64', type: 'uint64' },
          { name: 'ratio', internalType: 'uint64', type: 'uint64' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'body', internalType: 'address', type: 'address' },
      { name: 'signingDays', internalType: 'uint16', type: 'uint16' },
      { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
      {
        name: 'vr',
        internalType: 'struct RulesParser.VotingRule',
        type: 'tuple',
        components: [
          { name: 'seqOfRule', internalType: 'uint16', type: 'uint16' },
          { name: 'qtyOfSubRule', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfSubRule', internalType: 'uint8', type: 'uint8' },
          { name: 'authority', internalType: 'uint16', type: 'uint16' },
          { name: 'headRatio', internalType: 'uint16', type: 'uint16' },
          { name: 'amountRatio', internalType: 'uint16', type: 'uint16' },
          { name: 'onlyAttendance', internalType: 'bool', type: 'bool' },
          { name: 'impliedConsent', internalType: 'bool', type: 'bool' },
          { name: 'partyAsConsent', internalType: 'bool', type: 'bool' },
          { name: 'againstShallBuy', internalType: 'bool', type: 'bool' },
          { name: 'shaExecDays', internalType: 'uint8', type: 'uint8' },
          { name: 'shaConfirmDays', internalType: 'uint8', type: 'uint8' },
          { name: 'reconsiderDays', internalType: 'uint8', type: 'uint8' },
          { name: 'votePrepareDays', internalType: 'uint8', type: 'uint8' },
          { name: 'votingDays', internalType: 'uint8', type: 'uint8' },
          { name: 'execDaysForPutOpt', internalType: 'uint8', type: 'uint8' },
          { name: 'vetoers', internalType: 'uint40[2]', type: 'uint40[2]' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
        ],
      },
      { name: 'docUrl', internalType: 'bytes32', type: 'bytes32' },
      { name: 'docHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'circulateFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'claimsOfFR',
    outputs: [
      {
        name: '',
        internalType: 'struct FRClaims.Claim[]',
        type: 'tuple[]',
        components: [
          { name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' },
          { name: 'rightholder', internalType: 'uint40', type: 'uint40' },
          { name: 'weight', internalType: 'uint64', type: 'uint64' },
          { name: 'ratio', internalType: 'uint64', type: 'uint64' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'closingDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'ia', internalType: 'address', type: 'address' }],
    name: 'createMockOfIA',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'establishFile',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'dragAlong', internalType: 'bool', type: 'bool' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'execAlongRight',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'execFile',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'execFirstRefusalRight',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'finalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBookeeper',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getDTClaimForShare',
    outputs: [
      {
        name: '',
        internalType: 'struct DTClaims.Claim',
        type: 'tuple',
        components: [
          { name: 'typeOfClaim', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
          { name: 'paid', internalType: 'uint64', type: 'uint64' },
          { name: 'par', internalType: 'uint64', type: 'uint64' },
          { name: 'claimer', internalType: 'uint40', type: 'uint40' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getDTClaimsForDeal',
    outputs: [
      {
        name: '',
        internalType: 'struct DTClaims.Claim[]',
        type: 'tuple[]',
        components: [
          { name: 'typeOfClaim', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
          { name: 'paid', internalType: 'uint64', type: 'uint64' },
          { name: 'par', internalType: 'uint64', type: 'uint64' },
          { name: 'claimer', internalType: 'uint40', type: 'uint40' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'ia', internalType: 'address', type: 'address' }],
    name: 'getDraggingDeals',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'getFile',
    outputs: [
      {
        name: '',
        internalType: 'struct FilesRepo.File',
        type: 'tuple',
        components: [
          { name: 'snOfDoc', internalType: 'bytes32', type: 'bytes32' },
          {
            name: 'head',
            internalType: 'struct FilesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'circulateDate', internalType: 'uint48', type: 'uint48' },
              { name: 'signingDays', internalType: 'uint8', type: 'uint8' },
              { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
              { name: 'shaExecDays', internalType: 'uint8', type: 'uint8' },
              { name: 'shaConfirmDays', internalType: 'uint8', type: 'uint8' },
              { name: 'proposeDate', internalType: 'uint48', type: 'uint48' },
              { name: 'reconsiderDays', internalType: 'uint8', type: 'uint8' },
              { name: 'votePrepareDays', internalType: 'uint8', type: 'uint8' },
              { name: 'votingDays', internalType: 'uint8', type: 'uint8' },
              {
                name: 'execDaysForPutOpt',
                internalType: 'uint8',
                type: 'uint8',
              },
              { name: 'seqOfMotion', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'ref',
            internalType: 'struct FilesRepo.Ref',
            type: 'tuple',
            components: [
              { name: 'docUrl', internalType: 'bytes32', type: 'bytes32' },
              { name: 'docHash', internalType: 'bytes32', type: 'bytes32' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getFilesList',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getGeneralCounsel',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'getHeadOfFile',
    outputs: [
      {
        name: 'head',
        internalType: 'struct FilesRepo.Head',
        type: 'tuple',
        components: [
          { name: 'circulateDate', internalType: 'uint48', type: 'uint48' },
          { name: 'signingDays', internalType: 'uint8', type: 'uint8' },
          { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
          { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
          { name: 'shaExecDays', internalType: 'uint8', type: 'uint8' },
          { name: 'shaConfirmDays', internalType: 'uint8', type: 'uint8' },
          { name: 'proposeDate', internalType: 'uint48', type: 'uint48' },
          { name: 'reconsiderDays', internalType: 'uint8', type: 'uint8' },
          { name: 'votePrepareDays', internalType: 'uint8', type: 'uint8' },
          { name: 'votingDays', internalType: 'uint8', type: 'uint8' },
          { name: 'execDaysForPutOpt', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfMotion', internalType: 'uint64', type: 'uint64' },
          { name: 'state', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'getRefOfFile',
    outputs: [
      {
        name: 'ref',
        internalType: 'struct FilesRepo.Ref',
        type: 'tuple',
        components: [
          { name: 'docUrl', internalType: 'bytes32', type: 'bytes32' },
          { name: 'docHash', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'getSNOfFile',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasDTClaims',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'uint256', type: 'uint256' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isFRClaimer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'isRegistered',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'buyer', internalType: 'uint256', type: 'uint256' },
      { name: 'groupRep', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mockDealOfBuy',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seller', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mockDealOfSell',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mockResultsOfAcct',
    outputs: [
      { name: 'groupRep', internalType: 'uint40', type: 'uint40' },
      { name: 'ratio', internalType: 'uint16', type: 'uint16' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'ia', internalType: 'address', type: 'address' }],
    name: 'mockResultsOfIA',
    outputs: [
      { name: 'controllor', internalType: 'uint40', type: 'uint40' },
      { name: 'ratio', internalType: 'uint16', type: 'uint16' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'body', internalType: 'address', type: 'address' },
      { name: 'seqOfMotion', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'proposeFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'qtyOfFiles',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfDoc', internalType: 'bytes32', type: 'bytes32' },
      { name: 'body', internalType: 'address', type: 'address' },
    ],
    name: 'regFile',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'removeDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'keeper', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setGeneralCounsel',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'body', internalType: 'address', type: 'address' },
      { name: 'state', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setStateOfFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'shaExecDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'signingDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'terminateFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'terminateStartpoint',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'body', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'voteCountingForFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'votingDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IBookOfIA
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iBookOfIaABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'seqOfDeal',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'AcceptFirstRefusalClaims',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address', indexed: true },
      { name: 'dragAlong', internalType: 'bool', type: 'bool', indexed: true },
      {
        name: 'seqOfDeal',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'paid',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'par', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'claimer',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sigHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
    ],
    name: 'ExecAlongRight',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'seqOfDeal',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'caller',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ExecFirstRefusalRight',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'body', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'state',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'UpdateStateOfFile',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'acceptFirstRefusalClaims',
    outputs: [
      {
        name: 'output',
        internalType: 'struct FRClaims.Claim[]',
        type: 'tuple[]',
        components: [
          { name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' },
          { name: 'rightholder', internalType: 'uint40', type: 'uint40' },
          { name: 'weight', internalType: 'uint64', type: 'uint64' },
          { name: 'ratio', internalType: 'uint64', type: 'uint64' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'body', internalType: 'address', type: 'address' },
      { name: 'signingDays', internalType: 'uint16', type: 'uint16' },
      { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
      {
        name: 'vr',
        internalType: 'struct RulesParser.VotingRule',
        type: 'tuple',
        components: [
          { name: 'seqOfRule', internalType: 'uint16', type: 'uint16' },
          { name: 'qtyOfSubRule', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfSubRule', internalType: 'uint8', type: 'uint8' },
          { name: 'authority', internalType: 'uint16', type: 'uint16' },
          { name: 'headRatio', internalType: 'uint16', type: 'uint16' },
          { name: 'amountRatio', internalType: 'uint16', type: 'uint16' },
          { name: 'onlyAttendance', internalType: 'bool', type: 'bool' },
          { name: 'impliedConsent', internalType: 'bool', type: 'bool' },
          { name: 'partyAsConsent', internalType: 'bool', type: 'bool' },
          { name: 'againstShallBuy', internalType: 'bool', type: 'bool' },
          { name: 'shaExecDays', internalType: 'uint8', type: 'uint8' },
          { name: 'shaConfirmDays', internalType: 'uint8', type: 'uint8' },
          { name: 'reconsiderDays', internalType: 'uint8', type: 'uint8' },
          { name: 'votePrepareDays', internalType: 'uint8', type: 'uint8' },
          { name: 'votingDays', internalType: 'uint8', type: 'uint8' },
          { name: 'execDaysForPutOpt', internalType: 'uint8', type: 'uint8' },
          { name: 'vetoers', internalType: 'uint40[2]', type: 'uint40[2]' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
        ],
      },
      { name: 'docUrl', internalType: 'bytes32', type: 'bytes32' },
      { name: 'docHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'circulateFile',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'claimsOfFR',
    outputs: [
      {
        name: '',
        internalType: 'struct FRClaims.Claim[]',
        type: 'tuple[]',
        components: [
          { name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' },
          { name: 'rightholder', internalType: 'uint40', type: 'uint40' },
          { name: 'weight', internalType: 'uint64', type: 'uint64' },
          { name: 'ratio', internalType: 'uint64', type: 'uint64' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'closingDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'ia', internalType: 'address', type: 'address' }],
    name: 'createMockOfIA',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'establishFile',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'dragAlong', internalType: 'bool', type: 'bool' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'execAlongRight',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'execFile',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'execFirstRefusalRight',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getDTClaimForShare',
    outputs: [
      {
        name: '',
        internalType: 'struct DTClaims.Claim',
        type: 'tuple',
        components: [
          { name: 'typeOfClaim', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
          { name: 'paid', internalType: 'uint64', type: 'uint64' },
          { name: 'par', internalType: 'uint64', type: 'uint64' },
          { name: 'claimer', internalType: 'uint40', type: 'uint40' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getDTClaimsForDeal',
    outputs: [
      {
        name: '',
        internalType: 'struct DTClaims.Claim[]',
        type: 'tuple[]',
        components: [
          { name: 'typeOfClaim', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
          { name: 'paid', internalType: 'uint64', type: 'uint64' },
          { name: 'par', internalType: 'uint64', type: 'uint64' },
          { name: 'claimer', internalType: 'uint40', type: 'uint40' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'ia', internalType: 'address', type: 'address' }],
    name: 'getDraggingDeals',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'getFile',
    outputs: [
      {
        name: '',
        internalType: 'struct FilesRepo.File',
        type: 'tuple',
        components: [
          { name: 'snOfDoc', internalType: 'bytes32', type: 'bytes32' },
          {
            name: 'head',
            internalType: 'struct FilesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'circulateDate', internalType: 'uint48', type: 'uint48' },
              { name: 'signingDays', internalType: 'uint8', type: 'uint8' },
              { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
              { name: 'shaExecDays', internalType: 'uint8', type: 'uint8' },
              { name: 'shaConfirmDays', internalType: 'uint8', type: 'uint8' },
              { name: 'proposeDate', internalType: 'uint48', type: 'uint48' },
              { name: 'reconsiderDays', internalType: 'uint8', type: 'uint8' },
              { name: 'votePrepareDays', internalType: 'uint8', type: 'uint8' },
              { name: 'votingDays', internalType: 'uint8', type: 'uint8' },
              {
                name: 'execDaysForPutOpt',
                internalType: 'uint8',
                type: 'uint8',
              },
              { name: 'seqOfMotion', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'ref',
            internalType: 'struct FilesRepo.Ref',
            type: 'tuple',
            components: [
              { name: 'docUrl', internalType: 'bytes32', type: 'bytes32' },
              { name: 'docHash', internalType: 'bytes32', type: 'bytes32' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getFilesList',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'getHeadOfFile',
    outputs: [
      {
        name: 'head',
        internalType: 'struct FilesRepo.Head',
        type: 'tuple',
        components: [
          { name: 'circulateDate', internalType: 'uint48', type: 'uint48' },
          { name: 'signingDays', internalType: 'uint8', type: 'uint8' },
          { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
          { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
          { name: 'shaExecDays', internalType: 'uint8', type: 'uint8' },
          { name: 'shaConfirmDays', internalType: 'uint8', type: 'uint8' },
          { name: 'proposeDate', internalType: 'uint48', type: 'uint48' },
          { name: 'reconsiderDays', internalType: 'uint8', type: 'uint8' },
          { name: 'votePrepareDays', internalType: 'uint8', type: 'uint8' },
          { name: 'votingDays', internalType: 'uint8', type: 'uint8' },
          { name: 'execDaysForPutOpt', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfMotion', internalType: 'uint64', type: 'uint64' },
          { name: 'state', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'getRefOfFile',
    outputs: [
      {
        name: 'ref',
        internalType: 'struct FilesRepo.Ref',
        type: 'tuple',
        components: [
          { name: 'docUrl', internalType: 'bytes32', type: 'bytes32' },
          { name: 'docHash', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'getSNOfFile',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasDTClaims',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isFRClaimer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'isRegistered',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'buyer', internalType: 'uint256', type: 'uint256' },
      { name: 'groupRep', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mockDealOfBuy',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seller', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mockDealOfSell',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mockResultsOfAcct',
    outputs: [
      { name: 'groupRep', internalType: 'uint40', type: 'uint40' },
      { name: 'ratio', internalType: 'uint16', type: 'uint16' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'ia', internalType: 'address', type: 'address' }],
    name: 'mockResultsOfIA',
    outputs: [
      { name: 'controllor', internalType: 'uint40', type: 'uint40' },
      { name: 'ratio', internalType: 'uint16', type: 'uint16' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'body', internalType: 'address', type: 'address' },
      { name: 'seqOfMotion', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'proposeFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'qtyOfFiles',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfDoc', internalType: 'bytes32', type: 'bytes32' },
      { name: 'body', internalType: 'address', type: 'address' },
    ],
    name: 'regFile',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'body', internalType: 'address', type: 'address' },
      { name: 'state', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setStateOfFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'shaExecDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'signingDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'terminateFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'terminateStartpoint',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'body', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'voteCountingForFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'votingDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IInvestmentAgreement
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iInvestmentAgreementABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfDeal',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'AddDeal',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'seq', internalType: 'uint256', type: 'uint256', indexed: true },
      {
        name: 'hashLock',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'closingDate',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ClearDealCP',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'seq', internalType: 'uint256', type: 'uint256', indexed: true },
      {
        name: 'hashKey',
        internalType: 'string',
        type: 'string',
        indexed: true,
      },
    ],
    name: 'CloseDeal',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'seq', internalType: 'uint256', type: 'uint256', indexed: true },
      {
        name: 'hashKey',
        internalType: 'string',
        type: 'string',
        indexed: true,
      },
    ],
    name: 'RevokeDeal',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'seq', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'TerminateDeal',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sn', internalType: 'bytes32', type: 'bytes32' },
      { name: 'buyer', internalType: 'uint256', type: 'uint256' },
      { name: 'groupOfBuyer', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addDeal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seq', internalType: 'uint256', type: 'uint256' },
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
      { name: 'closingDate', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'clearDealCP',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seq', internalType: 'uint256', type: 'uint256' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
    ],
    name: 'closeDeal',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'counterOfClosedDeal',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'counterOfDeal',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seq', internalType: 'uint256', type: 'uint256' }],
    name: 'delDeal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seq', internalType: 'uint256', type: 'uint256' }],
    name: 'directCloseDeal',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seq', internalType: 'uint256', type: 'uint256' }],
    name: 'getBodyOfDeal',
    outputs: [
      {
        name: '',
        internalType: 'struct DealsRepo.Body',
        type: 'tuple',
        components: [
          { name: 'buyer', internalType: 'uint40', type: 'uint40' },
          { name: 'groupOfBuyer', internalType: 'uint40', type: 'uint40' },
          { name: 'paid', internalType: 'uint64', type: 'uint64' },
          { name: 'par', internalType: 'uint64', type: 'uint64' },
          { name: 'state', internalType: 'uint8', type: 'uint8' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'argu', internalType: 'uint16', type: 'uint16' },
          { name: 'flag', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seq', internalType: 'uint256', type: 'uint256' }],
    name: 'getDeal',
    outputs: [
      {
        name: '',
        internalType: 'struct DealsRepo.Deal',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct DealsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDeal', internalType: 'uint8', type: 'uint8' },
              { name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' },
              { name: 'preSeq', internalType: 'uint16', type: 'uint16' },
              { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seller', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              { name: 'closingDate', internalType: 'uint48', type: 'uint48' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct DealsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'buyer', internalType: 'uint40', type: 'uint40' },
              { name: 'groupOfBuyer', internalType: 'uint40', type: 'uint40' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'flag', internalType: 'bool', type: 'bool' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seq', internalType: 'uint256', type: 'uint256' }],
    name: 'getHashLockOfDeal',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seq', internalType: 'uint256', type: 'uint256' }],
    name: 'getHeadOfDeal',
    outputs: [
      {
        name: '',
        internalType: 'struct DealsRepo.Head',
        type: 'tuple',
        components: [
          { name: 'typeOfDeal', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' },
          { name: 'preSeq', internalType: 'uint16', type: 'uint16' },
          { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
          { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
          { name: 'seller', internalType: 'uint40', type: 'uint40' },
          { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
          { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
          { name: 'closingDate', internalType: 'uint48', type: 'uint48' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSeqList',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTypeOfIA',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seq', internalType: 'uint256', type: 'uint256' }],
    name: 'isDeal',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seq', internalType: 'uint256', type: 'uint256' }],
    name: 'lockDealSubject',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'deal',
        internalType: 'struct DealsRepo.Deal',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct DealsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDeal', internalType: 'uint8', type: 'uint8' },
              { name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' },
              { name: 'preSeq', internalType: 'uint16', type: 'uint16' },
              { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seller', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              { name: 'closingDate', internalType: 'uint48', type: 'uint48' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct DealsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'buyer', internalType: 'uint40', type: 'uint40' },
              { name: 'groupOfBuyer', internalType: 'uint40', type: 'uint40' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'flag', internalType: 'bool', type: 'bool' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'regDeal',
    outputs: [{ name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seq', internalType: 'uint256', type: 'uint256' }],
    name: 'releaseDealSubject',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seq', internalType: 'uint256', type: 'uint256' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
    ],
    name: 'revokeDeal',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 't', internalType: 'uint256', type: 'uint256' }],
    name: 'setTypeOfIA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seq', internalType: 'uint256', type: 'uint256' }],
    name: 'takeGift',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' }],
    name: 'terminateDeal',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// InvestmentAgreement
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const investmentAgreementABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfDeal',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'AddDeal',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'CirculateDoc' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'seq', internalType: 'uint256', type: 'uint256', indexed: true },
      {
        name: 'hashLock',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'closingDate',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ClearDealCP',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'seq', internalType: 'uint256', type: 'uint256', indexed: true },
      {
        name: 'hashKey',
        internalType: 'string',
        type: 'string',
        indexed: true,
      },
    ],
    name: 'CloseDeal',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RemoveDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'seq', internalType: 'uint256', type: 'uint256', indexed: true },
      {
        name: 'hashKey',
        internalType: 'string',
        type: 'string',
        indexed: true,
      },
    ],
    name: 'RevokeDeal',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetGeneralCounsel',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'seq', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'TerminateDeal',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'beBuyer', internalType: 'bool', type: 'bool' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addBlank',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sn', internalType: 'bytes32', type: 'bytes32' },
      { name: 'buyer', internalType: 'uint256', type: 'uint256' },
      { name: 'groupOfBuyer', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addDeal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'circulateDoc',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'circulated',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seq', internalType: 'uint256', type: 'uint256' },
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
      { name: 'closingDate', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'clearDealCP',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seq', internalType: 'uint256', type: 'uint256' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
    ],
    name: 'closeDeal',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'counterOfClosedDeal',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'counterOfDeal',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seq', internalType: 'uint256', type: 'uint256' }],
    name: 'delDeal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seq', internalType: 'uint256', type: 'uint256' }],
    name: 'directCloseDeal',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'established',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'finalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seq', internalType: 'uint256', type: 'uint256' }],
    name: 'getBodyOfDeal',
    outputs: [
      {
        name: '',
        internalType: 'struct DealsRepo.Body',
        type: 'tuple',
        components: [
          { name: 'buyer', internalType: 'uint40', type: 'uint40' },
          { name: 'groupOfBuyer', internalType: 'uint40', type: 'uint40' },
          { name: 'paid', internalType: 'uint64', type: 'uint64' },
          { name: 'par', internalType: 'uint64', type: 'uint64' },
          { name: 'state', internalType: 'uint8', type: 'uint8' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'argu', internalType: 'uint16', type: 'uint16' },
          { name: 'flag', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBookeeper',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'initPage', internalType: 'bool', type: 'bool' }],
    name: 'getBuyers',
    outputs: [{ name: 'buyers', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCirculateDate',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getClosingDays',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getClosingDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' }],
    name: 'getDeal',
    outputs: [
      {
        name: '',
        internalType: 'struct DealsRepo.Deal',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct DealsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDeal', internalType: 'uint8', type: 'uint8' },
              { name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' },
              { name: 'preSeq', internalType: 'uint16', type: 'uint16' },
              { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seller', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              { name: 'closingDate', internalType: 'uint48', type: 'uint48' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct DealsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'buyer', internalType: 'uint40', type: 'uint40' },
              { name: 'groupOfBuyer', internalType: 'uint40', type: 'uint40' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'flag', internalType: 'bool', type: 'bool' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getGeneralCounsel',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seq', internalType: 'uint256', type: 'uint256' }],
    name: 'getHashLockOfDeal',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seq', internalType: 'uint256', type: 'uint256' }],
    name: 'getHeadOfDeal',
    outputs: [
      {
        name: '',
        internalType: 'struct DealsRepo.Head',
        type: 'tuple',
        components: [
          { name: 'typeOfDeal', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' },
          { name: 'preSeq', internalType: 'uint16', type: 'uint16' },
          { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
          { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
          { name: 'seller', internalType: 'uint40', type: 'uint40' },
          { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
          { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
          { name: 'closingDate', internalType: 'uint48', type: 'uint48' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'initPage', internalType: 'bool', type: 'bool' }],
    name: 'getParasOfPage',
    outputs: [
      {
        name: '',
        internalType: 'struct SigsRepo.Signature',
        type: 'tuple',
        components: [
          { name: 'signer', internalType: 'uint40', type: 'uint40' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'blocknumber', internalType: 'uint64', type: 'uint64' },
          { name: 'flag', internalType: 'bool', type: 'bool' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'arg', internalType: 'uint16', type: 'uint16' },
          { name: 'seq', internalType: 'uint16', type: 'uint16' },
          { name: 'attr', internalType: 'uint16', type: 'uint16' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getParties',
    outputs: [
      { name: 'parties', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'initPage', internalType: 'bool', type: 'bool' }],
    name: 'getSellers',
    outputs: [
      { name: 'sellers', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSeqList',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSigDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getSigOfParty',
    outputs: [
      { name: 'seqOfDeals', internalType: 'uint256[]', type: 'uint256[]' },
      {
        name: 'sig',
        internalType: 'struct SigsRepo.Signature',
        type: 'tuple',
        components: [
          { name: 'signer', internalType: 'uint40', type: 'uint40' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'blocknumber', internalType: 'uint64', type: 'uint64' },
          { name: 'flag', internalType: 'bool', type: 'bool' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'arg', internalType: 'uint16', type: 'uint16' },
          { name: 'seq', internalType: 'uint16', type: 'uint16' },
          { name: 'attr', internalType: 'uint16', type: 'uint16' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSigningDays',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'initPage', internalType: 'bool', type: 'bool' }],
    name: 'getSigsOfPage',
    outputs: [
      {
        name: 'sigsOfBuyer',
        internalType: 'struct SigsRepo.Signature[]',
        type: 'tuple[]',
        components: [
          { name: 'signer', internalType: 'uint40', type: 'uint40' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'blocknumber', internalType: 'uint64', type: 'uint64' },
          { name: 'flag', internalType: 'bool', type: 'bool' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'arg', internalType: 'uint16', type: 'uint16' },
          { name: 'seq', internalType: 'uint16', type: 'uint16' },
          { name: 'attr', internalType: 'uint16', type: 'uint16' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
      {
        name: 'sigsOfSeller',
        internalType: 'struct SigsRepo.Signature[]',
        type: 'tuple[]',
        components: [
          { name: 'signer', internalType: 'uint40', type: 'uint40' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'blocknumber', internalType: 'uint64', type: 'uint64' },
          { name: 'flag', internalType: 'bool', type: 'bool' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'arg', internalType: 'uint16', type: 'uint16' },
          { name: 'seq', internalType: 'uint16', type: 'uint16' },
          { name: 'attr', internalType: 'uint16', type: 'uint16' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTypeOfIA',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'uint256', type: 'uint256' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isBuyer',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' }],
    name: 'isDeal',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'isInitSigner',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'isParty',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isSeller',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'isSigner',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seq', internalType: 'uint256', type: 'uint256' }],
    name: 'lockDealSubject',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'deal',
        internalType: 'struct DealsRepo.Deal',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct DealsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDeal', internalType: 'uint8', type: 'uint8' },
              { name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' },
              { name: 'preSeq', internalType: 'uint16', type: 'uint16' },
              { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seller', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              { name: 'closingDate', internalType: 'uint48', type: 'uint48' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct DealsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'buyer', internalType: 'uint40', type: 'uint40' },
              { name: 'groupOfBuyer', internalType: 'uint40', type: 'uint40' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'flag', internalType: 'bool', type: 'bool' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'regDeal',
    outputs: [{ name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'signer', internalType: 'uint256', type: 'uint256' },
      { name: 'sigDate', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'regSig',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seq', internalType: 'uint256', type: 'uint256' }],
    name: 'releaseDealSubject',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeBlank',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'removeDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seq', internalType: 'uint256', type: 'uint256' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
    ],
    name: 'revokeDeal',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'keeper', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setGeneralCounsel',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'signingDays', internalType: 'uint256', type: 'uint256' },
      { name: 'closingDays', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setTiming',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 't', internalType: 'uint256', type: 'uint256' }],
    name: 'setTypeOfIA',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'signDoc',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seq', internalType: 'uint256', type: 'uint256' }],
    name: 'takeGift',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' }],
    name: 'terminateDeal',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BookOfDirectors
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const bookOfDirectorsABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'snOfPos',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'AddPosition',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfMotion',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'caller',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'attitude',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'sigHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
    ],
    name: 'CastVoteInBoardMeeting',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfMotion',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'caller',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'attitude',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'sigHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
    ],
    name: 'CastVoteInGeneralMeeting',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'snOfMotion',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'contents',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'CreateMotion',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfMotion',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'delegate',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'principal',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'EntrustDelegate',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfMotion',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'caller',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ExecResolution',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfMotion',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'proposer',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ProposeMotionToBoard',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfMotion',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'proposer',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ProposeMotionToGeneralMeeting',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfPos',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'caller',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'QuitPosition',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RemoveDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfPos',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'RemoveOfficer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfPos',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'RemovePosition',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetGeneralCounsel',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfPos',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'caller',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'TakePosition',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfMotion',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'result', internalType: 'uint8', type: 'uint8', indexed: true },
    ],
    name: 'VoteCounting',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'attitude', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'castVoteInBoardMeeting',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'attitude', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'castVoteInGeneralMeeting',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'params', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'desHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'executor', internalType: 'uint256', type: 'uint256' },
      { name: 'proposer', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createAction',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'doc', internalType: 'address', type: 'address' },
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'executor', internalType: 'uint256', type: 'uint256' },
      { name: 'proposer', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createMotionToApproveDoc',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'nominator', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createMotionToRemoveOfficer',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'snOfPos', internalType: 'bytes32', type: 'bytes32' }],
    name: 'createPosition',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'delegate', internalType: 'uint256', type: 'uint256' },
      { name: 'principal', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'entrustDelegate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'params', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'desHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execAction',
    outputs: [{ name: 'contents', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'contents', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execResolution',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'finalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getBallot',
    outputs: [
      {
        name: '',
        internalType: 'struct BallotsBox.Ballot',
        type: 'tuple',
        components: [
          { name: 'acct', internalType: 'uint40', type: 'uint40' },
          { name: 'attitude', internalType: 'uint8', type: 'uint8' },
          { name: 'head', internalType: 'uint32', type: 'uint32' },
          { name: 'weight', internalType: 'uint64', type: 'uint64' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'blocknumber', internalType: 'uint64', type: 'uint64' },
          { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'getBoardSeatsOccupied',
    outputs: [{ name: 'num', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'getBoardSeatsQuota',
    outputs: [{ name: 'quota', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBookeeper',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'atti', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getCaseOfAttitude',
    outputs: [
      {
        name: '',
        internalType: 'struct BallotsBox.Case',
        type: 'tuple',
        components: [
          { name: 'sumOfHead', internalType: 'uint32', type: 'uint32' },
          { name: 'sumOfWeight', internalType: 'uint64', type: 'uint64' },
          { name: 'voters', internalType: 'uint256[]', type: 'uint256[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getDelegateOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDirectorsFullPosInfo',
    outputs: [
      {
        name: 'output',
        internalType: 'struct OfficersRepo.Position[]',
        type: 'tuple[]',
        components: [
          { name: 'title', internalType: 'uint16', type: 'uint16' },
          { name: 'seqOfPos', internalType: 'uint16', type: 'uint16' },
          { name: 'acct', internalType: 'uint40', type: 'uint40' },
          { name: 'nominator', internalType: 'uint40', type: 'uint40' },
          { name: 'startDate', internalType: 'uint48', type: 'uint48' },
          { name: 'endDate', internalType: 'uint48', type: 'uint48' },
          { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
          { name: 'titleOfNominator', internalType: 'uint16', type: 'uint16' },
          { name: 'argu', internalType: 'uint16', type: 'uint16' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDirectorsList',
    outputs: [{ name: 'list', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDirectorsPosList',
    outputs: [{ name: 'ls', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'getFullPosInfoInHand',
    outputs: [
      {
        name: 'output',
        internalType: 'struct OfficersRepo.Position[]',
        type: 'tuple[]',
        components: [
          { name: 'title', internalType: 'uint16', type: 'uint16' },
          { name: 'seqOfPos', internalType: 'uint16', type: 'uint16' },
          { name: 'acct', internalType: 'uint40', type: 'uint40' },
          { name: 'nominator', internalType: 'uint40', type: 'uint40' },
          { name: 'startDate', internalType: 'uint48', type: 'uint48' },
          { name: 'endDate', internalType: 'uint48', type: 'uint48' },
          { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
          { name: 'titleOfNominator', internalType: 'uint16', type: 'uint16' },
          { name: 'argu', internalType: 'uint16', type: 'uint16' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getGeneralCounsel',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
      {
        name: '_bod',
        internalType: 'contract IBookOfDirectors',
        type: 'address',
      },
    ],
    name: 'getLeavesHeadcountOfDirectors',
    outputs: [{ name: 'head', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
      { name: 'baseDate', internalType: 'uint256', type: 'uint256' },
      {
        name: '_rom',
        internalType: 'contract IRegisterOfMembers',
        type: 'address',
      },
    ],
    name: 'getLeavesWeightAtDate',
    outputs: [
      {
        name: 'info',
        internalType: 'struct DelegateMap.LeavesInfo',
        type: 'tuple',
        components: [
          { name: 'weight', internalType: 'uint64', type: 'uint64' },
          { name: 'emptyHead', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getManagersFullPosInfo',
    outputs: [
      {
        name: 'output',
        internalType: 'struct OfficersRepo.Position[]',
        type: 'tuple[]',
        components: [
          { name: 'title', internalType: 'uint16', type: 'uint16' },
          { name: 'seqOfPos', internalType: 'uint16', type: 'uint16' },
          { name: 'acct', internalType: 'uint40', type: 'uint40' },
          { name: 'nominator', internalType: 'uint40', type: 'uint40' },
          { name: 'startDate', internalType: 'uint48', type: 'uint48' },
          { name: 'endDate', internalType: 'uint48', type: 'uint48' },
          { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
          { name: 'titleOfNominator', internalType: 'uint16', type: 'uint16' },
          { name: 'argu', internalType: 'uint16', type: 'uint16' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getManagersList',
    outputs: [{ name: 'ls', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getManagersPosList',
    outputs: [{ name: 'list', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'getMotion',
    outputs: [
      {
        name: 'motion',
        internalType: 'struct MotionsRepo.Motion',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct MotionsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfMotion', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfMotion', internalType: 'uint64', type: 'uint64' },
              { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
              { name: 'creator', internalType: 'uint40', type: 'uint40' },
              { name: 'executor', internalType: 'uint40', type: 'uint40' },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'data', internalType: 'uint32', type: 'uint32' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct MotionsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'proposer', internalType: 'uint40', type: 'uint40' },
              { name: 'proposeDate', internalType: 'uint48', type: 'uint48' },
              { name: 'shareRegDate', internalType: 'uint48', type: 'uint48' },
              { name: 'voteStartDate', internalType: 'uint48', type: 'uint48' },
              { name: 'voteEndDate', internalType: 'uint48', type: 'uint48' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'votingRule',
            internalType: 'struct RulesParser.VotingRule',
            type: 'tuple',
            components: [
              { name: 'seqOfRule', internalType: 'uint16', type: 'uint16' },
              { name: 'qtyOfSubRule', internalType: 'uint8', type: 'uint8' },
              { name: 'seqOfSubRule', internalType: 'uint8', type: 'uint8' },
              { name: 'authority', internalType: 'uint16', type: 'uint16' },
              { name: 'headRatio', internalType: 'uint16', type: 'uint16' },
              { name: 'amountRatio', internalType: 'uint16', type: 'uint16' },
              { name: 'onlyAttendance', internalType: 'bool', type: 'bool' },
              { name: 'impliedConsent', internalType: 'bool', type: 'bool' },
              { name: 'partyAsConsent', internalType: 'bool', type: 'bool' },
              { name: 'againstShallBuy', internalType: 'bool', type: 'bool' },
              { name: 'shaExecDays', internalType: 'uint8', type: 'uint8' },
              { name: 'shaConfirmDays', internalType: 'uint8', type: 'uint8' },
              { name: 'reconsiderDays', internalType: 'uint8', type: 'uint8' },
              { name: 'votePrepareDays', internalType: 'uint8', type: 'uint8' },
              { name: 'votingDays', internalType: 'uint8', type: 'uint8' },
              {
                name: 'execDaysForPutOpt',
                internalType: 'uint8',
                type: 'uint8',
              },
              { name: 'vetoers', internalType: 'uint40[2]', type: 'uint40[2]' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          { name: 'contents', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getNumOfDirectors',
    outputs: [{ name: 'num', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getNumOfManagers',
    outputs: [{ name: 'num', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'getPosInHand',
    outputs: [{ name: 'ls', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfPos', internalType: 'uint256', type: 'uint256' }],
    name: 'getPosition',
    outputs: [
      {
        name: 'pos',
        internalType: 'struct OfficersRepo.Position',
        type: 'tuple',
        components: [
          { name: 'title', internalType: 'uint16', type: 'uint16' },
          { name: 'seqOfPos', internalType: 'uint16', type: 'uint16' },
          { name: 'acct', internalType: 'uint40', type: 'uint40' },
          { name: 'nominator', internalType: 'uint40', type: 'uint40' },
          { name: 'startDate', internalType: 'uint48', type: 'uint48' },
          { name: 'endDate', internalType: 'uint48', type: 'uint48' },
          { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
          { name: 'titleOfNominator', internalType: 'uint16', type: 'uint16' },
          { name: 'argu', internalType: 'uint16', type: 'uint16' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSeqList',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getVoterOfDelegateMap',
    outputs: [
      {
        name: '',
        internalType: 'struct DelegateMap.Voter',
        type: 'tuple',
        components: [
          { name: 'delegate', internalType: 'uint40', type: 'uint40' },
          { name: 'weight', internalType: 'uint64', type: 'uint64' },
          { name: 'repWeight', internalType: 'uint64', type: 'uint64' },
          { name: 'repHead', internalType: 'uint32', type: 'uint32' },
          { name: 'principals', internalType: 'uint40[]', type: 'uint40[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasNominationRight',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasPosition',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'uint256', type: 'uint256' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'isDirector',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'isManager',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfPos', internalType: 'uint256', type: 'uint256' }],
    name: 'isOccupied',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'isPassed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'isProposed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isVoted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
      { name: 'atti', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isVotedFor',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'candidate', internalType: 'uint256', type: 'uint256' },
      { name: 'nominator', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'nominateOfficer',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfPos', internalType: 'uint256', type: 'uint256' }],
    name: 'posExist',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'proposeMotionToBoard',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'proposer', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'proposeMotionToGeneralMeeting',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quitPosition',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'removeDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfPos', internalType: 'uint256', type: 'uint256' }],
    name: 'removeOfficer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfPos', internalType: 'uint256', type: 'uint256' }],
    name: 'removePosition',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'keeper', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setGeneralCounsel',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'takePosition',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'pos',
        internalType: 'struct OfficersRepo.Position',
        type: 'tuple',
        components: [
          { name: 'title', internalType: 'uint16', type: 'uint16' },
          { name: 'seqOfPos', internalType: 'uint16', type: 'uint16' },
          { name: 'acct', internalType: 'uint40', type: 'uint40' },
          { name: 'nominator', internalType: 'uint40', type: 'uint40' },
          { name: 'startDate', internalType: 'uint48', type: 'uint48' },
          { name: 'endDate', internalType: 'uint48', type: 'uint48' },
          { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
          { name: 'titleOfNominator', internalType: 'uint16', type: 'uint16' },
          { name: 'argu', internalType: 'uint16', type: 'uint16' },
        ],
      },
    ],
    name: 'updatePosition',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'flag0', internalType: 'bool', type: 'bool' },
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      {
        name: 'base',
        internalType: 'struct MotionsRepo.VoteCalBase',
        type: 'tuple',
        components: [
          { name: 'totalHead', internalType: 'uint32', type: 'uint32' },
          { name: 'totalWeight', internalType: 'uint64', type: 'uint64' },
          { name: 'supportHead', internalType: 'uint32', type: 'uint32' },
          { name: 'supportWeight', internalType: 'uint64', type: 'uint64' },
          { name: 'attendHeadRatio', internalType: 'uint16', type: 'uint16' },
          { name: 'attendWeightRatio', internalType: 'uint16', type: 'uint16' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'state', internalType: 'uint8', type: 'uint8' },
          { name: 'unaniConsent', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'voteCounting',
    outputs: [{ name: 'result', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'voteEnded',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'voteStarted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IBookOfDirectors
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iBookOfDirectorsABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'snOfPos',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'AddPosition',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfMotion',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'caller',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'attitude',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'sigHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
    ],
    name: 'CastVoteInBoardMeeting',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfMotion',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'caller',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'attitude',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'sigHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
    ],
    name: 'CastVoteInGeneralMeeting',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'snOfMotion',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'contents',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'CreateMotion',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfMotion',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'delegate',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'principal',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'EntrustDelegate',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfMotion',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'caller',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ExecResolution',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfMotion',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'proposer',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ProposeMotionToBoard',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfMotion',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'proposer',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ProposeMotionToGeneralMeeting',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfPos',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'caller',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'QuitPosition',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfPos',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'RemoveOfficer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfPos',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'RemovePosition',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfPos',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'caller',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'TakePosition',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfMotion',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'result', internalType: 'uint8', type: 'uint8', indexed: true },
    ],
    name: 'VoteCounting',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'attitude', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'castVoteInBoardMeeting',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'attitude', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'castVoteInGeneralMeeting',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'params', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'desHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'executor', internalType: 'uint256', type: 'uint256' },
      { name: 'proposer', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createAction',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'doc', internalType: 'address', type: 'address' },
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'executor', internalType: 'uint256', type: 'uint256' },
      { name: 'proposer', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createMotionToApproveDoc',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'nominator', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createMotionToRemoveOfficer',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'snOfPos', internalType: 'bytes32', type: 'bytes32' }],
    name: 'createPosition',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'delegate', internalType: 'uint256', type: 'uint256' },
      { name: 'principal', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'entrustDelegate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'params', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'desHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execAction',
    outputs: [{ name: 'contents', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'contents', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execResolution',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getBallot',
    outputs: [
      {
        name: '',
        internalType: 'struct BallotsBox.Ballot',
        type: 'tuple',
        components: [
          { name: 'acct', internalType: 'uint40', type: 'uint40' },
          { name: 'attitude', internalType: 'uint8', type: 'uint8' },
          { name: 'head', internalType: 'uint32', type: 'uint32' },
          { name: 'weight', internalType: 'uint64', type: 'uint64' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'blocknumber', internalType: 'uint64', type: 'uint64' },
          { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'getBoardSeatsOccupied',
    outputs: [{ name: 'num', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'getBoardSeatsQuota',
    outputs: [{ name: 'quota', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'atti', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getCaseOfAttitude',
    outputs: [
      {
        name: '',
        internalType: 'struct BallotsBox.Case',
        type: 'tuple',
        components: [
          { name: 'sumOfHead', internalType: 'uint32', type: 'uint32' },
          { name: 'sumOfWeight', internalType: 'uint64', type: 'uint64' },
          { name: 'voters', internalType: 'uint256[]', type: 'uint256[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getDelegateOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDirectorsFullPosInfo',
    outputs: [
      {
        name: 'output',
        internalType: 'struct OfficersRepo.Position[]',
        type: 'tuple[]',
        components: [
          { name: 'title', internalType: 'uint16', type: 'uint16' },
          { name: 'seqOfPos', internalType: 'uint16', type: 'uint16' },
          { name: 'acct', internalType: 'uint40', type: 'uint40' },
          { name: 'nominator', internalType: 'uint40', type: 'uint40' },
          { name: 'startDate', internalType: 'uint48', type: 'uint48' },
          { name: 'endDate', internalType: 'uint48', type: 'uint48' },
          { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
          { name: 'titleOfNominator', internalType: 'uint16', type: 'uint16' },
          { name: 'argu', internalType: 'uint16', type: 'uint16' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDirectorsList',
    outputs: [{ name: 'list', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDirectorsPosList',
    outputs: [{ name: 'ls', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'getFullPosInfoInHand',
    outputs: [
      {
        name: 'output',
        internalType: 'struct OfficersRepo.Position[]',
        type: 'tuple[]',
        components: [
          { name: 'title', internalType: 'uint16', type: 'uint16' },
          { name: 'seqOfPos', internalType: 'uint16', type: 'uint16' },
          { name: 'acct', internalType: 'uint40', type: 'uint40' },
          { name: 'nominator', internalType: 'uint40', type: 'uint40' },
          { name: 'startDate', internalType: 'uint48', type: 'uint48' },
          { name: 'endDate', internalType: 'uint48', type: 'uint48' },
          { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
          { name: 'titleOfNominator', internalType: 'uint16', type: 'uint16' },
          { name: 'argu', internalType: 'uint16', type: 'uint16' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
      {
        name: '_bod',
        internalType: 'contract IBookOfDirectors',
        type: 'address',
      },
    ],
    name: 'getLeavesHeadcountOfDirectors',
    outputs: [{ name: 'head', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
      { name: 'baseDate', internalType: 'uint256', type: 'uint256' },
      {
        name: '_rom',
        internalType: 'contract IRegisterOfMembers',
        type: 'address',
      },
    ],
    name: 'getLeavesWeightAtDate',
    outputs: [
      {
        name: 'info',
        internalType: 'struct DelegateMap.LeavesInfo',
        type: 'tuple',
        components: [
          { name: 'weight', internalType: 'uint64', type: 'uint64' },
          { name: 'emptyHead', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getManagersFullPosInfo',
    outputs: [
      {
        name: 'output',
        internalType: 'struct OfficersRepo.Position[]',
        type: 'tuple[]',
        components: [
          { name: 'title', internalType: 'uint16', type: 'uint16' },
          { name: 'seqOfPos', internalType: 'uint16', type: 'uint16' },
          { name: 'acct', internalType: 'uint40', type: 'uint40' },
          { name: 'nominator', internalType: 'uint40', type: 'uint40' },
          { name: 'startDate', internalType: 'uint48', type: 'uint48' },
          { name: 'endDate', internalType: 'uint48', type: 'uint48' },
          { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
          { name: 'titleOfNominator', internalType: 'uint16', type: 'uint16' },
          { name: 'argu', internalType: 'uint16', type: 'uint16' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getManagersList',
    outputs: [{ name: 'ls', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getManagersPosList',
    outputs: [{ name: 'list', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'getMotion',
    outputs: [
      {
        name: 'motion',
        internalType: 'struct MotionsRepo.Motion',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct MotionsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfMotion', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfMotion', internalType: 'uint64', type: 'uint64' },
              { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
              { name: 'creator', internalType: 'uint40', type: 'uint40' },
              { name: 'executor', internalType: 'uint40', type: 'uint40' },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'data', internalType: 'uint32', type: 'uint32' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct MotionsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'proposer', internalType: 'uint40', type: 'uint40' },
              { name: 'proposeDate', internalType: 'uint48', type: 'uint48' },
              { name: 'shareRegDate', internalType: 'uint48', type: 'uint48' },
              { name: 'voteStartDate', internalType: 'uint48', type: 'uint48' },
              { name: 'voteEndDate', internalType: 'uint48', type: 'uint48' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'votingRule',
            internalType: 'struct RulesParser.VotingRule',
            type: 'tuple',
            components: [
              { name: 'seqOfRule', internalType: 'uint16', type: 'uint16' },
              { name: 'qtyOfSubRule', internalType: 'uint8', type: 'uint8' },
              { name: 'seqOfSubRule', internalType: 'uint8', type: 'uint8' },
              { name: 'authority', internalType: 'uint16', type: 'uint16' },
              { name: 'headRatio', internalType: 'uint16', type: 'uint16' },
              { name: 'amountRatio', internalType: 'uint16', type: 'uint16' },
              { name: 'onlyAttendance', internalType: 'bool', type: 'bool' },
              { name: 'impliedConsent', internalType: 'bool', type: 'bool' },
              { name: 'partyAsConsent', internalType: 'bool', type: 'bool' },
              { name: 'againstShallBuy', internalType: 'bool', type: 'bool' },
              { name: 'shaExecDays', internalType: 'uint8', type: 'uint8' },
              { name: 'shaConfirmDays', internalType: 'uint8', type: 'uint8' },
              { name: 'reconsiderDays', internalType: 'uint8', type: 'uint8' },
              { name: 'votePrepareDays', internalType: 'uint8', type: 'uint8' },
              { name: 'votingDays', internalType: 'uint8', type: 'uint8' },
              {
                name: 'execDaysForPutOpt',
                internalType: 'uint8',
                type: 'uint8',
              },
              { name: 'vetoers', internalType: 'uint40[2]', type: 'uint40[2]' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          { name: 'contents', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getNumOfDirectors',
    outputs: [{ name: 'num', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getNumOfManagers',
    outputs: [{ name: 'num', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'getPosInHand',
    outputs: [{ name: 'ls', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfPos', internalType: 'uint256', type: 'uint256' }],
    name: 'getPosition',
    outputs: [
      {
        name: 'pos',
        internalType: 'struct OfficersRepo.Position',
        type: 'tuple',
        components: [
          { name: 'title', internalType: 'uint16', type: 'uint16' },
          { name: 'seqOfPos', internalType: 'uint16', type: 'uint16' },
          { name: 'acct', internalType: 'uint40', type: 'uint40' },
          { name: 'nominator', internalType: 'uint40', type: 'uint40' },
          { name: 'startDate', internalType: 'uint48', type: 'uint48' },
          { name: 'endDate', internalType: 'uint48', type: 'uint48' },
          { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
          { name: 'titleOfNominator', internalType: 'uint16', type: 'uint16' },
          { name: 'argu', internalType: 'uint16', type: 'uint16' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSeqList',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getVoterOfDelegateMap',
    outputs: [
      {
        name: '',
        internalType: 'struct DelegateMap.Voter',
        type: 'tuple',
        components: [
          { name: 'delegate', internalType: 'uint40', type: 'uint40' },
          { name: 'weight', internalType: 'uint64', type: 'uint64' },
          { name: 'repWeight', internalType: 'uint64', type: 'uint64' },
          { name: 'repHead', internalType: 'uint32', type: 'uint32' },
          { name: 'principals', internalType: 'uint40[]', type: 'uint40[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasNominationRight',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasPosition',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'isDirector',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'isManager',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfPos', internalType: 'uint256', type: 'uint256' }],
    name: 'isOccupied',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'isPassed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'isProposed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isVoted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
      { name: 'atti', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isVotedFor',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'canidate', internalType: 'uint256', type: 'uint256' },
      { name: 'nominator', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'nominateOfficer',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfPos', internalType: 'uint256', type: 'uint256' }],
    name: 'posExist',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'proposeMotionToBoard',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'proposer', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'proposeMotionToGeneralMeeting',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quitPosition',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfPos', internalType: 'uint256', type: 'uint256' }],
    name: 'removeOfficer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfPos', internalType: 'uint256', type: 'uint256' }],
    name: 'removePosition',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'takePosition',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'pos',
        internalType: 'struct OfficersRepo.Position',
        type: 'tuple',
        components: [
          { name: 'title', internalType: 'uint16', type: 'uint16' },
          { name: 'seqOfPos', internalType: 'uint16', type: 'uint16' },
          { name: 'acct', internalType: 'uint40', type: 'uint40' },
          { name: 'nominator', internalType: 'uint40', type: 'uint40' },
          { name: 'startDate', internalType: 'uint48', type: 'uint48' },
          { name: 'endDate', internalType: 'uint48', type: 'uint48' },
          { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
          { name: 'titleOfNominator', internalType: 'uint16', type: 'uint16' },
          { name: 'argu', internalType: 'uint16', type: 'uint16' },
        ],
      },
    ],
    name: 'updatePosition',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'flag0', internalType: 'bool', type: 'bool' },
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      {
        name: 'base',
        internalType: 'struct MotionsRepo.VoteCalBase',
        type: 'tuple',
        components: [
          { name: 'totalHead', internalType: 'uint32', type: 'uint32' },
          { name: 'totalWeight', internalType: 'uint64', type: 'uint64' },
          { name: 'supportHead', internalType: 'uint32', type: 'uint32' },
          { name: 'supportWeight', internalType: 'uint64', type: 'uint64' },
          { name: 'attendHeadRatio', internalType: 'uint16', type: 'uint16' },
          { name: 'attendWeightRatio', internalType: 'uint16', type: 'uint16' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'state', internalType: 'uint8', type: 'uint8' },
          { name: 'unaniConsent', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'voteCounting',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'voteEnded',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'voteStarted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BookOfGM
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const bookOfGmABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfMotion',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'caller',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'attitude',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'sigHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
    ],
    name: 'CastVoteInBoardMeeting',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfMotion',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'caller',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'attitude',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'sigHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
    ],
    name: 'CastVoteInGeneralMeeting',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'snOfMotion',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'contents',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'CreateMotion',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfMotion',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'delegate',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'principal',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'EntrustDelegate',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfMotion',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'caller',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ExecResolution',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfMotion',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'proposer',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ProposeMotionToBoard',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfMotion',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'proposer',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ProposeMotionToGeneralMeeting',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RemoveDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetGeneralCounsel',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfMotion',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'result', internalType: 'uint8', type: 'uint8', indexed: true },
    ],
    name: 'VoteCounting',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'attitude', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'castVoteInBoardMeeting',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'attitude', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'castVoteInGeneralMeeting',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'params', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'desHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'executor', internalType: 'uint256', type: 'uint256' },
      { name: 'proposer', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createAction',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'doc', internalType: 'address', type: 'address' },
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'executor', internalType: 'uint256', type: 'uint256' },
      { name: 'proposer', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createMotionToApproveDoc',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'nominator', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createMotionToRemoveOfficer',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'delegate', internalType: 'uint256', type: 'uint256' },
      { name: 'principal', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'entrustDelegate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'params', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'desHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execAction',
    outputs: [{ name: 'contents', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'contents', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execResolution',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'finalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getBallot',
    outputs: [
      {
        name: '',
        internalType: 'struct BallotsBox.Ballot',
        type: 'tuple',
        components: [
          { name: 'acct', internalType: 'uint40', type: 'uint40' },
          { name: 'attitude', internalType: 'uint8', type: 'uint8' },
          { name: 'head', internalType: 'uint32', type: 'uint32' },
          { name: 'weight', internalType: 'uint64', type: 'uint64' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'blocknumber', internalType: 'uint64', type: 'uint64' },
          { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBookeeper',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'atti', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getCaseOfAttitude',
    outputs: [
      {
        name: '',
        internalType: 'struct BallotsBox.Case',
        type: 'tuple',
        components: [
          { name: 'sumOfHead', internalType: 'uint32', type: 'uint32' },
          { name: 'sumOfWeight', internalType: 'uint64', type: 'uint64' },
          { name: 'voters', internalType: 'uint256[]', type: 'uint256[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getDelegateOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getGeneralCounsel',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
      {
        name: '_bod',
        internalType: 'contract IBookOfDirectors',
        type: 'address',
      },
    ],
    name: 'getLeavesHeadcountOfDirectors',
    outputs: [{ name: 'head', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
      { name: 'baseDate', internalType: 'uint256', type: 'uint256' },
      {
        name: '_rom',
        internalType: 'contract IRegisterOfMembers',
        type: 'address',
      },
    ],
    name: 'getLeavesWeightAtDate',
    outputs: [
      {
        name: 'info',
        internalType: 'struct DelegateMap.LeavesInfo',
        type: 'tuple',
        components: [
          { name: 'weight', internalType: 'uint64', type: 'uint64' },
          { name: 'emptyHead', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'getMotion',
    outputs: [
      {
        name: 'motion',
        internalType: 'struct MotionsRepo.Motion',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct MotionsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfMotion', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfMotion', internalType: 'uint64', type: 'uint64' },
              { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
              { name: 'creator', internalType: 'uint40', type: 'uint40' },
              { name: 'executor', internalType: 'uint40', type: 'uint40' },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'data', internalType: 'uint32', type: 'uint32' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct MotionsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'proposer', internalType: 'uint40', type: 'uint40' },
              { name: 'proposeDate', internalType: 'uint48', type: 'uint48' },
              { name: 'shareRegDate', internalType: 'uint48', type: 'uint48' },
              { name: 'voteStartDate', internalType: 'uint48', type: 'uint48' },
              { name: 'voteEndDate', internalType: 'uint48', type: 'uint48' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'votingRule',
            internalType: 'struct RulesParser.VotingRule',
            type: 'tuple',
            components: [
              { name: 'seqOfRule', internalType: 'uint16', type: 'uint16' },
              { name: 'qtyOfSubRule', internalType: 'uint8', type: 'uint8' },
              { name: 'seqOfSubRule', internalType: 'uint8', type: 'uint8' },
              { name: 'authority', internalType: 'uint16', type: 'uint16' },
              { name: 'headRatio', internalType: 'uint16', type: 'uint16' },
              { name: 'amountRatio', internalType: 'uint16', type: 'uint16' },
              { name: 'onlyAttendance', internalType: 'bool', type: 'bool' },
              { name: 'impliedConsent', internalType: 'bool', type: 'bool' },
              { name: 'partyAsConsent', internalType: 'bool', type: 'bool' },
              { name: 'againstShallBuy', internalType: 'bool', type: 'bool' },
              { name: 'shaExecDays', internalType: 'uint8', type: 'uint8' },
              { name: 'shaConfirmDays', internalType: 'uint8', type: 'uint8' },
              { name: 'reconsiderDays', internalType: 'uint8', type: 'uint8' },
              { name: 'votePrepareDays', internalType: 'uint8', type: 'uint8' },
              { name: 'votingDays', internalType: 'uint8', type: 'uint8' },
              {
                name: 'execDaysForPutOpt',
                internalType: 'uint8',
                type: 'uint8',
              },
              { name: 'vetoers', internalType: 'uint40[2]', type: 'uint40[2]' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          { name: 'contents', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSeqList',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getVoterOfDelegateMap',
    outputs: [
      {
        name: '',
        internalType: 'struct DelegateMap.Voter',
        type: 'tuple',
        components: [
          { name: 'delegate', internalType: 'uint40', type: 'uint40' },
          { name: 'weight', internalType: 'uint64', type: 'uint64' },
          { name: 'repWeight', internalType: 'uint64', type: 'uint64' },
          { name: 'repHead', internalType: 'uint32', type: 'uint32' },
          { name: 'principals', internalType: 'uint40[]', type: 'uint40[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'uint256', type: 'uint256' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'isPassed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'isProposed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isVoted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
      { name: 'atti', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isVotedFor',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'candidate', internalType: 'uint256', type: 'uint256' },
      { name: 'nominator', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'nominateOfficer',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'proposeMotionToBoard',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'proposer', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'proposeMotionToGeneralMeeting',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'removeDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'keeper', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setGeneralCounsel',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'flag0', internalType: 'bool', type: 'bool' },
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      {
        name: 'base',
        internalType: 'struct MotionsRepo.VoteCalBase',
        type: 'tuple',
        components: [
          { name: 'totalHead', internalType: 'uint32', type: 'uint32' },
          { name: 'totalWeight', internalType: 'uint64', type: 'uint64' },
          { name: 'supportHead', internalType: 'uint32', type: 'uint32' },
          { name: 'supportWeight', internalType: 'uint64', type: 'uint64' },
          { name: 'attendHeadRatio', internalType: 'uint16', type: 'uint16' },
          { name: 'attendWeightRatio', internalType: 'uint16', type: 'uint16' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'state', internalType: 'uint8', type: 'uint8' },
          { name: 'unaniConsent', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'voteCounting',
    outputs: [{ name: 'result', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'voteEnded',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'voteStarted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IBookOfGM
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iBookOfGmABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfMotion',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'caller',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'attitude',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'sigHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
    ],
    name: 'CastVoteInBoardMeeting',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfMotion',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'caller',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'attitude',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'sigHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
    ],
    name: 'CastVoteInGeneralMeeting',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'snOfMotion',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'contents',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'CreateMotion',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfMotion',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'delegate',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'principal',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'EntrustDelegate',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfMotion',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'caller',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ExecResolution',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfMotion',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'proposer',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ProposeMotionToBoard',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfMotion',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'proposer',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ProposeMotionToGeneralMeeting',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfMotion',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'result', internalType: 'uint8', type: 'uint8', indexed: true },
    ],
    name: 'VoteCounting',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'attitude', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'castVoteInBoardMeeting',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'attitude', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'castVoteInGeneralMeeting',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'params', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'desHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'executor', internalType: 'uint256', type: 'uint256' },
      { name: 'proposer', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createAction',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'doc', internalType: 'address', type: 'address' },
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'executor', internalType: 'uint256', type: 'uint256' },
      { name: 'proposer', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createMotionToApproveDoc',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'nominator', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createMotionToRemoveOfficer',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'delegate', internalType: 'uint256', type: 'uint256' },
      { name: 'principal', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'entrustDelegate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'params', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'desHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execAction',
    outputs: [{ name: 'contents', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'contents', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execResolution',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getBallot',
    outputs: [
      {
        name: '',
        internalType: 'struct BallotsBox.Ballot',
        type: 'tuple',
        components: [
          { name: 'acct', internalType: 'uint40', type: 'uint40' },
          { name: 'attitude', internalType: 'uint8', type: 'uint8' },
          { name: 'head', internalType: 'uint32', type: 'uint32' },
          { name: 'weight', internalType: 'uint64', type: 'uint64' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'blocknumber', internalType: 'uint64', type: 'uint64' },
          { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'atti', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getCaseOfAttitude',
    outputs: [
      {
        name: '',
        internalType: 'struct BallotsBox.Case',
        type: 'tuple',
        components: [
          { name: 'sumOfHead', internalType: 'uint32', type: 'uint32' },
          { name: 'sumOfWeight', internalType: 'uint64', type: 'uint64' },
          { name: 'voters', internalType: 'uint256[]', type: 'uint256[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getDelegateOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
      {
        name: '_bod',
        internalType: 'contract IBookOfDirectors',
        type: 'address',
      },
    ],
    name: 'getLeavesHeadcountOfDirectors',
    outputs: [{ name: 'head', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
      { name: 'baseDate', internalType: 'uint256', type: 'uint256' },
      {
        name: '_rom',
        internalType: 'contract IRegisterOfMembers',
        type: 'address',
      },
    ],
    name: 'getLeavesWeightAtDate',
    outputs: [
      {
        name: 'info',
        internalType: 'struct DelegateMap.LeavesInfo',
        type: 'tuple',
        components: [
          { name: 'weight', internalType: 'uint64', type: 'uint64' },
          { name: 'emptyHead', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'getMotion',
    outputs: [
      {
        name: 'motion',
        internalType: 'struct MotionsRepo.Motion',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct MotionsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfMotion', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfMotion', internalType: 'uint64', type: 'uint64' },
              { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
              { name: 'creator', internalType: 'uint40', type: 'uint40' },
              { name: 'executor', internalType: 'uint40', type: 'uint40' },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'data', internalType: 'uint32', type: 'uint32' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct MotionsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'proposer', internalType: 'uint40', type: 'uint40' },
              { name: 'proposeDate', internalType: 'uint48', type: 'uint48' },
              { name: 'shareRegDate', internalType: 'uint48', type: 'uint48' },
              { name: 'voteStartDate', internalType: 'uint48', type: 'uint48' },
              { name: 'voteEndDate', internalType: 'uint48', type: 'uint48' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'votingRule',
            internalType: 'struct RulesParser.VotingRule',
            type: 'tuple',
            components: [
              { name: 'seqOfRule', internalType: 'uint16', type: 'uint16' },
              { name: 'qtyOfSubRule', internalType: 'uint8', type: 'uint8' },
              { name: 'seqOfSubRule', internalType: 'uint8', type: 'uint8' },
              { name: 'authority', internalType: 'uint16', type: 'uint16' },
              { name: 'headRatio', internalType: 'uint16', type: 'uint16' },
              { name: 'amountRatio', internalType: 'uint16', type: 'uint16' },
              { name: 'onlyAttendance', internalType: 'bool', type: 'bool' },
              { name: 'impliedConsent', internalType: 'bool', type: 'bool' },
              { name: 'partyAsConsent', internalType: 'bool', type: 'bool' },
              { name: 'againstShallBuy', internalType: 'bool', type: 'bool' },
              { name: 'shaExecDays', internalType: 'uint8', type: 'uint8' },
              { name: 'shaConfirmDays', internalType: 'uint8', type: 'uint8' },
              { name: 'reconsiderDays', internalType: 'uint8', type: 'uint8' },
              { name: 'votePrepareDays', internalType: 'uint8', type: 'uint8' },
              { name: 'votingDays', internalType: 'uint8', type: 'uint8' },
              {
                name: 'execDaysForPutOpt',
                internalType: 'uint8',
                type: 'uint8',
              },
              { name: 'vetoers', internalType: 'uint40[2]', type: 'uint40[2]' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          { name: 'contents', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSeqList',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getVoterOfDelegateMap',
    outputs: [
      {
        name: '',
        internalType: 'struct DelegateMap.Voter',
        type: 'tuple',
        components: [
          { name: 'delegate', internalType: 'uint40', type: 'uint40' },
          { name: 'weight', internalType: 'uint64', type: 'uint64' },
          { name: 'repWeight', internalType: 'uint64', type: 'uint64' },
          { name: 'repHead', internalType: 'uint32', type: 'uint32' },
          { name: 'principals', internalType: 'uint40[]', type: 'uint40[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'isPassed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'isProposed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isVoted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
      { name: 'atti', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isVotedFor',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'canidate', internalType: 'uint256', type: 'uint256' },
      { name: 'nominator', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'nominateOfficer',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'proposeMotionToBoard',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'proposer', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'proposeMotionToGeneralMeeting',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'flag0', internalType: 'bool', type: 'bool' },
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      {
        name: 'base',
        internalType: 'struct MotionsRepo.VoteCalBase',
        type: 'tuple',
        components: [
          { name: 'totalHead', internalType: 'uint32', type: 'uint32' },
          { name: 'totalWeight', internalType: 'uint64', type: 'uint64' },
          { name: 'supportHead', internalType: 'uint32', type: 'uint32' },
          { name: 'supportWeight', internalType: 'uint64', type: 'uint64' },
          { name: 'attendHeadRatio', internalType: 'uint16', type: 'uint16' },
          { name: 'attendWeightRatio', internalType: 'uint16', type: 'uint16' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'state', internalType: 'uint8', type: 'uint8' },
          { name: 'unaniConsent', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'voteCounting',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'voteEnded',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'voteStarted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BookOfSHA
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const bookOfShaABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'pointer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'ChangePointer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RemoveDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetGeneralCounsel',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'body', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'state',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'UpdateStateOfFile',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'changePointer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'body', internalType: 'address', type: 'address' },
      { name: 'signingDays', internalType: 'uint16', type: 'uint16' },
      { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
      {
        name: 'vr',
        internalType: 'struct RulesParser.VotingRule',
        type: 'tuple',
        components: [
          { name: 'seqOfRule', internalType: 'uint16', type: 'uint16' },
          { name: 'qtyOfSubRule', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfSubRule', internalType: 'uint8', type: 'uint8' },
          { name: 'authority', internalType: 'uint16', type: 'uint16' },
          { name: 'headRatio', internalType: 'uint16', type: 'uint16' },
          { name: 'amountRatio', internalType: 'uint16', type: 'uint16' },
          { name: 'onlyAttendance', internalType: 'bool', type: 'bool' },
          { name: 'impliedConsent', internalType: 'bool', type: 'bool' },
          { name: 'partyAsConsent', internalType: 'bool', type: 'bool' },
          { name: 'againstShallBuy', internalType: 'bool', type: 'bool' },
          { name: 'shaExecDays', internalType: 'uint8', type: 'uint8' },
          { name: 'shaConfirmDays', internalType: 'uint8', type: 'uint8' },
          { name: 'reconsiderDays', internalType: 'uint8', type: 'uint8' },
          { name: 'votePrepareDays', internalType: 'uint8', type: 'uint8' },
          { name: 'votingDays', internalType: 'uint8', type: 'uint8' },
          { name: 'execDaysForPutOpt', internalType: 'uint8', type: 'uint8' },
          { name: 'vetoers', internalType: 'uint40[2]', type: 'uint40[2]' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
        ],
      },
      { name: 'docUrl', internalType: 'bytes32', type: 'bytes32' },
      { name: 'docHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'circulateFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'closingDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'establishFile',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'execFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'finalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBookeeper',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'getFile',
    outputs: [
      {
        name: '',
        internalType: 'struct FilesRepo.File',
        type: 'tuple',
        components: [
          { name: 'snOfDoc', internalType: 'bytes32', type: 'bytes32' },
          {
            name: 'head',
            internalType: 'struct FilesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'circulateDate', internalType: 'uint48', type: 'uint48' },
              { name: 'signingDays', internalType: 'uint8', type: 'uint8' },
              { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
              { name: 'shaExecDays', internalType: 'uint8', type: 'uint8' },
              { name: 'shaConfirmDays', internalType: 'uint8', type: 'uint8' },
              { name: 'proposeDate', internalType: 'uint48', type: 'uint48' },
              { name: 'reconsiderDays', internalType: 'uint8', type: 'uint8' },
              { name: 'votePrepareDays', internalType: 'uint8', type: 'uint8' },
              { name: 'votingDays', internalType: 'uint8', type: 'uint8' },
              {
                name: 'execDaysForPutOpt',
                internalType: 'uint8',
                type: 'uint8',
              },
              { name: 'seqOfMotion', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'ref',
            internalType: 'struct FilesRepo.Ref',
            type: 'tuple',
            components: [
              { name: 'docUrl', internalType: 'bytes32', type: 'bytes32' },
              { name: 'docHash', internalType: 'bytes32', type: 'bytes32' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getFilesList',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getGeneralCounsel',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'getHeadOfFile',
    outputs: [
      {
        name: 'head',
        internalType: 'struct FilesRepo.Head',
        type: 'tuple',
        components: [
          { name: 'circulateDate', internalType: 'uint48', type: 'uint48' },
          { name: 'signingDays', internalType: 'uint8', type: 'uint8' },
          { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
          { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
          { name: 'shaExecDays', internalType: 'uint8', type: 'uint8' },
          { name: 'shaConfirmDays', internalType: 'uint8', type: 'uint8' },
          { name: 'proposeDate', internalType: 'uint48', type: 'uint48' },
          { name: 'reconsiderDays', internalType: 'uint8', type: 'uint8' },
          { name: 'votePrepareDays', internalType: 'uint8', type: 'uint8' },
          { name: 'votingDays', internalType: 'uint8', type: 'uint8' },
          { name: 'execDaysForPutOpt', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfMotion', internalType: 'uint64', type: 'uint64' },
          { name: 'state', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'getRefOfFile',
    outputs: [
      {
        name: 'ref',
        internalType: 'struct FilesRepo.Ref',
        type: 'tuple',
        components: [
          { name: 'docUrl', internalType: 'bytes32', type: 'bytes32' },
          { name: 'docHash', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'getSNOfFile',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'uint256', type: 'uint256' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'isRegistered',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'pointer',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'body', internalType: 'address', type: 'address' },
      { name: 'seqOfMotion', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'proposeFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'qtyOfFiles',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfDoc', internalType: 'bytes32', type: 'bytes32' },
      { name: 'body', internalType: 'address', type: 'address' },
    ],
    name: 'regFile',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'removeDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'keeper', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setGeneralCounsel',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'body', internalType: 'address', type: 'address' },
      { name: 'state', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setStateOfFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'shaExecDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'signingDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'terminateFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'terminateStartpoint',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'body', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'voteCountingForFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'votingDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IBookOfSHA
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iBookOfShaABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'pointer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'ChangePointer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'body', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'state',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'UpdateStateOfFile',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'changePointer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'body', internalType: 'address', type: 'address' },
      { name: 'signingDays', internalType: 'uint16', type: 'uint16' },
      { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
      {
        name: 'vr',
        internalType: 'struct RulesParser.VotingRule',
        type: 'tuple',
        components: [
          { name: 'seqOfRule', internalType: 'uint16', type: 'uint16' },
          { name: 'qtyOfSubRule', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfSubRule', internalType: 'uint8', type: 'uint8' },
          { name: 'authority', internalType: 'uint16', type: 'uint16' },
          { name: 'headRatio', internalType: 'uint16', type: 'uint16' },
          { name: 'amountRatio', internalType: 'uint16', type: 'uint16' },
          { name: 'onlyAttendance', internalType: 'bool', type: 'bool' },
          { name: 'impliedConsent', internalType: 'bool', type: 'bool' },
          { name: 'partyAsConsent', internalType: 'bool', type: 'bool' },
          { name: 'againstShallBuy', internalType: 'bool', type: 'bool' },
          { name: 'shaExecDays', internalType: 'uint8', type: 'uint8' },
          { name: 'shaConfirmDays', internalType: 'uint8', type: 'uint8' },
          { name: 'reconsiderDays', internalType: 'uint8', type: 'uint8' },
          { name: 'votePrepareDays', internalType: 'uint8', type: 'uint8' },
          { name: 'votingDays', internalType: 'uint8', type: 'uint8' },
          { name: 'execDaysForPutOpt', internalType: 'uint8', type: 'uint8' },
          { name: 'vetoers', internalType: 'uint40[2]', type: 'uint40[2]' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
        ],
      },
      { name: 'docUrl', internalType: 'bytes32', type: 'bytes32' },
      { name: 'docHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'circulateFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'closingDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'establishFile',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'execFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'getFile',
    outputs: [
      {
        name: '',
        internalType: 'struct FilesRepo.File',
        type: 'tuple',
        components: [
          { name: 'snOfDoc', internalType: 'bytes32', type: 'bytes32' },
          {
            name: 'head',
            internalType: 'struct FilesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'circulateDate', internalType: 'uint48', type: 'uint48' },
              { name: 'signingDays', internalType: 'uint8', type: 'uint8' },
              { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
              { name: 'shaExecDays', internalType: 'uint8', type: 'uint8' },
              { name: 'shaConfirmDays', internalType: 'uint8', type: 'uint8' },
              { name: 'proposeDate', internalType: 'uint48', type: 'uint48' },
              { name: 'reconsiderDays', internalType: 'uint8', type: 'uint8' },
              { name: 'votePrepareDays', internalType: 'uint8', type: 'uint8' },
              { name: 'votingDays', internalType: 'uint8', type: 'uint8' },
              {
                name: 'execDaysForPutOpt',
                internalType: 'uint8',
                type: 'uint8',
              },
              { name: 'seqOfMotion', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'ref',
            internalType: 'struct FilesRepo.Ref',
            type: 'tuple',
            components: [
              { name: 'docUrl', internalType: 'bytes32', type: 'bytes32' },
              { name: 'docHash', internalType: 'bytes32', type: 'bytes32' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getFilesList',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'getHeadOfFile',
    outputs: [
      {
        name: 'head',
        internalType: 'struct FilesRepo.Head',
        type: 'tuple',
        components: [
          { name: 'circulateDate', internalType: 'uint48', type: 'uint48' },
          { name: 'signingDays', internalType: 'uint8', type: 'uint8' },
          { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
          { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
          { name: 'shaExecDays', internalType: 'uint8', type: 'uint8' },
          { name: 'shaConfirmDays', internalType: 'uint8', type: 'uint8' },
          { name: 'proposeDate', internalType: 'uint48', type: 'uint48' },
          { name: 'reconsiderDays', internalType: 'uint8', type: 'uint8' },
          { name: 'votePrepareDays', internalType: 'uint8', type: 'uint8' },
          { name: 'votingDays', internalType: 'uint8', type: 'uint8' },
          { name: 'execDaysForPutOpt', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfMotion', internalType: 'uint64', type: 'uint64' },
          { name: 'state', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'getRefOfFile',
    outputs: [
      {
        name: 'ref',
        internalType: 'struct FilesRepo.Ref',
        type: 'tuple',
        components: [
          { name: 'docUrl', internalType: 'bytes32', type: 'bytes32' },
          { name: 'docHash', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'getSNOfFile',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'isRegistered',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'pointer',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'body', internalType: 'address', type: 'address' },
      { name: 'seqOfMotion', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'proposeFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'qtyOfFiles',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfDoc', internalType: 'bytes32', type: 'bytes32' },
      { name: 'body', internalType: 'address', type: 'address' },
    ],
    name: 'regFile',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'body', internalType: 'address', type: 'address' },
      { name: 'state', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setStateOfFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'shaExecDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'signingDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'terminateFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'terminateStartpoint',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'body', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'voteCountingForFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'votingDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IShareholdersAgreement
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iShareholdersAgreementABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'rule', internalType: 'bytes32', type: 'bytes32' }],
    name: 'addRule',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'typeOfDoc', internalType: 'uint256', type: 'uint256' },
      { name: 'version', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createTerm',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seq', internalType: 'uint256', type: 'uint256' }],
    name: 'getRule',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'title', internalType: 'uint256', type: 'uint256' }],
    name: 'getTerm',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seq', internalType: 'uint256', type: 'uint256' }],
    name: 'hasRule',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'title', internalType: 'uint256', type: 'uint256' }],
    name: 'hasTitle',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'qtyOfRules',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'qtyOfTerms',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seq', internalType: 'uint256', type: 'uint256' }],
    name: 'removeRule',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'typeOfDoc', internalType: 'uint256', type: 'uint256' }],
    name: 'removeTerm',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'rules',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'title', internalType: 'uint256', type: 'uint256' },
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'termIsExempted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'title', internalType: 'uint256', type: 'uint256' },
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'termIsTriggered',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'titles',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ShareholdersAgreement
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const shareholdersAgreementABI = [
  { type: 'event', anonymous: false, inputs: [], name: 'CirculateDoc' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RemoveDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetGeneralCounsel',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'beBuyer', internalType: 'bool', type: 'bool' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addBlank',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'rule', internalType: 'bytes32', type: 'bytes32' }],
    name: 'addRule',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'circulateDoc',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'circulated',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'typeOfDoc', internalType: 'uint256', type: 'uint256' },
      { name: 'version', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createTerm',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'established',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'finalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBookeeper',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'initPage', internalType: 'bool', type: 'bool' }],
    name: 'getBuyers',
    outputs: [{ name: 'buyers', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCirculateDate',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getClosingDays',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getClosingDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getGeneralCounsel',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'initPage', internalType: 'bool', type: 'bool' }],
    name: 'getParasOfPage',
    outputs: [
      {
        name: '',
        internalType: 'struct SigsRepo.Signature',
        type: 'tuple',
        components: [
          { name: 'signer', internalType: 'uint40', type: 'uint40' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'blocknumber', internalType: 'uint64', type: 'uint64' },
          { name: 'flag', internalType: 'bool', type: 'bool' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'arg', internalType: 'uint16', type: 'uint16' },
          { name: 'seq', internalType: 'uint16', type: 'uint16' },
          { name: 'attr', internalType: 'uint16', type: 'uint16' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getParties',
    outputs: [
      { name: 'parties', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seq', internalType: 'uint256', type: 'uint256' }],
    name: 'getRule',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'initPage', internalType: 'bool', type: 'bool' }],
    name: 'getSellers',
    outputs: [
      { name: 'sellers', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSigDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getSigOfParty',
    outputs: [
      { name: 'seqOfDeals', internalType: 'uint256[]', type: 'uint256[]' },
      {
        name: 'sig',
        internalType: 'struct SigsRepo.Signature',
        type: 'tuple',
        components: [
          { name: 'signer', internalType: 'uint40', type: 'uint40' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'blocknumber', internalType: 'uint64', type: 'uint64' },
          { name: 'flag', internalType: 'bool', type: 'bool' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'arg', internalType: 'uint16', type: 'uint16' },
          { name: 'seq', internalType: 'uint16', type: 'uint16' },
          { name: 'attr', internalType: 'uint16', type: 'uint16' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSigningDays',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'initPage', internalType: 'bool', type: 'bool' }],
    name: 'getSigsOfPage',
    outputs: [
      {
        name: 'sigsOfBuyer',
        internalType: 'struct SigsRepo.Signature[]',
        type: 'tuple[]',
        components: [
          { name: 'signer', internalType: 'uint40', type: 'uint40' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'blocknumber', internalType: 'uint64', type: 'uint64' },
          { name: 'flag', internalType: 'bool', type: 'bool' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'arg', internalType: 'uint16', type: 'uint16' },
          { name: 'seq', internalType: 'uint16', type: 'uint16' },
          { name: 'attr', internalType: 'uint16', type: 'uint16' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
      {
        name: 'sigsOfSeller',
        internalType: 'struct SigsRepo.Signature[]',
        type: 'tuple[]',
        components: [
          { name: 'signer', internalType: 'uint40', type: 'uint40' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'blocknumber', internalType: 'uint64', type: 'uint64' },
          { name: 'flag', internalType: 'bool', type: 'bool' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'arg', internalType: 'uint16', type: 'uint16' },
          { name: 'seq', internalType: 'uint16', type: 'uint16' },
          { name: 'attr', internalType: 'uint16', type: 'uint16' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'title', internalType: 'uint256', type: 'uint256' }],
    name: 'getTerm',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seq', internalType: 'uint256', type: 'uint256' }],
    name: 'hasRule',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'title', internalType: 'uint256', type: 'uint256' }],
    name: 'hasTitle',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'uint256', type: 'uint256' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isBuyer',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'isInitSigner',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'isParty',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isSeller',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'isSigner',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'qtyOfRules',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'qtyOfTerms',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'signer', internalType: 'uint256', type: 'uint256' },
      { name: 'sigDate', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'regSig',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeBlank',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'removeDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seq', internalType: 'uint256', type: 'uint256' }],
    name: 'removeRule',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'typeOfDoc', internalType: 'uint256', type: 'uint256' }],
    name: 'removeTerm',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'rules',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'keeper', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setGeneralCounsel',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'signingDays', internalType: 'uint256', type: 'uint256' },
      { name: 'closingDays', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setTiming',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'signDoc',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'title', internalType: 'uint256', type: 'uint256' },
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'termIsExempted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'title', internalType: 'uint256', type: 'uint256' },
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'termIsTriggered',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'titles',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BookOfOptions
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const bookOfOptionsABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfOpt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'obligor',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'AddObligorIntoOpt',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfOpt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'codeOfOpt',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'CreateOpt',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfOpt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ExecOpt',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfOpt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'codeOfBrf',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'RegSwapOrder',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RemoveDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfOpt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'obligor',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'RemoveObligorFromOpt',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetGeneralCounsel',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfOpt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'data1',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'data2',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'data3',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'UpdateOracle',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfOpt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'seqOfBrf',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'state',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'UpdateStateOfBrief',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'obligor', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addObligorIntoOption',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' }],
    name: 'counterOfBriefs',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'counterOfOptions',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sn', internalType: 'bytes32', type: 'bytes32' },
      { name: 'snOfCond', internalType: 'bytes32', type: 'bytes32' },
      { name: 'rightholder', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createOption',
    outputs: [
      {
        name: 'head',
        internalType: 'struct OptionsRepo.Head',
        type: 'tuple',
        components: [
          { name: 'seqOfOpt', internalType: 'uint32', type: 'uint32' },
          { name: 'typeOfOpt', internalType: 'uint8', type: 'uint8' },
          { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
          { name: 'rate', internalType: 'uint32', type: 'uint32' },
          { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
          { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
          { name: 'execDays', internalType: 'uint16', type: 'uint16' },
          { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
          { name: 'obligor', internalType: 'uint40', type: 'uint40' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfConsider', internalType: 'uint256', type: 'uint256' },
      { name: 'paidOfConsider', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfTarget', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createSwapOrder',
    outputs: [
      {
        name: 'swap',
        internalType: 'struct SwapsRepo.Swap',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct SwapsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfSwap', internalType: 'uint32', type: 'uint32' },
              { name: 'classOfTarget', internalType: 'uint16', type: 'uint16' },
              {
                name: 'classOfConsider',
                internalType: 'uint16',
                type: 'uint16',
              },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
              { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
              { name: 'obligor', internalType: 'uint40', type: 'uint40' },
              { name: 'rateOfSwap', internalType: 'uint32', type: 'uint32' },
              { name: 'para', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct SwapsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'rightholder', internalType: 'uint40', type: 'uint40' },
              { name: 'seqOfConsider', internalType: 'uint32', type: 'uint32' },
              {
                name: 'paidOfConsider',
                internalType: 'uint64',
                type: 'uint64',
              },
              { name: 'seqOfTarget', internalType: 'uint32', type: 'uint32' },
              { name: 'paidOfTarget', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' }],
    name: 'execOption',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'finalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' }],
    name: 'getALLOraclesOfOption',
    outputs: [
      {
        name: '',
        internalType: 'struct Checkpoints.Checkpoint[]',
        type: 'tuple[]',
        components: [
          { name: 'timestamp', internalType: 'uint48', type: 'uint48' },
          { name: 'paid', internalType: 'uint64', type: 'uint64' },
          { name: 'par', internalType: 'uint64', type: 'uint64' },
          { name: 'cleanPaid', internalType: 'uint64', type: 'uint64' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' }],
    name: 'getAllBriefsOfOption',
    outputs: [
      {
        name: '',
        internalType: 'struct OptionsRepo.Brief[]',
        type: 'tuple[]',
        components: [
          { name: 'seqOfBrf', internalType: 'uint16', type: 'uint16' },
          { name: 'seqOfSwap', internalType: 'uint32', type: 'uint32' },
          { name: 'rateOfSwap', internalType: 'uint32', type: 'uint32' },
          { name: 'paidOfConsider', internalType: 'uint64', type: 'uint64' },
          { name: 'paidOfTarget', internalType: 'uint64', type: 'uint64' },
          { name: 'obligor', internalType: 'uint40', type: 'uint40' },
          { name: 'state', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAllOptions',
    outputs: [
      {
        name: '',
        internalType: 'struct OptionsRepo.Option[]',
        type: 'tuple[]',
        components: [
          {
            name: 'head',
            internalType: 'struct OptionsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfOpt', internalType: 'uint32', type: 'uint32' },
              { name: 'typeOfOpt', internalType: 'uint8', type: 'uint8' },
              { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
              { name: 'rate', internalType: 'uint32', type: 'uint32' },
              { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
              { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
              { name: 'execDays', internalType: 'uint16', type: 'uint16' },
              { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
              { name: 'obligor', internalType: 'uint40', type: 'uint40' },
            ],
          },
          {
            name: 'cond',
            internalType: 'struct CondsRepo.Cond',
            type: 'tuple',
            components: [
              { name: 'seqOfCond', internalType: 'uint32', type: 'uint32' },
              { name: 'logicOpr', internalType: 'uint8', type: 'uint8' },
              { name: 'compOpr1', internalType: 'uint8', type: 'uint8' },
              { name: 'para1', internalType: 'uint64', type: 'uint64' },
              { name: 'compOpr2', internalType: 'uint8', type: 'uint8' },
              { name: 'para2', internalType: 'uint64', type: 'uint64' },
              { name: 'compOpr3', internalType: 'uint8', type: 'uint8' },
              { name: 'para3', internalType: 'uint64', type: 'uint64' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct OptionsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'closingDate', internalType: 'uint48', type: 'uint48' },
              { name: 'rightholder', internalType: 'uint40', type: 'uint40' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'arg', internalType: 'uint16', type: 'uint16' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBookeeper',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfBrf', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getBrief',
    outputs: [
      {
        name: 'brf',
        internalType: 'struct OptionsRepo.Brief',
        type: 'tuple',
        components: [
          { name: 'seqOfBrf', internalType: 'uint16', type: 'uint16' },
          { name: 'seqOfSwap', internalType: 'uint32', type: 'uint32' },
          { name: 'rateOfSwap', internalType: 'uint32', type: 'uint32' },
          { name: 'paidOfConsider', internalType: 'uint64', type: 'uint64' },
          { name: 'paidOfTarget', internalType: 'uint64', type: 'uint64' },
          { name: 'obligor', internalType: 'uint40', type: 'uint40' },
          { name: 'state', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getGeneralCounsel',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' }],
    name: 'getObligorsOfOption',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' }],
    name: 'getOption',
    outputs: [
      {
        name: 'opt',
        internalType: 'struct OptionsRepo.Option',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct OptionsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfOpt', internalType: 'uint32', type: 'uint32' },
              { name: 'typeOfOpt', internalType: 'uint8', type: 'uint8' },
              { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
              { name: 'rate', internalType: 'uint32', type: 'uint32' },
              { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
              { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
              { name: 'execDays', internalType: 'uint16', type: 'uint16' },
              { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
              { name: 'obligor', internalType: 'uint40', type: 'uint40' },
            ],
          },
          {
            name: 'cond',
            internalType: 'struct CondsRepo.Cond',
            type: 'tuple',
            components: [
              { name: 'seqOfCond', internalType: 'uint32', type: 'uint32' },
              { name: 'logicOpr', internalType: 'uint8', type: 'uint8' },
              { name: 'compOpr1', internalType: 'uint8', type: 'uint8' },
              { name: 'para1', internalType: 'uint64', type: 'uint64' },
              { name: 'compOpr2', internalType: 'uint8', type: 'uint8' },
              { name: 'para2', internalType: 'uint64', type: 'uint64' },
              { name: 'compOpr3', internalType: 'uint8', type: 'uint8' },
              { name: 'para3', internalType: 'uint64', type: 'uint64' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct OptionsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'closingDate', internalType: 'uint48', type: 'uint48' },
              { name: 'rightholder', internalType: 'uint40', type: 'uint40' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'arg', internalType: 'uint16', type: 'uint16' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'date', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getOracleAtDate',
    outputs: [
      {
        name: '',
        internalType: 'struct Checkpoints.Checkpoint',
        type: 'tuple',
        components: [
          { name: 'timestamp', internalType: 'uint48', type: 'uint48' },
          { name: 'paid', internalType: 'uint64', type: 'uint64' },
          { name: 'par', internalType: 'uint64', type: 'uint64' },
          { name: 'cleanPaid', internalType: 'uint64', type: 'uint64' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'uint256', type: 'uint256' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isObligor',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' }],
    name: 'isOption',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isRightholder',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'opt',
        internalType: 'struct OptionsRepo.Option',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct OptionsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfOpt', internalType: 'uint32', type: 'uint32' },
              { name: 'typeOfOpt', internalType: 'uint8', type: 'uint8' },
              { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
              { name: 'rate', internalType: 'uint32', type: 'uint32' },
              { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
              { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
              { name: 'execDays', internalType: 'uint16', type: 'uint16' },
              { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
              { name: 'obligor', internalType: 'uint40', type: 'uint40' },
            ],
          },
          {
            name: 'cond',
            internalType: 'struct CondsRepo.Cond',
            type: 'tuple',
            components: [
              { name: 'seqOfCond', internalType: 'uint32', type: 'uint32' },
              { name: 'logicOpr', internalType: 'uint8', type: 'uint8' },
              { name: 'compOpr1', internalType: 'uint8', type: 'uint8' },
              { name: 'para1', internalType: 'uint64', type: 'uint64' },
              { name: 'compOpr2', internalType: 'uint8', type: 'uint8' },
              { name: 'para2', internalType: 'uint64', type: 'uint64' },
              { name: 'compOpr3', internalType: 'uint8', type: 'uint8' },
              { name: 'para3', internalType: 'uint64', type: 'uint64' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct OptionsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'closingDate', internalType: 'uint48', type: 'uint48' },
              { name: 'rightholder', internalType: 'uint40', type: 'uint40' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'arg', internalType: 'uint16', type: 'uint16' },
            ],
          },
        ],
      },
    ],
    name: 'issueOption',
    outputs: [
      {
        name: 'head',
        internalType: 'struct OptionsRepo.Head',
        type: 'tuple',
        components: [
          { name: 'seqOfOpt', internalType: 'uint32', type: 'uint32' },
          { name: 'typeOfOpt', internalType: 'uint8', type: 'uint8' },
          { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
          { name: 'rate', internalType: 'uint32', type: 'uint32' },
          { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
          { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
          { name: 'execDays', internalType: 'uint16', type: 'uint16' },
          { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
          { name: 'obligor', internalType: 'uint40', type: 'uint40' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'opts', internalType: 'address', type: 'address' }],
    name: 'regOptionTerms',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      {
        name: 'swap',
        internalType: 'struct SwapsRepo.Swap',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct SwapsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfSwap', internalType: 'uint32', type: 'uint32' },
              { name: 'classOfTarget', internalType: 'uint16', type: 'uint16' },
              {
                name: 'classOfConsider',
                internalType: 'uint16',
                type: 'uint16',
              },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
              { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
              { name: 'obligor', internalType: 'uint40', type: 'uint40' },
              { name: 'rateOfSwap', internalType: 'uint32', type: 'uint32' },
              { name: 'para', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct SwapsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'rightholder', internalType: 'uint40', type: 'uint40' },
              { name: 'seqOfConsider', internalType: 'uint32', type: 'uint32' },
              {
                name: 'paidOfConsider',
                internalType: 'uint64',
                type: 'uint64',
              },
              { name: 'seqOfTarget', internalType: 'uint32', type: 'uint32' },
              { name: 'paidOfTarget', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'regSwapOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'removeDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'obligor', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeObligorFromOption',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'keeper', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setGeneralCounsel',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'd1', internalType: 'uint256', type: 'uint256' },
      { name: 'd2', internalType: 'uint256', type: 'uint256' },
      { name: 'd3', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'updateOracle',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfBrf', internalType: 'uint256', type: 'uint256' },
      { name: 'state', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'updateStateOfBrief',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IBookOfOptions
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iBookOfOptionsABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfOpt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'obligor',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'AddObligorIntoOpt',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfOpt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'codeOfOpt',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'CreateOpt',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfOpt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ExecOpt',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfOpt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'codeOfBrf',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'RegSwapOrder',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfOpt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'obligor',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'RemoveObligorFromOpt',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfOpt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'data1',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'data2',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'data3',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'UpdateOracle',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfOpt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'seqOfBrf',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'state',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'UpdateStateOfBrief',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'obligor', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addObligorIntoOption',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' }],
    name: 'counterOfBriefs',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'counterOfOptions',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sn', internalType: 'bytes32', type: 'bytes32' },
      { name: 'snOfCond', internalType: 'bytes32', type: 'bytes32' },
      { name: 'rightholder', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createOption',
    outputs: [
      {
        name: 'head',
        internalType: 'struct OptionsRepo.Head',
        type: 'tuple',
        components: [
          { name: 'seqOfOpt', internalType: 'uint32', type: 'uint32' },
          { name: 'typeOfOpt', internalType: 'uint8', type: 'uint8' },
          { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
          { name: 'rate', internalType: 'uint32', type: 'uint32' },
          { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
          { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
          { name: 'execDays', internalType: 'uint16', type: 'uint16' },
          { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
          { name: 'obligor', internalType: 'uint40', type: 'uint40' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfConsider', internalType: 'uint256', type: 'uint256' },
      { name: 'paidOfConsider', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfTarget', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createSwapOrder',
    outputs: [
      {
        name: 'swap',
        internalType: 'struct SwapsRepo.Swap',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct SwapsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfSwap', internalType: 'uint32', type: 'uint32' },
              { name: 'classOfTarget', internalType: 'uint16', type: 'uint16' },
              {
                name: 'classOfConsider',
                internalType: 'uint16',
                type: 'uint16',
              },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
              { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
              { name: 'obligor', internalType: 'uint40', type: 'uint40' },
              { name: 'rateOfSwap', internalType: 'uint32', type: 'uint32' },
              { name: 'para', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct SwapsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'rightholder', internalType: 'uint40', type: 'uint40' },
              { name: 'seqOfConsider', internalType: 'uint32', type: 'uint32' },
              {
                name: 'paidOfConsider',
                internalType: 'uint64',
                type: 'uint64',
              },
              { name: 'seqOfTarget', internalType: 'uint32', type: 'uint32' },
              { name: 'paidOfTarget', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' }],
    name: 'execOption',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' }],
    name: 'getALLOraclesOfOption',
    outputs: [
      {
        name: '',
        internalType: 'struct Checkpoints.Checkpoint[]',
        type: 'tuple[]',
        components: [
          { name: 'timestamp', internalType: 'uint48', type: 'uint48' },
          { name: 'paid', internalType: 'uint64', type: 'uint64' },
          { name: 'par', internalType: 'uint64', type: 'uint64' },
          { name: 'cleanPaid', internalType: 'uint64', type: 'uint64' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' }],
    name: 'getAllBriefsOfOption',
    outputs: [
      {
        name: '',
        internalType: 'struct OptionsRepo.Brief[]',
        type: 'tuple[]',
        components: [
          { name: 'seqOfBrf', internalType: 'uint16', type: 'uint16' },
          { name: 'seqOfSwap', internalType: 'uint32', type: 'uint32' },
          { name: 'rateOfSwap', internalType: 'uint32', type: 'uint32' },
          { name: 'paidOfConsider', internalType: 'uint64', type: 'uint64' },
          { name: 'paidOfTarget', internalType: 'uint64', type: 'uint64' },
          { name: 'obligor', internalType: 'uint40', type: 'uint40' },
          { name: 'state', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAllOptions',
    outputs: [
      {
        name: '',
        internalType: 'struct OptionsRepo.Option[]',
        type: 'tuple[]',
        components: [
          {
            name: 'head',
            internalType: 'struct OptionsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfOpt', internalType: 'uint32', type: 'uint32' },
              { name: 'typeOfOpt', internalType: 'uint8', type: 'uint8' },
              { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
              { name: 'rate', internalType: 'uint32', type: 'uint32' },
              { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
              { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
              { name: 'execDays', internalType: 'uint16', type: 'uint16' },
              { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
              { name: 'obligor', internalType: 'uint40', type: 'uint40' },
            ],
          },
          {
            name: 'cond',
            internalType: 'struct CondsRepo.Cond',
            type: 'tuple',
            components: [
              { name: 'seqOfCond', internalType: 'uint32', type: 'uint32' },
              { name: 'logicOpr', internalType: 'uint8', type: 'uint8' },
              { name: 'compOpr1', internalType: 'uint8', type: 'uint8' },
              { name: 'para1', internalType: 'uint64', type: 'uint64' },
              { name: 'compOpr2', internalType: 'uint8', type: 'uint8' },
              { name: 'para2', internalType: 'uint64', type: 'uint64' },
              { name: 'compOpr3', internalType: 'uint8', type: 'uint8' },
              { name: 'para3', internalType: 'uint64', type: 'uint64' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct OptionsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'closingDate', internalType: 'uint48', type: 'uint48' },
              { name: 'rightholder', internalType: 'uint40', type: 'uint40' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'arg', internalType: 'uint16', type: 'uint16' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfBrf', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getBrief',
    outputs: [
      {
        name: 'brf',
        internalType: 'struct OptionsRepo.Brief',
        type: 'tuple',
        components: [
          { name: 'seqOfBrf', internalType: 'uint16', type: 'uint16' },
          { name: 'seqOfSwap', internalType: 'uint32', type: 'uint32' },
          { name: 'rateOfSwap', internalType: 'uint32', type: 'uint32' },
          { name: 'paidOfConsider', internalType: 'uint64', type: 'uint64' },
          { name: 'paidOfTarget', internalType: 'uint64', type: 'uint64' },
          { name: 'obligor', internalType: 'uint40', type: 'uint40' },
          { name: 'state', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' }],
    name: 'getObligorsOfOption',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' }],
    name: 'getOption',
    outputs: [
      {
        name: 'opt',
        internalType: 'struct OptionsRepo.Option',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct OptionsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfOpt', internalType: 'uint32', type: 'uint32' },
              { name: 'typeOfOpt', internalType: 'uint8', type: 'uint8' },
              { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
              { name: 'rate', internalType: 'uint32', type: 'uint32' },
              { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
              { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
              { name: 'execDays', internalType: 'uint16', type: 'uint16' },
              { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
              { name: 'obligor', internalType: 'uint40', type: 'uint40' },
            ],
          },
          {
            name: 'cond',
            internalType: 'struct CondsRepo.Cond',
            type: 'tuple',
            components: [
              { name: 'seqOfCond', internalType: 'uint32', type: 'uint32' },
              { name: 'logicOpr', internalType: 'uint8', type: 'uint8' },
              { name: 'compOpr1', internalType: 'uint8', type: 'uint8' },
              { name: 'para1', internalType: 'uint64', type: 'uint64' },
              { name: 'compOpr2', internalType: 'uint8', type: 'uint8' },
              { name: 'para2', internalType: 'uint64', type: 'uint64' },
              { name: 'compOpr3', internalType: 'uint8', type: 'uint8' },
              { name: 'para3', internalType: 'uint64', type: 'uint64' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct OptionsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'closingDate', internalType: 'uint48', type: 'uint48' },
              { name: 'rightholder', internalType: 'uint40', type: 'uint40' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'arg', internalType: 'uint16', type: 'uint16' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'date', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getOracleAtDate',
    outputs: [
      {
        name: '',
        internalType: 'struct Checkpoints.Checkpoint',
        type: 'tuple',
        components: [
          { name: 'timestamp', internalType: 'uint48', type: 'uint48' },
          { name: 'paid', internalType: 'uint64', type: 'uint64' },
          { name: 'par', internalType: 'uint64', type: 'uint64' },
          { name: 'cleanPaid', internalType: 'uint64', type: 'uint64' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isObligor',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' }],
    name: 'isOption',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isRightholder',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'opt',
        internalType: 'struct OptionsRepo.Option',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct OptionsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfOpt', internalType: 'uint32', type: 'uint32' },
              { name: 'typeOfOpt', internalType: 'uint8', type: 'uint8' },
              { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
              { name: 'rate', internalType: 'uint32', type: 'uint32' },
              { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
              { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
              { name: 'execDays', internalType: 'uint16', type: 'uint16' },
              { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
              { name: 'obligor', internalType: 'uint40', type: 'uint40' },
            ],
          },
          {
            name: 'cond',
            internalType: 'struct CondsRepo.Cond',
            type: 'tuple',
            components: [
              { name: 'seqOfCond', internalType: 'uint32', type: 'uint32' },
              { name: 'logicOpr', internalType: 'uint8', type: 'uint8' },
              { name: 'compOpr1', internalType: 'uint8', type: 'uint8' },
              { name: 'para1', internalType: 'uint64', type: 'uint64' },
              { name: 'compOpr2', internalType: 'uint8', type: 'uint8' },
              { name: 'para2', internalType: 'uint64', type: 'uint64' },
              { name: 'compOpr3', internalType: 'uint8', type: 'uint8' },
              { name: 'para3', internalType: 'uint64', type: 'uint64' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct OptionsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'closingDate', internalType: 'uint48', type: 'uint48' },
              { name: 'rightholder', internalType: 'uint40', type: 'uint40' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'arg', internalType: 'uint16', type: 'uint16' },
            ],
          },
        ],
      },
    ],
    name: 'issueOption',
    outputs: [
      {
        name: 'head',
        internalType: 'struct OptionsRepo.Head',
        type: 'tuple',
        components: [
          { name: 'seqOfOpt', internalType: 'uint32', type: 'uint32' },
          { name: 'typeOfOpt', internalType: 'uint8', type: 'uint8' },
          { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
          { name: 'rate', internalType: 'uint32', type: 'uint32' },
          { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
          { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
          { name: 'execDays', internalType: 'uint16', type: 'uint16' },
          { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
          { name: 'obligor', internalType: 'uint40', type: 'uint40' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'opts', internalType: 'address', type: 'address' }],
    name: 'regOptionTerms',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      {
        name: 'swap',
        internalType: 'struct SwapsRepo.Swap',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct SwapsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfSwap', internalType: 'uint32', type: 'uint32' },
              { name: 'classOfTarget', internalType: 'uint16', type: 'uint16' },
              {
                name: 'classOfConsider',
                internalType: 'uint16',
                type: 'uint16',
              },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
              { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
              { name: 'obligor', internalType: 'uint40', type: 'uint40' },
              { name: 'rateOfSwap', internalType: 'uint32', type: 'uint32' },
              { name: 'para', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct SwapsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'rightholder', internalType: 'uint40', type: 'uint40' },
              { name: 'seqOfConsider', internalType: 'uint32', type: 'uint32' },
              {
                name: 'paidOfConsider',
                internalType: 'uint64',
                type: 'uint64',
              },
              { name: 'seqOfTarget', internalType: 'uint32', type: 'uint32' },
              { name: 'paidOfTarget', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'regSwapOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'obligor', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeObligorFromOption',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'd1', internalType: 'uint256', type: 'uint256' },
      { name: 'd2', internalType: 'uint256', type: 'uint256' },
      { name: 'd3', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'updateOracle',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfBrf', internalType: 'uint256', type: 'uint256' },
      { name: 'state', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'updateStateOfBrief',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BookOfPledges
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const bookOfPledgesABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'seqOfPld',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'creditor',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'paid', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'par', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'CreatePledge',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'seqOfPld',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ExecPledge',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'seqOfPld',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'extDays',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ExtendPledge',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'seqOfPld',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'hashLock',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'LockPledge',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'seqOfPld',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'refundAmt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'RefundDebt',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'seqOfPld',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'hashKey',
        internalType: 'string',
        type: 'string',
        indexed: true,
      },
    ],
    name: 'ReleasePledge',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RemoveDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'seqOfPld',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'RevokePledge',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetGeneralCounsel',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'seqOfPld',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'newSeqOfPld',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'buyer',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'paid',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'par', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'TransferPledge',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfShare', internalType: 'uint256', type: 'uint256' }],
    name: 'counterOfPledges',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfPld', internalType: 'bytes32', type: 'bytes32' },
      { name: 'creditor', internalType: 'uint256', type: 'uint256' },
      { name: 'guaranteeDays', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
      { name: 'guaranteedAmt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createPledge',
    outputs: [
      {
        name: 'head',
        internalType: 'struct PledgesRepo.Head',
        type: 'tuple',
        components: [
          { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
          { name: 'seqOfPld', internalType: 'uint16', type: 'uint16' },
          { name: 'createDate', internalType: 'uint48', type: 'uint48' },
          { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
          { name: 'pledgor', internalType: 'uint40', type: 'uint40' },
          { name: 'debtor', internalType: 'uint40', type: 'uint40' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execPledge',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'extDays', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'extendPledge',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'finalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBookeeper',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getGeneralCounsel',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPledge',
    outputs: [
      {
        name: 'pld',
        internalType: 'struct PledgesRepo.Pledge',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct PledgesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seqOfPld', internalType: 'uint16', type: 'uint16' },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
              { name: 'pledgor', internalType: 'uint40', type: 'uint40' },
              { name: 'debtor', internalType: 'uint40', type: 'uint40' },
              { name: 'data', internalType: 'uint32', type: 'uint32' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct PledgesRepo.Body',
            type: 'tuple',
            components: [
              { name: 'creditor', internalType: 'uint40', type: 'uint40' },
              { name: 'guaranteeDays', internalType: 'uint16', type: 'uint16' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'guaranteedAmt', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfShare', internalType: 'uint256', type: 'uint256' }],
    name: 'getPledgesOfShare',
    outputs: [
      {
        name: '',
        internalType: 'struct PledgesRepo.Pledge[]',
        type: 'tuple[]',
        components: [
          {
            name: 'head',
            internalType: 'struct PledgesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seqOfPld', internalType: 'uint16', type: 'uint16' },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
              { name: 'pledgor', internalType: 'uint40', type: 'uint40' },
              { name: 'debtor', internalType: 'uint40', type: 'uint40' },
              { name: 'data', internalType: 'uint32', type: 'uint32' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct PledgesRepo.Body',
            type: 'tuple',
            components: [
              { name: 'creditor', internalType: 'uint40', type: 'uint40' },
              { name: 'guaranteeDays', internalType: 'uint16', type: 'uint16' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'guaranteedAmt', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSNList',
    outputs: [{ name: 'list', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'uint256', type: 'uint256' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPledge', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isPledge',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'head',
        internalType: 'struct PledgesRepo.Head',
        type: 'tuple',
        components: [
          { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
          { name: 'seqOfPld', internalType: 'uint16', type: 'uint16' },
          { name: 'createDate', internalType: 'uint48', type: 'uint48' },
          { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
          { name: 'pledgor', internalType: 'uint40', type: 'uint40' },
          { name: 'debtor', internalType: 'uint40', type: 'uint40' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
      { name: 'creditor', internalType: 'uint256', type: 'uint256' },
      { name: 'guaranteeDays', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
      { name: 'guaranteedAmt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'issuePledge',
    outputs: [
      {
        name: 'regHead',
        internalType: 'struct PledgesRepo.Head',
        type: 'tuple',
        components: [
          { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
          { name: 'seqOfPld', internalType: 'uint16', type: 'uint16' },
          { name: 'createDate', internalType: 'uint48', type: 'uint48' },
          { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
          { name: 'pledgor', internalType: 'uint40', type: 'uint40' },
          { name: 'debtor', internalType: 'uint40', type: 'uint40' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'lockPledge',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'refundDebt',
    outputs: [
      {
        name: 'newPld',
        internalType: 'struct PledgesRepo.Pledge',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct PledgesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seqOfPld', internalType: 'uint16', type: 'uint16' },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
              { name: 'pledgor', internalType: 'uint40', type: 'uint40' },
              { name: 'debtor', internalType: 'uint40', type: 'uint40' },
              { name: 'data', internalType: 'uint32', type: 'uint32' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct PledgesRepo.Body',
            type: 'tuple',
            components: [
              { name: 'creditor', internalType: 'uint40', type: 'uint40' },
              { name: 'guaranteeDays', internalType: 'uint16', type: 'uint16' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'guaranteedAmt', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'pld',
        internalType: 'struct PledgesRepo.Pledge',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct PledgesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seqOfPld', internalType: 'uint16', type: 'uint16' },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
              { name: 'pledgor', internalType: 'uint40', type: 'uint40' },
              { name: 'debtor', internalType: 'uint40', type: 'uint40' },
              { name: 'data', internalType: 'uint32', type: 'uint32' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct PledgesRepo.Body',
            type: 'tuple',
            components: [
              { name: 'creditor', internalType: 'uint40', type: 'uint40' },
              { name: 'guaranteeDays', internalType: 'uint16', type: 'uint16' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'guaranteedAmt', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'regPledge',
    outputs: [
      {
        name: 'head',
        internalType: 'struct PledgesRepo.Head',
        type: 'tuple',
        components: [
          { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
          { name: 'seqOfPld', internalType: 'uint16', type: 'uint16' },
          { name: 'createDate', internalType: 'uint48', type: 'uint48' },
          { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
          { name: 'pledgor', internalType: 'uint40', type: 'uint40' },
          { name: 'debtor', internalType: 'uint40', type: 'uint40' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
    ],
    name: 'releasePledge',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'removeDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokePledge',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'keeper', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setGeneralCounsel',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'buyer', internalType: 'uint256', type: 'uint256' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferPledge',
    outputs: [
      {
        name: 'newPld',
        internalType: 'struct PledgesRepo.Pledge',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct PledgesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seqOfPld', internalType: 'uint16', type: 'uint16' },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
              { name: 'pledgor', internalType: 'uint40', type: 'uint40' },
              { name: 'debtor', internalType: 'uint40', type: 'uint40' },
              { name: 'data', internalType: 'uint32', type: 'uint32' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct PledgesRepo.Body',
            type: 'tuple',
            components: [
              { name: 'creditor', internalType: 'uint40', type: 'uint40' },
              { name: 'guaranteeDays', internalType: 'uint16', type: 'uint16' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'guaranteedAmt', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IBookOfPledges
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iBookOfPledgesABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'seqOfPld',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'creditor',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'paid', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'par', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'CreatePledge',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'seqOfPld',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ExecPledge',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'seqOfPld',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'extDays',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ExtendPledge',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'seqOfPld',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'hashLock',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'LockPledge',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'seqOfPld',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'refundAmt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'RefundDebt',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'seqOfPld',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'hashKey',
        internalType: 'string',
        type: 'string',
        indexed: true,
      },
    ],
    name: 'ReleasePledge',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'seqOfPld',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'RevokePledge',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'seqOfPld',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'newSeqOfPld',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'buyer',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'paid',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'par', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'TransferPledge',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfShare', internalType: 'uint256', type: 'uint256' }],
    name: 'counterOfPledges',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfPld', internalType: 'bytes32', type: 'bytes32' },
      { name: 'creditor', internalType: 'uint256', type: 'uint256' },
      { name: 'guaranteeDays', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
      { name: 'guaranteedAmt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createPledge',
    outputs: [
      {
        name: 'head',
        internalType: 'struct PledgesRepo.Head',
        type: 'tuple',
        components: [
          { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
          { name: 'seqOfPld', internalType: 'uint16', type: 'uint16' },
          { name: 'createDate', internalType: 'uint48', type: 'uint48' },
          { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
          { name: 'pledgor', internalType: 'uint40', type: 'uint40' },
          { name: 'debtor', internalType: 'uint40', type: 'uint40' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execPledge',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'extDays', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'extendPledge',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPledge',
    outputs: [
      {
        name: 'pld',
        internalType: 'struct PledgesRepo.Pledge',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct PledgesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seqOfPld', internalType: 'uint16', type: 'uint16' },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
              { name: 'pledgor', internalType: 'uint40', type: 'uint40' },
              { name: 'debtor', internalType: 'uint40', type: 'uint40' },
              { name: 'data', internalType: 'uint32', type: 'uint32' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct PledgesRepo.Body',
            type: 'tuple',
            components: [
              { name: 'creditor', internalType: 'uint40', type: 'uint40' },
              { name: 'guaranteeDays', internalType: 'uint16', type: 'uint16' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'guaranteedAmt', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfShare', internalType: 'uint256', type: 'uint256' }],
    name: 'getPledgesOfShare',
    outputs: [
      {
        name: '',
        internalType: 'struct PledgesRepo.Pledge[]',
        type: 'tuple[]',
        components: [
          {
            name: 'head',
            internalType: 'struct PledgesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seqOfPld', internalType: 'uint16', type: 'uint16' },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
              { name: 'pledgor', internalType: 'uint40', type: 'uint40' },
              { name: 'debtor', internalType: 'uint40', type: 'uint40' },
              { name: 'data', internalType: 'uint32', type: 'uint32' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct PledgesRepo.Body',
            type: 'tuple',
            components: [
              { name: 'creditor', internalType: 'uint40', type: 'uint40' },
              { name: 'guaranteeDays', internalType: 'uint16', type: 'uint16' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'guaranteedAmt', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSNList',
    outputs: [{ name: 'list', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isPledge',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'head',
        internalType: 'struct PledgesRepo.Head',
        type: 'tuple',
        components: [
          { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
          { name: 'seqOfPld', internalType: 'uint16', type: 'uint16' },
          { name: 'createDate', internalType: 'uint48', type: 'uint48' },
          { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
          { name: 'pledgor', internalType: 'uint40', type: 'uint40' },
          { name: 'debtor', internalType: 'uint40', type: 'uint40' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
      { name: 'creditor', internalType: 'uint256', type: 'uint256' },
      { name: 'guaranteeDays', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
      { name: 'guaranteedAmt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'issuePledge',
    outputs: [
      {
        name: 'regHead',
        internalType: 'struct PledgesRepo.Head',
        type: 'tuple',
        components: [
          { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
          { name: 'seqOfPld', internalType: 'uint16', type: 'uint16' },
          { name: 'createDate', internalType: 'uint48', type: 'uint48' },
          { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
          { name: 'pledgor', internalType: 'uint40', type: 'uint40' },
          { name: 'debtor', internalType: 'uint40', type: 'uint40' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'lockPledge',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'refundDebt',
    outputs: [
      {
        name: 'newPld',
        internalType: 'struct PledgesRepo.Pledge',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct PledgesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seqOfPld', internalType: 'uint16', type: 'uint16' },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
              { name: 'pledgor', internalType: 'uint40', type: 'uint40' },
              { name: 'debtor', internalType: 'uint40', type: 'uint40' },
              { name: 'data', internalType: 'uint32', type: 'uint32' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct PledgesRepo.Body',
            type: 'tuple',
            components: [
              { name: 'creditor', internalType: 'uint40', type: 'uint40' },
              { name: 'guaranteeDays', internalType: 'uint16', type: 'uint16' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'guaranteedAmt', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'pld',
        internalType: 'struct PledgesRepo.Pledge',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct PledgesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seqOfPld', internalType: 'uint16', type: 'uint16' },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
              { name: 'pledgor', internalType: 'uint40', type: 'uint40' },
              { name: 'debtor', internalType: 'uint40', type: 'uint40' },
              { name: 'data', internalType: 'uint32', type: 'uint32' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct PledgesRepo.Body',
            type: 'tuple',
            components: [
              { name: 'creditor', internalType: 'uint40', type: 'uint40' },
              { name: 'guaranteeDays', internalType: 'uint16', type: 'uint16' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'guaranteedAmt', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'regPledge',
    outputs: [
      {
        name: 'head',
        internalType: 'struct PledgesRepo.Head',
        type: 'tuple',
        components: [
          { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
          { name: 'seqOfPld', internalType: 'uint16', type: 'uint16' },
          { name: 'createDate', internalType: 'uint48', type: 'uint48' },
          { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
          { name: 'pledgor', internalType: 'uint40', type: 'uint40' },
          { name: 'debtor', internalType: 'uint40', type: 'uint40' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
    ],
    name: 'releasePledge',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokePledge',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfPld', internalType: 'uint256', type: 'uint256' },
      { name: 'buyer', internalType: 'uint256', type: 'uint256' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferPledge',
    outputs: [
      {
        name: 'newPld',
        internalType: 'struct PledgesRepo.Pledge',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct PledgesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seqOfPld', internalType: 'uint16', type: 'uint16' },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
              { name: 'pledgor', internalType: 'uint40', type: 'uint40' },
              { name: 'debtor', internalType: 'uint40', type: 'uint40' },
              { name: 'data', internalType: 'uint32', type: 'uint32' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct PledgesRepo.Body',
            type: 'tuple',
            components: [
              { name: 'creditor', internalType: 'uint40', type: 'uint40' },
              { name: 'guaranteeDays', internalType: 'uint16', type: 'uint16' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'guaranteedAmt', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BookOfShares
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const bookOfSharesABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'paid', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'DecreaseCleanPaid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'DeregisterShare',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'paid', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'IncreaseCleanPaid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'shareNumber',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'paid', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'par', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'IssueShare',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'PayInCapital',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RemoveDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetGeneralCounsel',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'snOfLocker',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'SetPayInAmt',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'paid', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'par', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SubAmountFromShare',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'state',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'UpdateStateOfShare',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'snOfLocker',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'WithdrawPayInAmt',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'counterOfClasses',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'counterOfShares',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseCapital',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseCleanPaid',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'finalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfShare', internalType: 'uint256', type: 'uint256' }],
    name: 'getBodyOfShare',
    outputs: [
      {
        name: 'body',
        internalType: 'struct SharesRepo.Body',
        type: 'tuple',
        components: [
          { name: 'payInDeadline', internalType: 'uint48', type: 'uint48' },
          { name: 'paid', internalType: 'uint64', type: 'uint64' },
          { name: 'par', internalType: 'uint64', type: 'uint64' },
          { name: 'cleanPaid', internalType: 'uint64', type: 'uint64' },
          { name: 'state', internalType: 'uint8', type: 'uint8' },
          { name: 'para', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBookeeper',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getGeneralCounsel',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfShare', internalType: 'uint256', type: 'uint256' }],
    name: 'getHeadOfShare',
    outputs: [
      {
        name: 'head',
        internalType: 'struct SharesRepo.Head',
        type: 'tuple',
        components: [
          { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
          { name: 'preSeq', internalType: 'uint32', type: 'uint32' },
          { name: 'class', internalType: 'uint16', type: 'uint16' },
          { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
          { name: 'shareholder', internalType: 'uint40', type: 'uint40' },
          { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
          { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'argu', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'snOfLocker', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getLocker',
    outputs: [{ name: 'amount', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfShare', internalType: 'uint256', type: 'uint256' }],
    name: 'getShare',
    outputs: [
      {
        name: 'share',
        internalType: 'struct SharesRepo.Share',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct SharesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'preSeq', internalType: 'uint32', type: 'uint32' },
              { name: 'class', internalType: 'uint16', type: 'uint16' },
              { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
              { name: 'shareholder', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct SharesRepo.Body',
            type: 'tuple',
            components: [
              { name: 'payInDeadline', internalType: 'uint48', type: 'uint48' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'cleanPaid', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint8', type: 'uint8' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'class', internalType: 'uint256', type: 'uint256' }],
    name: 'getSharesOfClass',
    outputs: [
      { name: 'seqList', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseCleanPaid',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'uint256', type: 'uint256' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfShare', internalType: 'uint256', type: 'uint256' }],
    name: 'isShare',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'shareNumber', internalType: 'bytes32', type: 'bytes32' },
      { name: 'payInDeadline', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'issueShare',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'share',
        internalType: 'struct SharesRepo.Share',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct SharesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'preSeq', internalType: 'uint32', type: 'uint32' },
              { name: 'class', internalType: 'uint16', type: 'uint16' },
              { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
              { name: 'shareholder', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct SharesRepo.Body',
            type: 'tuple',
            components: [
              { name: 'payInDeadline', internalType: 'uint48', type: 'uint48' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'cleanPaid', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint8', type: 'uint8' },
            ],
          },
        ],
      },
    ],
    name: 'regShare',
    outputs: [
      {
        name: 'newShare',
        internalType: 'struct SharesRepo.Share',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct SharesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'preSeq', internalType: 'uint32', type: 'uint32' },
              { name: 'class', internalType: 'uint16', type: 'uint16' },
              { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
              { name: 'shareholder', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct SharesRepo.Body',
            type: 'tuple',
            components: [
              { name: 'payInDeadline', internalType: 'uint48', type: 'uint48' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'cleanPaid', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint8', type: 'uint8' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'removeDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfLocker', internalType: 'bytes32', type: 'bytes32' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'requestPaidInCapital',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'keeper', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setGeneralCounsel',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfLocker', internalType: 'bytes32', type: 'bytes32' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setPayInAmt',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'uint256', type: 'uint256' },
      { name: 'priceOfPaid', internalType: 'uint256', type: 'uint256' },
      { name: 'priceOfPar', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferShare',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'state', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'updateStateOfShare',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'snOfLocker', internalType: 'bytes32', type: 'bytes32' }],
    name: 'withdrawPayInAmt',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IBookOfShares
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iBookOfSharesABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'paid', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'DecreaseCleanPaid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'DeregisterShare',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'paid', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'IncreaseCleanPaid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'shareNumber',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'paid', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'par', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'IssueShare',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'PayInCapital',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'snOfLocker',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'SetPayInAmt',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'paid', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'par', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SubAmountFromShare',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'state',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'UpdateStateOfShare',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'snOfLocker',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'WithdrawPayInAmt',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'counterOfClasses',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'counterOfShares',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseCapital',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseCleanPaid',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfShare', internalType: 'uint256', type: 'uint256' }],
    name: 'getBodyOfShare',
    outputs: [
      {
        name: 'body',
        internalType: 'struct SharesRepo.Body',
        type: 'tuple',
        components: [
          { name: 'payInDeadline', internalType: 'uint48', type: 'uint48' },
          { name: 'paid', internalType: 'uint64', type: 'uint64' },
          { name: 'par', internalType: 'uint64', type: 'uint64' },
          { name: 'cleanPaid', internalType: 'uint64', type: 'uint64' },
          { name: 'state', internalType: 'uint8', type: 'uint8' },
          { name: 'para', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfShare', internalType: 'uint256', type: 'uint256' }],
    name: 'getHeadOfShare',
    outputs: [
      {
        name: 'head',
        internalType: 'struct SharesRepo.Head',
        type: 'tuple',
        components: [
          { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
          { name: 'preSeq', internalType: 'uint32', type: 'uint32' },
          { name: 'class', internalType: 'uint16', type: 'uint16' },
          { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
          { name: 'shareholder', internalType: 'uint40', type: 'uint40' },
          { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
          { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'argu', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'snOfLocker', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getLocker',
    outputs: [{ name: 'amount', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfShare', internalType: 'uint256', type: 'uint256' }],
    name: 'getShare',
    outputs: [
      {
        name: 'share',
        internalType: 'struct SharesRepo.Share',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct SharesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'preSeq', internalType: 'uint32', type: 'uint32' },
              { name: 'class', internalType: 'uint16', type: 'uint16' },
              { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
              { name: 'shareholder', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct SharesRepo.Body',
            type: 'tuple',
            components: [
              { name: 'payInDeadline', internalType: 'uint48', type: 'uint48' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'cleanPaid', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint8', type: 'uint8' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'class', internalType: 'uint256', type: 'uint256' }],
    name: 'getSharesOfClass',
    outputs: [
      { name: 'seqList', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseCleanPaid',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfShare', internalType: 'uint256', type: 'uint256' }],
    name: 'isShare',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'shareNumber', internalType: 'bytes32', type: 'bytes32' },
      { name: 'payInDeadline', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'issueShare',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'share',
        internalType: 'struct SharesRepo.Share',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct SharesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'preSeq', internalType: 'uint32', type: 'uint32' },
              { name: 'class', internalType: 'uint16', type: 'uint16' },
              { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
              { name: 'shareholder', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct SharesRepo.Body',
            type: 'tuple',
            components: [
              { name: 'payInDeadline', internalType: 'uint48', type: 'uint48' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'cleanPaid', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint8', type: 'uint8' },
            ],
          },
        ],
      },
    ],
    name: 'regShare',
    outputs: [
      {
        name: 'newShare',
        internalType: 'struct SharesRepo.Share',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct SharesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'preSeq', internalType: 'uint32', type: 'uint32' },
              { name: 'class', internalType: 'uint16', type: 'uint16' },
              { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
              { name: 'shareholder', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct SharesRepo.Body',
            type: 'tuple',
            components: [
              { name: 'payInDeadline', internalType: 'uint48', type: 'uint48' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'cleanPaid', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint8', type: 'uint8' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'requestPaidInCapital',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfLocker', internalType: 'bytes32', type: 'bytes32' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setPayInAmt',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'uint256', type: 'uint256' },
      { name: 'priceOfPaid', internalType: 'uint256', type: 'uint256' },
      { name: 'priceOfPar', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferShare',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'state', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'updateStateOfShare',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'hashLock', internalType: 'bytes32', type: 'bytes32' }],
    name: 'withdrawPayInAmt',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IRegisterOfMembers
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iRegisterOfMembersABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
      {
        name: 'qtyOfMembers',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'AddMember',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'root', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'AddMemberToGroup',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'AddShareToMember',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'paid', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'par', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'CapDecrease',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'paid', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'par', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'CapIncrease',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'paid', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'par', internalType: 'uint256', type: 'uint256', indexed: true },
      {
        name: 'clean',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'increase', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ChangeAmtOfMember',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'orgRep',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'newRep',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ChangeGroupRep',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'root', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'RemoveMemberFromGroup',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'RemoveShareFromMember',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'basedOnPar', internalType: 'bool', type: 'bool', indexed: true },
    ],
    name: 'SetAmtBase',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'max', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetMaxQtyOfMembers',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'basedOnPar', internalType: 'bool', type: 'bool', indexed: true },
    ],
    name: 'SetVoteBase',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'addMember',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
      { name: 'root', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addMemberToGroup',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'share',
        internalType: 'struct SharesRepo.Share',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct SharesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'preSeq', internalType: 'uint32', type: 'uint32' },
              { name: 'class', internalType: 'uint16', type: 'uint16' },
              { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
              { name: 'shareholder', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct SharesRepo.Body',
            type: 'tuple',
            components: [
              { name: 'payInDeadline', internalType: 'uint48', type: 'uint48' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'cleanPaid', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint8', type: 'uint8' },
            ],
          },
        ],
      },
    ],
    name: 'addShareToMember',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'acct1', internalType: 'uint256', type: 'uint256' },
      { name: 'acct2', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'affiliated',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'basedOnPar',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'date', internalType: 'uint256', type: 'uint256' }],
    name: 'capAtDate',
    outputs: [
      {
        name: 'cap',
        internalType: 'struct Checkpoints.Checkpoint',
        type: 'tuple',
        components: [
          { name: 'timestamp', internalType: 'uint48', type: 'uint48' },
          { name: 'paid', internalType: 'uint64', type: 'uint64' },
          { name: 'par', internalType: 'uint64', type: 'uint64' },
          { name: 'cleanPaid', internalType: 'uint64', type: 'uint64' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'capDecrease',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'capIncrease',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
      { name: 'deltaPaid', internalType: 'uint256', type: 'uint256' },
      { name: 'deltaPar', internalType: 'uint256', type: 'uint256' },
      { name: 'deltaClean', internalType: 'uint256', type: 'uint256' },
      { name: 'decrease', internalType: 'bool', type: 'bool' },
    ],
    name: 'changeAmtOfMember',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'controllor',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'deepOfGroup',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'class', internalType: 'uint256', type: 'uint256' }],
    name: 'getMembersOfClass',
    outputs: [
      { name: 'members', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getNumOfMembers',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSnapshot',
    outputs: [
      {
        name: '',
        internalType: 'struct TopChain.Node[]',
        type: 'tuple[]',
        components: [
          { name: 'prev', internalType: 'uint40', type: 'uint40' },
          { name: 'next', internalType: 'uint40', type: 'uint40' },
          { name: 'ptr', internalType: 'uint40', type: 'uint40' },
          { name: 'amt', internalType: 'uint64', type: 'uint64' },
          { name: 'sum', internalType: 'uint64', type: 'uint64' },
          { name: 'cat', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'groupRep',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
      { name: 'class', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isClassMember',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'isGroupRep',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'isMember',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'sharenumber', internalType: 'bytes32', type: 'bytes32' }],
    name: 'isSNOfShare',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'maxQtyOfMembers',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'membersList',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'membersOfGroup',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ownersEquity',
    outputs: [
      {
        name: 'cap',
        internalType: 'struct Checkpoints.Checkpoint',
        type: 'tuple',
        components: [
          { name: 'timestamp', internalType: 'uint48', type: 'uint48' },
          { name: 'paid', internalType: 'uint64', type: 'uint64' },
          { name: 'par', internalType: 'uint64', type: 'uint64' },
          { name: 'cleanPaid', internalType: 'uint64', type: 'uint64' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'qtyOfGroups',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
      { name: 'root', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeMemberFromGroup',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'share',
        internalType: 'struct SharesRepo.Share',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct SharesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'preSeq', internalType: 'uint32', type: 'uint32' },
              { name: 'class', internalType: 'uint16', type: 'uint16' },
              { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
              { name: 'shareholder', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct SharesRepo.Body',
            type: 'tuple',
            components: [
              { name: 'payInDeadline', internalType: 'uint48', type: 'uint48' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'cleanPaid', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint8', type: 'uint8' },
            ],
          },
        ],
      },
    ],
    name: 'removeShareFromMember',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'basedOnPar', internalType: 'bool', type: 'bool' }],
    name: 'setAmtBase',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'max', internalType: 'uint256', type: 'uint256' }],
    name: 'setMaxQtyOfMembers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'onPar', internalType: 'bool', type: 'bool' }],
    name: 'setVoteBase',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'sharesClipOfMember',
    outputs: [
      {
        name: 'clip',
        internalType: 'struct Checkpoints.Checkpoint',
        type: 'tuple',
        components: [
          { name: 'timestamp', internalType: 'uint48', type: 'uint48' },
          { name: 'paid', internalType: 'uint64', type: 'uint64' },
          { name: 'par', internalType: 'uint64', type: 'uint64' },
          { name: 'cleanPaid', internalType: 'uint64', type: 'uint64' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'sharesInHand',
    outputs: [{ name: '', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'sharesList',
    outputs: [{ name: '', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalVotes',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
      { name: 'date', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'votesAtDate',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'votesInHand',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'votesOfController',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'votesOfGroup',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// RegisterOfMembers
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const registerOfMembersABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
      {
        name: 'qtyOfMembers',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'AddMember',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'root', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'AddMemberToGroup',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'AddShareToMember',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'paid', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'par', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'CapDecrease',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'paid', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'par', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'CapIncrease',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'paid', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'par', internalType: 'uint256', type: 'uint256', indexed: true },
      {
        name: 'clean',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'increase', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ChangeAmtOfMember',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'orgRep',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'newRep',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ChangeGroupRep',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RemoveDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'root', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'RemoveMemberFromGroup',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfShare',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'RemoveShareFromMember',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'basedOnPar', internalType: 'bool', type: 'bool', indexed: true },
    ],
    name: 'SetAmtBase',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetGeneralCounsel',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'max', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetMaxQtyOfMembers',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'basedOnPar', internalType: 'bool', type: 'bool', indexed: true },
    ],
    name: 'SetVoteBase',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'addMember',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
      { name: 'root', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addMemberToGroup',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'share',
        internalType: 'struct SharesRepo.Share',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct SharesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'preSeq', internalType: 'uint32', type: 'uint32' },
              { name: 'class', internalType: 'uint16', type: 'uint16' },
              { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
              { name: 'shareholder', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct SharesRepo.Body',
            type: 'tuple',
            components: [
              { name: 'payInDeadline', internalType: 'uint48', type: 'uint48' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'cleanPaid', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint8', type: 'uint8' },
            ],
          },
        ],
      },
    ],
    name: 'addShareToMember',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'acct1', internalType: 'uint256', type: 'uint256' },
      { name: 'acct2', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'affiliated',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'basedOnPar',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'date', internalType: 'uint256', type: 'uint256' }],
    name: 'capAtDate',
    outputs: [
      {
        name: 'cap',
        internalType: 'struct Checkpoints.Checkpoint',
        type: 'tuple',
        components: [
          { name: 'timestamp', internalType: 'uint48', type: 'uint48' },
          { name: 'paid', internalType: 'uint64', type: 'uint64' },
          { name: 'par', internalType: 'uint64', type: 'uint64' },
          { name: 'cleanPaid', internalType: 'uint64', type: 'uint64' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'capDecrease',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'capIncrease',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
      { name: 'deltaPaid', internalType: 'uint256', type: 'uint256' },
      { name: 'deltaPar', internalType: 'uint256', type: 'uint256' },
      { name: 'deltaClean', internalType: 'uint256', type: 'uint256' },
      { name: 'increase', internalType: 'bool', type: 'bool' },
    ],
    name: 'changeAmtOfMember',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'controllor',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'deepOfGroup',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'finalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBookeeper',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getGeneralCounsel',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'class', internalType: 'uint256', type: 'uint256' }],
    name: 'getMembersOfClass',
    outputs: [
      { name: 'members', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getNumOfMembers',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSnapshot',
    outputs: [
      {
        name: '',
        internalType: 'struct TopChain.Node[]',
        type: 'tuple[]',
        components: [
          { name: 'prev', internalType: 'uint40', type: 'uint40' },
          { name: 'next', internalType: 'uint40', type: 'uint40' },
          { name: 'ptr', internalType: 'uint40', type: 'uint40' },
          { name: 'amt', internalType: 'uint64', type: 'uint64' },
          { name: 'sum', internalType: 'uint64', type: 'uint64' },
          { name: 'cat', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'groupRep',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'uint256', type: 'uint256' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
      { name: 'class', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isClassMember',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'isGroupRep',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'isMember',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'sharenumber', internalType: 'bytes32', type: 'bytes32' }],
    name: 'isSNOfShare',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'maxQtyOfMembers',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'membersList',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'membersOfGroup',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ownersEquity',
    outputs: [
      {
        name: 'cap',
        internalType: 'struct Checkpoints.Checkpoint',
        type: 'tuple',
        components: [
          { name: 'timestamp', internalType: 'uint48', type: 'uint48' },
          { name: 'paid', internalType: 'uint64', type: 'uint64' },
          { name: 'par', internalType: 'uint64', type: 'uint64' },
          { name: 'cleanPaid', internalType: 'uint64', type: 'uint64' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'qtyOfGroups',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'removeDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
      { name: 'root', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeMemberFromGroup',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'share',
        internalType: 'struct SharesRepo.Share',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct SharesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'preSeq', internalType: 'uint32', type: 'uint32' },
              { name: 'class', internalType: 'uint16', type: 'uint16' },
              { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
              { name: 'shareholder', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct SharesRepo.Body',
            type: 'tuple',
            components: [
              { name: 'payInDeadline', internalType: 'uint48', type: 'uint48' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'cleanPaid', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint8', type: 'uint8' },
            ],
          },
        ],
      },
    ],
    name: 'removeShareFromMember',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'onPar', internalType: 'bool', type: 'bool' }],
    name: 'setAmtBase',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'keeper', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setGeneralCounsel',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'max', internalType: 'uint256', type: 'uint256' }],
    name: 'setMaxQtyOfMembers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'onPar', internalType: 'bool', type: 'bool' }],
    name: 'setVoteBase',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'sharesClipOfMember',
    outputs: [
      {
        name: 'clip',
        internalType: 'struct Checkpoints.Checkpoint',
        type: 'tuple',
        components: [
          { name: 'timestamp', internalType: 'uint48', type: 'uint48' },
          { name: 'paid', internalType: 'uint64', type: 'uint64' },
          { name: 'par', internalType: 'uint64', type: 'uint64' },
          { name: 'cleanPaid', internalType: 'uint64', type: 'uint64' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'sharesInHand',
    outputs: [{ name: 'list', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'sharesList',
    outputs: [{ name: '', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalVotes',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
      { name: 'date', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'votesAtDate',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'votesInHand',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'votesOfController',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'votesOfGroup',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IRegisterOfSwaps
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iRegisterOfSwapsABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfSwap',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'rightholder',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'obligor',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'paidOfConsider',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'rateOfSwap',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'CreateSwap',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfSwap',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'seqOfConsider',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'paidOfConsider',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'seqOfTarget',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'paidOfTarget',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'CrystalizeSwap',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfSwap',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ExecSwap',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfSwap',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'hashLock',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'LockSwap',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfSwap',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'hashKey',
        internalType: 'string',
        type: 'string',
        indexed: true,
      },
    ],
    name: 'ReleaseSwap',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfSwap',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'RevokeSwap',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'counterOfSwap',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfSwap', internalType: 'bytes32', type: 'bytes32' },
      { name: 'rightholder', internalType: 'uint256', type: 'uint256' },
      { name: 'paidOfConsider', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createSwap',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfConsider', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfTarget', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'crystalizeSwap',
    outputs: [
      {
        name: 'body',
        internalType: 'struct SwapsRepo.Body',
        type: 'tuple',
        components: [
          { name: 'rightholder', internalType: 'uint40', type: 'uint40' },
          { name: 'seqOfConsider', internalType: 'uint32', type: 'uint32' },
          { name: 'paidOfConsider', internalType: 'uint64', type: 'uint64' },
          { name: 'seqOfTarget', internalType: 'uint32', type: 'uint32' },
          { name: 'paidOfTarget', internalType: 'uint64', type: 'uint64' },
          { name: 'state', internalType: 'uint8', type: 'uint8' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' }],
    name: 'execSwap',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAllSwaps',
    outputs: [
      {
        name: '',
        internalType: 'struct SwapsRepo.Swap[]',
        type: 'tuple[]',
        components: [
          {
            name: 'head',
            internalType: 'struct SwapsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfSwap', internalType: 'uint32', type: 'uint32' },
              { name: 'classOfTarget', internalType: 'uint16', type: 'uint16' },
              {
                name: 'classOfConsider',
                internalType: 'uint16',
                type: 'uint16',
              },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
              { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
              { name: 'obligor', internalType: 'uint40', type: 'uint40' },
              { name: 'rateOfSwap', internalType: 'uint32', type: 'uint32' },
              { name: 'para', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct SwapsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'rightholder', internalType: 'uint40', type: 'uint40' },
              { name: 'seqOfConsider', internalType: 'uint32', type: 'uint32' },
              {
                name: 'paidOfConsider',
                internalType: 'uint64',
                type: 'uint64',
              },
              { name: 'seqOfTarget', internalType: 'uint32', type: 'uint32' },
              { name: 'paidOfTarget', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSNList',
    outputs: [{ name: '', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' }],
    name: 'getSwap',
    outputs: [
      {
        name: '',
        internalType: 'struct SwapsRepo.Swap',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct SwapsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfSwap', internalType: 'uint32', type: 'uint32' },
              { name: 'classOfTarget', internalType: 'uint16', type: 'uint16' },
              {
                name: 'classOfConsider',
                internalType: 'uint16',
                type: 'uint16',
              },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
              { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
              { name: 'obligor', internalType: 'uint40', type: 'uint40' },
              { name: 'rateOfSwap', internalType: 'uint32', type: 'uint32' },
              { name: 'para', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct SwapsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'rightholder', internalType: 'uint40', type: 'uint40' },
              { name: 'seqOfConsider', internalType: 'uint32', type: 'uint32' },
              {
                name: 'paidOfConsider',
                internalType: 'uint64',
                type: 'uint64',
              },
              { name: 'seqOfTarget', internalType: 'uint32', type: 'uint32' },
              { name: 'paidOfTarget', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'snOfSwap', internalType: 'bytes32', type: 'bytes32' }],
    name: 'isSwapSN',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' }],
    name: 'isSwapSeq',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'head',
        internalType: 'struct SwapsRepo.Head',
        type: 'tuple',
        components: [
          { name: 'seqOfSwap', internalType: 'uint32', type: 'uint32' },
          { name: 'classOfTarget', internalType: 'uint16', type: 'uint16' },
          { name: 'classOfConsider', internalType: 'uint16', type: 'uint16' },
          { name: 'createDate', internalType: 'uint48', type: 'uint48' },
          { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
          { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
          { name: 'obligor', internalType: 'uint40', type: 'uint40' },
          { name: 'rateOfSwap', internalType: 'uint32', type: 'uint32' },
          { name: 'para', internalType: 'uint8', type: 'uint8' },
        ],
      },
      { name: 'rightholder', internalType: 'uint256', type: 'uint256' },
      { name: 'paidOfConsider', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'issueSwap',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' },
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'lockSwap',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'swap',
        internalType: 'struct SwapsRepo.Swap',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct SwapsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfSwap', internalType: 'uint32', type: 'uint32' },
              { name: 'classOfTarget', internalType: 'uint16', type: 'uint16' },
              {
                name: 'classOfConsider',
                internalType: 'uint16',
                type: 'uint16',
              },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
              { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
              { name: 'obligor', internalType: 'uint40', type: 'uint40' },
              { name: 'rateOfSwap', internalType: 'uint32', type: 'uint32' },
              { name: 'para', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct SwapsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'rightholder', internalType: 'uint40', type: 'uint40' },
              { name: 'seqOfConsider', internalType: 'uint32', type: 'uint32' },
              {
                name: 'paidOfConsider',
                internalType: 'uint64',
                type: 'uint64',
              },
              { name: 'seqOfTarget', internalType: 'uint32', type: 'uint32' },
              { name: 'paidOfTarget', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'regSwap',
    outputs: [
      {
        name: 'newSwap',
        internalType: 'struct SwapsRepo.Swap',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct SwapsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfSwap', internalType: 'uint32', type: 'uint32' },
              { name: 'classOfTarget', internalType: 'uint16', type: 'uint16' },
              {
                name: 'classOfConsider',
                internalType: 'uint16',
                type: 'uint16',
              },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
              { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
              { name: 'obligor', internalType: 'uint40', type: 'uint40' },
              { name: 'rateOfSwap', internalType: 'uint32', type: 'uint32' },
              { name: 'para', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct SwapsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'rightholder', internalType: 'uint40', type: 'uint40' },
              { name: 'seqOfConsider', internalType: 'uint32', type: 'uint32' },
              {
                name: 'paidOfConsider',
                internalType: 'uint64',
                type: 'uint64',
              },
              { name: 'seqOfTarget', internalType: 'uint32', type: 'uint32' },
              { name: 'paidOfTarget', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
    ],
    name: 'releaseSwap',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' }],
    name: 'revokeSwap',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'uint256', type: 'uint256' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferSwap',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// RegisterOfSwaps
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const registerOfSwapsABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfSwap',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'rightholder',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'obligor',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'paidOfConsider',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'rateOfSwap',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'CreateSwap',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfSwap',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'seqOfConsider',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'paidOfConsider',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'seqOfTarget',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'paidOfTarget',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'CrystalizeSwap',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfSwap',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ExecSwap',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfSwap',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'hashLock',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'LockSwap',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfSwap',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'hashKey',
        internalType: 'string',
        type: 'string',
        indexed: true,
      },
    ],
    name: 'ReleaseSwap',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RemoveDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfSwap',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'RevokeSwap',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetGeneralCounsel',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'counterOfSwap',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfSwap', internalType: 'bytes32', type: 'bytes32' },
      { name: 'rightholder', internalType: 'uint256', type: 'uint256' },
      { name: 'paidOfConsider', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createSwap',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfConsider', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfTarget', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'crystalizeSwap',
    outputs: [
      {
        name: 'body',
        internalType: 'struct SwapsRepo.Body',
        type: 'tuple',
        components: [
          { name: 'rightholder', internalType: 'uint40', type: 'uint40' },
          { name: 'seqOfConsider', internalType: 'uint32', type: 'uint32' },
          { name: 'paidOfConsider', internalType: 'uint64', type: 'uint64' },
          { name: 'seqOfTarget', internalType: 'uint32', type: 'uint32' },
          { name: 'paidOfTarget', internalType: 'uint64', type: 'uint64' },
          { name: 'state', internalType: 'uint8', type: 'uint8' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' }],
    name: 'execSwap',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'finalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAllSwaps',
    outputs: [
      {
        name: '',
        internalType: 'struct SwapsRepo.Swap[]',
        type: 'tuple[]',
        components: [
          {
            name: 'head',
            internalType: 'struct SwapsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfSwap', internalType: 'uint32', type: 'uint32' },
              { name: 'classOfTarget', internalType: 'uint16', type: 'uint16' },
              {
                name: 'classOfConsider',
                internalType: 'uint16',
                type: 'uint16',
              },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
              { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
              { name: 'obligor', internalType: 'uint40', type: 'uint40' },
              { name: 'rateOfSwap', internalType: 'uint32', type: 'uint32' },
              { name: 'para', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct SwapsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'rightholder', internalType: 'uint40', type: 'uint40' },
              { name: 'seqOfConsider', internalType: 'uint32', type: 'uint32' },
              {
                name: 'paidOfConsider',
                internalType: 'uint64',
                type: 'uint64',
              },
              { name: 'seqOfTarget', internalType: 'uint32', type: 'uint32' },
              { name: 'paidOfTarget', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBookeeper',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getGeneralCounsel',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSNList',
    outputs: [{ name: '', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' }],
    name: 'getSwap',
    outputs: [
      {
        name: '',
        internalType: 'struct SwapsRepo.Swap',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct SwapsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfSwap', internalType: 'uint32', type: 'uint32' },
              { name: 'classOfTarget', internalType: 'uint16', type: 'uint16' },
              {
                name: 'classOfConsider',
                internalType: 'uint16',
                type: 'uint16',
              },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
              { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
              { name: 'obligor', internalType: 'uint40', type: 'uint40' },
              { name: 'rateOfSwap', internalType: 'uint32', type: 'uint32' },
              { name: 'para', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct SwapsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'rightholder', internalType: 'uint40', type: 'uint40' },
              { name: 'seqOfConsider', internalType: 'uint32', type: 'uint32' },
              {
                name: 'paidOfConsider',
                internalType: 'uint64',
                type: 'uint64',
              },
              { name: 'seqOfTarget', internalType: 'uint32', type: 'uint32' },
              { name: 'paidOfTarget', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'uint256', type: 'uint256' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'snOfSwap', internalType: 'bytes32', type: 'bytes32' }],
    name: 'isSwapSN',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' }],
    name: 'isSwapSeq',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'head',
        internalType: 'struct SwapsRepo.Head',
        type: 'tuple',
        components: [
          { name: 'seqOfSwap', internalType: 'uint32', type: 'uint32' },
          { name: 'classOfTarget', internalType: 'uint16', type: 'uint16' },
          { name: 'classOfConsider', internalType: 'uint16', type: 'uint16' },
          { name: 'createDate', internalType: 'uint48', type: 'uint48' },
          { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
          { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
          { name: 'obligor', internalType: 'uint40', type: 'uint40' },
          { name: 'rateOfSwap', internalType: 'uint32', type: 'uint32' },
          { name: 'para', internalType: 'uint8', type: 'uint8' },
        ],
      },
      { name: 'rightholder', internalType: 'uint256', type: 'uint256' },
      { name: 'paidOfConsider', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'issueSwap',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' },
      { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'lockSwap',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'swap',
        internalType: 'struct SwapsRepo.Swap',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct SwapsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfSwap', internalType: 'uint32', type: 'uint32' },
              { name: 'classOfTarget', internalType: 'uint16', type: 'uint16' },
              {
                name: 'classOfConsider',
                internalType: 'uint16',
                type: 'uint16',
              },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
              { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
              { name: 'obligor', internalType: 'uint40', type: 'uint40' },
              { name: 'rateOfSwap', internalType: 'uint32', type: 'uint32' },
              { name: 'para', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct SwapsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'rightholder', internalType: 'uint40', type: 'uint40' },
              { name: 'seqOfConsider', internalType: 'uint32', type: 'uint32' },
              {
                name: 'paidOfConsider',
                internalType: 'uint64',
                type: 'uint64',
              },
              { name: 'seqOfTarget', internalType: 'uint32', type: 'uint32' },
              { name: 'paidOfTarget', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'regSwap',
    outputs: [
      {
        name: 'newSwap',
        internalType: 'struct SwapsRepo.Swap',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct SwapsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfSwap', internalType: 'uint32', type: 'uint32' },
              { name: 'classOfTarget', internalType: 'uint16', type: 'uint16' },
              {
                name: 'classOfConsider',
                internalType: 'uint16',
                type: 'uint16',
              },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
              { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
              { name: 'obligor', internalType: 'uint40', type: 'uint40' },
              { name: 'rateOfSwap', internalType: 'uint32', type: 'uint32' },
              { name: 'para', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct SwapsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'rightholder', internalType: 'uint40', type: 'uint40' },
              { name: 'seqOfConsider', internalType: 'uint32', type: 'uint32' },
              {
                name: 'paidOfConsider',
                internalType: 'uint64',
                type: 'uint64',
              },
              { name: 'seqOfTarget', internalType: 'uint32', type: 'uint32' },
              { name: 'paidOfTarget', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' },
      { name: 'hashKey', internalType: 'string', type: 'string' },
    ],
    name: 'releaseSwap',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'removeDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' }],
    name: 'revokeSwap',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'keeper', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setGeneralCounsel',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfSwap', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'uint256', type: 'uint256' },
      { name: 'amt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferSwap',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AccessControl
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const accessControlABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RemoveDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetGeneralCounsel',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'finalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBookeeper',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getGeneralCounsel',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'uint256', type: 'uint256' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'removeDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'keeper', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setGeneralCounsel',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IAccessControl
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iAccessControlABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RemoveDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetGeneralCounsel',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'finalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBookeeper',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getGeneralCounsel',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'uint256', type: 'uint256' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'removeDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'keeper', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setGeneralCounsel',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// FilesFolder
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const filesFolderABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RemoveDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetGeneralCounsel',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'body', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'state',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'UpdateStateOfFile',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'body', internalType: 'address', type: 'address' },
      { name: 'signingDays', internalType: 'uint16', type: 'uint16' },
      { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
      {
        name: 'vr',
        internalType: 'struct RulesParser.VotingRule',
        type: 'tuple',
        components: [
          { name: 'seqOfRule', internalType: 'uint16', type: 'uint16' },
          { name: 'qtyOfSubRule', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfSubRule', internalType: 'uint8', type: 'uint8' },
          { name: 'authority', internalType: 'uint16', type: 'uint16' },
          { name: 'headRatio', internalType: 'uint16', type: 'uint16' },
          { name: 'amountRatio', internalType: 'uint16', type: 'uint16' },
          { name: 'onlyAttendance', internalType: 'bool', type: 'bool' },
          { name: 'impliedConsent', internalType: 'bool', type: 'bool' },
          { name: 'partyAsConsent', internalType: 'bool', type: 'bool' },
          { name: 'againstShallBuy', internalType: 'bool', type: 'bool' },
          { name: 'shaExecDays', internalType: 'uint8', type: 'uint8' },
          { name: 'shaConfirmDays', internalType: 'uint8', type: 'uint8' },
          { name: 'reconsiderDays', internalType: 'uint8', type: 'uint8' },
          { name: 'votePrepareDays', internalType: 'uint8', type: 'uint8' },
          { name: 'votingDays', internalType: 'uint8', type: 'uint8' },
          { name: 'execDaysForPutOpt', internalType: 'uint8', type: 'uint8' },
          { name: 'vetoers', internalType: 'uint40[2]', type: 'uint40[2]' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
        ],
      },
      { name: 'docUrl', internalType: 'bytes32', type: 'bytes32' },
      { name: 'docHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'circulateFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'closingDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'establishFile',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'execFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'finalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBookeeper',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'getFile',
    outputs: [
      {
        name: '',
        internalType: 'struct FilesRepo.File',
        type: 'tuple',
        components: [
          { name: 'snOfDoc', internalType: 'bytes32', type: 'bytes32' },
          {
            name: 'head',
            internalType: 'struct FilesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'circulateDate', internalType: 'uint48', type: 'uint48' },
              { name: 'signingDays', internalType: 'uint8', type: 'uint8' },
              { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
              { name: 'shaExecDays', internalType: 'uint8', type: 'uint8' },
              { name: 'shaConfirmDays', internalType: 'uint8', type: 'uint8' },
              { name: 'proposeDate', internalType: 'uint48', type: 'uint48' },
              { name: 'reconsiderDays', internalType: 'uint8', type: 'uint8' },
              { name: 'votePrepareDays', internalType: 'uint8', type: 'uint8' },
              { name: 'votingDays', internalType: 'uint8', type: 'uint8' },
              {
                name: 'execDaysForPutOpt',
                internalType: 'uint8',
                type: 'uint8',
              },
              { name: 'seqOfMotion', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'ref',
            internalType: 'struct FilesRepo.Ref',
            type: 'tuple',
            components: [
              { name: 'docUrl', internalType: 'bytes32', type: 'bytes32' },
              { name: 'docHash', internalType: 'bytes32', type: 'bytes32' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getFilesList',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getGeneralCounsel',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'getHeadOfFile',
    outputs: [
      {
        name: 'head',
        internalType: 'struct FilesRepo.Head',
        type: 'tuple',
        components: [
          { name: 'circulateDate', internalType: 'uint48', type: 'uint48' },
          { name: 'signingDays', internalType: 'uint8', type: 'uint8' },
          { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
          { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
          { name: 'shaExecDays', internalType: 'uint8', type: 'uint8' },
          { name: 'shaConfirmDays', internalType: 'uint8', type: 'uint8' },
          { name: 'proposeDate', internalType: 'uint48', type: 'uint48' },
          { name: 'reconsiderDays', internalType: 'uint8', type: 'uint8' },
          { name: 'votePrepareDays', internalType: 'uint8', type: 'uint8' },
          { name: 'votingDays', internalType: 'uint8', type: 'uint8' },
          { name: 'execDaysForPutOpt', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfMotion', internalType: 'uint64', type: 'uint64' },
          { name: 'state', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'getRefOfFile',
    outputs: [
      {
        name: 'ref',
        internalType: 'struct FilesRepo.Ref',
        type: 'tuple',
        components: [
          { name: 'docUrl', internalType: 'bytes32', type: 'bytes32' },
          { name: 'docHash', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'getSNOfFile',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'uint256', type: 'uint256' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'isRegistered',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'body', internalType: 'address', type: 'address' },
      { name: 'seqOfMotion', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'proposeFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'qtyOfFiles',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfDoc', internalType: 'bytes32', type: 'bytes32' },
      { name: 'body', internalType: 'address', type: 'address' },
    ],
    name: 'regFile',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'removeDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'keeper', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setGeneralCounsel',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'body', internalType: 'address', type: 'address' },
      { name: 'state', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setStateOfFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'shaExecDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'signingDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'terminateFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'terminateStartpoint',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'body', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'voteCountingForFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'votingDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IFilesFolder
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iFilesFolderABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'body', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'state',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'UpdateStateOfFile',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'body', internalType: 'address', type: 'address' },
      { name: 'signingDays', internalType: 'uint16', type: 'uint16' },
      { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
      {
        name: 'vr',
        internalType: 'struct RulesParser.VotingRule',
        type: 'tuple',
        components: [
          { name: 'seqOfRule', internalType: 'uint16', type: 'uint16' },
          { name: 'qtyOfSubRule', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfSubRule', internalType: 'uint8', type: 'uint8' },
          { name: 'authority', internalType: 'uint16', type: 'uint16' },
          { name: 'headRatio', internalType: 'uint16', type: 'uint16' },
          { name: 'amountRatio', internalType: 'uint16', type: 'uint16' },
          { name: 'onlyAttendance', internalType: 'bool', type: 'bool' },
          { name: 'impliedConsent', internalType: 'bool', type: 'bool' },
          { name: 'partyAsConsent', internalType: 'bool', type: 'bool' },
          { name: 'againstShallBuy', internalType: 'bool', type: 'bool' },
          { name: 'shaExecDays', internalType: 'uint8', type: 'uint8' },
          { name: 'shaConfirmDays', internalType: 'uint8', type: 'uint8' },
          { name: 'reconsiderDays', internalType: 'uint8', type: 'uint8' },
          { name: 'votePrepareDays', internalType: 'uint8', type: 'uint8' },
          { name: 'votingDays', internalType: 'uint8', type: 'uint8' },
          { name: 'execDaysForPutOpt', internalType: 'uint8', type: 'uint8' },
          { name: 'vetoers', internalType: 'uint40[2]', type: 'uint40[2]' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
        ],
      },
      { name: 'docUrl', internalType: 'bytes32', type: 'bytes32' },
      { name: 'docHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'circulateFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'closingDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'establishFile',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'execFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'getFile',
    outputs: [
      {
        name: '',
        internalType: 'struct FilesRepo.File',
        type: 'tuple',
        components: [
          { name: 'snOfDoc', internalType: 'bytes32', type: 'bytes32' },
          {
            name: 'head',
            internalType: 'struct FilesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'circulateDate', internalType: 'uint48', type: 'uint48' },
              { name: 'signingDays', internalType: 'uint8', type: 'uint8' },
              { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
              { name: 'shaExecDays', internalType: 'uint8', type: 'uint8' },
              { name: 'shaConfirmDays', internalType: 'uint8', type: 'uint8' },
              { name: 'proposeDate', internalType: 'uint48', type: 'uint48' },
              { name: 'reconsiderDays', internalType: 'uint8', type: 'uint8' },
              { name: 'votePrepareDays', internalType: 'uint8', type: 'uint8' },
              { name: 'votingDays', internalType: 'uint8', type: 'uint8' },
              {
                name: 'execDaysForPutOpt',
                internalType: 'uint8',
                type: 'uint8',
              },
              { name: 'seqOfMotion', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'ref',
            internalType: 'struct FilesRepo.Ref',
            type: 'tuple',
            components: [
              { name: 'docUrl', internalType: 'bytes32', type: 'bytes32' },
              { name: 'docHash', internalType: 'bytes32', type: 'bytes32' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getFilesList',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'getHeadOfFile',
    outputs: [
      {
        name: 'head',
        internalType: 'struct FilesRepo.Head',
        type: 'tuple',
        components: [
          { name: 'circulateDate', internalType: 'uint48', type: 'uint48' },
          { name: 'signingDays', internalType: 'uint8', type: 'uint8' },
          { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
          { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
          { name: 'shaExecDays', internalType: 'uint8', type: 'uint8' },
          { name: 'shaConfirmDays', internalType: 'uint8', type: 'uint8' },
          { name: 'proposeDate', internalType: 'uint48', type: 'uint48' },
          { name: 'reconsiderDays', internalType: 'uint8', type: 'uint8' },
          { name: 'votePrepareDays', internalType: 'uint8', type: 'uint8' },
          { name: 'votingDays', internalType: 'uint8', type: 'uint8' },
          { name: 'execDaysForPutOpt', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfMotion', internalType: 'uint64', type: 'uint64' },
          { name: 'state', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'getRefOfFile',
    outputs: [
      {
        name: 'ref',
        internalType: 'struct FilesRepo.Ref',
        type: 'tuple',
        components: [
          { name: 'docUrl', internalType: 'bytes32', type: 'bytes32' },
          { name: 'docHash', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'getSNOfFile',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'isRegistered',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'body', internalType: 'address', type: 'address' },
      { name: 'seqOfMotion', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'proposeFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'qtyOfFiles',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfDoc', internalType: 'bytes32', type: 'bytes32' },
      { name: 'body', internalType: 'address', type: 'address' },
    ],
    name: 'regFile',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'body', internalType: 'address', type: 'address' },
      { name: 'state', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setStateOfFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'shaExecDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'signingDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'terminateFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'terminateStartpoint',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'body', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'voteCountingForFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'body', internalType: 'address', type: 'address' }],
    name: 'votingDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IMeetingMinutes
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iMeetingMinutesABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfMotion',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'caller',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'attitude',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'sigHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
    ],
    name: 'CastVoteInBoardMeeting',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfMotion',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'caller',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'attitude',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'sigHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
    ],
    name: 'CastVoteInGeneralMeeting',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'snOfMotion',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'contents',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'CreateMotion',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfMotion',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'delegate',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'principal',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'EntrustDelegate',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfMotion',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'caller',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ExecResolution',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfMotion',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'proposer',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ProposeMotionToBoard',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfMotion',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'proposer',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ProposeMotionToGeneralMeeting',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfMotion',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'result', internalType: 'uint8', type: 'uint8', indexed: true },
    ],
    name: 'VoteCounting',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'attitude', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'castVoteInBoardMeeting',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'attitude', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'castVoteInGeneralMeeting',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'params', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'desHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'executor', internalType: 'uint256', type: 'uint256' },
      { name: 'proposer', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createAction',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'doc', internalType: 'address', type: 'address' },
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'executor', internalType: 'uint256', type: 'uint256' },
      { name: 'proposer', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createMotionToApproveDoc',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'nominator', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createMotionToRemoveOfficer',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'delegate', internalType: 'uint256', type: 'uint256' },
      { name: 'principal', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'entrustDelegate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'params', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'desHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execAction',
    outputs: [{ name: 'contents', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'contents', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execResolution',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getBallot',
    outputs: [
      {
        name: '',
        internalType: 'struct BallotsBox.Ballot',
        type: 'tuple',
        components: [
          { name: 'acct', internalType: 'uint40', type: 'uint40' },
          { name: 'attitude', internalType: 'uint8', type: 'uint8' },
          { name: 'head', internalType: 'uint32', type: 'uint32' },
          { name: 'weight', internalType: 'uint64', type: 'uint64' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'blocknumber', internalType: 'uint64', type: 'uint64' },
          { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'atti', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getCaseOfAttitude',
    outputs: [
      {
        name: '',
        internalType: 'struct BallotsBox.Case',
        type: 'tuple',
        components: [
          { name: 'sumOfHead', internalType: 'uint32', type: 'uint32' },
          { name: 'sumOfWeight', internalType: 'uint64', type: 'uint64' },
          { name: 'voters', internalType: 'uint256[]', type: 'uint256[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getDelegateOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
      {
        name: '_bod',
        internalType: 'contract IBookOfDirectors',
        type: 'address',
      },
    ],
    name: 'getLeavesHeadcountOfDirectors',
    outputs: [{ name: 'head', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
      { name: 'baseDate', internalType: 'uint256', type: 'uint256' },
      {
        name: '_rom',
        internalType: 'contract IRegisterOfMembers',
        type: 'address',
      },
    ],
    name: 'getLeavesWeightAtDate',
    outputs: [
      {
        name: 'info',
        internalType: 'struct DelegateMap.LeavesInfo',
        type: 'tuple',
        components: [
          { name: 'weight', internalType: 'uint64', type: 'uint64' },
          { name: 'emptyHead', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'getMotion',
    outputs: [
      {
        name: 'motion',
        internalType: 'struct MotionsRepo.Motion',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct MotionsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfMotion', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfMotion', internalType: 'uint64', type: 'uint64' },
              { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
              { name: 'creator', internalType: 'uint40', type: 'uint40' },
              { name: 'executor', internalType: 'uint40', type: 'uint40' },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'data', internalType: 'uint32', type: 'uint32' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct MotionsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'proposer', internalType: 'uint40', type: 'uint40' },
              { name: 'proposeDate', internalType: 'uint48', type: 'uint48' },
              { name: 'shareRegDate', internalType: 'uint48', type: 'uint48' },
              { name: 'voteStartDate', internalType: 'uint48', type: 'uint48' },
              { name: 'voteEndDate', internalType: 'uint48', type: 'uint48' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'votingRule',
            internalType: 'struct RulesParser.VotingRule',
            type: 'tuple',
            components: [
              { name: 'seqOfRule', internalType: 'uint16', type: 'uint16' },
              { name: 'qtyOfSubRule', internalType: 'uint8', type: 'uint8' },
              { name: 'seqOfSubRule', internalType: 'uint8', type: 'uint8' },
              { name: 'authority', internalType: 'uint16', type: 'uint16' },
              { name: 'headRatio', internalType: 'uint16', type: 'uint16' },
              { name: 'amountRatio', internalType: 'uint16', type: 'uint16' },
              { name: 'onlyAttendance', internalType: 'bool', type: 'bool' },
              { name: 'impliedConsent', internalType: 'bool', type: 'bool' },
              { name: 'partyAsConsent', internalType: 'bool', type: 'bool' },
              { name: 'againstShallBuy', internalType: 'bool', type: 'bool' },
              { name: 'shaExecDays', internalType: 'uint8', type: 'uint8' },
              { name: 'shaConfirmDays', internalType: 'uint8', type: 'uint8' },
              { name: 'reconsiderDays', internalType: 'uint8', type: 'uint8' },
              { name: 'votePrepareDays', internalType: 'uint8', type: 'uint8' },
              { name: 'votingDays', internalType: 'uint8', type: 'uint8' },
              {
                name: 'execDaysForPutOpt',
                internalType: 'uint8',
                type: 'uint8',
              },
              { name: 'vetoers', internalType: 'uint40[2]', type: 'uint40[2]' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          { name: 'contents', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSeqList',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getVoterOfDelegateMap',
    outputs: [
      {
        name: '',
        internalType: 'struct DelegateMap.Voter',
        type: 'tuple',
        components: [
          { name: 'delegate', internalType: 'uint40', type: 'uint40' },
          { name: 'weight', internalType: 'uint64', type: 'uint64' },
          { name: 'repWeight', internalType: 'uint64', type: 'uint64' },
          { name: 'repHead', internalType: 'uint32', type: 'uint32' },
          { name: 'principals', internalType: 'uint40[]', type: 'uint40[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'isPassed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'isProposed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isVoted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
      { name: 'atti', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isVotedFor',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'canidate', internalType: 'uint256', type: 'uint256' },
      { name: 'nominator', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'nominateOfficer',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'proposeMotionToBoard',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'proposer', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'proposeMotionToGeneralMeeting',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'flag0', internalType: 'bool', type: 'bool' },
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      {
        name: 'base',
        internalType: 'struct MotionsRepo.VoteCalBase',
        type: 'tuple',
        components: [
          { name: 'totalHead', internalType: 'uint32', type: 'uint32' },
          { name: 'totalWeight', internalType: 'uint64', type: 'uint64' },
          { name: 'supportHead', internalType: 'uint32', type: 'uint32' },
          { name: 'supportWeight', internalType: 'uint64', type: 'uint64' },
          { name: 'attendHeadRatio', internalType: 'uint16', type: 'uint16' },
          { name: 'attendWeightRatio', internalType: 'uint16', type: 'uint16' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'state', internalType: 'uint8', type: 'uint8' },
          { name: 'unaniConsent', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'voteCounting',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'voteEnded',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'voteStarted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ISigPage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iSigPageABI = [
  { type: 'event', anonymous: false, inputs: [], name: 'CirculateDoc' },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'beBuyer', internalType: 'bool', type: 'bool' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addBlank',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'circulateDoc',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'circulated',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'established',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'initPage', internalType: 'bool', type: 'bool' }],
    name: 'getBuyers',
    outputs: [{ name: 'buyers', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCirculateDate',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getClosingDays',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getClosingDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'initPage', internalType: 'bool', type: 'bool' }],
    name: 'getParasOfPage',
    outputs: [
      {
        name: '',
        internalType: 'struct SigsRepo.Signature',
        type: 'tuple',
        components: [
          { name: 'signer', internalType: 'uint40', type: 'uint40' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'blocknumber', internalType: 'uint64', type: 'uint64' },
          { name: 'flag', internalType: 'bool', type: 'bool' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'arg', internalType: 'uint16', type: 'uint16' },
          { name: 'seq', internalType: 'uint16', type: 'uint16' },
          { name: 'attr', internalType: 'uint16', type: 'uint16' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getParties',
    outputs: [
      { name: 'parties', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'initPage', internalType: 'bool', type: 'bool' }],
    name: 'getSellers',
    outputs: [
      { name: 'sellers', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSigDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'initParty', internalType: 'bool', type: 'bool' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getSigOfParty',
    outputs: [
      { name: 'seqOfDeals', internalType: 'uint256[]', type: 'uint256[]' },
      {
        name: 'sig',
        internalType: 'struct SigsRepo.Signature',
        type: 'tuple',
        components: [
          { name: 'signer', internalType: 'uint40', type: 'uint40' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'blocknumber', internalType: 'uint64', type: 'uint64' },
          { name: 'flag', internalType: 'bool', type: 'bool' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'arg', internalType: 'uint16', type: 'uint16' },
          { name: 'seq', internalType: 'uint16', type: 'uint16' },
          { name: 'attr', internalType: 'uint16', type: 'uint16' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSigningDays',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'initPage', internalType: 'bool', type: 'bool' }],
    name: 'getSigsOfPage',
    outputs: [
      {
        name: 'sigsOfBuyer',
        internalType: 'struct SigsRepo.Signature[]',
        type: 'tuple[]',
        components: [
          { name: 'signer', internalType: 'uint40', type: 'uint40' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'blocknumber', internalType: 'uint64', type: 'uint64' },
          { name: 'flag', internalType: 'bool', type: 'bool' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'arg', internalType: 'uint16', type: 'uint16' },
          { name: 'seq', internalType: 'uint16', type: 'uint16' },
          { name: 'attr', internalType: 'uint16', type: 'uint16' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
      {
        name: 'sigsOfSeller',
        internalType: 'struct SigsRepo.Signature[]',
        type: 'tuple[]',
        components: [
          { name: 'signer', internalType: 'uint40', type: 'uint40' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'blocknumber', internalType: 'uint64', type: 'uint64' },
          { name: 'flag', internalType: 'bool', type: 'bool' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'arg', internalType: 'uint16', type: 'uint16' },
          { name: 'seq', internalType: 'uint16', type: 'uint16' },
          { name: 'attr', internalType: 'uint16', type: 'uint16' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isBuyer',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'isInitSigner',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'isParty',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isSeller',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'isSigner',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'signer', internalType: 'uint256', type: 'uint256' },
      { name: 'sigDate', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'regSig',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeBlank',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'signingDays', internalType: 'uint256', type: 'uint256' },
      { name: 'closingDays', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setTiming',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'signDoc',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MeetingMinutes
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const meetingMinutesABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfMotion',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'caller',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'attitude',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'sigHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
    ],
    name: 'CastVoteInBoardMeeting',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfMotion',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'caller',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'attitude',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'sigHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
    ],
    name: 'CastVoteInGeneralMeeting',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'snOfMotion',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'contents',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'CreateMotion',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfMotion',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'delegate',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'principal',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'EntrustDelegate',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfMotion',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'caller',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ExecResolution',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfMotion',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'proposer',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ProposeMotionToBoard',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfMotion',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'proposer',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ProposeMotionToGeneralMeeting',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RemoveDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetGeneralCounsel',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seqOfMotion',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'result', internalType: 'uint8', type: 'uint8', indexed: true },
    ],
    name: 'VoteCounting',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'attitude', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'castVoteInBoardMeeting',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'attitude', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'castVoteInGeneralMeeting',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'params', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'desHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'executor', internalType: 'uint256', type: 'uint256' },
      { name: 'proposer', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createAction',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'doc', internalType: 'address', type: 'address' },
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'executor', internalType: 'uint256', type: 'uint256' },
      { name: 'proposer', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createMotionToApproveDoc',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'nominator', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createMotionToRemoveOfficer',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'delegate', internalType: 'uint256', type: 'uint256' },
      { name: 'principal', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'entrustDelegate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'params', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'desHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execAction',
    outputs: [{ name: 'contents', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'contents', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execResolution',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'finalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getBallot',
    outputs: [
      {
        name: '',
        internalType: 'struct BallotsBox.Ballot',
        type: 'tuple',
        components: [
          { name: 'acct', internalType: 'uint40', type: 'uint40' },
          { name: 'attitude', internalType: 'uint8', type: 'uint8' },
          { name: 'head', internalType: 'uint32', type: 'uint32' },
          { name: 'weight', internalType: 'uint64', type: 'uint64' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'blocknumber', internalType: 'uint64', type: 'uint64' },
          { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBookeeper',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'atti', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getCaseOfAttitude',
    outputs: [
      {
        name: '',
        internalType: 'struct BallotsBox.Case',
        type: 'tuple',
        components: [
          { name: 'sumOfHead', internalType: 'uint32', type: 'uint32' },
          { name: 'sumOfWeight', internalType: 'uint64', type: 'uint64' },
          { name: 'voters', internalType: 'uint256[]', type: 'uint256[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getDelegateOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getGeneralCounsel',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
      {
        name: '_bod',
        internalType: 'contract IBookOfDirectors',
        type: 'address',
      },
    ],
    name: 'getLeavesHeadcountOfDirectors',
    outputs: [{ name: 'head', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
      { name: 'baseDate', internalType: 'uint256', type: 'uint256' },
      {
        name: '_rom',
        internalType: 'contract IRegisterOfMembers',
        type: 'address',
      },
    ],
    name: 'getLeavesWeightAtDate',
    outputs: [
      {
        name: 'info',
        internalType: 'struct DelegateMap.LeavesInfo',
        type: 'tuple',
        components: [
          { name: 'weight', internalType: 'uint64', type: 'uint64' },
          { name: 'emptyHead', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'getMotion',
    outputs: [
      {
        name: 'motion',
        internalType: 'struct MotionsRepo.Motion',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct MotionsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfMotion', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfMotion', internalType: 'uint64', type: 'uint64' },
              { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
              { name: 'creator', internalType: 'uint40', type: 'uint40' },
              { name: 'executor', internalType: 'uint40', type: 'uint40' },
              { name: 'createDate', internalType: 'uint48', type: 'uint48' },
              { name: 'data', internalType: 'uint32', type: 'uint32' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct MotionsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'proposer', internalType: 'uint40', type: 'uint40' },
              { name: 'proposeDate', internalType: 'uint48', type: 'uint48' },
              { name: 'shareRegDate', internalType: 'uint48', type: 'uint48' },
              { name: 'voteStartDate', internalType: 'uint48', type: 'uint48' },
              { name: 'voteEndDate', internalType: 'uint48', type: 'uint48' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'votingRule',
            internalType: 'struct RulesParser.VotingRule',
            type: 'tuple',
            components: [
              { name: 'seqOfRule', internalType: 'uint16', type: 'uint16' },
              { name: 'qtyOfSubRule', internalType: 'uint8', type: 'uint8' },
              { name: 'seqOfSubRule', internalType: 'uint8', type: 'uint8' },
              { name: 'authority', internalType: 'uint16', type: 'uint16' },
              { name: 'headRatio', internalType: 'uint16', type: 'uint16' },
              { name: 'amountRatio', internalType: 'uint16', type: 'uint16' },
              { name: 'onlyAttendance', internalType: 'bool', type: 'bool' },
              { name: 'impliedConsent', internalType: 'bool', type: 'bool' },
              { name: 'partyAsConsent', internalType: 'bool', type: 'bool' },
              { name: 'againstShallBuy', internalType: 'bool', type: 'bool' },
              { name: 'shaExecDays', internalType: 'uint8', type: 'uint8' },
              { name: 'shaConfirmDays', internalType: 'uint8', type: 'uint8' },
              { name: 'reconsiderDays', internalType: 'uint8', type: 'uint8' },
              { name: 'votePrepareDays', internalType: 'uint8', type: 'uint8' },
              { name: 'votingDays', internalType: 'uint8', type: 'uint8' },
              {
                name: 'execDaysForPutOpt',
                internalType: 'uint8',
                type: 'uint8',
              },
              { name: 'vetoers', internalType: 'uint40[2]', type: 'uint40[2]' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          { name: 'contents', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSeqList',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getVoterOfDelegateMap',
    outputs: [
      {
        name: '',
        internalType: 'struct DelegateMap.Voter',
        type: 'tuple',
        components: [
          { name: 'delegate', internalType: 'uint40', type: 'uint40' },
          { name: 'weight', internalType: 'uint64', type: 'uint64' },
          { name: 'repWeight', internalType: 'uint64', type: 'uint64' },
          { name: 'repHead', internalType: 'uint32', type: 'uint32' },
          { name: 'principals', internalType: 'uint40[]', type: 'uint40[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'uint256', type: 'uint256' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'isPassed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'isProposed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isVoted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
      { name: 'atti', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isVotedFor',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfPos', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfVR', internalType: 'uint256', type: 'uint256' },
      { name: 'candidate', internalType: 'uint256', type: 'uint256' },
      { name: 'nominator', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'nominateOfficer',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'proposeMotionToBoard',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      { name: 'proposer', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'proposeMotionToGeneralMeeting',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'removeDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'keeper', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setGeneralCounsel',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'flag0', internalType: 'bool', type: 'bool' },
      { name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' },
      {
        name: 'base',
        internalType: 'struct MotionsRepo.VoteCalBase',
        type: 'tuple',
        components: [
          { name: 'totalHead', internalType: 'uint32', type: 'uint32' },
          { name: 'totalWeight', internalType: 'uint64', type: 'uint64' },
          { name: 'supportHead', internalType: 'uint32', type: 'uint32' },
          { name: 'supportWeight', internalType: 'uint64', type: 'uint64' },
          { name: 'attendHeadRatio', internalType: 'uint16', type: 'uint16' },
          { name: 'attendWeightRatio', internalType: 'uint16', type: 'uint16' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'state', internalType: 'uint8', type: 'uint8' },
          { name: 'unaniConsent', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'voteCounting',
    outputs: [{ name: 'result', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'voteEnded',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfMotion', internalType: 'uint256', type: 'uint256' }],
    name: 'voteStarted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SigPage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const sigPageABI = [
  { type: 'event', anonymous: false, inputs: [], name: 'CirculateDoc' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RemoveDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetGeneralCounsel',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'beBuyer', internalType: 'bool', type: 'bool' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addBlank',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'circulateDoc',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'circulated',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'established',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'finalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBookeeper',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'initPage', internalType: 'bool', type: 'bool' }],
    name: 'getBuyers',
    outputs: [{ name: 'buyers', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCirculateDate',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getClosingDays',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getClosingDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getGeneralCounsel',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'initPage', internalType: 'bool', type: 'bool' }],
    name: 'getParasOfPage',
    outputs: [
      {
        name: '',
        internalType: 'struct SigsRepo.Signature',
        type: 'tuple',
        components: [
          { name: 'signer', internalType: 'uint40', type: 'uint40' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'blocknumber', internalType: 'uint64', type: 'uint64' },
          { name: 'flag', internalType: 'bool', type: 'bool' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'arg', internalType: 'uint16', type: 'uint16' },
          { name: 'seq', internalType: 'uint16', type: 'uint16' },
          { name: 'attr', internalType: 'uint16', type: 'uint16' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getParties',
    outputs: [
      { name: 'parties', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'initPage', internalType: 'bool', type: 'bool' }],
    name: 'getSellers',
    outputs: [
      { name: 'sellers', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSigDeadline',
    outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getSigOfParty',
    outputs: [
      { name: 'seqOfDeals', internalType: 'uint256[]', type: 'uint256[]' },
      {
        name: 'sig',
        internalType: 'struct SigsRepo.Signature',
        type: 'tuple',
        components: [
          { name: 'signer', internalType: 'uint40', type: 'uint40' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'blocknumber', internalType: 'uint64', type: 'uint64' },
          { name: 'flag', internalType: 'bool', type: 'bool' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'arg', internalType: 'uint16', type: 'uint16' },
          { name: 'seq', internalType: 'uint16', type: 'uint16' },
          { name: 'attr', internalType: 'uint16', type: 'uint16' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSigningDays',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'initPage', internalType: 'bool', type: 'bool' }],
    name: 'getSigsOfPage',
    outputs: [
      {
        name: 'sigsOfBuyer',
        internalType: 'struct SigsRepo.Signature[]',
        type: 'tuple[]',
        components: [
          { name: 'signer', internalType: 'uint40', type: 'uint40' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'blocknumber', internalType: 'uint64', type: 'uint64' },
          { name: 'flag', internalType: 'bool', type: 'bool' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'arg', internalType: 'uint16', type: 'uint16' },
          { name: 'seq', internalType: 'uint16', type: 'uint16' },
          { name: 'attr', internalType: 'uint16', type: 'uint16' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
      {
        name: 'sigsOfSeller',
        internalType: 'struct SigsRepo.Signature[]',
        type: 'tuple[]',
        components: [
          { name: 'signer', internalType: 'uint40', type: 'uint40' },
          { name: 'sigDate', internalType: 'uint48', type: 'uint48' },
          { name: 'blocknumber', internalType: 'uint64', type: 'uint64' },
          { name: 'flag', internalType: 'bool', type: 'bool' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'arg', internalType: 'uint16', type: 'uint16' },
          { name: 'seq', internalType: 'uint16', type: 'uint16' },
          { name: 'attr', internalType: 'uint16', type: 'uint16' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'uint256', type: 'uint256' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isBuyer',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'isInitSigner',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'isParty',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isSeller',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'isSigner',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'signer', internalType: 'uint256', type: 'uint256' },
      { name: 'sigDate', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'regSig',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeBlank',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'removeDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'keeper', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setGeneralCounsel',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'signingDays', internalType: 'uint256', type: 'uint256' },
      { name: 'closingDays', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setTiming',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'initPage', internalType: 'bool', type: 'bool' },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
      { name: 'sigHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'signDoc',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ArrayUtils
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const arrayUtilsABI = [
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'arrA', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'arrB', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'combine',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'arrA', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'arrC', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'lenC', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'filter',
    outputs: [
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'arrA', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'arrB', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'fullyCoveredBy',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'arrA', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'arrB', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'merge',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'arrA', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'arrB', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'minus',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'arrA', internalType: 'uint256[]', type: 'uint256[]' }],
    name: 'refine',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'arrA', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'len', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'resize',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CondsRepo
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const condsRepoABI = [
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'compOpr', internalType: 'uint256', type: 'uint256' },
      { name: 'para', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'checkCond',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'cond',
        internalType: 'struct CondsRepo.Cond',
        type: 'tuple',
        components: [
          { name: 'seqOfCond', internalType: 'uint32', type: 'uint32' },
          { name: 'logicOpr', internalType: 'uint8', type: 'uint8' },
          { name: 'compOpr1', internalType: 'uint8', type: 'uint8' },
          { name: 'para1', internalType: 'uint64', type: 'uint64' },
          { name: 'compOpr2', internalType: 'uint8', type: 'uint8' },
          { name: 'para2', internalType: 'uint64', type: 'uint64' },
          { name: 'compOpr3', internalType: 'uint8', type: 'uint8' },
          { name: 'para3', internalType: 'uint64', type: 'uint64' },
        ],
      },
      { name: 'data1', internalType: 'uint256', type: 'uint256' },
      { name: 'data2', internalType: 'uint256', type: 'uint256' },
      { name: 'data3', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'checkCondsOfThree',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'cond',
        internalType: 'struct CondsRepo.Cond',
        type: 'tuple',
        components: [
          { name: 'seqOfCond', internalType: 'uint32', type: 'uint32' },
          { name: 'logicOpr', internalType: 'uint8', type: 'uint8' },
          { name: 'compOpr1', internalType: 'uint8', type: 'uint8' },
          { name: 'para1', internalType: 'uint64', type: 'uint64' },
          { name: 'compOpr2', internalType: 'uint8', type: 'uint8' },
          { name: 'para2', internalType: 'uint64', type: 'uint64' },
          { name: 'compOpr3', internalType: 'uint8', type: 'uint8' },
          { name: 'para3', internalType: 'uint64', type: 'uint64' },
        ],
      },
      { name: 'data1', internalType: 'uint256', type: 'uint256' },
      { name: 'data2', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'checkCondsOfTwo',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'cond',
        internalType: 'struct CondsRepo.Cond',
        type: 'tuple',
        components: [
          { name: 'seqOfCond', internalType: 'uint32', type: 'uint32' },
          { name: 'logicOpr', internalType: 'uint8', type: 'uint8' },
          { name: 'compOpr1', internalType: 'uint8', type: 'uint8' },
          { name: 'para1', internalType: 'uint64', type: 'uint64' },
          { name: 'compOpr2', internalType: 'uint8', type: 'uint8' },
          { name: 'para2', internalType: 'uint64', type: 'uint64' },
          { name: 'compOpr3', internalType: 'uint8', type: 'uint8' },
          { name: 'para3', internalType: 'uint64', type: 'uint64' },
        ],
      },
      { name: 'data', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'checkSoleCond',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'cond',
        internalType: 'struct CondsRepo.Cond',
        type: 'tuple',
        components: [
          { name: 'seqOfCond', internalType: 'uint32', type: 'uint32' },
          { name: 'logicOpr', internalType: 'uint8', type: 'uint8' },
          { name: 'compOpr1', internalType: 'uint8', type: 'uint8' },
          { name: 'para1', internalType: 'uint64', type: 'uint64' },
          { name: 'compOpr2', internalType: 'uint8', type: 'uint8' },
          { name: 'para2', internalType: 'uint64', type: 'uint64' },
          { name: 'compOpr3', internalType: 'uint8', type: 'uint8' },
          { name: 'para3', internalType: 'uint64', type: 'uint64' },
        ],
      },
    ],
    name: 'codifyCond',
    outputs: [{ name: 'sn', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'sn', internalType: 'bytes32', type: 'bytes32' }],
    name: 'snParser',
    outputs: [
      {
        name: 'cond',
        internalType: 'struct CondsRepo.Cond',
        type: 'tuple',
        components: [
          { name: 'seqOfCond', internalType: 'uint32', type: 'uint32' },
          { name: 'logicOpr', internalType: 'uint8', type: 'uint8' },
          { name: 'compOpr1', internalType: 'uint8', type: 'uint8' },
          { name: 'para1', internalType: 'uint64', type: 'uint64' },
          { name: 'compOpr2', internalType: 'uint8', type: 'uint8' },
          { name: 'para2', internalType: 'uint64', type: 'uint64' },
          { name: 'compOpr3', internalType: 'uint8', type: 'uint8' },
          { name: 'para3', internalType: 'uint64', type: 'uint64' },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DealsRepo
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const dealsRepoABI = [
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'head',
        internalType: 'struct DealsRepo.Head',
        type: 'tuple',
        components: [
          { name: 'typeOfDeal', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' },
          { name: 'preSeq', internalType: 'uint16', type: 'uint16' },
          { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
          { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
          { name: 'seller', internalType: 'uint40', type: 'uint40' },
          { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
          { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
          { name: 'closingDate', internalType: 'uint48', type: 'uint48' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
        ],
      },
    ],
    name: 'codifyHead',
    outputs: [{ name: 'sn', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'sn', internalType: 'bytes32', type: 'bytes32' }],
    name: 'snParser',
    outputs: [
      {
        name: 'head',
        internalType: 'struct DealsRepo.Head',
        type: 'tuple',
        components: [
          { name: 'typeOfDeal', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' },
          { name: 'preSeq', internalType: 'uint16', type: 'uint16' },
          { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
          { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
          { name: 'seller', internalType: 'uint40', type: 'uint40' },
          { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
          { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
          { name: 'closingDate', internalType: 'uint48', type: 'uint48' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DocsRepo
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const docsRepoABI = [
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'head',
        internalType: 'struct DocsRepo.Head',
        type: 'tuple',
        components: [
          { name: 'typeOfDoc', internalType: 'uint16', type: 'uint16' },
          { name: 'version', internalType: 'uint16', type: 'uint16' },
          { name: 'seqOfDoc', internalType: 'uint64', type: 'uint64' },
          { name: 'creator', internalType: 'uint40', type: 'uint40' },
          { name: 'createDate', internalType: 'uint48', type: 'uint48' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'argu', internalType: 'uint16', type: 'uint16' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
          { name: 'state', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
    name: 'codifyHead',
    outputs: [{ name: 'sn', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'sn', internalType: 'bytes32', type: 'bytes32' }],
    name: 'snParser',
    outputs: [
      {
        name: 'head',
        internalType: 'struct DocsRepo.Head',
        type: 'tuple',
        components: [
          { name: 'typeOfDoc', internalType: 'uint16', type: 'uint16' },
          { name: 'version', internalType: 'uint16', type: 'uint16' },
          { name: 'seqOfDoc', internalType: 'uint64', type: 'uint64' },
          { name: 'creator', internalType: 'uint40', type: 'uint40' },
          { name: 'createDate', internalType: 'uint48', type: 'uint48' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'argu', internalType: 'uint16', type: 'uint16' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
          { name: 'state', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// LockersRepo
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const lockersRepoABI = [
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'sn', internalType: 'bytes32', type: 'bytes32' }],
    name: 'snParser',
    outputs: [
      {
        name: 'locker',
        internalType: 'struct LockersRepo.Locker',
        type: 'tuple',
        components: [
          { name: 'from', internalType: 'uint40', type: 'uint40' },
          { name: 'to', internalType: 'uint40', type: 'uint40' },
          { name: 'expireDate', internalType: 'uint48', type: 'uint48' },
          { name: 'hashLock', internalType: 'uint128', type: 'uint128' },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MotionsRepo
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const motionsRepoABI = [
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'head',
        internalType: 'struct MotionsRepo.Head',
        type: 'tuple',
        components: [
          { name: 'typeOfMotion', internalType: 'uint16', type: 'uint16' },
          { name: 'seqOfMotion', internalType: 'uint64', type: 'uint64' },
          { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
          { name: 'creator', internalType: 'uint40', type: 'uint40' },
          { name: 'executor', internalType: 'uint40', type: 'uint40' },
          { name: 'createDate', internalType: 'uint48', type: 'uint48' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
    name: 'codifyHead',
    outputs: [{ name: 'sn', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'sn', internalType: 'bytes32', type: 'bytes32' }],
    name: 'snParser',
    outputs: [
      {
        name: 'head',
        internalType: 'struct MotionsRepo.Head',
        type: 'tuple',
        components: [
          { name: 'typeOfMotion', internalType: 'uint16', type: 'uint16' },
          { name: 'seqOfMotion', internalType: 'uint64', type: 'uint64' },
          { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
          { name: 'creator', internalType: 'uint40', type: 'uint40' },
          { name: 'executor', internalType: 'uint40', type: 'uint40' },
          { name: 'createDate', internalType: 'uint48', type: 'uint48' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// OfficersRepo
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const officersRepoABI = [
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'position',
        internalType: 'struct OfficersRepo.Position',
        type: 'tuple',
        components: [
          { name: 'title', internalType: 'uint16', type: 'uint16' },
          { name: 'seqOfPos', internalType: 'uint16', type: 'uint16' },
          { name: 'acct', internalType: 'uint40', type: 'uint40' },
          { name: 'nominator', internalType: 'uint40', type: 'uint40' },
          { name: 'startDate', internalType: 'uint48', type: 'uint48' },
          { name: 'endDate', internalType: 'uint48', type: 'uint48' },
          { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
          { name: 'titleOfNominator', internalType: 'uint16', type: 'uint16' },
          { name: 'argu', internalType: 'uint16', type: 'uint16' },
        ],
      },
    ],
    name: 'codifyPosition',
    outputs: [{ name: 'sn', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'sn', internalType: 'bytes32', type: 'bytes32' }],
    name: 'snParser',
    outputs: [
      {
        name: 'position',
        internalType: 'struct OfficersRepo.Position',
        type: 'tuple',
        components: [
          { name: 'title', internalType: 'uint16', type: 'uint16' },
          { name: 'seqOfPos', internalType: 'uint16', type: 'uint16' },
          { name: 'acct', internalType: 'uint40', type: 'uint40' },
          { name: 'nominator', internalType: 'uint40', type: 'uint40' },
          { name: 'startDate', internalType: 'uint48', type: 'uint48' },
          { name: 'endDate', internalType: 'uint48', type: 'uint48' },
          { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
          { name: 'titleOfNominator', internalType: 'uint16', type: 'uint16' },
          { name: 'argu', internalType: 'uint16', type: 'uint16' },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// OptionsRepo
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const optionsRepoABI = [
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'brf',
        internalType: 'struct OptionsRepo.Brief',
        type: 'tuple',
        components: [
          { name: 'seqOfBrf', internalType: 'uint16', type: 'uint16' },
          { name: 'seqOfSwap', internalType: 'uint32', type: 'uint32' },
          { name: 'rateOfSwap', internalType: 'uint32', type: 'uint32' },
          { name: 'paidOfConsider', internalType: 'uint64', type: 'uint64' },
          { name: 'paidOfTarget', internalType: 'uint64', type: 'uint64' },
          { name: 'obligor', internalType: 'uint40', type: 'uint40' },
          { name: 'state', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
    name: 'codifyBrief',
    outputs: [{ name: 'sn', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'head',
        internalType: 'struct OptionsRepo.Head',
        type: 'tuple',
        components: [
          { name: 'seqOfOpt', internalType: 'uint32', type: 'uint32' },
          { name: 'typeOfOpt', internalType: 'uint8', type: 'uint8' },
          { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
          { name: 'rate', internalType: 'uint32', type: 'uint32' },
          { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
          { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
          { name: 'execDays', internalType: 'uint16', type: 'uint16' },
          { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
          { name: 'obligor', internalType: 'uint40', type: 'uint40' },
        ],
      },
    ],
    name: 'codifyHead',
    outputs: [{ name: 'sn', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'sn', internalType: 'bytes32', type: 'bytes32' }],
    name: 'snParser',
    outputs: [
      {
        name: 'head',
        internalType: 'struct OptionsRepo.Head',
        type: 'tuple',
        components: [
          { name: 'seqOfOpt', internalType: 'uint32', type: 'uint32' },
          { name: 'typeOfOpt', internalType: 'uint8', type: 'uint8' },
          { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
          { name: 'rate', internalType: 'uint32', type: 'uint32' },
          { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
          { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
          { name: 'execDays', internalType: 'uint16', type: 'uint16' },
          { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
          { name: 'obligor', internalType: 'uint40', type: 'uint40' },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PledgesRepo
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const pledgesRepoABI = [
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'head',
        internalType: 'struct PledgesRepo.Head',
        type: 'tuple',
        components: [
          { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
          { name: 'seqOfPld', internalType: 'uint16', type: 'uint16' },
          { name: 'createDate', internalType: 'uint48', type: 'uint48' },
          { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
          { name: 'pledgor', internalType: 'uint40', type: 'uint40' },
          { name: 'debtor', internalType: 'uint40', type: 'uint40' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
    name: 'codifyHead',
    outputs: [{ name: 'sn', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'sn', internalType: 'bytes32', type: 'bytes32' }],
    name: 'snParser',
    outputs: [
      {
        name: 'head',
        internalType: 'struct PledgesRepo.Head',
        type: 'tuple',
        components: [
          { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
          { name: 'seqOfPld', internalType: 'uint16', type: 'uint16' },
          { name: 'createDate', internalType: 'uint48', type: 'uint48' },
          { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
          { name: 'pledgor', internalType: 'uint40', type: 'uint40' },
          { name: 'debtor', internalType: 'uint40', type: 'uint40' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// RulesParser
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const rulesParserABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'SHA_INIT_GR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'SHA_INIT_VR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'sn', internalType: 'bytes32', type: 'bytes32' }],
    name: 'firstRefusalRuleParser',
    outputs: [
      {
        name: 'rule',
        internalType: 'struct RulesParser.FirstRefusalRule',
        type: 'tuple',
        components: [
          { name: 'seqOfRule', internalType: 'uint16', type: 'uint16' },
          { name: 'qtyOfSubRule', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfSubRule', internalType: 'uint8', type: 'uint8' },
          { name: 'typeOfDeal', internalType: 'uint8', type: 'uint8' },
          { name: 'membersEqual', internalType: 'bool', type: 'bool' },
          { name: 'proRata', internalType: 'bool', type: 'bool' },
          { name: 'basedOnPar', internalType: 'bool', type: 'bool' },
          {
            name: 'rightholders',
            internalType: 'uint40[4]',
            type: 'uint40[4]',
          },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'argu', internalType: 'uint16', type: 'uint16' },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'sn', internalType: 'bytes32', type: 'bytes32' }],
    name: 'governanceRuleParser',
    outputs: [
      {
        name: 'rule',
        internalType: 'struct RulesParser.GovernanceRule',
        type: 'tuple',
        components: [
          { name: 'seqOfRule', internalType: 'uint16', type: 'uint16' },
          { name: 'qtyOfSubRule', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfSubRule', internalType: 'uint8', type: 'uint8' },
          { name: 'basedOnPar', internalType: 'bool', type: 'bool' },
          {
            name: 'proposeWeightRatioOfGM',
            internalType: 'uint16',
            type: 'uint16',
          },
          {
            name: 'proposeHeadRatioOfMembers',
            internalType: 'uint16',
            type: 'uint16',
          },
          {
            name: 'proposeHeadRatioOfDirectorsInGM',
            internalType: 'uint16',
            type: 'uint16',
          },
          {
            name: 'proposeHeadRatioOfDirectorsInBoard',
            internalType: 'uint16',
            type: 'uint16',
          },
          { name: 'maxQtyOfMembers', internalType: 'uint16', type: 'uint16' },
          { name: 'quorumOfGM', internalType: 'uint16', type: 'uint16' },
          { name: 'maxNumOfDirectors', internalType: 'uint8', type: 'uint8' },
          { name: 'tenureMonOfBoard', internalType: 'uint16', type: 'uint16' },
          {
            name: 'quorumOfBoardMeeting',
            internalType: 'uint16',
            type: 'uint16',
          },
          { name: 'establishedDate', internalType: 'uint48', type: 'uint48' },
          { name: 'businessTermInYears', internalType: 'uint8', type: 'uint8' },
          { name: 'typeOfComp', internalType: 'uint8', type: 'uint8' },
          {
            name: 'annualPenaltyRateForLatePayInCap',
            internalType: 'uint16',
            type: 'uint16',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'sn', internalType: 'bytes32', type: 'bytes32' }],
    name: 'groupUpdateOrderParser',
    outputs: [
      {
        name: 'order',
        internalType: 'struct RulesParser.GroupUpdateOrder',
        type: 'tuple',
        components: [
          { name: 'seqOfRule', internalType: 'uint16', type: 'uint16' },
          { name: 'qtyOfSubRule', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfSubRule', internalType: 'uint8', type: 'uint8' },
          { name: 'addMember', internalType: 'bool', type: 'bool' },
          { name: 'groupRep', internalType: 'uint40', type: 'uint40' },
          { name: 'members', internalType: 'uint40[4]', type: 'uint40[4]' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'sn', internalType: 'bytes32', type: 'bytes32' }],
    name: 'linkRuleParser',
    outputs: [
      {
        name: 'rule',
        internalType: 'struct RulesParser.LinkRule',
        type: 'tuple',
        components: [
          { name: 'seqOfRule', internalType: 'uint16', type: 'uint16' },
          { name: 'qtyOfSubRule', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfSubRule', internalType: 'uint8', type: 'uint8' },
          { name: 'drager', internalType: 'uint40', type: 'uint40' },
          { name: 'dragerGroup', internalType: 'uint40', type: 'uint40' },
          { name: 'triggerType', internalType: 'uint8', type: 'uint8' },
          {
            name: 'shareRatioThreshold',
            internalType: 'uint16',
            type: 'uint16',
          },
          { name: 'proRata', internalType: 'bool', type: 'bool' },
          { name: 'unitPrice', internalType: 'uint32', type: 'uint32' },
          { name: 'roe', internalType: 'uint32', type: 'uint32' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'sn', internalType: 'bytes32', type: 'bytes32' }],
    name: 'positionAllocateRuleParser',
    outputs: [
      {
        name: 'rule',
        internalType: 'struct RulesParser.PositionAllocateRule',
        type: 'tuple',
        components: [
          { name: 'seqOfRule', internalType: 'uint16', type: 'uint16' },
          { name: 'qtyOfSubRule', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfSubRule', internalType: 'uint8', type: 'uint8' },
          { name: 'removePos', internalType: 'bool', type: 'bool' },
          { name: 'seqOfPos', internalType: 'uint16', type: 'uint16' },
          { name: 'titleOfPos', internalType: 'uint16', type: 'uint16' },
          { name: 'nominator', internalType: 'uint40', type: 'uint40' },
          { name: 'titleOfNominator', internalType: 'uint16', type: 'uint16' },
          { name: 'seqOfVR', internalType: 'uint16', type: 'uint16' },
          { name: 'endDate', internalType: 'uint48', type: 'uint48' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'argu', internalType: 'uint16', type: 'uint16' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'sn', internalType: 'bytes32', type: 'bytes32' }],
    name: 'votingRuleParser',
    outputs: [
      {
        name: 'rule',
        internalType: 'struct RulesParser.VotingRule',
        type: 'tuple',
        components: [
          { name: 'seqOfRule', internalType: 'uint16', type: 'uint16' },
          { name: 'qtyOfSubRule', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfSubRule', internalType: 'uint8', type: 'uint8' },
          { name: 'authority', internalType: 'uint16', type: 'uint16' },
          { name: 'headRatio', internalType: 'uint16', type: 'uint16' },
          { name: 'amountRatio', internalType: 'uint16', type: 'uint16' },
          { name: 'onlyAttendance', internalType: 'bool', type: 'bool' },
          { name: 'impliedConsent', internalType: 'bool', type: 'bool' },
          { name: 'partyAsConsent', internalType: 'bool', type: 'bool' },
          { name: 'againstShallBuy', internalType: 'bool', type: 'bool' },
          { name: 'shaExecDays', internalType: 'uint8', type: 'uint8' },
          { name: 'shaConfirmDays', internalType: 'uint8', type: 'uint8' },
          { name: 'reconsiderDays', internalType: 'uint8', type: 'uint8' },
          { name: 'votePrepareDays', internalType: 'uint8', type: 'uint8' },
          { name: 'votingDays', internalType: 'uint8', type: 'uint8' },
          { name: 'execDaysForPutOpt', internalType: 'uint8', type: 'uint8' },
          { name: 'vetoers', internalType: 'uint40[2]', type: 'uint40[2]' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SharesRepo
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const sharesRepoABI = [
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'head',
        internalType: 'struct SharesRepo.Head',
        type: 'tuple',
        components: [
          { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
          { name: 'preSeq', internalType: 'uint32', type: 'uint32' },
          { name: 'class', internalType: 'uint16', type: 'uint16' },
          { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
          { name: 'shareholder', internalType: 'uint40', type: 'uint40' },
          { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
          { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'argu', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
    name: 'codifyHead',
    outputs: [{ name: 'sn', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'sn', internalType: 'bytes32', type: 'bytes32' }],
    name: 'snParser',
    outputs: [
      {
        name: 'head',
        internalType: 'struct SharesRepo.Head',
        type: 'tuple',
        components: [
          { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
          { name: 'preSeq', internalType: 'uint32', type: 'uint32' },
          { name: 'class', internalType: 'uint16', type: 'uint16' },
          { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
          { name: 'shareholder', internalType: 'uint40', type: 'uint40' },
          { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
          { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'argu', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SwapsRepo
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const swapsRepoABI = [
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'head',
        internalType: 'struct SwapsRepo.Head',
        type: 'tuple',
        components: [
          { name: 'seqOfSwap', internalType: 'uint32', type: 'uint32' },
          { name: 'classOfTarget', internalType: 'uint16', type: 'uint16' },
          { name: 'classOfConsider', internalType: 'uint16', type: 'uint16' },
          { name: 'createDate', internalType: 'uint48', type: 'uint48' },
          { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
          { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
          { name: 'obligor', internalType: 'uint40', type: 'uint40' },
          { name: 'rateOfSwap', internalType: 'uint32', type: 'uint32' },
          { name: 'para', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
    name: 'codifyHead',
    outputs: [{ name: 'sn', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'sn', internalType: 'bytes32', type: 'bytes32' }],
    name: 'snParser',
    outputs: [
      {
        name: 'head',
        internalType: 'struct SwapsRepo.Head',
        type: 'tuple',
        components: [
          { name: 'seqOfSwap', internalType: 'uint32', type: 'uint32' },
          { name: 'classOfTarget', internalType: 'uint16', type: 'uint16' },
          { name: 'classOfConsider', internalType: 'uint16', type: 'uint16' },
          { name: 'createDate', internalType: 'uint48', type: 'uint48' },
          { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
          { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
          { name: 'obligor', internalType: 'uint40', type: 'uint40' },
          { name: 'rateOfSwap', internalType: 'uint32', type: 'uint32' },
          { name: 'para', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// UsersRepo
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const usersRepoABI = [
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'sn', internalType: 'bytes32', type: 'bytes32' }],
    name: 'rewardParser',
    outputs: [
      {
        name: 'reward',
        internalType: 'struct UsersRepo.Reward',
        type: 'tuple',
        components: [
          { name: 'eoaRewards', internalType: 'uint32', type: 'uint32' },
          { name: 'coaRewards', internalType: 'uint32', type: 'uint32' },
          { name: 'offAmt', internalType: 'uint32', type: 'uint32' },
          { name: 'discRate', internalType: 'uint16', type: 'uint16' },
          { name: 'refundRatio', internalType: 'uint16', type: 'uint16' },
          { name: 'ceiling', internalType: 'uint64', type: 'uint64' },
          { name: 'floor', internalType: 'uint64', type: 'uint64' },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AntiDilution
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const antiDilutionABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RemoveDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetGeneralCounsel',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'class', internalType: 'uint256', type: 'uint256' },
      { name: 'price', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addBenchmark',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'class', internalType: 'uint256', type: 'uint256' },
      { name: 'obligor', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addObligor',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'finalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBookeeper',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getClasses',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'class', internalType: 'uint256', type: 'uint256' }],
    name: 'getFloorPriceOfClass',
    outputs: [{ name: 'price', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getGeneralCounsel',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getGiftPaid',
    outputs: [{ name: 'gift', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'class', internalType: 'uint256', type: 'uint256' }],
    name: 'getObligorsOfAD',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'uint256', type: 'uint256' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      {
        name: 'deal',
        internalType: 'struct DealsRepo.Deal',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct DealsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDeal', internalType: 'uint8', type: 'uint8' },
              { name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' },
              { name: 'preSeq', internalType: 'uint16', type: 'uint16' },
              { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seller', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              { name: 'closingDate', internalType: 'uint48', type: 'uint48' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct DealsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'buyer', internalType: 'uint40', type: 'uint40' },
              { name: 'groupOfBuyer', internalType: 'uint40', type: 'uint40' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'flag', internalType: 'bool', type: 'bool' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'isExempted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'class', internalType: 'uint256', type: 'uint256' }],
    name: 'isMarked',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'class', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isObligor',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      {
        name: 'deal',
        internalType: 'struct DealsRepo.Deal',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct DealsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDeal', internalType: 'uint8', type: 'uint8' },
              { name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' },
              { name: 'preSeq', internalType: 'uint16', type: 'uint16' },
              { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seller', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              { name: 'closingDate', internalType: 'uint48', type: 'uint48' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct DealsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'buyer', internalType: 'uint40', type: 'uint40' },
              { name: 'groupOfBuyer', internalType: 'uint40', type: 'uint40' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'flag', internalType: 'bool', type: 'bool' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'isTriggered',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'class', internalType: 'uint256', type: 'uint256' }],
    name: 'removeBenchmark',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'removeDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'class', internalType: 'uint256', type: 'uint256' },
      { name: 'obligor', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeObligor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'keeper', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setGeneralCounsel',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IAlongs
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iAlongsABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'drager', internalType: 'uint256', type: 'uint256' },
      { name: 'follower', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addFollower',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'rule', internalType: 'bytes32', type: 'bytes32' },
      { name: 'drager', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createLink',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'dragers',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'drager', internalType: 'uint256', type: 'uint256' }],
    name: 'followers',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'drager', internalType: 'uint256', type: 'uint256' }],
    name: 'isDrager',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'drager', internalType: 'uint256', type: 'uint256' },
      { name: 'follower', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isLinked',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      {
        name: 'deal',
        internalType: 'struct DealsRepo.Deal',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct DealsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDeal', internalType: 'uint8', type: 'uint8' },
              { name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' },
              { name: 'preSeq', internalType: 'uint16', type: 'uint16' },
              { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seller', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              { name: 'closingDate', internalType: 'uint48', type: 'uint48' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct DealsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'buyer', internalType: 'uint40', type: 'uint40' },
              { name: 'groupOfBuyer', internalType: 'uint40', type: 'uint40' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'flag', internalType: 'bool', type: 'bool' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'isTriggered',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'drager', internalType: 'uint256', type: 'uint256' }],
    name: 'linkRule',
    outputs: [
      {
        name: '',
        internalType: 'struct RulesParser.LinkRule',
        type: 'tuple',
        components: [
          { name: 'seqOfRule', internalType: 'uint16', type: 'uint16' },
          { name: 'qtyOfSubRule', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfSubRule', internalType: 'uint8', type: 'uint8' },
          { name: 'drager', internalType: 'uint40', type: 'uint40' },
          { name: 'dragerGroup', internalType: 'uint40', type: 'uint40' },
          { name: 'triggerType', internalType: 'uint8', type: 'uint8' },
          {
            name: 'shareRatioThreshold',
            internalType: 'uint16',
            type: 'uint16',
          },
          { name: 'proRata', internalType: 'bool', type: 'bool' },
          { name: 'unitPrice', internalType: 'uint32', type: 'uint32' },
          { name: 'roe', internalType: 'uint32', type: 'uint32' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      {
        name: 'deal',
        internalType: 'struct DealsRepo.Deal',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct DealsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDeal', internalType: 'uint8', type: 'uint8' },
              { name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' },
              { name: 'preSeq', internalType: 'uint16', type: 'uint16' },
              { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seller', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              { name: 'closingDate', internalType: 'uint48', type: 'uint48' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct DealsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'buyer', internalType: 'uint40', type: 'uint40' },
              { name: 'groupOfBuyer', internalType: 'uint40', type: 'uint40' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'flag', internalType: 'bool', type: 'bool' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
      {
        name: 'share',
        internalType: 'struct SharesRepo.Share',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct SharesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'preSeq', internalType: 'uint32', type: 'uint32' },
              { name: 'class', internalType: 'uint16', type: 'uint16' },
              { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
              { name: 'shareholder', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct SharesRepo.Body',
            type: 'tuple',
            components: [
              { name: 'payInDeadline', internalType: 'uint48', type: 'uint48' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'cleanPaid', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint8', type: 'uint8' },
            ],
          },
        ],
      },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'priceCheck',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'drager', internalType: 'uint256', type: 'uint256' }],
    name: 'removeDrager',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'drager', internalType: 'uint256', type: 'uint256' },
      { name: 'follower', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeFollower',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DragAlong
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const dragAlongABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RemoveDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetGeneralCounsel',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'drager', internalType: 'uint256', type: 'uint256' },
      { name: 'follower', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addFollower',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'rule', internalType: 'bytes32', type: 'bytes32' },
      { name: 'drager', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createLink',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'dragers',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'finalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'drager', internalType: 'uint256', type: 'uint256' }],
    name: 'followers',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBookeeper',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getGeneralCounsel',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'uint256', type: 'uint256' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'drager', internalType: 'uint256', type: 'uint256' }],
    name: 'isDrager',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'drager', internalType: 'uint256', type: 'uint256' },
      { name: 'follower', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isLinked',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      {
        name: 'deal',
        internalType: 'struct DealsRepo.Deal',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct DealsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDeal', internalType: 'uint8', type: 'uint8' },
              { name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' },
              { name: 'preSeq', internalType: 'uint16', type: 'uint16' },
              { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seller', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              { name: 'closingDate', internalType: 'uint48', type: 'uint48' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct DealsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'buyer', internalType: 'uint40', type: 'uint40' },
              { name: 'groupOfBuyer', internalType: 'uint40', type: 'uint40' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'flag', internalType: 'bool', type: 'bool' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'isTriggered',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'drager', internalType: 'uint256', type: 'uint256' }],
    name: 'linkRule',
    outputs: [
      {
        name: '',
        internalType: 'struct RulesParser.LinkRule',
        type: 'tuple',
        components: [
          { name: 'seqOfRule', internalType: 'uint16', type: 'uint16' },
          { name: 'qtyOfSubRule', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfSubRule', internalType: 'uint8', type: 'uint8' },
          { name: 'drager', internalType: 'uint40', type: 'uint40' },
          { name: 'dragerGroup', internalType: 'uint40', type: 'uint40' },
          { name: 'triggerType', internalType: 'uint8', type: 'uint8' },
          {
            name: 'shareRatioThreshold',
            internalType: 'uint16',
            type: 'uint16',
          },
          { name: 'proRata', internalType: 'bool', type: 'bool' },
          { name: 'unitPrice', internalType: 'uint32', type: 'uint32' },
          { name: 'roe', internalType: 'uint32', type: 'uint32' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      {
        name: 'deal',
        internalType: 'struct DealsRepo.Deal',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct DealsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDeal', internalType: 'uint8', type: 'uint8' },
              { name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' },
              { name: 'preSeq', internalType: 'uint16', type: 'uint16' },
              { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seller', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              { name: 'closingDate', internalType: 'uint48', type: 'uint48' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct DealsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'buyer', internalType: 'uint40', type: 'uint40' },
              { name: 'groupOfBuyer', internalType: 'uint40', type: 'uint40' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'flag', internalType: 'bool', type: 'bool' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
      {
        name: 'share',
        internalType: 'struct SharesRepo.Share',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct SharesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'preSeq', internalType: 'uint32', type: 'uint32' },
              { name: 'class', internalType: 'uint16', type: 'uint16' },
              { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
              { name: 'shareholder', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct SharesRepo.Body',
            type: 'tuple',
            components: [
              { name: 'payInDeadline', internalType: 'uint48', type: 'uint48' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'cleanPaid', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint8', type: 'uint8' },
            ],
          },
        ],
      },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'priceCheck',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'removeDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'drager', internalType: 'uint256', type: 'uint256' }],
    name: 'removeDrager',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'drager', internalType: 'uint256', type: 'uint256' },
      { name: 'follower', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeFollower',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'keeper', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setGeneralCounsel',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IAntiDilution
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iAntiDilutionABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'class', internalType: 'uint256', type: 'uint256' },
      { name: 'price', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addBenchmark',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'class', internalType: 'uint256', type: 'uint256' },
      { name: 'obligor', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addObligor',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getClasses',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'class', internalType: 'uint256', type: 'uint256' }],
    name: 'getFloorPriceOfClass',
    outputs: [{ name: 'price', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      { name: 'seqOfDeal', internalType: 'uint256', type: 'uint256' },
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getGiftPaid',
    outputs: [{ name: 'gift', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'class', internalType: 'uint256', type: 'uint256' }],
    name: 'getObligorsOfAD',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      {
        name: 'deal',
        internalType: 'struct DealsRepo.Deal',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct DealsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDeal', internalType: 'uint8', type: 'uint8' },
              { name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' },
              { name: 'preSeq', internalType: 'uint16', type: 'uint16' },
              { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seller', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              { name: 'closingDate', internalType: 'uint48', type: 'uint48' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct DealsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'buyer', internalType: 'uint40', type: 'uint40' },
              { name: 'groupOfBuyer', internalType: 'uint40', type: 'uint40' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'flag', internalType: 'bool', type: 'bool' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'isExempted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'class', internalType: 'uint256', type: 'uint256' }],
    name: 'isMarked',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'class', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isObligor',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      {
        name: 'deal',
        internalType: 'struct DealsRepo.Deal',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct DealsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDeal', internalType: 'uint8', type: 'uint8' },
              { name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' },
              { name: 'preSeq', internalType: 'uint16', type: 'uint16' },
              { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seller', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              { name: 'closingDate', internalType: 'uint48', type: 'uint48' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct DealsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'buyer', internalType: 'uint40', type: 'uint40' },
              { name: 'groupOfBuyer', internalType: 'uint40', type: 'uint40' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'flag', internalType: 'bool', type: 'bool' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'isTriggered',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'class', internalType: 'uint256', type: 'uint256' }],
    name: 'removeBenchmark',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'class', internalType: 'uint256', type: 'uint256' },
      { name: 'obligor', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeObligor',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ILockUp
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iLockUpABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'keyholder', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addKeyholder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfShare', internalType: 'uint256', type: 'uint256' }],
    name: 'delLocker',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfShare', internalType: 'uint256', type: 'uint256' }],
    name: 'getLocker',
    outputs: [
      { name: 'dueDate', internalType: 'uint48', type: 'uint48' },
      { name: 'keyHolders', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      {
        name: 'deal',
        internalType: 'struct DealsRepo.Deal',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct DealsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDeal', internalType: 'uint8', type: 'uint8' },
              { name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' },
              { name: 'preSeq', internalType: 'uint16', type: 'uint16' },
              { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seller', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              { name: 'closingDate', internalType: 'uint48', type: 'uint48' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct DealsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'buyer', internalType: 'uint40', type: 'uint40' },
              { name: 'groupOfBuyer', internalType: 'uint40', type: 'uint40' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'flag', internalType: 'bool', type: 'bool' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'isExempted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfShare', internalType: 'uint256', type: 'uint256' }],
    name: 'isLocked',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      {
        name: 'deal',
        internalType: 'struct DealsRepo.Deal',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct DealsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDeal', internalType: 'uint8', type: 'uint8' },
              { name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' },
              { name: 'preSeq', internalType: 'uint16', type: 'uint16' },
              { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seller', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              { name: 'closingDate', internalType: 'uint48', type: 'uint48' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct DealsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'buyer', internalType: 'uint40', type: 'uint40' },
              { name: 'groupOfBuyer', internalType: 'uint40', type: 'uint40' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'flag', internalType: 'bool', type: 'bool' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'isTriggered',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'lockedShares',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'keyholder', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeKeyholder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'dueDate', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setLocker',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IOptions
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iOptionsABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'obligor', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addObligorIntoOpt',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'counterOfOptions',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfOpt', internalType: 'bytes32', type: 'bytes32' },
      { name: 'snOfCond', internalType: 'bytes32', type: 'bytes32' },
      { name: 'rightholder', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createOption',
    outputs: [
      {
        name: 'head',
        internalType: 'struct OptionsRepo.Head',
        type: 'tuple',
        components: [
          { name: 'seqOfOpt', internalType: 'uint32', type: 'uint32' },
          { name: 'typeOfOpt', internalType: 'uint8', type: 'uint8' },
          { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
          { name: 'rate', internalType: 'uint32', type: 'uint32' },
          { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
          { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
          { name: 'execDays', internalType: 'uint16', type: 'uint16' },
          { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
          { name: 'obligor', internalType: 'uint40', type: 'uint40' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' }],
    name: 'delOption',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAllOptions',
    outputs: [
      {
        name: '',
        internalType: 'struct OptionsRepo.Option[]',
        type: 'tuple[]',
        components: [
          {
            name: 'head',
            internalType: 'struct OptionsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfOpt', internalType: 'uint32', type: 'uint32' },
              { name: 'typeOfOpt', internalType: 'uint8', type: 'uint8' },
              { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
              { name: 'rate', internalType: 'uint32', type: 'uint32' },
              { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
              { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
              { name: 'execDays', internalType: 'uint16', type: 'uint16' },
              { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
              { name: 'obligor', internalType: 'uint40', type: 'uint40' },
            ],
          },
          {
            name: 'cond',
            internalType: 'struct CondsRepo.Cond',
            type: 'tuple',
            components: [
              { name: 'seqOfCond', internalType: 'uint32', type: 'uint32' },
              { name: 'logicOpr', internalType: 'uint8', type: 'uint8' },
              { name: 'compOpr1', internalType: 'uint8', type: 'uint8' },
              { name: 'para1', internalType: 'uint64', type: 'uint64' },
              { name: 'compOpr2', internalType: 'uint8', type: 'uint8' },
              { name: 'para2', internalType: 'uint64', type: 'uint64' },
              { name: 'compOpr3', internalType: 'uint8', type: 'uint8' },
              { name: 'para3', internalType: 'uint64', type: 'uint64' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct OptionsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'closingDate', internalType: 'uint48', type: 'uint48' },
              { name: 'rightholder', internalType: 'uint40', type: 'uint40' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'arg', internalType: 'uint16', type: 'uint16' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' }],
    name: 'getObligorsOfOption',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' }],
    name: 'getOption',
    outputs: [
      {
        name: 'option',
        internalType: 'struct OptionsRepo.Option',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct OptionsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfOpt', internalType: 'uint32', type: 'uint32' },
              { name: 'typeOfOpt', internalType: 'uint8', type: 'uint8' },
              { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
              { name: 'rate', internalType: 'uint32', type: 'uint32' },
              { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
              { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
              { name: 'execDays', internalType: 'uint16', type: 'uint16' },
              { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
              { name: 'obligor', internalType: 'uint40', type: 'uint40' },
            ],
          },
          {
            name: 'cond',
            internalType: 'struct CondsRepo.Cond',
            type: 'tuple',
            components: [
              { name: 'seqOfCond', internalType: 'uint32', type: 'uint32' },
              { name: 'logicOpr', internalType: 'uint8', type: 'uint8' },
              { name: 'compOpr1', internalType: 'uint8', type: 'uint8' },
              { name: 'para1', internalType: 'uint64', type: 'uint64' },
              { name: 'compOpr2', internalType: 'uint8', type: 'uint8' },
              { name: 'para2', internalType: 'uint64', type: 'uint64' },
              { name: 'compOpr3', internalType: 'uint8', type: 'uint8' },
              { name: 'para3', internalType: 'uint64', type: 'uint64' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct OptionsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'closingDate', internalType: 'uint48', type: 'uint48' },
              { name: 'rightholder', internalType: 'uint40', type: 'uint40' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'arg', internalType: 'uint16', type: 'uint16' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSNList',
    outputs: [{ name: '', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isObligor',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' }],
    name: 'isOption',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'obligor', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeObligorFromOpt',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ITerm
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iTermABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      {
        name: 'deal',
        internalType: 'struct DealsRepo.Deal',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct DealsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDeal', internalType: 'uint8', type: 'uint8' },
              { name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' },
              { name: 'preSeq', internalType: 'uint16', type: 'uint16' },
              { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seller', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              { name: 'closingDate', internalType: 'uint48', type: 'uint48' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct DealsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'buyer', internalType: 'uint40', type: 'uint40' },
              { name: 'groupOfBuyer', internalType: 'uint40', type: 'uint40' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'flag', internalType: 'bool', type: 'bool' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'isExempted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      {
        name: 'deal',
        internalType: 'struct DealsRepo.Deal',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct DealsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDeal', internalType: 'uint8', type: 'uint8' },
              { name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' },
              { name: 'preSeq', internalType: 'uint16', type: 'uint16' },
              { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seller', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              { name: 'closingDate', internalType: 'uint48', type: 'uint48' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct DealsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'buyer', internalType: 'uint40', type: 'uint40' },
              { name: 'groupOfBuyer', internalType: 'uint40', type: 'uint40' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'flag', internalType: 'bool', type: 'bool' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'isTriggered',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// LockUp
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const lockUpABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RemoveDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetGeneralCounsel',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'keyholder', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addKeyholder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfShare', internalType: 'uint256', type: 'uint256' }],
    name: 'delLocker',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'finalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBookeeper',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getGeneralCounsel',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfShare', internalType: 'uint256', type: 'uint256' }],
    name: 'getLocker',
    outputs: [
      { name: 'dueDate', internalType: 'uint48', type: 'uint48' },
      { name: 'keyHolders', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'uint256', type: 'uint256' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      {
        name: 'deal',
        internalType: 'struct DealsRepo.Deal',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct DealsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDeal', internalType: 'uint8', type: 'uint8' },
              { name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' },
              { name: 'preSeq', internalType: 'uint16', type: 'uint16' },
              { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seller', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              { name: 'closingDate', internalType: 'uint48', type: 'uint48' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct DealsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'buyer', internalType: 'uint40', type: 'uint40' },
              { name: 'groupOfBuyer', internalType: 'uint40', type: 'uint40' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'flag', internalType: 'bool', type: 'bool' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'isExempted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfShare', internalType: 'uint256', type: 'uint256' }],
    name: 'isLocked',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      {
        name: 'deal',
        internalType: 'struct DealsRepo.Deal',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct DealsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDeal', internalType: 'uint8', type: 'uint8' },
              { name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' },
              { name: 'preSeq', internalType: 'uint16', type: 'uint16' },
              { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seller', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              { name: 'closingDate', internalType: 'uint48', type: 'uint48' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct DealsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'buyer', internalType: 'uint40', type: 'uint40' },
              { name: 'groupOfBuyer', internalType: 'uint40', type: 'uint40' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'flag', internalType: 'bool', type: 'bool' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'isTriggered',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'lockedShares',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'removeDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'keyholder', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeKeyholder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'keeper', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setGeneralCounsel',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfShare', internalType: 'uint256', type: 'uint256' },
      { name: 'dueDate', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setLocker',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Options
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const optionsABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RemoveDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetGeneralCounsel',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'obligor', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addObligorIntoOpt',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'counterOfOptions',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'snOfOpt', internalType: 'bytes32', type: 'bytes32' },
      { name: 'snOfCond', internalType: 'bytes32', type: 'bytes32' },
      { name: 'rightholder', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'par', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createOption',
    outputs: [
      {
        name: 'head',
        internalType: 'struct OptionsRepo.Head',
        type: 'tuple',
        components: [
          { name: 'seqOfOpt', internalType: 'uint32', type: 'uint32' },
          { name: 'typeOfOpt', internalType: 'uint8', type: 'uint8' },
          { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
          { name: 'rate', internalType: 'uint32', type: 'uint32' },
          { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
          { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
          { name: 'execDays', internalType: 'uint16', type: 'uint16' },
          { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
          { name: 'obligor', internalType: 'uint40', type: 'uint40' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' }],
    name: 'delOption',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'finalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAllOptions',
    outputs: [
      {
        name: '',
        internalType: 'struct OptionsRepo.Option[]',
        type: 'tuple[]',
        components: [
          {
            name: 'head',
            internalType: 'struct OptionsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfOpt', internalType: 'uint32', type: 'uint32' },
              { name: 'typeOfOpt', internalType: 'uint8', type: 'uint8' },
              { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
              { name: 'rate', internalType: 'uint32', type: 'uint32' },
              { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
              { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
              { name: 'execDays', internalType: 'uint16', type: 'uint16' },
              { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
              { name: 'obligor', internalType: 'uint40', type: 'uint40' },
            ],
          },
          {
            name: 'cond',
            internalType: 'struct CondsRepo.Cond',
            type: 'tuple',
            components: [
              { name: 'seqOfCond', internalType: 'uint32', type: 'uint32' },
              { name: 'logicOpr', internalType: 'uint8', type: 'uint8' },
              { name: 'compOpr1', internalType: 'uint8', type: 'uint8' },
              { name: 'para1', internalType: 'uint64', type: 'uint64' },
              { name: 'compOpr2', internalType: 'uint8', type: 'uint8' },
              { name: 'para2', internalType: 'uint64', type: 'uint64' },
              { name: 'compOpr3', internalType: 'uint8', type: 'uint8' },
              { name: 'para3', internalType: 'uint64', type: 'uint64' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct OptionsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'closingDate', internalType: 'uint48', type: 'uint48' },
              { name: 'rightholder', internalType: 'uint40', type: 'uint40' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'arg', internalType: 'uint16', type: 'uint16' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBookeeper',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getGeneralCounsel',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' }],
    name: 'getObligorsOfOption',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' }],
    name: 'getOption',
    outputs: [
      {
        name: 'option',
        internalType: 'struct OptionsRepo.Option',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct OptionsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfOpt', internalType: 'uint32', type: 'uint32' },
              { name: 'typeOfOpt', internalType: 'uint8', type: 'uint8' },
              { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
              { name: 'rate', internalType: 'uint32', type: 'uint32' },
              { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
              { name: 'triggerDate', internalType: 'uint48', type: 'uint48' },
              { name: 'execDays', internalType: 'uint16', type: 'uint16' },
              { name: 'closingDays', internalType: 'uint16', type: 'uint16' },
              { name: 'obligor', internalType: 'uint40', type: 'uint40' },
            ],
          },
          {
            name: 'cond',
            internalType: 'struct CondsRepo.Cond',
            type: 'tuple',
            components: [
              { name: 'seqOfCond', internalType: 'uint32', type: 'uint32' },
              { name: 'logicOpr', internalType: 'uint8', type: 'uint8' },
              { name: 'compOpr1', internalType: 'uint8', type: 'uint8' },
              { name: 'para1', internalType: 'uint64', type: 'uint64' },
              { name: 'compOpr2', internalType: 'uint8', type: 'uint8' },
              { name: 'para2', internalType: 'uint64', type: 'uint64' },
              { name: 'compOpr3', internalType: 'uint8', type: 'uint8' },
              { name: 'para3', internalType: 'uint64', type: 'uint64' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct OptionsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'closingDate', internalType: 'uint48', type: 'uint48' },
              { name: 'rightholder', internalType: 'uint40', type: 'uint40' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'arg', internalType: 'uint16', type: 'uint16' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSNList',
    outputs: [{ name: '', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'uint256', type: 'uint256' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isObligor',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' }],
    name: 'isOption',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'removeDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'seqOfOpt', internalType: 'uint256', type: 'uint256' },
      { name: 'obligor', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeObligorFromOpt',
    outputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'keeper', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setGeneralCounsel',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TagAlong
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const tagAlongABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'directKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regCenter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'generalKeeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'LockContents' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RemoveDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'keeper',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetDirectKeeper',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetGeneralCounsel',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'acct', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'SetOwner',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'abandonRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'drager', internalType: 'uint256', type: 'uint256' },
      { name: 'follower', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addFollower',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'rule', internalType: 'bytes32', type: 'bytes32' },
      { name: 'drager', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createLink',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'dragers',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'finalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'drager', internalType: 'uint256', type: 'uint256' }],
    name: 'followers',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBookeeper',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getGeneralCounsel',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'uint256', type: 'uint256' },
      { name: 'directKeeper', internalType: 'address', type: 'address' },
      { name: 'regCenter', internalType: 'address', type: 'address' },
      { name: 'generalKeeper', internalType: 'address', type: 'address' },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'drager', internalType: 'uint256', type: 'uint256' }],
    name: 'isDrager',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      {
        name: 'deal',
        internalType: 'struct DealsRepo.Deal',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct DealsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDeal', internalType: 'uint8', type: 'uint8' },
              { name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' },
              { name: 'preSeq', internalType: 'uint16', type: 'uint16' },
              { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seller', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              { name: 'closingDate', internalType: 'uint48', type: 'uint48' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct DealsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'buyer', internalType: 'uint40', type: 'uint40' },
              { name: 'groupOfBuyer', internalType: 'uint40', type: 'uint40' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'flag', internalType: 'bool', type: 'bool' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'isExempted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'drager', internalType: 'uint256', type: 'uint256' },
      { name: 'follower', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isLinked',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      {
        name: 'deal',
        internalType: 'struct DealsRepo.Deal',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct DealsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDeal', internalType: 'uint8', type: 'uint8' },
              { name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' },
              { name: 'preSeq', internalType: 'uint16', type: 'uint16' },
              { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seller', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              { name: 'closingDate', internalType: 'uint48', type: 'uint48' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct DealsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'buyer', internalType: 'uint40', type: 'uint40' },
              { name: 'groupOfBuyer', internalType: 'uint40', type: 'uint40' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'flag', internalType: 'bool', type: 'bool' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'isTriggered',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'drager', internalType: 'uint256', type: 'uint256' }],
    name: 'linkRule',
    outputs: [
      {
        name: '',
        internalType: 'struct RulesParser.LinkRule',
        type: 'tuple',
        components: [
          { name: 'seqOfRule', internalType: 'uint16', type: 'uint16' },
          { name: 'qtyOfSubRule', internalType: 'uint8', type: 'uint8' },
          { name: 'seqOfSubRule', internalType: 'uint8', type: 'uint8' },
          { name: 'drager', internalType: 'uint40', type: 'uint40' },
          { name: 'dragerGroup', internalType: 'uint40', type: 'uint40' },
          { name: 'triggerType', internalType: 'uint8', type: 'uint8' },
          {
            name: 'shareRatioThreshold',
            internalType: 'uint16',
            type: 'uint16',
          },
          { name: 'proRata', internalType: 'bool', type: 'bool' },
          { name: 'unitPrice', internalType: 'uint32', type: 'uint32' },
          { name: 'roe', internalType: 'uint32', type: 'uint32' },
          { name: 'para', internalType: 'uint16', type: 'uint16' },
          { name: 'data', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockContents',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'ia', internalType: 'address', type: 'address' },
      {
        name: 'deal',
        internalType: 'struct DealsRepo.Deal',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct DealsRepo.Head',
            type: 'tuple',
            components: [
              { name: 'typeOfDeal', internalType: 'uint8', type: 'uint8' },
              { name: 'seqOfDeal', internalType: 'uint16', type: 'uint16' },
              { name: 'preSeq', internalType: 'uint16', type: 'uint16' },
              { name: 'classOfShare', internalType: 'uint16', type: 'uint16' },
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'seller', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              { name: 'closingDate', internalType: 'uint48', type: 'uint48' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct DealsRepo.Body',
            type: 'tuple',
            components: [
              { name: 'buyer', internalType: 'uint40', type: 'uint40' },
              { name: 'groupOfBuyer', internalType: 'uint40', type: 'uint40' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint16', type: 'uint16' },
              { name: 'flag', internalType: 'bool', type: 'bool' },
            ],
          },
          { name: 'hashLock', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
      {
        name: 'share',
        internalType: 'struct SharesRepo.Share',
        type: 'tuple',
        components: [
          {
            name: 'head',
            internalType: 'struct SharesRepo.Head',
            type: 'tuple',
            components: [
              { name: 'seqOfShare', internalType: 'uint32', type: 'uint32' },
              { name: 'preSeq', internalType: 'uint32', type: 'uint32' },
              { name: 'class', internalType: 'uint16', type: 'uint16' },
              { name: 'issueDate', internalType: 'uint48', type: 'uint48' },
              { name: 'shareholder', internalType: 'uint40', type: 'uint40' },
              { name: 'priceOfPaid', internalType: 'uint32', type: 'uint32' },
              { name: 'priceOfPar', internalType: 'uint32', type: 'uint32' },
              { name: 'para', internalType: 'uint16', type: 'uint16' },
              { name: 'argu', internalType: 'uint8', type: 'uint8' },
            ],
          },
          {
            name: 'body',
            internalType: 'struct SharesRepo.Body',
            type: 'tuple',
            components: [
              { name: 'payInDeadline', internalType: 'uint48', type: 'uint48' },
              { name: 'paid', internalType: 'uint64', type: 'uint64' },
              { name: 'par', internalType: 'uint64', type: 'uint64' },
              { name: 'cleanPaid', internalType: 'uint64', type: 'uint64' },
              { name: 'state', internalType: 'uint8', type: 'uint8' },
              { name: 'para', internalType: 'uint8', type: 'uint8' },
            ],
          },
        ],
      },
      { name: 'caller', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'priceCheck',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'removeDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'drager', internalType: 'uint256', type: 'uint256' }],
    name: 'removeDrager',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'drager', internalType: 'uint256', type: 'uint256' },
      { name: 'follower', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeFollower',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'keeper', internalType: 'address', type: 'address' }],
    name: 'setDirectKeeper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setGeneralCounsel',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'acct', internalType: 'uint256', type: 'uint256' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'acct', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setRoleAdmin',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link generalKeeperABI}__.
 */
export function useGeneralKeeper(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: generalKeeperABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link generalKeeperABI}__.
 */
export function useGeneralKeeperRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof generalKeeperABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof generalKeeperABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: generalKeeperABI,
    ...config,
  } as UseContractReadConfig<
    typeof generalKeeperABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"finalized"`.
 */
export function useGeneralKeeperFinalized<
  TSelectData = ReadContractResult<typeof generalKeeperABI, 'finalized'>,
>(
  config: Omit<
    UseContractReadConfig<typeof generalKeeperABI, 'finalized', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: generalKeeperABI,
    functionName: 'finalized',
    ...config,
  } as UseContractReadConfig<typeof generalKeeperABI, 'finalized', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"getBOA"`.
 */
export function useGeneralKeeperGetBoa<
  TSelectData = ReadContractResult<typeof generalKeeperABI, 'getBOA'>,
>(
  config: Omit<
    UseContractReadConfig<typeof generalKeeperABI, 'getBOA', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: generalKeeperABI,
    functionName: 'getBOA',
    ...config,
  } as UseContractReadConfig<typeof generalKeeperABI, 'getBOA', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"getBOD"`.
 */
export function useGeneralKeeperGetBod<
  TSelectData = ReadContractResult<typeof generalKeeperABI, 'getBOD'>,
>(
  config: Omit<
    UseContractReadConfig<typeof generalKeeperABI, 'getBOD', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: generalKeeperABI,
    functionName: 'getBOD',
    ...config,
  } as UseContractReadConfig<typeof generalKeeperABI, 'getBOD', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"getBOG"`.
 */
export function useGeneralKeeperGetBog<
  TSelectData = ReadContractResult<typeof generalKeeperABI, 'getBOG'>,
>(
  config: Omit<
    UseContractReadConfig<typeof generalKeeperABI, 'getBOG', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: generalKeeperABI,
    functionName: 'getBOG',
    ...config,
  } as UseContractReadConfig<typeof generalKeeperABI, 'getBOG', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"getBOH"`.
 */
export function useGeneralKeeperGetBoh<
  TSelectData = ReadContractResult<typeof generalKeeperABI, 'getBOH'>,
>(
  config: Omit<
    UseContractReadConfig<typeof generalKeeperABI, 'getBOH', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: generalKeeperABI,
    functionName: 'getBOH',
    ...config,
  } as UseContractReadConfig<typeof generalKeeperABI, 'getBOH', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"getBOO"`.
 */
export function useGeneralKeeperGetBoo<
  TSelectData = ReadContractResult<typeof generalKeeperABI, 'getBOO'>,
>(
  config: Omit<
    UseContractReadConfig<typeof generalKeeperABI, 'getBOO', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: generalKeeperABI,
    functionName: 'getBOO',
    ...config,
  } as UseContractReadConfig<typeof generalKeeperABI, 'getBOO', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"getBOP"`.
 */
export function useGeneralKeeperGetBop<
  TSelectData = ReadContractResult<typeof generalKeeperABI, 'getBOP'>,
>(
  config: Omit<
    UseContractReadConfig<typeof generalKeeperABI, 'getBOP', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: generalKeeperABI,
    functionName: 'getBOP',
    ...config,
  } as UseContractReadConfig<typeof generalKeeperABI, 'getBOP', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"getBOS"`.
 */
export function useGeneralKeeperGetBos<
  TSelectData = ReadContractResult<typeof generalKeeperABI, 'getBOS'>,
>(
  config: Omit<
    UseContractReadConfig<typeof generalKeeperABI, 'getBOS', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: generalKeeperABI,
    functionName: 'getBOS',
    ...config,
  } as UseContractReadConfig<typeof generalKeeperABI, 'getBOS', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"getBook"`.
 */
export function useGeneralKeeperGetBook<
  TSelectData = ReadContractResult<typeof generalKeeperABI, 'getBook'>,
>(
  config: Omit<
    UseContractReadConfig<typeof generalKeeperABI, 'getBook', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: generalKeeperABI,
    functionName: 'getBook',
    ...config,
  } as UseContractReadConfig<typeof generalKeeperABI, 'getBook', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"getBookeeper"`.
 */
export function useGeneralKeeperGetBookeeper<
  TSelectData = ReadContractResult<typeof generalKeeperABI, 'getBookeeper'>,
>(
  config: Omit<
    UseContractReadConfig<typeof generalKeeperABI, 'getBookeeper', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: generalKeeperABI,
    functionName: 'getBookeeper',
    ...config,
  } as UseContractReadConfig<
    typeof generalKeeperABI,
    'getBookeeper',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"getGeneralCounsel"`.
 */
export function useGeneralKeeperGetGeneralCounsel<
  TSelectData = ReadContractResult<
    typeof generalKeeperABI,
    'getGeneralCounsel'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof generalKeeperABI,
      'getGeneralCounsel',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: generalKeeperABI,
    functionName: 'getGeneralCounsel',
    ...config,
  } as UseContractReadConfig<
    typeof generalKeeperABI,
    'getGeneralCounsel',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"getKeeper"`.
 */
export function useGeneralKeeperGetKeeper<
  TSelectData = ReadContractResult<typeof generalKeeperABI, 'getKeeper'>,
>(
  config: Omit<
    UseContractReadConfig<typeof generalKeeperABI, 'getKeeper', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: generalKeeperABI,
    functionName: 'getKeeper',
    ...config,
  } as UseContractReadConfig<typeof generalKeeperABI, 'getKeeper', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"getOwner"`.
 */
export function useGeneralKeeperGetOwner<
  TSelectData = ReadContractResult<typeof generalKeeperABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof generalKeeperABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: generalKeeperABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<typeof generalKeeperABI, 'getOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"getROM"`.
 */
export function useGeneralKeeperGetRom<
  TSelectData = ReadContractResult<typeof generalKeeperABI, 'getROM'>,
>(
  config: Omit<
    UseContractReadConfig<typeof generalKeeperABI, 'getROM', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: generalKeeperABI,
    functionName: 'getROM',
    ...config,
  } as UseContractReadConfig<typeof generalKeeperABI, 'getROM', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"getROS"`.
 */
export function useGeneralKeeperGetRos<
  TSelectData = ReadContractResult<typeof generalKeeperABI, 'getROS'>,
>(
  config: Omit<
    UseContractReadConfig<typeof generalKeeperABI, 'getROS', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: generalKeeperABI,
    functionName: 'getROS',
    ...config,
  } as UseContractReadConfig<typeof generalKeeperABI, 'getROS', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"getSHA"`.
 */
export function useGeneralKeeperGetSha<
  TSelectData = ReadContractResult<typeof generalKeeperABI, 'getSHA'>,
>(
  config: Omit<
    UseContractReadConfig<typeof generalKeeperABI, 'getSHA', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: generalKeeperABI,
    functionName: 'getSHA',
    ...config,
  } as UseContractReadConfig<typeof generalKeeperABI, 'getSHA', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"hasRole"`.
 */
export function useGeneralKeeperHasRole<
  TSelectData = ReadContractResult<typeof generalKeeperABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof generalKeeperABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: generalKeeperABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof generalKeeperABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"isKeeper"`.
 */
export function useGeneralKeeperIsKeeper<
  TSelectData = ReadContractResult<typeof generalKeeperABI, 'isKeeper'>,
>(
  config: Omit<
    UseContractReadConfig<typeof generalKeeperABI, 'isKeeper', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: generalKeeperABI,
    functionName: 'isKeeper',
    ...config,
  } as UseContractReadConfig<typeof generalKeeperABI, 'isKeeper', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"nameOfCompany"`.
 */
export function useGeneralKeeperNameOfCompany<
  TSelectData = ReadContractResult<typeof generalKeeperABI, 'nameOfCompany'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof generalKeeperABI,
      'nameOfCompany',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: generalKeeperABI,
    functionName: 'nameOfCompany',
    ...config,
  } as UseContractReadConfig<
    typeof generalKeeperABI,
    'nameOfCompany',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"regNumOfCompany"`.
 */
export function useGeneralKeeperRegNumOfCompany<
  TSelectData = ReadContractResult<typeof generalKeeperABI, 'regNumOfCompany'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof generalKeeperABI,
      'regNumOfCompany',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: generalKeeperABI,
    functionName: 'regNumOfCompany',
    ...config,
  } as UseContractReadConfig<
    typeof generalKeeperABI,
    'regNumOfCompany',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"symbolOfCompany"`.
 */
export function useGeneralKeeperSymbolOfCompany<
  TSelectData = ReadContractResult<typeof generalKeeperABI, 'symbolOfCompany'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof generalKeeperABI,
      'symbolOfCompany',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: generalKeeperABI,
    functionName: 'symbolOfCompany',
    ...config,
  } as UseContractReadConfig<
    typeof generalKeeperABI,
    'symbolOfCompany',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__.
 */
export function useGeneralKeeperWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof generalKeeperABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, TFunctionName>({
    abi: generalKeeperABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useGeneralKeeperAbandonRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'abandonRole'
        >['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'abandonRole'> & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'abandonRole'>({
    abi: generalKeeperABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"acceptAlongDeal"`.
 */
export function useGeneralKeeperAcceptAlongDeal<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'acceptAlongDeal'
        >['abi'],
        'acceptAlongDeal'
      > & { functionName?: 'acceptAlongDeal' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'acceptAlongDeal'
      > & {
        abi?: never
        functionName?: 'acceptAlongDeal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'acceptAlongDeal'>({
    abi: generalKeeperABI,
    functionName: 'acceptAlongDeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"acceptFirstRefusal"`.
 */
export function useGeneralKeeperAcceptFirstRefusal<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'acceptFirstRefusal'
        >['abi'],
        'acceptFirstRefusal'
      > & { functionName?: 'acceptFirstRefusal' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'acceptFirstRefusal'
      > & {
        abi?: never
        functionName?: 'acceptFirstRefusal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'acceptFirstRefusal'>(
    {
      abi: generalKeeperABI,
      functionName: 'acceptFirstRefusal',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"acceptSHA"`.
 */
export function useGeneralKeeperAcceptSha<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof generalKeeperABI, 'acceptSHA'>['abi'],
        'acceptSHA'
      > & { functionName?: 'acceptSHA' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'acceptSHA'> & {
        abi?: never
        functionName?: 'acceptSHA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'acceptSHA'>({
    abi: generalKeeperABI,
    functionName: 'acceptSHA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"activateSHA"`.
 */
export function useGeneralKeeperActivateSha<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'activateSHA'
        >['abi'],
        'activateSHA'
      > & { functionName?: 'activateSHA' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'activateSHA'> & {
        abi?: never
        functionName?: 'activateSHA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'activateSHA'>({
    abi: generalKeeperABI,
    functionName: 'activateSHA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"castVote"`.
 */
export function useGeneralKeeperCastVote<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof generalKeeperABI, 'castVote'>['abi'],
        'castVote'
      > & { functionName?: 'castVote' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'castVote'> & {
        abi?: never
        functionName?: 'castVote'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'castVote'>({
    abi: generalKeeperABI,
    functionName: 'castVote',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"castVoteOfGM"`.
 */
export function useGeneralKeeperCastVoteOfGm<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'castVoteOfGM'
        >['abi'],
        'castVoteOfGM'
      > & { functionName?: 'castVoteOfGM' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'castVoteOfGM'> & {
        abi?: never
        functionName?: 'castVoteOfGM'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'castVoteOfGM'>({
    abi: generalKeeperABI,
    functionName: 'castVoteOfGM',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"circulateIA"`.
 */
export function useGeneralKeeperCirculateIa<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'circulateIA'
        >['abi'],
        'circulateIA'
      > & { functionName?: 'circulateIA' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'circulateIA'> & {
        abi?: never
        functionName?: 'circulateIA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'circulateIA'>({
    abi: generalKeeperABI,
    functionName: 'circulateIA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"circulateSHA"`.
 */
export function useGeneralKeeperCirculateSha<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'circulateSHA'
        >['abi'],
        'circulateSHA'
      > & { functionName?: 'circulateSHA' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'circulateSHA'> & {
        abi?: never
        functionName?: 'circulateSHA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'circulateSHA'>({
    abi: generalKeeperABI,
    functionName: 'circulateSHA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"closeDeal"`.
 */
export function useGeneralKeeperCloseDeal<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof generalKeeperABI, 'closeDeal'>['abi'],
        'closeDeal'
      > & { functionName?: 'closeDeal' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'closeDeal'> & {
        abi?: never
        functionName?: 'closeDeal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'closeDeal'>({
    abi: generalKeeperABI,
    functionName: 'closeDeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"createAction"`.
 */
export function useGeneralKeeperCreateAction<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'createAction'
        >['abi'],
        'createAction'
      > & { functionName?: 'createAction' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'createAction'> & {
        abi?: never
        functionName?: 'createAction'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'createAction'>({
    abi: generalKeeperABI,
    functionName: 'createAction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"createActionOfGM"`.
 */
export function useGeneralKeeperCreateActionOfGm<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'createActionOfGM'
        >['abi'],
        'createActionOfGM'
      > & { functionName?: 'createActionOfGM' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'createActionOfGM'
      > & {
        abi?: never
        functionName?: 'createActionOfGM'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'createActionOfGM'>({
    abi: generalKeeperABI,
    functionName: 'createActionOfGM',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"createCorpSeal"`.
 */
export function useGeneralKeeperCreateCorpSeal<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'createCorpSeal'
        >['abi'],
        'createCorpSeal'
      > & { functionName?: 'createCorpSeal' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'createCorpSeal'
      > & {
        abi?: never
        functionName?: 'createCorpSeal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'createCorpSeal'>({
    abi: generalKeeperABI,
    functionName: 'createCorpSeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"createIA"`.
 */
export function useGeneralKeeperCreateIa<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof generalKeeperABI, 'createIA'>['abi'],
        'createIA'
      > & { functionName?: 'createIA' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'createIA'> & {
        abi?: never
        functionName?: 'createIA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'createIA'>({
    abi: generalKeeperABI,
    functionName: 'createIA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"createMotionToApproveDoc"`.
 */
export function useGeneralKeeperCreateMotionToApproveDoc<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'createMotionToApproveDoc'
        >['abi'],
        'createMotionToApproveDoc'
      > & { functionName?: 'createMotionToApproveDoc' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'createMotionToApproveDoc'
      > & {
        abi?: never
        functionName?: 'createMotionToApproveDoc'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof generalKeeperABI,
    'createMotionToApproveDoc'
  >({
    abi: generalKeeperABI,
    functionName: 'createMotionToApproveDoc',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"createMotionToRemoveDirector"`.
 */
export function useGeneralKeeperCreateMotionToRemoveDirector<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'createMotionToRemoveDirector'
        >['abi'],
        'createMotionToRemoveDirector'
      > & { functionName?: 'createMotionToRemoveDirector' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'createMotionToRemoveDirector'
      > & {
        abi?: never
        functionName?: 'createMotionToRemoveDirector'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof generalKeeperABI,
    'createMotionToRemoveDirector'
  >({
    abi: generalKeeperABI,
    functionName: 'createMotionToRemoveDirector',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"createMotionToRemoveOfficer"`.
 */
export function useGeneralKeeperCreateMotionToRemoveOfficer<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'createMotionToRemoveOfficer'
        >['abi'],
        'createMotionToRemoveOfficer'
      > & { functionName?: 'createMotionToRemoveOfficer' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'createMotionToRemoveOfficer'
      > & {
        abi?: never
        functionName?: 'createMotionToRemoveOfficer'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof generalKeeperABI,
    'createMotionToRemoveOfficer'
  >({
    abi: generalKeeperABI,
    functionName: 'createMotionToRemoveOfficer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"createPledge"`.
 */
export function useGeneralKeeperCreatePledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'createPledge'
        >['abi'],
        'createPledge'
      > & { functionName?: 'createPledge' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'createPledge'> & {
        abi?: never
        functionName?: 'createPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'createPledge'>({
    abi: generalKeeperABI,
    functionName: 'createPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"createSHA"`.
 */
export function useGeneralKeeperCreateSha<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof generalKeeperABI, 'createSHA'>['abi'],
        'createSHA'
      > & { functionName?: 'createSHA' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'createSHA'> & {
        abi?: never
        functionName?: 'createSHA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'createSHA'>({
    abi: generalKeeperABI,
    functionName: 'createSHA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"createSwap"`.
 */
export function useGeneralKeeperCreateSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'createSwap'
        >['abi'],
        'createSwap'
      > & { functionName?: 'createSwap' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'createSwap'> & {
        abi?: never
        functionName?: 'createSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'createSwap'>({
    abi: generalKeeperABI,
    functionName: 'createSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"crystalizeSwap"`.
 */
export function useGeneralKeeperCrystalizeSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'crystalizeSwap'
        >['abi'],
        'crystalizeSwap'
      > & { functionName?: 'crystalizeSwap' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'crystalizeSwap'
      > & {
        abi?: never
        functionName?: 'crystalizeSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'crystalizeSwap'>({
    abi: generalKeeperABI,
    functionName: 'crystalizeSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"decreaseCapital"`.
 */
export function useGeneralKeeperDecreaseCapital<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'decreaseCapital'
        >['abi'],
        'decreaseCapital'
      > & { functionName?: 'decreaseCapital' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'decreaseCapital'
      > & {
        abi?: never
        functionName?: 'decreaseCapital'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'decreaseCapital'>({
    abi: generalKeeperABI,
    functionName: 'decreaseCapital',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"entrustDelegaterForBoardMeeting"`.
 */
export function useGeneralKeeperEntrustDelegaterForBoardMeeting<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'entrustDelegaterForBoardMeeting'
        >['abi'],
        'entrustDelegaterForBoardMeeting'
      > & { functionName?: 'entrustDelegaterForBoardMeeting' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'entrustDelegaterForBoardMeeting'
      > & {
        abi?: never
        functionName?: 'entrustDelegaterForBoardMeeting'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof generalKeeperABI,
    'entrustDelegaterForBoardMeeting'
  >({
    abi: generalKeeperABI,
    functionName: 'entrustDelegaterForBoardMeeting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"entrustDelegaterForGeneralMeeting"`.
 */
export function useGeneralKeeperEntrustDelegaterForGeneralMeeting<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'entrustDelegaterForGeneralMeeting'
        >['abi'],
        'entrustDelegaterForGeneralMeeting'
      > & { functionName?: 'entrustDelegaterForGeneralMeeting' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'entrustDelegaterForGeneralMeeting'
      > & {
        abi?: never
        functionName?: 'entrustDelegaterForGeneralMeeting'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof generalKeeperABI,
    'entrustDelegaterForGeneralMeeting'
  >({
    abi: generalKeeperABI,
    functionName: 'entrustDelegaterForGeneralMeeting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"execAction"`.
 */
export function useGeneralKeeperExecAction<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'execAction'
        >['abi'],
        'execAction'
      > & { functionName?: 'execAction' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'execAction'> & {
        abi?: never
        functionName?: 'execAction'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'execAction'>({
    abi: generalKeeperABI,
    functionName: 'execAction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"execActionOfGM"`.
 */
export function useGeneralKeeperExecActionOfGm<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'execActionOfGM'
        >['abi'],
        'execActionOfGM'
      > & { functionName?: 'execActionOfGM' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'execActionOfGM'
      > & {
        abi?: never
        functionName?: 'execActionOfGM'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'execActionOfGM'>({
    abi: generalKeeperABI,
    functionName: 'execActionOfGM',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"execAntiDilution"`.
 */
export function useGeneralKeeperExecAntiDilution<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'execAntiDilution'
        >['abi'],
        'execAntiDilution'
      > & { functionName?: 'execAntiDilution' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'execAntiDilution'
      > & {
        abi?: never
        functionName?: 'execAntiDilution'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'execAntiDilution'>({
    abi: generalKeeperABI,
    functionName: 'execAntiDilution',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"execDragAlong"`.
 */
export function useGeneralKeeperExecDragAlong<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'execDragAlong'
        >['abi'],
        'execDragAlong'
      > & { functionName?: 'execDragAlong' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'execDragAlong'
      > & {
        abi?: never
        functionName?: 'execDragAlong'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'execDragAlong'>({
    abi: generalKeeperABI,
    functionName: 'execDragAlong',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"execFirstRefusal"`.
 */
export function useGeneralKeeperExecFirstRefusal<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'execFirstRefusal'
        >['abi'],
        'execFirstRefusal'
      > & { functionName?: 'execFirstRefusal' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'execFirstRefusal'
      > & {
        abi?: never
        functionName?: 'execFirstRefusal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'execFirstRefusal'>({
    abi: generalKeeperABI,
    functionName: 'execFirstRefusal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"execOption"`.
 */
export function useGeneralKeeperExecOption<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'execOption'
        >['abi'],
        'execOption'
      > & { functionName?: 'execOption' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'execOption'> & {
        abi?: never
        functionName?: 'execOption'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'execOption'>({
    abi: generalKeeperABI,
    functionName: 'execOption',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"execPledge"`.
 */
export function useGeneralKeeperExecPledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'execPledge'
        >['abi'],
        'execPledge'
      > & { functionName?: 'execPledge' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'execPledge'> & {
        abi?: never
        functionName?: 'execPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'execPledge'>({
    abi: generalKeeperABI,
    functionName: 'execPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"execSwap"`.
 */
export function useGeneralKeeperExecSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof generalKeeperABI, 'execSwap'>['abi'],
        'execSwap'
      > & { functionName?: 'execSwap' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'execSwap'> & {
        abi?: never
        functionName?: 'execSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'execSwap'>({
    abi: generalKeeperABI,
    functionName: 'execSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"execSwapOrder"`.
 */
export function useGeneralKeeperExecSwapOrder<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'execSwapOrder'
        >['abi'],
        'execSwapOrder'
      > & { functionName?: 'execSwapOrder' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'execSwapOrder'
      > & {
        abi?: never
        functionName?: 'execSwapOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'execSwapOrder'>({
    abi: generalKeeperABI,
    functionName: 'execSwapOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"execTagAlong"`.
 */
export function useGeneralKeeperExecTagAlong<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'execTagAlong'
        >['abi'],
        'execTagAlong'
      > & { functionName?: 'execTagAlong' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'execTagAlong'> & {
        abi?: never
        functionName?: 'execTagAlong'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'execTagAlong'>({
    abi: generalKeeperABI,
    functionName: 'execTagAlong',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"extendPledge"`.
 */
export function useGeneralKeeperExtendPledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'extendPledge'
        >['abi'],
        'extendPledge'
      > & { functionName?: 'extendPledge' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'extendPledge'> & {
        abi?: never
        functionName?: 'extendPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'extendPledge'>({
    abi: generalKeeperABI,
    functionName: 'extendPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"grantRole"`.
 */
export function useGeneralKeeperGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof generalKeeperABI, 'grantRole'>['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'grantRole'>({
    abi: generalKeeperABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"init"`.
 */
export function useGeneralKeeperInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof generalKeeperABI, 'init'>['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'init'>({
    abi: generalKeeperABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"issueNewShare"`.
 */
export function useGeneralKeeperIssueNewShare<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'issueNewShare'
        >['abi'],
        'issueNewShare'
      > & { functionName?: 'issueNewShare' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'issueNewShare'
      > & {
        abi?: never
        functionName?: 'issueNewShare'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'issueNewShare'>({
    abi: generalKeeperABI,
    functionName: 'issueNewShare',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"lockContents"`.
 */
export function useGeneralKeeperLockContents<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'lockContents'
        >['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'lockContents'> & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'lockContents'>({
    abi: generalKeeperABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"lockPledge"`.
 */
export function useGeneralKeeperLockPledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'lockPledge'
        >['abi'],
        'lockPledge'
      > & { functionName?: 'lockPledge' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'lockPledge'> & {
        abi?: never
        functionName?: 'lockPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'lockPledge'>({
    abi: generalKeeperABI,
    functionName: 'lockPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"lockSwap"`.
 */
export function useGeneralKeeperLockSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof generalKeeperABI, 'lockSwap'>['abi'],
        'lockSwap'
      > & { functionName?: 'lockSwap' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'lockSwap'> & {
        abi?: never
        functionName?: 'lockSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'lockSwap'>({
    abi: generalKeeperABI,
    functionName: 'lockSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"lockSwapOrder"`.
 */
export function useGeneralKeeperLockSwapOrder<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'lockSwapOrder'
        >['abi'],
        'lockSwapOrder'
      > & { functionName?: 'lockSwapOrder' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'lockSwapOrder'
      > & {
        abi?: never
        functionName?: 'lockSwapOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'lockSwapOrder'>({
    abi: generalKeeperABI,
    functionName: 'lockSwapOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"nominateDirector"`.
 */
export function useGeneralKeeperNominateDirector<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'nominateDirector'
        >['abi'],
        'nominateDirector'
      > & { functionName?: 'nominateDirector' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'nominateDirector'
      > & {
        abi?: never
        functionName?: 'nominateDirector'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'nominateDirector'>({
    abi: generalKeeperABI,
    functionName: 'nominateDirector',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"nominateOfficer"`.
 */
export function useGeneralKeeperNominateOfficer<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'nominateOfficer'
        >['abi'],
        'nominateOfficer'
      > & { functionName?: 'nominateOfficer' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'nominateOfficer'
      > & {
        abi?: never
        functionName?: 'nominateOfficer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'nominateOfficer'>({
    abi: generalKeeperABI,
    functionName: 'nominateOfficer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"placeSwapOrder"`.
 */
export function useGeneralKeeperPlaceSwapOrder<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'placeSwapOrder'
        >['abi'],
        'placeSwapOrder'
      > & { functionName?: 'placeSwapOrder' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'placeSwapOrder'
      > & {
        abi?: never
        functionName?: 'placeSwapOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'placeSwapOrder'>({
    abi: generalKeeperABI,
    functionName: 'placeSwapOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"proposeDocOfGM"`.
 */
export function useGeneralKeeperProposeDocOfGm<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'proposeDocOfGM'
        >['abi'],
        'proposeDocOfGM'
      > & { functionName?: 'proposeDocOfGM' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'proposeDocOfGM'
      > & {
        abi?: never
        functionName?: 'proposeDocOfGM'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'proposeDocOfGM'>({
    abi: generalKeeperABI,
    functionName: 'proposeDocOfGM',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"proposeMotionToBoard"`.
 */
export function useGeneralKeeperProposeMotionToBoard<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'proposeMotionToBoard'
        >['abi'],
        'proposeMotionToBoard'
      > & { functionName?: 'proposeMotionToBoard' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'proposeMotionToBoard'
      > & {
        abi?: never
        functionName?: 'proposeMotionToBoard'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof generalKeeperABI,
    'proposeMotionToBoard'
  >({
    abi: generalKeeperABI,
    functionName: 'proposeMotionToBoard',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"proposeMotionToGeneralMeeting"`.
 */
export function useGeneralKeeperProposeMotionToGeneralMeeting<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'proposeMotionToGeneralMeeting'
        >['abi'],
        'proposeMotionToGeneralMeeting'
      > & { functionName?: 'proposeMotionToGeneralMeeting' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'proposeMotionToGeneralMeeting'
      > & {
        abi?: never
        functionName?: 'proposeMotionToGeneralMeeting'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof generalKeeperABI,
    'proposeMotionToGeneralMeeting'
  >({
    abi: generalKeeperABI,
    functionName: 'proposeMotionToGeneralMeeting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"pushToCoffer"`.
 */
export function useGeneralKeeperPushToCoffer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'pushToCoffer'
        >['abi'],
        'pushToCoffer'
      > & { functionName?: 'pushToCoffer' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'pushToCoffer'> & {
        abi?: never
        functionName?: 'pushToCoffer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'pushToCoffer'>({
    abi: generalKeeperABI,
    functionName: 'pushToCoffer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"quitPosition"`.
 */
export function useGeneralKeeperQuitPosition<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'quitPosition'
        >['abi'],
        'quitPosition'
      > & { functionName?: 'quitPosition' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'quitPosition'> & {
        abi?: never
        functionName?: 'quitPosition'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'quitPosition'>({
    abi: generalKeeperABI,
    functionName: 'quitPosition',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"refundDebt"`.
 */
export function useGeneralKeeperRefundDebt<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'refundDebt'
        >['abi'],
        'refundDebt'
      > & { functionName?: 'refundDebt' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'refundDebt'> & {
        abi?: never
        functionName?: 'refundDebt'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'refundDebt'>({
    abi: generalKeeperABI,
    functionName: 'refundDebt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"regBook"`.
 */
export function useGeneralKeeperRegBook<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof generalKeeperABI, 'regBook'>['abi'],
        'regBook'
      > & { functionName?: 'regBook' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'regBook'> & {
        abi?: never
        functionName?: 'regBook'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'regBook'>({
    abi: generalKeeperABI,
    functionName: 'regBook',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"regKeeper"`.
 */
export function useGeneralKeeperRegKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof generalKeeperABI, 'regKeeper'>['abi'],
        'regKeeper'
      > & { functionName?: 'regKeeper' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'regKeeper'> & {
        abi?: never
        functionName?: 'regKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'regKeeper'>({
    abi: generalKeeperABI,
    functionName: 'regKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"releasePledge"`.
 */
export function useGeneralKeeperReleasePledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'releasePledge'
        >['abi'],
        'releasePledge'
      > & { functionName?: 'releasePledge' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'releasePledge'
      > & {
        abi?: never
        functionName?: 'releasePledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'releasePledge'>({
    abi: generalKeeperABI,
    functionName: 'releasePledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"releaseSwap"`.
 */
export function useGeneralKeeperReleaseSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'releaseSwap'
        >['abi'],
        'releaseSwap'
      > & { functionName?: 'releaseSwap' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'releaseSwap'> & {
        abi?: never
        functionName?: 'releaseSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'releaseSwap'>({
    abi: generalKeeperABI,
    functionName: 'releaseSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"releaseSwapOrder"`.
 */
export function useGeneralKeeperReleaseSwapOrder<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'releaseSwapOrder'
        >['abi'],
        'releaseSwapOrder'
      > & { functionName?: 'releaseSwapOrder' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'releaseSwapOrder'
      > & {
        abi?: never
        functionName?: 'releaseSwapOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'releaseSwapOrder'>({
    abi: generalKeeperABI,
    functionName: 'releaseSwapOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function useGeneralKeeperRemoveDirectKeeper<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'removeDirectKeeper'
        >['abi'],
        'removeDirectKeeper'
      > & { functionName?: 'removeDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'removeDirectKeeper'
      > & {
        abi?: never
        functionName?: 'removeDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'removeDirectKeeper'>(
    {
      abi: generalKeeperABI,
      functionName: 'removeDirectKeeper',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"removeDirector"`.
 */
export function useGeneralKeeperRemoveDirector<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'removeDirector'
        >['abi'],
        'removeDirector'
      > & { functionName?: 'removeDirector' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'removeDirector'
      > & {
        abi?: never
        functionName?: 'removeDirector'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'removeDirector'>({
    abi: generalKeeperABI,
    functionName: 'removeDirector',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"removeOfficer"`.
 */
export function useGeneralKeeperRemoveOfficer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'removeOfficer'
        >['abi'],
        'removeOfficer'
      > & { functionName?: 'removeOfficer' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'removeOfficer'
      > & {
        abi?: never
        functionName?: 'removeOfficer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'removeOfficer'>({
    abi: generalKeeperABI,
    functionName: 'removeOfficer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useGeneralKeeperRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'renounceRole'
        >['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'renounceRole'> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'renounceRole'>({
    abi: generalKeeperABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"requestPaidInCapital"`.
 */
export function useGeneralKeeperRequestPaidInCapital<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'requestPaidInCapital'
        >['abi'],
        'requestPaidInCapital'
      > & { functionName?: 'requestPaidInCapital' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'requestPaidInCapital'
      > & {
        abi?: never
        functionName?: 'requestPaidInCapital'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof generalKeeperABI,
    'requestPaidInCapital'
  >({
    abi: generalKeeperABI,
    functionName: 'requestPaidInCapital',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"requestToBuy"`.
 */
export function useGeneralKeeperRequestToBuy<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'requestToBuy'
        >['abi'],
        'requestToBuy'
      > & { functionName?: 'requestToBuy' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'requestToBuy'> & {
        abi?: never
        functionName?: 'requestToBuy'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'requestToBuy'>({
    abi: generalKeeperABI,
    functionName: 'requestToBuy',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"revokeDeal"`.
 */
export function useGeneralKeeperRevokeDeal<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'revokeDeal'
        >['abi'],
        'revokeDeal'
      > & { functionName?: 'revokeDeal' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'revokeDeal'> & {
        abi?: never
        functionName?: 'revokeDeal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'revokeDeal'>({
    abi: generalKeeperABI,
    functionName: 'revokeDeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"revokePledge"`.
 */
export function useGeneralKeeperRevokePledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'revokePledge'
        >['abi'],
        'revokePledge'
      > & { functionName?: 'revokePledge' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'revokePledge'> & {
        abi?: never
        functionName?: 'revokePledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'revokePledge'>({
    abi: generalKeeperABI,
    functionName: 'revokePledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useGeneralKeeperRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'revokeRole'
        >['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'revokeRole'>({
    abi: generalKeeperABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"revokeSwap"`.
 */
export function useGeneralKeeperRevokeSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'revokeSwap'
        >['abi'],
        'revokeSwap'
      > & { functionName?: 'revokeSwap' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'revokeSwap'> & {
        abi?: never
        functionName?: 'revokeSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'revokeSwap'>({
    abi: generalKeeperABI,
    functionName: 'revokeSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"revokeSwapOrder"`.
 */
export function useGeneralKeeperRevokeSwapOrder<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'revokeSwapOrder'
        >['abi'],
        'revokeSwapOrder'
      > & { functionName?: 'revokeSwapOrder' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'revokeSwapOrder'
      > & {
        abi?: never
        functionName?: 'revokeSwapOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'revokeSwapOrder'>({
    abi: generalKeeperABI,
    functionName: 'revokeSwapOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"setAmtBase"`.
 */
export function useGeneralKeeperSetAmtBase<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'setAmtBase'
        >['abi'],
        'setAmtBase'
      > & { functionName?: 'setAmtBase' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'setAmtBase'> & {
        abi?: never
        functionName?: 'setAmtBase'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'setAmtBase'>({
    abi: generalKeeperABI,
    functionName: 'setAmtBase',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"setCompInfo"`.
 */
export function useGeneralKeeperSetCompInfo<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'setCompInfo'
        >['abi'],
        'setCompInfo'
      > & { functionName?: 'setCompInfo' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'setCompInfo'> & {
        abi?: never
        functionName?: 'setCompInfo'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'setCompInfo'>({
    abi: generalKeeperABI,
    functionName: 'setCompInfo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useGeneralKeeperSetDirectKeeper<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'setDirectKeeper'
        >['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'setDirectKeeper'
      > & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'setDirectKeeper'>({
    abi: generalKeeperABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function useGeneralKeeperSetGeneralCounsel<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'setGeneralCounsel'
        >['abi'],
        'setGeneralCounsel'
      > & { functionName?: 'setGeneralCounsel' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'setGeneralCounsel'
      > & {
        abi?: never
        functionName?: 'setGeneralCounsel'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'setGeneralCounsel'>({
    abi: generalKeeperABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"setMaxQtyOfMembers"`.
 */
export function useGeneralKeeperSetMaxQtyOfMembers<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'setMaxQtyOfMembers'
        >['abi'],
        'setMaxQtyOfMembers'
      > & { functionName?: 'setMaxQtyOfMembers' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'setMaxQtyOfMembers'
      > & {
        abi?: never
        functionName?: 'setMaxQtyOfMembers'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'setMaxQtyOfMembers'>(
    {
      abi: generalKeeperABI,
      functionName: 'setMaxQtyOfMembers',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"setOwner"`.
 */
export function useGeneralKeeperSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof generalKeeperABI, 'setOwner'>['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'setOwner'>({
    abi: generalKeeperABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"setPayInAmt"`.
 */
export function useGeneralKeeperSetPayInAmt<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'setPayInAmt'
        >['abi'],
        'setPayInAmt'
      > & { functionName?: 'setPayInAmt' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'setPayInAmt'> & {
        abi?: never
        functionName?: 'setPayInAmt'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'setPayInAmt'>({
    abi: generalKeeperABI,
    functionName: 'setPayInAmt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useGeneralKeeperSetRoleAdmin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'setRoleAdmin'
        >['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'setRoleAdmin'> & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'setRoleAdmin'>({
    abi: generalKeeperABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"setVoteBase"`.
 */
export function useGeneralKeeperSetVoteBase<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'setVoteBase'
        >['abi'],
        'setVoteBase'
      > & { functionName?: 'setVoteBase' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'setVoteBase'> & {
        abi?: never
        functionName?: 'setVoteBase'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'setVoteBase'>({
    abi: generalKeeperABI,
    functionName: 'setVoteBase',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"signIA"`.
 */
export function useGeneralKeeperSignIa<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof generalKeeperABI, 'signIA'>['abi'],
        'signIA'
      > & { functionName?: 'signIA' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'signIA'> & {
        abi?: never
        functionName?: 'signIA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'signIA'>({
    abi: generalKeeperABI,
    functionName: 'signIA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"signSHA"`.
 */
export function useGeneralKeeperSignSha<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof generalKeeperABI, 'signSHA'>['abi'],
        'signSHA'
      > & { functionName?: 'signSHA' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'signSHA'> & {
        abi?: never
        functionName?: 'signSHA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'signSHA'>({
    abi: generalKeeperABI,
    functionName: 'signSHA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"takeGiftShares"`.
 */
export function useGeneralKeeperTakeGiftShares<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'takeGiftShares'
        >['abi'],
        'takeGiftShares'
      > & { functionName?: 'takeGiftShares' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'takeGiftShares'
      > & {
        abi?: never
        functionName?: 'takeGiftShares'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'takeGiftShares'>({
    abi: generalKeeperABI,
    functionName: 'takeGiftShares',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"takePosition"`.
 */
export function useGeneralKeeperTakePosition<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'takePosition'
        >['abi'],
        'takePosition'
      > & { functionName?: 'takePosition' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'takePosition'> & {
        abi?: never
        functionName?: 'takePosition'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'takePosition'>({
    abi: generalKeeperABI,
    functionName: 'takePosition',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"takeSeat"`.
 */
export function useGeneralKeeperTakeSeat<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof generalKeeperABI, 'takeSeat'>['abi'],
        'takeSeat'
      > & { functionName?: 'takeSeat' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'takeSeat'> & {
        abi?: never
        functionName?: 'takeSeat'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'takeSeat'>({
    abi: generalKeeperABI,
    functionName: 'takeSeat',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"terminateDeal"`.
 */
export function useGeneralKeeperTerminateDeal<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'terminateDeal'
        >['abi'],
        'terminateDeal'
      > & { functionName?: 'terminateDeal' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'terminateDeal'
      > & {
        abi?: never
        functionName?: 'terminateDeal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'terminateDeal'>({
    abi: generalKeeperABI,
    functionName: 'terminateDeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"transferPledge"`.
 */
export function useGeneralKeeperTransferPledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'transferPledge'
        >['abi'],
        'transferPledge'
      > & { functionName?: 'transferPledge' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'transferPledge'
      > & {
        abi?: never
        functionName?: 'transferPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'transferPledge'>({
    abi: generalKeeperABI,
    functionName: 'transferPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"transferSwap"`.
 */
export function useGeneralKeeperTransferSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'transferSwap'
        >['abi'],
        'transferSwap'
      > & { functionName?: 'transferSwap' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'transferSwap'> & {
        abi?: never
        functionName?: 'transferSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'transferSwap'>({
    abi: generalKeeperABI,
    functionName: 'transferSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"transferTargetShare"`.
 */
export function useGeneralKeeperTransferTargetShare<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'transferTargetShare'
        >['abi'],
        'transferTargetShare'
      > & { functionName?: 'transferTargetShare' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'transferTargetShare'
      > & {
        abi?: never
        functionName?: 'transferTargetShare'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof generalKeeperABI,
    'transferTargetShare'
  >({
    abi: generalKeeperABI,
    functionName: 'transferTargetShare',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"updateOracle"`.
 */
export function useGeneralKeeperUpdateOracle<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'updateOracle'
        >['abi'],
        'updateOracle'
      > & { functionName?: 'updateOracle' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'updateOracle'> & {
        abi?: never
        functionName?: 'updateOracle'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'updateOracle'>({
    abi: generalKeeperABI,
    functionName: 'updateOracle',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"voteCounting"`.
 */
export function useGeneralKeeperVoteCounting<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'voteCounting'
        >['abi'],
        'voteCounting'
      > & { functionName?: 'voteCounting' }
    : UseContractWriteConfig<TMode, typeof generalKeeperABI, 'voteCounting'> & {
        abi?: never
        functionName?: 'voteCounting'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'voteCounting'>({
    abi: generalKeeperABI,
    functionName: 'voteCounting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"voteCountingOfGM"`.
 */
export function useGeneralKeeperVoteCountingOfGm<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'voteCountingOfGM'
        >['abi'],
        'voteCountingOfGM'
      > & { functionName?: 'voteCountingOfGM' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'voteCountingOfGM'
      > & {
        abi?: never
        functionName?: 'voteCountingOfGM'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'voteCountingOfGM'>({
    abi: generalKeeperABI,
    functionName: 'voteCountingOfGM',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"withdrawPayInAmt"`.
 */
export function useGeneralKeeperWithdrawPayInAmt<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof generalKeeperABI,
          'withdrawPayInAmt'
        >['abi'],
        'withdrawPayInAmt'
      > & { functionName?: 'withdrawPayInAmt' }
    : UseContractWriteConfig<
        TMode,
        typeof generalKeeperABI,
        'withdrawPayInAmt'
      > & {
        abi?: never
        functionName?: 'withdrawPayInAmt'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof generalKeeperABI, 'withdrawPayInAmt'>({
    abi: generalKeeperABI,
    functionName: 'withdrawPayInAmt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__.
 */
export function usePrepareGeneralKeeperWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareGeneralKeeperAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'abandonRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"acceptAlongDeal"`.
 */
export function usePrepareGeneralKeeperAcceptAlongDeal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'acceptAlongDeal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'acceptAlongDeal',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof generalKeeperABI,
    'acceptAlongDeal'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"acceptFirstRefusal"`.
 */
export function usePrepareGeneralKeeperAcceptFirstRefusal(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof generalKeeperABI,
      'acceptFirstRefusal'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'acceptFirstRefusal',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof generalKeeperABI,
    'acceptFirstRefusal'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"acceptSHA"`.
 */
export function usePrepareGeneralKeeperAcceptSha(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'acceptSHA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'acceptSHA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'acceptSHA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"activateSHA"`.
 */
export function usePrepareGeneralKeeperActivateSha(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'activateSHA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'activateSHA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'activateSHA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"castVote"`.
 */
export function usePrepareGeneralKeeperCastVote(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'castVote'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'castVote',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'castVote'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"castVoteOfGM"`.
 */
export function usePrepareGeneralKeeperCastVoteOfGm(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'castVoteOfGM'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'castVoteOfGM',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'castVoteOfGM'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"circulateIA"`.
 */
export function usePrepareGeneralKeeperCirculateIa(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'circulateIA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'circulateIA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'circulateIA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"circulateSHA"`.
 */
export function usePrepareGeneralKeeperCirculateSha(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'circulateSHA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'circulateSHA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'circulateSHA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"closeDeal"`.
 */
export function usePrepareGeneralKeeperCloseDeal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'closeDeal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'closeDeal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'closeDeal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"createAction"`.
 */
export function usePrepareGeneralKeeperCreateAction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'createAction'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'createAction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'createAction'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"createActionOfGM"`.
 */
export function usePrepareGeneralKeeperCreateActionOfGm(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'createActionOfGM'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'createActionOfGM',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof generalKeeperABI,
    'createActionOfGM'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"createCorpSeal"`.
 */
export function usePrepareGeneralKeeperCreateCorpSeal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'createCorpSeal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'createCorpSeal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'createCorpSeal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"createIA"`.
 */
export function usePrepareGeneralKeeperCreateIa(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'createIA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'createIA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'createIA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"createMotionToApproveDoc"`.
 */
export function usePrepareGeneralKeeperCreateMotionToApproveDoc(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof generalKeeperABI,
      'createMotionToApproveDoc'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'createMotionToApproveDoc',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof generalKeeperABI,
    'createMotionToApproveDoc'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"createMotionToRemoveDirector"`.
 */
export function usePrepareGeneralKeeperCreateMotionToRemoveDirector(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof generalKeeperABI,
      'createMotionToRemoveDirector'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'createMotionToRemoveDirector',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof generalKeeperABI,
    'createMotionToRemoveDirector'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"createMotionToRemoveOfficer"`.
 */
export function usePrepareGeneralKeeperCreateMotionToRemoveOfficer(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof generalKeeperABI,
      'createMotionToRemoveOfficer'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'createMotionToRemoveOfficer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof generalKeeperABI,
    'createMotionToRemoveOfficer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"createPledge"`.
 */
export function usePrepareGeneralKeeperCreatePledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'createPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'createPledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'createPledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"createSHA"`.
 */
export function usePrepareGeneralKeeperCreateSha(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'createSHA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'createSHA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'createSHA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"createSwap"`.
 */
export function usePrepareGeneralKeeperCreateSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'createSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'createSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'createSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"crystalizeSwap"`.
 */
export function usePrepareGeneralKeeperCrystalizeSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'crystalizeSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'crystalizeSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'crystalizeSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"decreaseCapital"`.
 */
export function usePrepareGeneralKeeperDecreaseCapital(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'decreaseCapital'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'decreaseCapital',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof generalKeeperABI,
    'decreaseCapital'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"entrustDelegaterForBoardMeeting"`.
 */
export function usePrepareGeneralKeeperEntrustDelegaterForBoardMeeting(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof generalKeeperABI,
      'entrustDelegaterForBoardMeeting'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'entrustDelegaterForBoardMeeting',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof generalKeeperABI,
    'entrustDelegaterForBoardMeeting'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"entrustDelegaterForGeneralMeeting"`.
 */
export function usePrepareGeneralKeeperEntrustDelegaterForGeneralMeeting(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof generalKeeperABI,
      'entrustDelegaterForGeneralMeeting'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'entrustDelegaterForGeneralMeeting',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof generalKeeperABI,
    'entrustDelegaterForGeneralMeeting'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"execAction"`.
 */
export function usePrepareGeneralKeeperExecAction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'execAction'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'execAction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'execAction'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"execActionOfGM"`.
 */
export function usePrepareGeneralKeeperExecActionOfGm(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'execActionOfGM'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'execActionOfGM',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'execActionOfGM'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"execAntiDilution"`.
 */
export function usePrepareGeneralKeeperExecAntiDilution(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'execAntiDilution'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'execAntiDilution',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof generalKeeperABI,
    'execAntiDilution'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"execDragAlong"`.
 */
export function usePrepareGeneralKeeperExecDragAlong(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'execDragAlong'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'execDragAlong',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'execDragAlong'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"execFirstRefusal"`.
 */
export function usePrepareGeneralKeeperExecFirstRefusal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'execFirstRefusal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'execFirstRefusal',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof generalKeeperABI,
    'execFirstRefusal'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"execOption"`.
 */
export function usePrepareGeneralKeeperExecOption(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'execOption'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'execOption',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'execOption'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"execPledge"`.
 */
export function usePrepareGeneralKeeperExecPledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'execPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'execPledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'execPledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"execSwap"`.
 */
export function usePrepareGeneralKeeperExecSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'execSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'execSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'execSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"execSwapOrder"`.
 */
export function usePrepareGeneralKeeperExecSwapOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'execSwapOrder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'execSwapOrder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'execSwapOrder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"execTagAlong"`.
 */
export function usePrepareGeneralKeeperExecTagAlong(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'execTagAlong'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'execTagAlong',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'execTagAlong'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"extendPledge"`.
 */
export function usePrepareGeneralKeeperExtendPledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'extendPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'extendPledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'extendPledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareGeneralKeeperGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareGeneralKeeperInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"issueNewShare"`.
 */
export function usePrepareGeneralKeeperIssueNewShare(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'issueNewShare'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'issueNewShare',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'issueNewShare'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareGeneralKeeperLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'lockContents'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'lockContents'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"lockPledge"`.
 */
export function usePrepareGeneralKeeperLockPledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'lockPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'lockPledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'lockPledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"lockSwap"`.
 */
export function usePrepareGeneralKeeperLockSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'lockSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'lockSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'lockSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"lockSwapOrder"`.
 */
export function usePrepareGeneralKeeperLockSwapOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'lockSwapOrder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'lockSwapOrder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'lockSwapOrder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"nominateDirector"`.
 */
export function usePrepareGeneralKeeperNominateDirector(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'nominateDirector'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'nominateDirector',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof generalKeeperABI,
    'nominateDirector'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"nominateOfficer"`.
 */
export function usePrepareGeneralKeeperNominateOfficer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'nominateOfficer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'nominateOfficer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof generalKeeperABI,
    'nominateOfficer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"placeSwapOrder"`.
 */
export function usePrepareGeneralKeeperPlaceSwapOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'placeSwapOrder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'placeSwapOrder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'placeSwapOrder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"proposeDocOfGM"`.
 */
export function usePrepareGeneralKeeperProposeDocOfGm(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'proposeDocOfGM'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'proposeDocOfGM',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'proposeDocOfGM'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"proposeMotionToBoard"`.
 */
export function usePrepareGeneralKeeperProposeMotionToBoard(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof generalKeeperABI,
      'proposeMotionToBoard'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'proposeMotionToBoard',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof generalKeeperABI,
    'proposeMotionToBoard'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"proposeMotionToGeneralMeeting"`.
 */
export function usePrepareGeneralKeeperProposeMotionToGeneralMeeting(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof generalKeeperABI,
      'proposeMotionToGeneralMeeting'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'proposeMotionToGeneralMeeting',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof generalKeeperABI,
    'proposeMotionToGeneralMeeting'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"pushToCoffer"`.
 */
export function usePrepareGeneralKeeperPushToCoffer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'pushToCoffer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'pushToCoffer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'pushToCoffer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"quitPosition"`.
 */
export function usePrepareGeneralKeeperQuitPosition(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'quitPosition'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'quitPosition',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'quitPosition'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"refundDebt"`.
 */
export function usePrepareGeneralKeeperRefundDebt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'refundDebt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'refundDebt',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'refundDebt'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"regBook"`.
 */
export function usePrepareGeneralKeeperRegBook(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'regBook'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'regBook',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'regBook'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"regKeeper"`.
 */
export function usePrepareGeneralKeeperRegKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'regKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'regKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'regKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"releasePledge"`.
 */
export function usePrepareGeneralKeeperReleasePledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'releasePledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'releasePledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'releasePledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"releaseSwap"`.
 */
export function usePrepareGeneralKeeperReleaseSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'releaseSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'releaseSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'releaseSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"releaseSwapOrder"`.
 */
export function usePrepareGeneralKeeperReleaseSwapOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'releaseSwapOrder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'releaseSwapOrder',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof generalKeeperABI,
    'releaseSwapOrder'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function usePrepareGeneralKeeperRemoveDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof generalKeeperABI,
      'removeDirectKeeper'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof generalKeeperABI,
    'removeDirectKeeper'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"removeDirector"`.
 */
export function usePrepareGeneralKeeperRemoveDirector(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'removeDirector'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'removeDirector',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'removeDirector'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"removeOfficer"`.
 */
export function usePrepareGeneralKeeperRemoveOfficer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'removeOfficer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'removeOfficer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'removeOfficer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareGeneralKeeperRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"requestPaidInCapital"`.
 */
export function usePrepareGeneralKeeperRequestPaidInCapital(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof generalKeeperABI,
      'requestPaidInCapital'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'requestPaidInCapital',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof generalKeeperABI,
    'requestPaidInCapital'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"requestToBuy"`.
 */
export function usePrepareGeneralKeeperRequestToBuy(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'requestToBuy'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'requestToBuy',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'requestToBuy'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"revokeDeal"`.
 */
export function usePrepareGeneralKeeperRevokeDeal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'revokeDeal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'revokeDeal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'revokeDeal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"revokePledge"`.
 */
export function usePrepareGeneralKeeperRevokePledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'revokePledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'revokePledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'revokePledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareGeneralKeeperRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"revokeSwap"`.
 */
export function usePrepareGeneralKeeperRevokeSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'revokeSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'revokeSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'revokeSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"revokeSwapOrder"`.
 */
export function usePrepareGeneralKeeperRevokeSwapOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'revokeSwapOrder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'revokeSwapOrder',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof generalKeeperABI,
    'revokeSwapOrder'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"setAmtBase"`.
 */
export function usePrepareGeneralKeeperSetAmtBase(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'setAmtBase'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'setAmtBase',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'setAmtBase'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"setCompInfo"`.
 */
export function usePrepareGeneralKeeperSetCompInfo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'setCompInfo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'setCompInfo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'setCompInfo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareGeneralKeeperSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'setDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof generalKeeperABI,
    'setDirectKeeper'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function usePrepareGeneralKeeperSetGeneralCounsel(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'setGeneralCounsel'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof generalKeeperABI,
    'setGeneralCounsel'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"setMaxQtyOfMembers"`.
 */
export function usePrepareGeneralKeeperSetMaxQtyOfMembers(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof generalKeeperABI,
      'setMaxQtyOfMembers'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'setMaxQtyOfMembers',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof generalKeeperABI,
    'setMaxQtyOfMembers'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareGeneralKeeperSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"setPayInAmt"`.
 */
export function usePrepareGeneralKeeperSetPayInAmt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'setPayInAmt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'setPayInAmt',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'setPayInAmt'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareGeneralKeeperSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'setRoleAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'setRoleAdmin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"setVoteBase"`.
 */
export function usePrepareGeneralKeeperSetVoteBase(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'setVoteBase'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'setVoteBase',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'setVoteBase'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"signIA"`.
 */
export function usePrepareGeneralKeeperSignIa(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'signIA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'signIA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'signIA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"signSHA"`.
 */
export function usePrepareGeneralKeeperSignSha(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'signSHA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'signSHA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'signSHA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"takeGiftShares"`.
 */
export function usePrepareGeneralKeeperTakeGiftShares(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'takeGiftShares'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'takeGiftShares',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'takeGiftShares'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"takePosition"`.
 */
export function usePrepareGeneralKeeperTakePosition(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'takePosition'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'takePosition',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'takePosition'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"takeSeat"`.
 */
export function usePrepareGeneralKeeperTakeSeat(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'takeSeat'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'takeSeat',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'takeSeat'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"terminateDeal"`.
 */
export function usePrepareGeneralKeeperTerminateDeal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'terminateDeal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'terminateDeal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'terminateDeal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"transferPledge"`.
 */
export function usePrepareGeneralKeeperTransferPledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'transferPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'transferPledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'transferPledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"transferSwap"`.
 */
export function usePrepareGeneralKeeperTransferSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'transferSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'transferSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'transferSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"transferTargetShare"`.
 */
export function usePrepareGeneralKeeperTransferTargetShare(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof generalKeeperABI,
      'transferTargetShare'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'transferTargetShare',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof generalKeeperABI,
    'transferTargetShare'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"updateOracle"`.
 */
export function usePrepareGeneralKeeperUpdateOracle(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'updateOracle'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'updateOracle',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'updateOracle'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"voteCounting"`.
 */
export function usePrepareGeneralKeeperVoteCounting(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'voteCounting'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'voteCounting',
    ...config,
  } as UsePrepareContractWriteConfig<typeof generalKeeperABI, 'voteCounting'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"voteCountingOfGM"`.
 */
export function usePrepareGeneralKeeperVoteCountingOfGm(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'voteCountingOfGM'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'voteCountingOfGM',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof generalKeeperABI,
    'voteCountingOfGM'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link generalKeeperABI}__ and `functionName` set to `"withdrawPayInAmt"`.
 */
export function usePrepareGeneralKeeperWithdrawPayInAmt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof generalKeeperABI, 'withdrawPayInAmt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: generalKeeperABI,
    functionName: 'withdrawPayInAmt',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof generalKeeperABI,
    'withdrawPayInAmt'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link generalKeeperABI}__.
 */
export function useGeneralKeeperEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof generalKeeperABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: generalKeeperABI,
    ...config,
  } as UseContractEventConfig<typeof generalKeeperABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link generalKeeperABI}__ and `eventName` set to `"ExecAction"`.
 */
export function useGeneralKeeperExecActionEvent(
  config: Omit<
    UseContractEventConfig<typeof generalKeeperABI, 'ExecAction'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: generalKeeperABI,
    eventName: 'ExecAction',
    ...config,
  } as UseContractEventConfig<typeof generalKeeperABI, 'ExecAction'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link generalKeeperABI}__ and `eventName` set to `"Init"`.
 */
export function useGeneralKeeperInitEvent(
  config: Omit<
    UseContractEventConfig<typeof generalKeeperABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: generalKeeperABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof generalKeeperABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link generalKeeperABI}__ and `eventName` set to `"LockContents"`.
 */
export function useGeneralKeeperLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof generalKeeperABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: generalKeeperABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof generalKeeperABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link generalKeeperABI}__ and `eventName` set to `"RemoveDirectKeeper"`.
 */
export function useGeneralKeeperRemoveDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof generalKeeperABI, 'RemoveDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: generalKeeperABI,
    eventName: 'RemoveDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof generalKeeperABI, 'RemoveDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link generalKeeperABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useGeneralKeeperSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof generalKeeperABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: generalKeeperABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof generalKeeperABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link generalKeeperABI}__ and `eventName` set to `"SetGeneralCounsel"`.
 */
export function useGeneralKeeperSetGeneralCounselEvent(
  config: Omit<
    UseContractEventConfig<typeof generalKeeperABI, 'SetGeneralCounsel'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: generalKeeperABI,
    eventName: 'SetGeneralCounsel',
    ...config,
  } as UseContractEventConfig<typeof generalKeeperABI, 'SetGeneralCounsel'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link generalKeeperABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useGeneralKeeperSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof generalKeeperABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: generalKeeperABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof generalKeeperABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iRegCenterABI}__.
 */
export function useIRegCenter(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iRegCenterABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegCenterABI}__.
 */
export function useIRegCenterRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iRegCenterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRegCenterABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegCenterABI,
    ...config,
  } as UseContractReadConfig<typeof iRegCenterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"checkLocker"`.
 */
export function useIRegCenterCheckLocker<
  TSelectData = ReadContractResult<typeof iRegCenterABI, 'checkLocker'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRegCenterABI, 'checkLocker', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegCenterABI,
    functionName: 'checkLocker',
    ...config,
  } as UseContractReadConfig<typeof iRegCenterABI, 'checkLocker', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"counterOfDocs"`.
 */
export function useIRegCenterCounterOfDocs<
  TSelectData = ReadContractResult<typeof iRegCenterABI, 'counterOfDocs'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRegCenterABI, 'counterOfDocs', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegCenterABI,
    functionName: 'counterOfDocs',
    ...config,
  } as UseContractReadConfig<
    typeof iRegCenterABI,
    'counterOfDocs',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"counterOfVersions"`.
 */
export function useIRegCenterCounterOfVersions<
  TSelectData = ReadContractResult<typeof iRegCenterABI, 'counterOfVersions'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegCenterABI,
      'counterOfVersions',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegCenterABI,
    functionName: 'counterOfVersions',
    ...config,
  } as UseContractReadConfig<
    typeof iRegCenterABI,
    'counterOfVersions',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"docExist"`.
 */
export function useIRegCenterDocExist<
  TSelectData = ReadContractResult<typeof iRegCenterABI, 'docExist'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRegCenterABI, 'docExist', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegCenterABI,
    functionName: 'docExist',
    ...config,
  } as UseContractReadConfig<typeof iRegCenterABI, 'docExist', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"getAllDocsSN"`.
 */
export function useIRegCenterGetAllDocsSn<
  TSelectData = ReadContractResult<typeof iRegCenterABI, 'getAllDocsSN'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRegCenterABI, 'getAllDocsSN', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegCenterABI,
    functionName: 'getAllDocsSN',
    ...config,
  } as UseContractReadConfig<typeof iRegCenterABI, 'getAllDocsSN', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"getBodiesList"`.
 */
export function useIRegCenterGetBodiesList<
  TSelectData = ReadContractResult<typeof iRegCenterABI, 'getBodiesList'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRegCenterABI, 'getBodiesList', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegCenterABI,
    functionName: 'getBodiesList',
    ...config,
  } as UseContractReadConfig<
    typeof iRegCenterABI,
    'getBodiesList',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"getBookeeper"`.
 */
export function useIRegCenterGetBookeeper<
  TSelectData = ReadContractResult<typeof iRegCenterABI, 'getBookeeper'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRegCenterABI, 'getBookeeper', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegCenterABI,
    functionName: 'getBookeeper',
    ...config,
  } as UseContractReadConfig<typeof iRegCenterABI, 'getBookeeper', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"getDoc"`.
 */
export function useIRegCenterGetDoc<
  TSelectData = ReadContractResult<typeof iRegCenterABI, 'getDoc'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRegCenterABI, 'getDoc', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegCenterABI,
    functionName: 'getDoc',
    ...config,
  } as UseContractReadConfig<typeof iRegCenterABI, 'getDoc', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"getDocByUserNo"`.
 */
export function useIRegCenterGetDocByUserNo<
  TSelectData = ReadContractResult<typeof iRegCenterABI, 'getDocByUserNo'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRegCenterABI, 'getDocByUserNo', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegCenterABI,
    functionName: 'getDocByUserNo',
    ...config,
  } as UseContractReadConfig<
    typeof iRegCenterABI,
    'getDocByUserNo',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"getDocKeeper"`.
 */
export function useIRegCenterGetDocKeeper<
  TSelectData = ReadContractResult<typeof iRegCenterABI, 'getDocKeeper'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRegCenterABI, 'getDocKeeper', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegCenterABI,
    functionName: 'getDocKeeper',
    ...config,
  } as UseContractReadConfig<typeof iRegCenterABI, 'getDocKeeper', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"getDocsList"`.
 */
export function useIRegCenterGetDocsList<
  TSelectData = ReadContractResult<typeof iRegCenterABI, 'getDocsList'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRegCenterABI, 'getDocsList', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegCenterABI,
    functionName: 'getDocsList',
    ...config,
  } as UseContractReadConfig<typeof iRegCenterABI, 'getDocsList', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"getOwner"`.
 */
export function useIRegCenterGetOwner<
  TSelectData = ReadContractResult<typeof iRegCenterABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRegCenterABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegCenterABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<typeof iRegCenterABI, 'getOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"getRewardSetting"`.
 */
export function useIRegCenterGetRewardSetting<
  TSelectData = ReadContractResult<typeof iRegCenterABI, 'getRewardSetting'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegCenterABI,
      'getRewardSetting',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegCenterABI,
    functionName: 'getRewardSetting',
    ...config,
  } as UseContractReadConfig<
    typeof iRegCenterABI,
    'getRewardSetting',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"getSNList"`.
 */
export function useIRegCenterGetSnList<
  TSelectData = ReadContractResult<typeof iRegCenterABI, 'getSNList'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRegCenterABI, 'getSNList', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegCenterABI,
    functionName: 'getSNList',
    ...config,
  } as UseContractReadConfig<typeof iRegCenterABI, 'getSNList', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"getTemplate"`.
 */
export function useIRegCenterGetTemplate<
  TSelectData = ReadContractResult<typeof iRegCenterABI, 'getTemplate'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRegCenterABI, 'getTemplate', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegCenterABI,
    functionName: 'getTemplate',
    ...config,
  } as UseContractReadConfig<typeof iRegCenterABI, 'getTemplate', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"getTempsList"`.
 */
export function useIRegCenterGetTempsList<
  TSelectData = ReadContractResult<typeof iRegCenterABI, 'getTempsList'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRegCenterABI, 'getTempsList', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegCenterABI,
    functionName: 'getTempsList',
    ...config,
  } as UseContractReadConfig<typeof iRegCenterABI, 'getTempsList', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"getUser"`.
 */
export function useIRegCenterGetUser<
  TSelectData = ReadContractResult<typeof iRegCenterABI, 'getUser'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRegCenterABI, 'getUser', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegCenterABI,
    functionName: 'getUser',
    ...config,
  } as UseContractReadConfig<typeof iRegCenterABI, 'getUser', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"isCOA"`.
 */
export function useIRegCenterIsCoa<
  TSelectData = ReadContractResult<typeof iRegCenterABI, 'isCOA'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRegCenterABI, 'isCOA', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegCenterABI,
    functionName: 'isCOA',
    ...config,
  } as UseContractReadConfig<typeof iRegCenterABI, 'isCOA', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"isKey"`.
 */
export function useIRegCenterIsKey<
  TSelectData = ReadContractResult<typeof iRegCenterABI, 'isKey'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRegCenterABI, 'isKey', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegCenterABI,
    functionName: 'isKey',
    ...config,
  } as UseContractReadConfig<typeof iRegCenterABI, 'isKey', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"verifyDoc"`.
 */
export function useIRegCenterVerifyDoc<
  TSelectData = ReadContractResult<typeof iRegCenterABI, 'verifyDoc'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRegCenterABI, 'verifyDoc', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegCenterABI,
    functionName: 'verifyDoc',
    ...config,
  } as UseContractReadConfig<typeof iRegCenterABI, 'verifyDoc', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegCenterABI}__.
 */
export function useIRegCenterWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iRegCenterABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iRegCenterABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegCenterABI, TFunctionName>({
    abi: iRegCenterABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"createComp"`.
 */
export function useIRegCenterCreateComp<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iRegCenterABI, 'createComp'>['abi'],
        'createComp'
      > & { functionName?: 'createComp' }
    : UseContractWriteConfig<TMode, typeof iRegCenterABI, 'createComp'> & {
        abi?: never
        functionName?: 'createComp'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegCenterABI, 'createComp'>({
    abi: iRegCenterABI,
    functionName: 'createComp',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"createDoc"`.
 */
export function useIRegCenterCreateDoc<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iRegCenterABI, 'createDoc'>['abi'],
        'createDoc'
      > & { functionName?: 'createDoc' }
    : UseContractWriteConfig<TMode, typeof iRegCenterABI, 'createDoc'> & {
        abi?: never
        functionName?: 'createDoc'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegCenterABI, 'createDoc'>({
    abi: iRegCenterABI,
    functionName: 'createDoc',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"getMyUserNo"`.
 */
export function useIRegCenterGetMyUserNo<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iRegCenterABI, 'getMyUserNo'>['abi'],
        'getMyUserNo'
      > & { functionName?: 'getMyUserNo' }
    : UseContractWriteConfig<TMode, typeof iRegCenterABI, 'getMyUserNo'> & {
        abi?: never
        functionName?: 'getMyUserNo'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegCenterABI, 'getMyUserNo'>({
    abi: iRegCenterABI,
    functionName: 'getMyUserNo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"getUserNo"`.
 */
export function useIRegCenterGetUserNo<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iRegCenterABI, 'getUserNo'>['abi'],
        'getUserNo'
      > & { functionName?: 'getUserNo' }
    : UseContractWriteConfig<TMode, typeof iRegCenterABI, 'getUserNo'> & {
        abi?: never
        functionName?: 'getUserNo'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegCenterABI, 'getUserNo'>({
    abi: iRegCenterABI,
    functionName: 'getUserNo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"initDocsRepo"`.
 */
export function useIRegCenterInitDocsRepo<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iRegCenterABI, 'initDocsRepo'>['abi'],
        'initDocsRepo'
      > & { functionName?: 'initDocsRepo' }
    : UseContractWriteConfig<TMode, typeof iRegCenterABI, 'initDocsRepo'> & {
        abi?: never
        functionName?: 'initDocsRepo'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegCenterABI, 'initDocsRepo'>({
    abi: iRegCenterABI,
    functionName: 'initDocsRepo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"lockPoints"`.
 */
export function useIRegCenterLockPoints<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iRegCenterABI, 'lockPoints'>['abi'],
        'lockPoints'
      > & { functionName?: 'lockPoints' }
    : UseContractWriteConfig<TMode, typeof iRegCenterABI, 'lockPoints'> & {
        abi?: never
        functionName?: 'lockPoints'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegCenterABI, 'lockPoints'>({
    abi: iRegCenterABI,
    functionName: 'lockPoints',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"mintAndLockPoints"`.
 */
export function useIRegCenterMintAndLockPoints<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegCenterABI,
          'mintAndLockPoints'
        >['abi'],
        'mintAndLockPoints'
      > & { functionName?: 'mintAndLockPoints' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegCenterABI,
        'mintAndLockPoints'
      > & {
        abi?: never
        functionName?: 'mintAndLockPoints'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegCenterABI, 'mintAndLockPoints'>({
    abi: iRegCenterABI,
    functionName: 'mintAndLockPoints',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"mintPoints"`.
 */
export function useIRegCenterMintPoints<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iRegCenterABI, 'mintPoints'>['abi'],
        'mintPoints'
      > & { functionName?: 'mintPoints' }
    : UseContractWriteConfig<TMode, typeof iRegCenterABI, 'mintPoints'> & {
        abi?: never
        functionName?: 'mintPoints'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegCenterABI, 'mintPoints'>({
    abi: iRegCenterABI,
    functionName: 'mintPoints',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"regUser"`.
 */
export function useIRegCenterRegUser<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iRegCenterABI, 'regUser'>['abi'],
        'regUser'
      > & { functionName?: 'regUser' }
    : UseContractWriteConfig<TMode, typeof iRegCenterABI, 'regUser'> & {
        abi?: never
        functionName?: 'regUser'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegCenterABI, 'regUser'>({
    abi: iRegCenterABI,
    functionName: 'regUser',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"releasePoints"`.
 */
export function useIRegCenterReleasePoints<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegCenterABI,
          'releasePoints'
        >['abi'],
        'releasePoints'
      > & { functionName?: 'releasePoints' }
    : UseContractWriteConfig<TMode, typeof iRegCenterABI, 'releasePoints'> & {
        abi?: never
        functionName?: 'releasePoints'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegCenterABI, 'releasePoints'>({
    abi: iRegCenterABI,
    functionName: 'releasePoints',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"setBackupKey"`.
 */
export function useIRegCenterSetBackupKey<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iRegCenterABI, 'setBackupKey'>['abi'],
        'setBackupKey'
      > & { functionName?: 'setBackupKey' }
    : UseContractWriteConfig<TMode, typeof iRegCenterABI, 'setBackupKey'> & {
        abi?: never
        functionName?: 'setBackupKey'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegCenterABI, 'setBackupKey'>({
    abi: iRegCenterABI,
    functionName: 'setBackupKey',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"setDocSnOfUser"`.
 */
export function useIRegCenterSetDocSnOfUser<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegCenterABI,
          'setDocSnOfUser'
        >['abi'],
        'setDocSnOfUser'
      > & { functionName?: 'setDocSnOfUser' }
    : UseContractWriteConfig<TMode, typeof iRegCenterABI, 'setDocSnOfUser'> & {
        abi?: never
        functionName?: 'setDocSnOfUser'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegCenterABI, 'setDocSnOfUser'>({
    abi: iRegCenterABI,
    functionName: 'setDocSnOfUser',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"setReward"`.
 */
export function useIRegCenterSetReward<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iRegCenterABI, 'setReward'>['abi'],
        'setReward'
      > & { functionName?: 'setReward' }
    : UseContractWriteConfig<TMode, typeof iRegCenterABI, 'setReward'> & {
        abi?: never
        functionName?: 'setReward'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegCenterABI, 'setReward'>({
    abi: iRegCenterABI,
    functionName: 'setReward',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"setTemplate"`.
 */
export function useIRegCenterSetTemplate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iRegCenterABI, 'setTemplate'>['abi'],
        'setTemplate'
      > & { functionName?: 'setTemplate' }
    : UseContractWriteConfig<TMode, typeof iRegCenterABI, 'setTemplate'> & {
        abi?: never
        functionName?: 'setTemplate'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegCenterABI, 'setTemplate'>({
    abi: iRegCenterABI,
    functionName: 'setTemplate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useIRegCenterTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegCenterABI,
          'transferOwnership'
        >['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegCenterABI,
        'transferOwnership'
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegCenterABI, 'transferOwnership'>({
    abi: iRegCenterABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"transferPoints"`.
 */
export function useIRegCenterTransferPoints<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegCenterABI,
          'transferPoints'
        >['abi'],
        'transferPoints'
      > & { functionName?: 'transferPoints' }
    : UseContractWriteConfig<TMode, typeof iRegCenterABI, 'transferPoints'> & {
        abi?: never
        functionName?: 'transferPoints'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegCenterABI, 'transferPoints'>({
    abi: iRegCenterABI,
    functionName: 'transferPoints',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"turnOverCenterKey"`.
 */
export function useIRegCenterTurnOverCenterKey<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegCenterABI,
          'turnOverCenterKey'
        >['abi'],
        'turnOverCenterKey'
      > & { functionName?: 'turnOverCenterKey' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegCenterABI,
        'turnOverCenterKey'
      > & {
        abi?: never
        functionName?: 'turnOverCenterKey'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegCenterABI, 'turnOverCenterKey'>({
    abi: iRegCenterABI,
    functionName: 'turnOverCenterKey',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"turnOverKeyOfDocsRepo"`.
 */
export function useIRegCenterTurnOverKeyOfDocsRepo<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegCenterABI,
          'turnOverKeyOfDocsRepo'
        >['abi'],
        'turnOverKeyOfDocsRepo'
      > & { functionName?: 'turnOverKeyOfDocsRepo' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegCenterABI,
        'turnOverKeyOfDocsRepo'
      > & {
        abi?: never
        functionName?: 'turnOverKeyOfDocsRepo'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegCenterABI, 'turnOverKeyOfDocsRepo'>(
    {
      abi: iRegCenterABI,
      functionName: 'turnOverKeyOfDocsRepo',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"updateUserInfo"`.
 */
export function useIRegCenterUpdateUserInfo<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegCenterABI,
          'updateUserInfo'
        >['abi'],
        'updateUserInfo'
      > & { functionName?: 'updateUserInfo' }
    : UseContractWriteConfig<TMode, typeof iRegCenterABI, 'updateUserInfo'> & {
        abi?: never
        functionName?: 'updateUserInfo'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegCenterABI, 'updateUserInfo'>({
    abi: iRegCenterABI,
    functionName: 'updateUserInfo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"withdrawPoints"`.
 */
export function useIRegCenterWithdrawPoints<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegCenterABI,
          'withdrawPoints'
        >['abi'],
        'withdrawPoints'
      > & { functionName?: 'withdrawPoints' }
    : UseContractWriteConfig<TMode, typeof iRegCenterABI, 'withdrawPoints'> & {
        abi?: never
        functionName?: 'withdrawPoints'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegCenterABI, 'withdrawPoints'>({
    abi: iRegCenterABI,
    functionName: 'withdrawPoints',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegCenterABI}__.
 */
export function usePrepareIRegCenterWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegCenterABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegCenterABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegCenterABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"createComp"`.
 */
export function usePrepareIRegCenterCreateComp(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegCenterABI, 'createComp'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegCenterABI,
    functionName: 'createComp',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegCenterABI, 'createComp'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"createDoc"`.
 */
export function usePrepareIRegCenterCreateDoc(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegCenterABI, 'createDoc'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegCenterABI,
    functionName: 'createDoc',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegCenterABI, 'createDoc'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"getMyUserNo"`.
 */
export function usePrepareIRegCenterGetMyUserNo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegCenterABI, 'getMyUserNo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegCenterABI,
    functionName: 'getMyUserNo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegCenterABI, 'getMyUserNo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"getUserNo"`.
 */
export function usePrepareIRegCenterGetUserNo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegCenterABI, 'getUserNo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegCenterABI,
    functionName: 'getUserNo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegCenterABI, 'getUserNo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"initDocsRepo"`.
 */
export function usePrepareIRegCenterInitDocsRepo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegCenterABI, 'initDocsRepo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegCenterABI,
    functionName: 'initDocsRepo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegCenterABI, 'initDocsRepo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"lockPoints"`.
 */
export function usePrepareIRegCenterLockPoints(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegCenterABI, 'lockPoints'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegCenterABI,
    functionName: 'lockPoints',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegCenterABI, 'lockPoints'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"mintAndLockPoints"`.
 */
export function usePrepareIRegCenterMintAndLockPoints(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegCenterABI, 'mintAndLockPoints'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegCenterABI,
    functionName: 'mintAndLockPoints',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegCenterABI, 'mintAndLockPoints'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"mintPoints"`.
 */
export function usePrepareIRegCenterMintPoints(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegCenterABI, 'mintPoints'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegCenterABI,
    functionName: 'mintPoints',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegCenterABI, 'mintPoints'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"regUser"`.
 */
export function usePrepareIRegCenterRegUser(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegCenterABI, 'regUser'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegCenterABI,
    functionName: 'regUser',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegCenterABI, 'regUser'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"releasePoints"`.
 */
export function usePrepareIRegCenterReleasePoints(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegCenterABI, 'releasePoints'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegCenterABI,
    functionName: 'releasePoints',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegCenterABI, 'releasePoints'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"setBackupKey"`.
 */
export function usePrepareIRegCenterSetBackupKey(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegCenterABI, 'setBackupKey'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegCenterABI,
    functionName: 'setBackupKey',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegCenterABI, 'setBackupKey'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"setDocSnOfUser"`.
 */
export function usePrepareIRegCenterSetDocSnOfUser(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegCenterABI, 'setDocSnOfUser'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegCenterABI,
    functionName: 'setDocSnOfUser',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegCenterABI, 'setDocSnOfUser'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"setReward"`.
 */
export function usePrepareIRegCenterSetReward(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegCenterABI, 'setReward'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegCenterABI,
    functionName: 'setReward',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegCenterABI, 'setReward'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"setTemplate"`.
 */
export function usePrepareIRegCenterSetTemplate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegCenterABI, 'setTemplate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegCenterABI,
    functionName: 'setTemplate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegCenterABI, 'setTemplate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareIRegCenterTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegCenterABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegCenterABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegCenterABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"transferPoints"`.
 */
export function usePrepareIRegCenterTransferPoints(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegCenterABI, 'transferPoints'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegCenterABI,
    functionName: 'transferPoints',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegCenterABI, 'transferPoints'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"turnOverCenterKey"`.
 */
export function usePrepareIRegCenterTurnOverCenterKey(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegCenterABI, 'turnOverCenterKey'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegCenterABI,
    functionName: 'turnOverCenterKey',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegCenterABI, 'turnOverCenterKey'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"turnOverKeyOfDocsRepo"`.
 */
export function usePrepareIRegCenterTurnOverKeyOfDocsRepo(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRegCenterABI,
      'turnOverKeyOfDocsRepo'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegCenterABI,
    functionName: 'turnOverKeyOfDocsRepo',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegCenterABI,
    'turnOverKeyOfDocsRepo'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"updateUserInfo"`.
 */
export function usePrepareIRegCenterUpdateUserInfo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegCenterABI, 'updateUserInfo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegCenterABI,
    functionName: 'updateUserInfo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegCenterABI, 'updateUserInfo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegCenterABI}__ and `functionName` set to `"withdrawPoints"`.
 */
export function usePrepareIRegCenterWithdrawPoints(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegCenterABI, 'withdrawPoints'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegCenterABI,
    functionName: 'withdrawPoints',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegCenterABI, 'withdrawPoints'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegCenterABI}__.
 */
export function useIRegCenterEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iRegCenterABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegCenterABI,
    ...config,
  } as UseContractEventConfig<typeof iRegCenterABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegCenterABI}__ and `eventName` set to `"CreateDoc"`.
 */
export function useIRegCenterCreateDocEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegCenterABI, 'CreateDoc'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegCenterABI,
    eventName: 'CreateDoc',
    ...config,
  } as UseContractEventConfig<typeof iRegCenterABI, 'CreateDoc'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegCenterABI}__ and `eventName` set to `"LockPoints"`.
 */
export function useIRegCenterLockPointsEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegCenterABI, 'LockPoints'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegCenterABI,
    eventName: 'LockPoints',
    ...config,
  } as UseContractEventConfig<typeof iRegCenterABI, 'LockPoints'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegCenterABI}__ and `eventName` set to `"MintPoints"`.
 */
export function useIRegCenterMintPointsEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegCenterABI, 'MintPoints'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegCenterABI,
    eventName: 'MintPoints',
    ...config,
  } as UseContractEventConfig<typeof iRegCenterABI, 'MintPoints'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegCenterABI}__ and `eventName` set to `"ReleasePoints"`.
 */
export function useIRegCenterReleasePointsEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegCenterABI, 'ReleasePoints'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegCenterABI,
    eventName: 'ReleasePoints',
    ...config,
  } as UseContractEventConfig<typeof iRegCenterABI, 'ReleasePoints'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegCenterABI}__ and `eventName` set to `"SetDocKeeper"`.
 */
export function useIRegCenterSetDocKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegCenterABI, 'SetDocKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegCenterABI,
    eventName: 'SetDocKeeper',
    ...config,
  } as UseContractEventConfig<typeof iRegCenterABI, 'SetDocKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegCenterABI}__ and `eventName` set to `"SetReward"`.
 */
export function useIRegCenterSetRewardEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegCenterABI, 'SetReward'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegCenterABI,
    eventName: 'SetReward',
    ...config,
  } as UseContractEventConfig<typeof iRegCenterABI, 'SetReward'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegCenterABI}__ and `eventName` set to `"SetTemplate"`.
 */
export function useIRegCenterSetTemplateEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegCenterABI, 'SetTemplate'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegCenterABI,
    eventName: 'SetTemplate',
    ...config,
  } as UseContractEventConfig<typeof iRegCenterABI, 'SetTemplate'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegCenterABI}__ and `eventName` set to `"TransferOwnership"`.
 */
export function useIRegCenterTransferOwnershipEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegCenterABI, 'TransferOwnership'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegCenterABI,
    eventName: 'TransferOwnership',
    ...config,
  } as UseContractEventConfig<typeof iRegCenterABI, 'TransferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegCenterABI}__ and `eventName` set to `"TransferPoints"`.
 */
export function useIRegCenterTransferPointsEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegCenterABI, 'TransferPoints'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegCenterABI,
    eventName: 'TransferPoints',
    ...config,
  } as UseContractEventConfig<typeof iRegCenterABI, 'TransferPoints'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegCenterABI}__ and `eventName` set to `"TurnOverCenterKey"`.
 */
export function useIRegCenterTurnOverCenterKeyEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegCenterABI, 'TurnOverCenterKey'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegCenterABI,
    eventName: 'TurnOverCenterKey',
    ...config,
  } as UseContractEventConfig<typeof iRegCenterABI, 'TurnOverCenterKey'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegCenterABI}__ and `eventName` set to `"WithdrawPoints"`.
 */
export function useIRegCenterWithdrawPointsEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegCenterABI, 'WithdrawPoints'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegCenterABI,
    eventName: 'WithdrawPoints',
    ...config,
  } as UseContractEventConfig<typeof iRegCenterABI, 'WithdrawPoints'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iGeneralKeeperABI}__.
 */
export function useIGeneralKeeper(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iGeneralKeeperABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGeneralKeeperABI}__.
 */
export function useIGeneralKeeperRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iGeneralKeeperABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGeneralKeeperABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iGeneralKeeperABI,
    ...config,
  } as UseContractReadConfig<
    typeof iGeneralKeeperABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"getBOA"`.
 */
export function useIGeneralKeeperGetBoa<
  TSelectData = ReadContractResult<typeof iGeneralKeeperABI, 'getBOA'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGeneralKeeperABI, 'getBOA', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGeneralKeeperABI,
    functionName: 'getBOA',
    ...config,
  } as UseContractReadConfig<typeof iGeneralKeeperABI, 'getBOA', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"getBOD"`.
 */
export function useIGeneralKeeperGetBod<
  TSelectData = ReadContractResult<typeof iGeneralKeeperABI, 'getBOD'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGeneralKeeperABI, 'getBOD', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGeneralKeeperABI,
    functionName: 'getBOD',
    ...config,
  } as UseContractReadConfig<typeof iGeneralKeeperABI, 'getBOD', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"getBOG"`.
 */
export function useIGeneralKeeperGetBog<
  TSelectData = ReadContractResult<typeof iGeneralKeeperABI, 'getBOG'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGeneralKeeperABI, 'getBOG', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGeneralKeeperABI,
    functionName: 'getBOG',
    ...config,
  } as UseContractReadConfig<typeof iGeneralKeeperABI, 'getBOG', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"getBOH"`.
 */
export function useIGeneralKeeperGetBoh<
  TSelectData = ReadContractResult<typeof iGeneralKeeperABI, 'getBOH'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGeneralKeeperABI, 'getBOH', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGeneralKeeperABI,
    functionName: 'getBOH',
    ...config,
  } as UseContractReadConfig<typeof iGeneralKeeperABI, 'getBOH', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"getBOO"`.
 */
export function useIGeneralKeeperGetBoo<
  TSelectData = ReadContractResult<typeof iGeneralKeeperABI, 'getBOO'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGeneralKeeperABI, 'getBOO', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGeneralKeeperABI,
    functionName: 'getBOO',
    ...config,
  } as UseContractReadConfig<typeof iGeneralKeeperABI, 'getBOO', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"getBOP"`.
 */
export function useIGeneralKeeperGetBop<
  TSelectData = ReadContractResult<typeof iGeneralKeeperABI, 'getBOP'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGeneralKeeperABI, 'getBOP', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGeneralKeeperABI,
    functionName: 'getBOP',
    ...config,
  } as UseContractReadConfig<typeof iGeneralKeeperABI, 'getBOP', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"getBOS"`.
 */
export function useIGeneralKeeperGetBos<
  TSelectData = ReadContractResult<typeof iGeneralKeeperABI, 'getBOS'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGeneralKeeperABI, 'getBOS', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGeneralKeeperABI,
    functionName: 'getBOS',
    ...config,
  } as UseContractReadConfig<typeof iGeneralKeeperABI, 'getBOS', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"getBook"`.
 */
export function useIGeneralKeeperGetBook<
  TSelectData = ReadContractResult<typeof iGeneralKeeperABI, 'getBook'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGeneralKeeperABI, 'getBook', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGeneralKeeperABI,
    functionName: 'getBook',
    ...config,
  } as UseContractReadConfig<typeof iGeneralKeeperABI, 'getBook', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"getKeeper"`.
 */
export function useIGeneralKeeperGetKeeper<
  TSelectData = ReadContractResult<typeof iGeneralKeeperABI, 'getKeeper'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGeneralKeeperABI, 'getKeeper', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGeneralKeeperABI,
    functionName: 'getKeeper',
    ...config,
  } as UseContractReadConfig<
    typeof iGeneralKeeperABI,
    'getKeeper',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"getROM"`.
 */
export function useIGeneralKeeperGetRom<
  TSelectData = ReadContractResult<typeof iGeneralKeeperABI, 'getROM'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGeneralKeeperABI, 'getROM', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGeneralKeeperABI,
    functionName: 'getROM',
    ...config,
  } as UseContractReadConfig<typeof iGeneralKeeperABI, 'getROM', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"getROS"`.
 */
export function useIGeneralKeeperGetRos<
  TSelectData = ReadContractResult<typeof iGeneralKeeperABI, 'getROS'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGeneralKeeperABI, 'getROS', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGeneralKeeperABI,
    functionName: 'getROS',
    ...config,
  } as UseContractReadConfig<typeof iGeneralKeeperABI, 'getROS', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"getSHA"`.
 */
export function useIGeneralKeeperGetSha<
  TSelectData = ReadContractResult<typeof iGeneralKeeperABI, 'getSHA'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGeneralKeeperABI, 'getSHA', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGeneralKeeperABI,
    functionName: 'getSHA',
    ...config,
  } as UseContractReadConfig<typeof iGeneralKeeperABI, 'getSHA', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"isKeeper"`.
 */
export function useIGeneralKeeperIsKeeper<
  TSelectData = ReadContractResult<typeof iGeneralKeeperABI, 'isKeeper'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGeneralKeeperABI, 'isKeeper', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGeneralKeeperABI,
    functionName: 'isKeeper',
    ...config,
  } as UseContractReadConfig<typeof iGeneralKeeperABI, 'isKeeper', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__.
 */
export function useIGeneralKeeperWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iGeneralKeeperABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iGeneralKeeperABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, TFunctionName>({
    abi: iGeneralKeeperABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"acceptAlongDeal"`.
 */
export function useIGeneralKeeperAcceptAlongDeal<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'acceptAlongDeal'
        >['abi'],
        'acceptAlongDeal'
      > & { functionName?: 'acceptAlongDeal' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'acceptAlongDeal'
      > & {
        abi?: never
        functionName?: 'acceptAlongDeal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'acceptAlongDeal'>({
    abi: iGeneralKeeperABI,
    functionName: 'acceptAlongDeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"acceptFirstRefusal"`.
 */
export function useIGeneralKeeperAcceptFirstRefusal<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'acceptFirstRefusal'
        >['abi'],
        'acceptFirstRefusal'
      > & { functionName?: 'acceptFirstRefusal' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'acceptFirstRefusal'
      > & {
        abi?: never
        functionName?: 'acceptFirstRefusal'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iGeneralKeeperABI,
    'acceptFirstRefusal'
  >({
    abi: iGeneralKeeperABI,
    functionName: 'acceptFirstRefusal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"acceptSHA"`.
 */
export function useIGeneralKeeperAcceptSha<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'acceptSHA'
        >['abi'],
        'acceptSHA'
      > & { functionName?: 'acceptSHA' }
    : UseContractWriteConfig<TMode, typeof iGeneralKeeperABI, 'acceptSHA'> & {
        abi?: never
        functionName?: 'acceptSHA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'acceptSHA'>({
    abi: iGeneralKeeperABI,
    functionName: 'acceptSHA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"activateSHA"`.
 */
export function useIGeneralKeeperActivateSha<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'activateSHA'
        >['abi'],
        'activateSHA'
      > & { functionName?: 'activateSHA' }
    : UseContractWriteConfig<TMode, typeof iGeneralKeeperABI, 'activateSHA'> & {
        abi?: never
        functionName?: 'activateSHA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'activateSHA'>({
    abi: iGeneralKeeperABI,
    functionName: 'activateSHA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"castVote"`.
 */
export function useIGeneralKeeperCastVote<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iGeneralKeeperABI, 'castVote'>['abi'],
        'castVote'
      > & { functionName?: 'castVote' }
    : UseContractWriteConfig<TMode, typeof iGeneralKeeperABI, 'castVote'> & {
        abi?: never
        functionName?: 'castVote'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'castVote'>({
    abi: iGeneralKeeperABI,
    functionName: 'castVote',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"castVoteOfGM"`.
 */
export function useIGeneralKeeperCastVoteOfGm<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'castVoteOfGM'
        >['abi'],
        'castVoteOfGM'
      > & { functionName?: 'castVoteOfGM' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'castVoteOfGM'
      > & {
        abi?: never
        functionName?: 'castVoteOfGM'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'castVoteOfGM'>({
    abi: iGeneralKeeperABI,
    functionName: 'castVoteOfGM',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"circulateIA"`.
 */
export function useIGeneralKeeperCirculateIa<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'circulateIA'
        >['abi'],
        'circulateIA'
      > & { functionName?: 'circulateIA' }
    : UseContractWriteConfig<TMode, typeof iGeneralKeeperABI, 'circulateIA'> & {
        abi?: never
        functionName?: 'circulateIA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'circulateIA'>({
    abi: iGeneralKeeperABI,
    functionName: 'circulateIA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"circulateSHA"`.
 */
export function useIGeneralKeeperCirculateSha<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'circulateSHA'
        >['abi'],
        'circulateSHA'
      > & { functionName?: 'circulateSHA' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'circulateSHA'
      > & {
        abi?: never
        functionName?: 'circulateSHA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'circulateSHA'>({
    abi: iGeneralKeeperABI,
    functionName: 'circulateSHA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"closeDeal"`.
 */
export function useIGeneralKeeperCloseDeal<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'closeDeal'
        >['abi'],
        'closeDeal'
      > & { functionName?: 'closeDeal' }
    : UseContractWriteConfig<TMode, typeof iGeneralKeeperABI, 'closeDeal'> & {
        abi?: never
        functionName?: 'closeDeal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'closeDeal'>({
    abi: iGeneralKeeperABI,
    functionName: 'closeDeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"createAction"`.
 */
export function useIGeneralKeeperCreateAction<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'createAction'
        >['abi'],
        'createAction'
      > & { functionName?: 'createAction' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'createAction'
      > & {
        abi?: never
        functionName?: 'createAction'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'createAction'>({
    abi: iGeneralKeeperABI,
    functionName: 'createAction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"createActionOfGM"`.
 */
export function useIGeneralKeeperCreateActionOfGm<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'createActionOfGM'
        >['abi'],
        'createActionOfGM'
      > & { functionName?: 'createActionOfGM' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'createActionOfGM'
      > & {
        abi?: never
        functionName?: 'createActionOfGM'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'createActionOfGM'>({
    abi: iGeneralKeeperABI,
    functionName: 'createActionOfGM',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"createCorpSeal"`.
 */
export function useIGeneralKeeperCreateCorpSeal<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'createCorpSeal'
        >['abi'],
        'createCorpSeal'
      > & { functionName?: 'createCorpSeal' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'createCorpSeal'
      > & {
        abi?: never
        functionName?: 'createCorpSeal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'createCorpSeal'>({
    abi: iGeneralKeeperABI,
    functionName: 'createCorpSeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"createIA"`.
 */
export function useIGeneralKeeperCreateIa<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iGeneralKeeperABI, 'createIA'>['abi'],
        'createIA'
      > & { functionName?: 'createIA' }
    : UseContractWriteConfig<TMode, typeof iGeneralKeeperABI, 'createIA'> & {
        abi?: never
        functionName?: 'createIA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'createIA'>({
    abi: iGeneralKeeperABI,
    functionName: 'createIA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"createMotionToApproveDoc"`.
 */
export function useIGeneralKeeperCreateMotionToApproveDoc<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'createMotionToApproveDoc'
        >['abi'],
        'createMotionToApproveDoc'
      > & { functionName?: 'createMotionToApproveDoc' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'createMotionToApproveDoc'
      > & {
        abi?: never
        functionName?: 'createMotionToApproveDoc'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iGeneralKeeperABI,
    'createMotionToApproveDoc'
  >({
    abi: iGeneralKeeperABI,
    functionName: 'createMotionToApproveDoc',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"createMotionToRemoveDirector"`.
 */
export function useIGeneralKeeperCreateMotionToRemoveDirector<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'createMotionToRemoveDirector'
        >['abi'],
        'createMotionToRemoveDirector'
      > & { functionName?: 'createMotionToRemoveDirector' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'createMotionToRemoveDirector'
      > & {
        abi?: never
        functionName?: 'createMotionToRemoveDirector'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iGeneralKeeperABI,
    'createMotionToRemoveDirector'
  >({
    abi: iGeneralKeeperABI,
    functionName: 'createMotionToRemoveDirector',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"createMotionToRemoveOfficer"`.
 */
export function useIGeneralKeeperCreateMotionToRemoveOfficer<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'createMotionToRemoveOfficer'
        >['abi'],
        'createMotionToRemoveOfficer'
      > & { functionName?: 'createMotionToRemoveOfficer' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'createMotionToRemoveOfficer'
      > & {
        abi?: never
        functionName?: 'createMotionToRemoveOfficer'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iGeneralKeeperABI,
    'createMotionToRemoveOfficer'
  >({
    abi: iGeneralKeeperABI,
    functionName: 'createMotionToRemoveOfficer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"createPledge"`.
 */
export function useIGeneralKeeperCreatePledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'createPledge'
        >['abi'],
        'createPledge'
      > & { functionName?: 'createPledge' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'createPledge'
      > & {
        abi?: never
        functionName?: 'createPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'createPledge'>({
    abi: iGeneralKeeperABI,
    functionName: 'createPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"createSHA"`.
 */
export function useIGeneralKeeperCreateSha<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'createSHA'
        >['abi'],
        'createSHA'
      > & { functionName?: 'createSHA' }
    : UseContractWriteConfig<TMode, typeof iGeneralKeeperABI, 'createSHA'> & {
        abi?: never
        functionName?: 'createSHA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'createSHA'>({
    abi: iGeneralKeeperABI,
    functionName: 'createSHA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"createSwap"`.
 */
export function useIGeneralKeeperCreateSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'createSwap'
        >['abi'],
        'createSwap'
      > & { functionName?: 'createSwap' }
    : UseContractWriteConfig<TMode, typeof iGeneralKeeperABI, 'createSwap'> & {
        abi?: never
        functionName?: 'createSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'createSwap'>({
    abi: iGeneralKeeperABI,
    functionName: 'createSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"crystalizeSwap"`.
 */
export function useIGeneralKeeperCrystalizeSwap<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'crystalizeSwap'
        >['abi'],
        'crystalizeSwap'
      > & { functionName?: 'crystalizeSwap' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'crystalizeSwap'
      > & {
        abi?: never
        functionName?: 'crystalizeSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'crystalizeSwap'>({
    abi: iGeneralKeeperABI,
    functionName: 'crystalizeSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"decreaseCapital"`.
 */
export function useIGeneralKeeperDecreaseCapital<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'decreaseCapital'
        >['abi'],
        'decreaseCapital'
      > & { functionName?: 'decreaseCapital' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'decreaseCapital'
      > & {
        abi?: never
        functionName?: 'decreaseCapital'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'decreaseCapital'>({
    abi: iGeneralKeeperABI,
    functionName: 'decreaseCapital',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"entrustDelegaterForBoardMeeting"`.
 */
export function useIGeneralKeeperEntrustDelegaterForBoardMeeting<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'entrustDelegaterForBoardMeeting'
        >['abi'],
        'entrustDelegaterForBoardMeeting'
      > & { functionName?: 'entrustDelegaterForBoardMeeting' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'entrustDelegaterForBoardMeeting'
      > & {
        abi?: never
        functionName?: 'entrustDelegaterForBoardMeeting'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iGeneralKeeperABI,
    'entrustDelegaterForBoardMeeting'
  >({
    abi: iGeneralKeeperABI,
    functionName: 'entrustDelegaterForBoardMeeting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"entrustDelegaterForGeneralMeeting"`.
 */
export function useIGeneralKeeperEntrustDelegaterForGeneralMeeting<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'entrustDelegaterForGeneralMeeting'
        >['abi'],
        'entrustDelegaterForGeneralMeeting'
      > & { functionName?: 'entrustDelegaterForGeneralMeeting' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'entrustDelegaterForGeneralMeeting'
      > & {
        abi?: never
        functionName?: 'entrustDelegaterForGeneralMeeting'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iGeneralKeeperABI,
    'entrustDelegaterForGeneralMeeting'
  >({
    abi: iGeneralKeeperABI,
    functionName: 'entrustDelegaterForGeneralMeeting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"execAction"`.
 */
export function useIGeneralKeeperExecAction<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'execAction'
        >['abi'],
        'execAction'
      > & { functionName?: 'execAction' }
    : UseContractWriteConfig<TMode, typeof iGeneralKeeperABI, 'execAction'> & {
        abi?: never
        functionName?: 'execAction'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'execAction'>({
    abi: iGeneralKeeperABI,
    functionName: 'execAction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"execActionOfGM"`.
 */
export function useIGeneralKeeperExecActionOfGm<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'execActionOfGM'
        >['abi'],
        'execActionOfGM'
      > & { functionName?: 'execActionOfGM' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'execActionOfGM'
      > & {
        abi?: never
        functionName?: 'execActionOfGM'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'execActionOfGM'>({
    abi: iGeneralKeeperABI,
    functionName: 'execActionOfGM',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"execAntiDilution"`.
 */
export function useIGeneralKeeperExecAntiDilution<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'execAntiDilution'
        >['abi'],
        'execAntiDilution'
      > & { functionName?: 'execAntiDilution' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'execAntiDilution'
      > & {
        abi?: never
        functionName?: 'execAntiDilution'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'execAntiDilution'>({
    abi: iGeneralKeeperABI,
    functionName: 'execAntiDilution',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"execDragAlong"`.
 */
export function useIGeneralKeeperExecDragAlong<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'execDragAlong'
        >['abi'],
        'execDragAlong'
      > & { functionName?: 'execDragAlong' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'execDragAlong'
      > & {
        abi?: never
        functionName?: 'execDragAlong'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'execDragAlong'>({
    abi: iGeneralKeeperABI,
    functionName: 'execDragAlong',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"execFirstRefusal"`.
 */
export function useIGeneralKeeperExecFirstRefusal<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'execFirstRefusal'
        >['abi'],
        'execFirstRefusal'
      > & { functionName?: 'execFirstRefusal' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'execFirstRefusal'
      > & {
        abi?: never
        functionName?: 'execFirstRefusal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'execFirstRefusal'>({
    abi: iGeneralKeeperABI,
    functionName: 'execFirstRefusal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"execOption"`.
 */
export function useIGeneralKeeperExecOption<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'execOption'
        >['abi'],
        'execOption'
      > & { functionName?: 'execOption' }
    : UseContractWriteConfig<TMode, typeof iGeneralKeeperABI, 'execOption'> & {
        abi?: never
        functionName?: 'execOption'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'execOption'>({
    abi: iGeneralKeeperABI,
    functionName: 'execOption',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"execPledge"`.
 */
export function useIGeneralKeeperExecPledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'execPledge'
        >['abi'],
        'execPledge'
      > & { functionName?: 'execPledge' }
    : UseContractWriteConfig<TMode, typeof iGeneralKeeperABI, 'execPledge'> & {
        abi?: never
        functionName?: 'execPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'execPledge'>({
    abi: iGeneralKeeperABI,
    functionName: 'execPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"execSwap"`.
 */
export function useIGeneralKeeperExecSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iGeneralKeeperABI, 'execSwap'>['abi'],
        'execSwap'
      > & { functionName?: 'execSwap' }
    : UseContractWriteConfig<TMode, typeof iGeneralKeeperABI, 'execSwap'> & {
        abi?: never
        functionName?: 'execSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'execSwap'>({
    abi: iGeneralKeeperABI,
    functionName: 'execSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"execSwapOrder"`.
 */
export function useIGeneralKeeperExecSwapOrder<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'execSwapOrder'
        >['abi'],
        'execSwapOrder'
      > & { functionName?: 'execSwapOrder' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'execSwapOrder'
      > & {
        abi?: never
        functionName?: 'execSwapOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'execSwapOrder'>({
    abi: iGeneralKeeperABI,
    functionName: 'execSwapOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"execTagAlong"`.
 */
export function useIGeneralKeeperExecTagAlong<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'execTagAlong'
        >['abi'],
        'execTagAlong'
      > & { functionName?: 'execTagAlong' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'execTagAlong'
      > & {
        abi?: never
        functionName?: 'execTagAlong'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'execTagAlong'>({
    abi: iGeneralKeeperABI,
    functionName: 'execTagAlong',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"extendPledge"`.
 */
export function useIGeneralKeeperExtendPledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'extendPledge'
        >['abi'],
        'extendPledge'
      > & { functionName?: 'extendPledge' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'extendPledge'
      > & {
        abi?: never
        functionName?: 'extendPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'extendPledge'>({
    abi: iGeneralKeeperABI,
    functionName: 'extendPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"issueNewShare"`.
 */
export function useIGeneralKeeperIssueNewShare<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'issueNewShare'
        >['abi'],
        'issueNewShare'
      > & { functionName?: 'issueNewShare' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'issueNewShare'
      > & {
        abi?: never
        functionName?: 'issueNewShare'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'issueNewShare'>({
    abi: iGeneralKeeperABI,
    functionName: 'issueNewShare',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"lockPledge"`.
 */
export function useIGeneralKeeperLockPledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'lockPledge'
        >['abi'],
        'lockPledge'
      > & { functionName?: 'lockPledge' }
    : UseContractWriteConfig<TMode, typeof iGeneralKeeperABI, 'lockPledge'> & {
        abi?: never
        functionName?: 'lockPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'lockPledge'>({
    abi: iGeneralKeeperABI,
    functionName: 'lockPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"lockSwap"`.
 */
export function useIGeneralKeeperLockSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iGeneralKeeperABI, 'lockSwap'>['abi'],
        'lockSwap'
      > & { functionName?: 'lockSwap' }
    : UseContractWriteConfig<TMode, typeof iGeneralKeeperABI, 'lockSwap'> & {
        abi?: never
        functionName?: 'lockSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'lockSwap'>({
    abi: iGeneralKeeperABI,
    functionName: 'lockSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"lockSwapOrder"`.
 */
export function useIGeneralKeeperLockSwapOrder<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'lockSwapOrder'
        >['abi'],
        'lockSwapOrder'
      > & { functionName?: 'lockSwapOrder' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'lockSwapOrder'
      > & {
        abi?: never
        functionName?: 'lockSwapOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'lockSwapOrder'>({
    abi: iGeneralKeeperABI,
    functionName: 'lockSwapOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"nominateDirector"`.
 */
export function useIGeneralKeeperNominateDirector<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'nominateDirector'
        >['abi'],
        'nominateDirector'
      > & { functionName?: 'nominateDirector' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'nominateDirector'
      > & {
        abi?: never
        functionName?: 'nominateDirector'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'nominateDirector'>({
    abi: iGeneralKeeperABI,
    functionName: 'nominateDirector',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"nominateOfficer"`.
 */
export function useIGeneralKeeperNominateOfficer<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'nominateOfficer'
        >['abi'],
        'nominateOfficer'
      > & { functionName?: 'nominateOfficer' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'nominateOfficer'
      > & {
        abi?: never
        functionName?: 'nominateOfficer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'nominateOfficer'>({
    abi: iGeneralKeeperABI,
    functionName: 'nominateOfficer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"placeSwapOrder"`.
 */
export function useIGeneralKeeperPlaceSwapOrder<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'placeSwapOrder'
        >['abi'],
        'placeSwapOrder'
      > & { functionName?: 'placeSwapOrder' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'placeSwapOrder'
      > & {
        abi?: never
        functionName?: 'placeSwapOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'placeSwapOrder'>({
    abi: iGeneralKeeperABI,
    functionName: 'placeSwapOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"proposeDocOfGM"`.
 */
export function useIGeneralKeeperProposeDocOfGm<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'proposeDocOfGM'
        >['abi'],
        'proposeDocOfGM'
      > & { functionName?: 'proposeDocOfGM' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'proposeDocOfGM'
      > & {
        abi?: never
        functionName?: 'proposeDocOfGM'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'proposeDocOfGM'>({
    abi: iGeneralKeeperABI,
    functionName: 'proposeDocOfGM',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"proposeMotionToBoard"`.
 */
export function useIGeneralKeeperProposeMotionToBoard<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'proposeMotionToBoard'
        >['abi'],
        'proposeMotionToBoard'
      > & { functionName?: 'proposeMotionToBoard' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'proposeMotionToBoard'
      > & {
        abi?: never
        functionName?: 'proposeMotionToBoard'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iGeneralKeeperABI,
    'proposeMotionToBoard'
  >({
    abi: iGeneralKeeperABI,
    functionName: 'proposeMotionToBoard',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"proposeMotionToGeneralMeeting"`.
 */
export function useIGeneralKeeperProposeMotionToGeneralMeeting<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'proposeMotionToGeneralMeeting'
        >['abi'],
        'proposeMotionToGeneralMeeting'
      > & { functionName?: 'proposeMotionToGeneralMeeting' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'proposeMotionToGeneralMeeting'
      > & {
        abi?: never
        functionName?: 'proposeMotionToGeneralMeeting'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iGeneralKeeperABI,
    'proposeMotionToGeneralMeeting'
  >({
    abi: iGeneralKeeperABI,
    functionName: 'proposeMotionToGeneralMeeting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"pushToCoffer"`.
 */
export function useIGeneralKeeperPushToCoffer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'pushToCoffer'
        >['abi'],
        'pushToCoffer'
      > & { functionName?: 'pushToCoffer' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'pushToCoffer'
      > & {
        abi?: never
        functionName?: 'pushToCoffer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'pushToCoffer'>({
    abi: iGeneralKeeperABI,
    functionName: 'pushToCoffer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"quitPosition"`.
 */
export function useIGeneralKeeperQuitPosition<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'quitPosition'
        >['abi'],
        'quitPosition'
      > & { functionName?: 'quitPosition' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'quitPosition'
      > & {
        abi?: never
        functionName?: 'quitPosition'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'quitPosition'>({
    abi: iGeneralKeeperABI,
    functionName: 'quitPosition',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"refundDebt"`.
 */
export function useIGeneralKeeperRefundDebt<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'refundDebt'
        >['abi'],
        'refundDebt'
      > & { functionName?: 'refundDebt' }
    : UseContractWriteConfig<TMode, typeof iGeneralKeeperABI, 'refundDebt'> & {
        abi?: never
        functionName?: 'refundDebt'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'refundDebt'>({
    abi: iGeneralKeeperABI,
    functionName: 'refundDebt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"regBook"`.
 */
export function useIGeneralKeeperRegBook<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iGeneralKeeperABI, 'regBook'>['abi'],
        'regBook'
      > & { functionName?: 'regBook' }
    : UseContractWriteConfig<TMode, typeof iGeneralKeeperABI, 'regBook'> & {
        abi?: never
        functionName?: 'regBook'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'regBook'>({
    abi: iGeneralKeeperABI,
    functionName: 'regBook',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"regKeeper"`.
 */
export function useIGeneralKeeperRegKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'regKeeper'
        >['abi'],
        'regKeeper'
      > & { functionName?: 'regKeeper' }
    : UseContractWriteConfig<TMode, typeof iGeneralKeeperABI, 'regKeeper'> & {
        abi?: never
        functionName?: 'regKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'regKeeper'>({
    abi: iGeneralKeeperABI,
    functionName: 'regKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"releasePledge"`.
 */
export function useIGeneralKeeperReleasePledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'releasePledge'
        >['abi'],
        'releasePledge'
      > & { functionName?: 'releasePledge' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'releasePledge'
      > & {
        abi?: never
        functionName?: 'releasePledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'releasePledge'>({
    abi: iGeneralKeeperABI,
    functionName: 'releasePledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"releaseSwap"`.
 */
export function useIGeneralKeeperReleaseSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'releaseSwap'
        >['abi'],
        'releaseSwap'
      > & { functionName?: 'releaseSwap' }
    : UseContractWriteConfig<TMode, typeof iGeneralKeeperABI, 'releaseSwap'> & {
        abi?: never
        functionName?: 'releaseSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'releaseSwap'>({
    abi: iGeneralKeeperABI,
    functionName: 'releaseSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"releaseSwapOrder"`.
 */
export function useIGeneralKeeperReleaseSwapOrder<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'releaseSwapOrder'
        >['abi'],
        'releaseSwapOrder'
      > & { functionName?: 'releaseSwapOrder' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'releaseSwapOrder'
      > & {
        abi?: never
        functionName?: 'releaseSwapOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'releaseSwapOrder'>({
    abi: iGeneralKeeperABI,
    functionName: 'releaseSwapOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"removeDirector"`.
 */
export function useIGeneralKeeperRemoveDirector<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'removeDirector'
        >['abi'],
        'removeDirector'
      > & { functionName?: 'removeDirector' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'removeDirector'
      > & {
        abi?: never
        functionName?: 'removeDirector'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'removeDirector'>({
    abi: iGeneralKeeperABI,
    functionName: 'removeDirector',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"removeOfficer"`.
 */
export function useIGeneralKeeperRemoveOfficer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'removeOfficer'
        >['abi'],
        'removeOfficer'
      > & { functionName?: 'removeOfficer' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'removeOfficer'
      > & {
        abi?: never
        functionName?: 'removeOfficer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'removeOfficer'>({
    abi: iGeneralKeeperABI,
    functionName: 'removeOfficer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"requestPaidInCapital"`.
 */
export function useIGeneralKeeperRequestPaidInCapital<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'requestPaidInCapital'
        >['abi'],
        'requestPaidInCapital'
      > & { functionName?: 'requestPaidInCapital' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'requestPaidInCapital'
      > & {
        abi?: never
        functionName?: 'requestPaidInCapital'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iGeneralKeeperABI,
    'requestPaidInCapital'
  >({
    abi: iGeneralKeeperABI,
    functionName: 'requestPaidInCapital',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"requestToBuy"`.
 */
export function useIGeneralKeeperRequestToBuy<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'requestToBuy'
        >['abi'],
        'requestToBuy'
      > & { functionName?: 'requestToBuy' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'requestToBuy'
      > & {
        abi?: never
        functionName?: 'requestToBuy'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'requestToBuy'>({
    abi: iGeneralKeeperABI,
    functionName: 'requestToBuy',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"revokeDeal"`.
 */
export function useIGeneralKeeperRevokeDeal<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'revokeDeal'
        >['abi'],
        'revokeDeal'
      > & { functionName?: 'revokeDeal' }
    : UseContractWriteConfig<TMode, typeof iGeneralKeeperABI, 'revokeDeal'> & {
        abi?: never
        functionName?: 'revokeDeal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'revokeDeal'>({
    abi: iGeneralKeeperABI,
    functionName: 'revokeDeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"revokePledge"`.
 */
export function useIGeneralKeeperRevokePledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'revokePledge'
        >['abi'],
        'revokePledge'
      > & { functionName?: 'revokePledge' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'revokePledge'
      > & {
        abi?: never
        functionName?: 'revokePledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'revokePledge'>({
    abi: iGeneralKeeperABI,
    functionName: 'revokePledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"revokeSwap"`.
 */
export function useIGeneralKeeperRevokeSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'revokeSwap'
        >['abi'],
        'revokeSwap'
      > & { functionName?: 'revokeSwap' }
    : UseContractWriteConfig<TMode, typeof iGeneralKeeperABI, 'revokeSwap'> & {
        abi?: never
        functionName?: 'revokeSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'revokeSwap'>({
    abi: iGeneralKeeperABI,
    functionName: 'revokeSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"revokeSwapOrder"`.
 */
export function useIGeneralKeeperRevokeSwapOrder<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'revokeSwapOrder'
        >['abi'],
        'revokeSwapOrder'
      > & { functionName?: 'revokeSwapOrder' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'revokeSwapOrder'
      > & {
        abi?: never
        functionName?: 'revokeSwapOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'revokeSwapOrder'>({
    abi: iGeneralKeeperABI,
    functionName: 'revokeSwapOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"setAmtBase"`.
 */
export function useIGeneralKeeperSetAmtBase<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'setAmtBase'
        >['abi'],
        'setAmtBase'
      > & { functionName?: 'setAmtBase' }
    : UseContractWriteConfig<TMode, typeof iGeneralKeeperABI, 'setAmtBase'> & {
        abi?: never
        functionName?: 'setAmtBase'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'setAmtBase'>({
    abi: iGeneralKeeperABI,
    functionName: 'setAmtBase',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"setCompInfo"`.
 */
export function useIGeneralKeeperSetCompInfo<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'setCompInfo'
        >['abi'],
        'setCompInfo'
      > & { functionName?: 'setCompInfo' }
    : UseContractWriteConfig<TMode, typeof iGeneralKeeperABI, 'setCompInfo'> & {
        abi?: never
        functionName?: 'setCompInfo'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'setCompInfo'>({
    abi: iGeneralKeeperABI,
    functionName: 'setCompInfo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"setMaxQtyOfMembers"`.
 */
export function useIGeneralKeeperSetMaxQtyOfMembers<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'setMaxQtyOfMembers'
        >['abi'],
        'setMaxQtyOfMembers'
      > & { functionName?: 'setMaxQtyOfMembers' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'setMaxQtyOfMembers'
      > & {
        abi?: never
        functionName?: 'setMaxQtyOfMembers'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iGeneralKeeperABI,
    'setMaxQtyOfMembers'
  >({
    abi: iGeneralKeeperABI,
    functionName: 'setMaxQtyOfMembers',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"setPayInAmt"`.
 */
export function useIGeneralKeeperSetPayInAmt<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'setPayInAmt'
        >['abi'],
        'setPayInAmt'
      > & { functionName?: 'setPayInAmt' }
    : UseContractWriteConfig<TMode, typeof iGeneralKeeperABI, 'setPayInAmt'> & {
        abi?: never
        functionName?: 'setPayInAmt'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'setPayInAmt'>({
    abi: iGeneralKeeperABI,
    functionName: 'setPayInAmt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"setVoteBase"`.
 */
export function useIGeneralKeeperSetVoteBase<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'setVoteBase'
        >['abi'],
        'setVoteBase'
      > & { functionName?: 'setVoteBase' }
    : UseContractWriteConfig<TMode, typeof iGeneralKeeperABI, 'setVoteBase'> & {
        abi?: never
        functionName?: 'setVoteBase'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'setVoteBase'>({
    abi: iGeneralKeeperABI,
    functionName: 'setVoteBase',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"signIA"`.
 */
export function useIGeneralKeeperSignIa<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iGeneralKeeperABI, 'signIA'>['abi'],
        'signIA'
      > & { functionName?: 'signIA' }
    : UseContractWriteConfig<TMode, typeof iGeneralKeeperABI, 'signIA'> & {
        abi?: never
        functionName?: 'signIA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'signIA'>({
    abi: iGeneralKeeperABI,
    functionName: 'signIA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"signSHA"`.
 */
export function useIGeneralKeeperSignSha<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iGeneralKeeperABI, 'signSHA'>['abi'],
        'signSHA'
      > & { functionName?: 'signSHA' }
    : UseContractWriteConfig<TMode, typeof iGeneralKeeperABI, 'signSHA'> & {
        abi?: never
        functionName?: 'signSHA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'signSHA'>({
    abi: iGeneralKeeperABI,
    functionName: 'signSHA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"takeGiftShares"`.
 */
export function useIGeneralKeeperTakeGiftShares<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'takeGiftShares'
        >['abi'],
        'takeGiftShares'
      > & { functionName?: 'takeGiftShares' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'takeGiftShares'
      > & {
        abi?: never
        functionName?: 'takeGiftShares'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'takeGiftShares'>({
    abi: iGeneralKeeperABI,
    functionName: 'takeGiftShares',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"takePosition"`.
 */
export function useIGeneralKeeperTakePosition<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'takePosition'
        >['abi'],
        'takePosition'
      > & { functionName?: 'takePosition' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'takePosition'
      > & {
        abi?: never
        functionName?: 'takePosition'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'takePosition'>({
    abi: iGeneralKeeperABI,
    functionName: 'takePosition',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"takeSeat"`.
 */
export function useIGeneralKeeperTakeSeat<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iGeneralKeeperABI, 'takeSeat'>['abi'],
        'takeSeat'
      > & { functionName?: 'takeSeat' }
    : UseContractWriteConfig<TMode, typeof iGeneralKeeperABI, 'takeSeat'> & {
        abi?: never
        functionName?: 'takeSeat'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'takeSeat'>({
    abi: iGeneralKeeperABI,
    functionName: 'takeSeat',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"terminateDeal"`.
 */
export function useIGeneralKeeperTerminateDeal<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'terminateDeal'
        >['abi'],
        'terminateDeal'
      > & { functionName?: 'terminateDeal' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'terminateDeal'
      > & {
        abi?: never
        functionName?: 'terminateDeal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'terminateDeal'>({
    abi: iGeneralKeeperABI,
    functionName: 'terminateDeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"transferPledge"`.
 */
export function useIGeneralKeeperTransferPledge<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'transferPledge'
        >['abi'],
        'transferPledge'
      > & { functionName?: 'transferPledge' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'transferPledge'
      > & {
        abi?: never
        functionName?: 'transferPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'transferPledge'>({
    abi: iGeneralKeeperABI,
    functionName: 'transferPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"transferSwap"`.
 */
export function useIGeneralKeeperTransferSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'transferSwap'
        >['abi'],
        'transferSwap'
      > & { functionName?: 'transferSwap' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'transferSwap'
      > & {
        abi?: never
        functionName?: 'transferSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'transferSwap'>({
    abi: iGeneralKeeperABI,
    functionName: 'transferSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"transferTargetShare"`.
 */
export function useIGeneralKeeperTransferTargetShare<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'transferTargetShare'
        >['abi'],
        'transferTargetShare'
      > & { functionName?: 'transferTargetShare' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'transferTargetShare'
      > & {
        abi?: never
        functionName?: 'transferTargetShare'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iGeneralKeeperABI,
    'transferTargetShare'
  >({
    abi: iGeneralKeeperABI,
    functionName: 'transferTargetShare',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"updateOracle"`.
 */
export function useIGeneralKeeperUpdateOracle<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'updateOracle'
        >['abi'],
        'updateOracle'
      > & { functionName?: 'updateOracle' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'updateOracle'
      > & {
        abi?: never
        functionName?: 'updateOracle'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'updateOracle'>({
    abi: iGeneralKeeperABI,
    functionName: 'updateOracle',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"voteCounting"`.
 */
export function useIGeneralKeeperVoteCounting<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'voteCounting'
        >['abi'],
        'voteCounting'
      > & { functionName?: 'voteCounting' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'voteCounting'
      > & {
        abi?: never
        functionName?: 'voteCounting'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'voteCounting'>({
    abi: iGeneralKeeperABI,
    functionName: 'voteCounting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"voteCountingOfGM"`.
 */
export function useIGeneralKeeperVoteCountingOfGm<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'voteCountingOfGM'
        >['abi'],
        'voteCountingOfGM'
      > & { functionName?: 'voteCountingOfGM' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'voteCountingOfGM'
      > & {
        abi?: never
        functionName?: 'voteCountingOfGM'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'voteCountingOfGM'>({
    abi: iGeneralKeeperABI,
    functionName: 'voteCountingOfGM',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"withdrawPayInAmt"`.
 */
export function useIGeneralKeeperWithdrawPayInAmt<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGeneralKeeperABI,
          'withdrawPayInAmt'
        >['abi'],
        'withdrawPayInAmt'
      > & { functionName?: 'withdrawPayInAmt' }
    : UseContractWriteConfig<
        TMode,
        typeof iGeneralKeeperABI,
        'withdrawPayInAmt'
      > & {
        abi?: never
        functionName?: 'withdrawPayInAmt'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralKeeperABI, 'withdrawPayInAmt'>({
    abi: iGeneralKeeperABI,
    functionName: 'withdrawPayInAmt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__.
 */
export function usePrepareIGeneralKeeperWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"acceptAlongDeal"`.
 */
export function usePrepareIGeneralKeeperAcceptAlongDeal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'acceptAlongDeal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'acceptAlongDeal',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'acceptAlongDeal'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"acceptFirstRefusal"`.
 */
export function usePrepareIGeneralKeeperAcceptFirstRefusal(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iGeneralKeeperABI,
      'acceptFirstRefusal'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'acceptFirstRefusal',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'acceptFirstRefusal'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"acceptSHA"`.
 */
export function usePrepareIGeneralKeeperAcceptSha(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'acceptSHA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'acceptSHA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'acceptSHA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"activateSHA"`.
 */
export function usePrepareIGeneralKeeperActivateSha(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'activateSHA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'activateSHA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'activateSHA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"castVote"`.
 */
export function usePrepareIGeneralKeeperCastVote(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'castVote'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'castVote',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'castVote'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"castVoteOfGM"`.
 */
export function usePrepareIGeneralKeeperCastVoteOfGm(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'castVoteOfGM'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'castVoteOfGM',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'castVoteOfGM'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"circulateIA"`.
 */
export function usePrepareIGeneralKeeperCirculateIa(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'circulateIA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'circulateIA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'circulateIA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"circulateSHA"`.
 */
export function usePrepareIGeneralKeeperCirculateSha(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'circulateSHA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'circulateSHA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'circulateSHA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"closeDeal"`.
 */
export function usePrepareIGeneralKeeperCloseDeal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'closeDeal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'closeDeal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'closeDeal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"createAction"`.
 */
export function usePrepareIGeneralKeeperCreateAction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'createAction'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'createAction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'createAction'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"createActionOfGM"`.
 */
export function usePrepareIGeneralKeeperCreateActionOfGm(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'createActionOfGM'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'createActionOfGM',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'createActionOfGM'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"createCorpSeal"`.
 */
export function usePrepareIGeneralKeeperCreateCorpSeal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'createCorpSeal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'createCorpSeal',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'createCorpSeal'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"createIA"`.
 */
export function usePrepareIGeneralKeeperCreateIa(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'createIA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'createIA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'createIA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"createMotionToApproveDoc"`.
 */
export function usePrepareIGeneralKeeperCreateMotionToApproveDoc(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iGeneralKeeperABI,
      'createMotionToApproveDoc'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'createMotionToApproveDoc',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'createMotionToApproveDoc'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"createMotionToRemoveDirector"`.
 */
export function usePrepareIGeneralKeeperCreateMotionToRemoveDirector(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iGeneralKeeperABI,
      'createMotionToRemoveDirector'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'createMotionToRemoveDirector',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'createMotionToRemoveDirector'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"createMotionToRemoveOfficer"`.
 */
export function usePrepareIGeneralKeeperCreateMotionToRemoveOfficer(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iGeneralKeeperABI,
      'createMotionToRemoveOfficer'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'createMotionToRemoveOfficer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'createMotionToRemoveOfficer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"createPledge"`.
 */
export function usePrepareIGeneralKeeperCreatePledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'createPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'createPledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'createPledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"createSHA"`.
 */
export function usePrepareIGeneralKeeperCreateSha(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'createSHA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'createSHA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'createSHA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"createSwap"`.
 */
export function usePrepareIGeneralKeeperCreateSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'createSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'createSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'createSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"crystalizeSwap"`.
 */
export function usePrepareIGeneralKeeperCrystalizeSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'crystalizeSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'crystalizeSwap',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'crystalizeSwap'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"decreaseCapital"`.
 */
export function usePrepareIGeneralKeeperDecreaseCapital(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'decreaseCapital'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'decreaseCapital',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'decreaseCapital'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"entrustDelegaterForBoardMeeting"`.
 */
export function usePrepareIGeneralKeeperEntrustDelegaterForBoardMeeting(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iGeneralKeeperABI,
      'entrustDelegaterForBoardMeeting'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'entrustDelegaterForBoardMeeting',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'entrustDelegaterForBoardMeeting'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"entrustDelegaterForGeneralMeeting"`.
 */
export function usePrepareIGeneralKeeperEntrustDelegaterForGeneralMeeting(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iGeneralKeeperABI,
      'entrustDelegaterForGeneralMeeting'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'entrustDelegaterForGeneralMeeting',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'entrustDelegaterForGeneralMeeting'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"execAction"`.
 */
export function usePrepareIGeneralKeeperExecAction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'execAction'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'execAction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'execAction'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"execActionOfGM"`.
 */
export function usePrepareIGeneralKeeperExecActionOfGm(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'execActionOfGM'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'execActionOfGM',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'execActionOfGM'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"execAntiDilution"`.
 */
export function usePrepareIGeneralKeeperExecAntiDilution(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'execAntiDilution'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'execAntiDilution',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'execAntiDilution'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"execDragAlong"`.
 */
export function usePrepareIGeneralKeeperExecDragAlong(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'execDragAlong'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'execDragAlong',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'execDragAlong'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"execFirstRefusal"`.
 */
export function usePrepareIGeneralKeeperExecFirstRefusal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'execFirstRefusal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'execFirstRefusal',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'execFirstRefusal'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"execOption"`.
 */
export function usePrepareIGeneralKeeperExecOption(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'execOption'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'execOption',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'execOption'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"execPledge"`.
 */
export function usePrepareIGeneralKeeperExecPledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'execPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'execPledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'execPledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"execSwap"`.
 */
export function usePrepareIGeneralKeeperExecSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'execSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'execSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'execSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"execSwapOrder"`.
 */
export function usePrepareIGeneralKeeperExecSwapOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'execSwapOrder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'execSwapOrder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'execSwapOrder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"execTagAlong"`.
 */
export function usePrepareIGeneralKeeperExecTagAlong(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'execTagAlong'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'execTagAlong',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'execTagAlong'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"extendPledge"`.
 */
export function usePrepareIGeneralKeeperExtendPledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'extendPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'extendPledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'extendPledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"issueNewShare"`.
 */
export function usePrepareIGeneralKeeperIssueNewShare(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'issueNewShare'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'issueNewShare',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'issueNewShare'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"lockPledge"`.
 */
export function usePrepareIGeneralKeeperLockPledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'lockPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'lockPledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'lockPledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"lockSwap"`.
 */
export function usePrepareIGeneralKeeperLockSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'lockSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'lockSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'lockSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"lockSwapOrder"`.
 */
export function usePrepareIGeneralKeeperLockSwapOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'lockSwapOrder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'lockSwapOrder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'lockSwapOrder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"nominateDirector"`.
 */
export function usePrepareIGeneralKeeperNominateDirector(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'nominateDirector'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'nominateDirector',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'nominateDirector'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"nominateOfficer"`.
 */
export function usePrepareIGeneralKeeperNominateOfficer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'nominateOfficer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'nominateOfficer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'nominateOfficer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"placeSwapOrder"`.
 */
export function usePrepareIGeneralKeeperPlaceSwapOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'placeSwapOrder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'placeSwapOrder',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'placeSwapOrder'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"proposeDocOfGM"`.
 */
export function usePrepareIGeneralKeeperProposeDocOfGm(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'proposeDocOfGM'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'proposeDocOfGM',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'proposeDocOfGM'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"proposeMotionToBoard"`.
 */
export function usePrepareIGeneralKeeperProposeMotionToBoard(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iGeneralKeeperABI,
      'proposeMotionToBoard'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'proposeMotionToBoard',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'proposeMotionToBoard'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"proposeMotionToGeneralMeeting"`.
 */
export function usePrepareIGeneralKeeperProposeMotionToGeneralMeeting(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iGeneralKeeperABI,
      'proposeMotionToGeneralMeeting'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'proposeMotionToGeneralMeeting',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'proposeMotionToGeneralMeeting'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"pushToCoffer"`.
 */
export function usePrepareIGeneralKeeperPushToCoffer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'pushToCoffer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'pushToCoffer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'pushToCoffer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"quitPosition"`.
 */
export function usePrepareIGeneralKeeperQuitPosition(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'quitPosition'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'quitPosition',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'quitPosition'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"refundDebt"`.
 */
export function usePrepareIGeneralKeeperRefundDebt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'refundDebt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'refundDebt',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'refundDebt'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"regBook"`.
 */
export function usePrepareIGeneralKeeperRegBook(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'regBook'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'regBook',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'regBook'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"regKeeper"`.
 */
export function usePrepareIGeneralKeeperRegKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'regKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'regKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'regKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"releasePledge"`.
 */
export function usePrepareIGeneralKeeperReleasePledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'releasePledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'releasePledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'releasePledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"releaseSwap"`.
 */
export function usePrepareIGeneralKeeperReleaseSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'releaseSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'releaseSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'releaseSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"releaseSwapOrder"`.
 */
export function usePrepareIGeneralKeeperReleaseSwapOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'releaseSwapOrder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'releaseSwapOrder',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'releaseSwapOrder'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"removeDirector"`.
 */
export function usePrepareIGeneralKeeperRemoveDirector(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'removeDirector'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'removeDirector',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'removeDirector'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"removeOfficer"`.
 */
export function usePrepareIGeneralKeeperRemoveOfficer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'removeOfficer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'removeOfficer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'removeOfficer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"requestPaidInCapital"`.
 */
export function usePrepareIGeneralKeeperRequestPaidInCapital(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iGeneralKeeperABI,
      'requestPaidInCapital'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'requestPaidInCapital',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'requestPaidInCapital'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"requestToBuy"`.
 */
export function usePrepareIGeneralKeeperRequestToBuy(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'requestToBuy'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'requestToBuy',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'requestToBuy'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"revokeDeal"`.
 */
export function usePrepareIGeneralKeeperRevokeDeal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'revokeDeal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'revokeDeal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'revokeDeal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"revokePledge"`.
 */
export function usePrepareIGeneralKeeperRevokePledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'revokePledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'revokePledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'revokePledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"revokeSwap"`.
 */
export function usePrepareIGeneralKeeperRevokeSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'revokeSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'revokeSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'revokeSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"revokeSwapOrder"`.
 */
export function usePrepareIGeneralKeeperRevokeSwapOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'revokeSwapOrder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'revokeSwapOrder',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'revokeSwapOrder'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"setAmtBase"`.
 */
export function usePrepareIGeneralKeeperSetAmtBase(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'setAmtBase'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'setAmtBase',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'setAmtBase'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"setCompInfo"`.
 */
export function usePrepareIGeneralKeeperSetCompInfo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'setCompInfo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'setCompInfo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'setCompInfo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"setMaxQtyOfMembers"`.
 */
export function usePrepareIGeneralKeeperSetMaxQtyOfMembers(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iGeneralKeeperABI,
      'setMaxQtyOfMembers'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'setMaxQtyOfMembers',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'setMaxQtyOfMembers'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"setPayInAmt"`.
 */
export function usePrepareIGeneralKeeperSetPayInAmt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'setPayInAmt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'setPayInAmt',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'setPayInAmt'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"setVoteBase"`.
 */
export function usePrepareIGeneralKeeperSetVoteBase(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'setVoteBase'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'setVoteBase',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'setVoteBase'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"signIA"`.
 */
export function usePrepareIGeneralKeeperSignIa(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'signIA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'signIA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'signIA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"signSHA"`.
 */
export function usePrepareIGeneralKeeperSignSha(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'signSHA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'signSHA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'signSHA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"takeGiftShares"`.
 */
export function usePrepareIGeneralKeeperTakeGiftShares(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'takeGiftShares'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'takeGiftShares',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'takeGiftShares'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"takePosition"`.
 */
export function usePrepareIGeneralKeeperTakePosition(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'takePosition'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'takePosition',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'takePosition'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"takeSeat"`.
 */
export function usePrepareIGeneralKeeperTakeSeat(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'takeSeat'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'takeSeat',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'takeSeat'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"terminateDeal"`.
 */
export function usePrepareIGeneralKeeperTerminateDeal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'terminateDeal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'terminateDeal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'terminateDeal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"transferPledge"`.
 */
export function usePrepareIGeneralKeeperTransferPledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'transferPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'transferPledge',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'transferPledge'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"transferSwap"`.
 */
export function usePrepareIGeneralKeeperTransferSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'transferSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'transferSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'transferSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"transferTargetShare"`.
 */
export function usePrepareIGeneralKeeperTransferTargetShare(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iGeneralKeeperABI,
      'transferTargetShare'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'transferTargetShare',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'transferTargetShare'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"updateOracle"`.
 */
export function usePrepareIGeneralKeeperUpdateOracle(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'updateOracle'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'updateOracle',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'updateOracle'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"voteCounting"`.
 */
export function usePrepareIGeneralKeeperVoteCounting(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'voteCounting'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'voteCounting',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'voteCounting'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"voteCountingOfGM"`.
 */
export function usePrepareIGeneralKeeperVoteCountingOfGm(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'voteCountingOfGM'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'voteCountingOfGM',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'voteCountingOfGM'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `functionName` set to `"withdrawPayInAmt"`.
 */
export function usePrepareIGeneralKeeperWithdrawPayInAmt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralKeeperABI, 'withdrawPayInAmt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralKeeperABI,
    functionName: 'withdrawPayInAmt',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGeneralKeeperABI,
    'withdrawPayInAmt'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iGeneralKeeperABI}__.
 */
export function useIGeneralKeeperEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iGeneralKeeperABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iGeneralKeeperABI,
    ...config,
  } as UseContractEventConfig<typeof iGeneralKeeperABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iGeneralKeeperABI}__ and `eventName` set to `"ExecAction"`.
 */
export function useIGeneralKeeperExecActionEvent(
  config: Omit<
    UseContractEventConfig<typeof iGeneralKeeperABI, 'ExecAction'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iGeneralKeeperABI,
    eventName: 'ExecAction',
    ...config,
  } as UseContractEventConfig<typeof iGeneralKeeperABI, 'ExecAction'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link regCenterABI}__.
 */
export function useRegCenter(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: regCenterABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link regCenterABI}__.
 */
export function useRegCenterRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof regCenterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof regCenterABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: regCenterABI,
    ...config,
  } as UseContractReadConfig<typeof regCenterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"checkLocker"`.
 */
export function useRegCenterCheckLocker<
  TSelectData = ReadContractResult<typeof regCenterABI, 'checkLocker'>,
>(
  config: Omit<
    UseContractReadConfig<typeof regCenterABI, 'checkLocker', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: regCenterABI,
    functionName: 'checkLocker',
    ...config,
  } as UseContractReadConfig<typeof regCenterABI, 'checkLocker', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"counterOfDocs"`.
 */
export function useRegCenterCounterOfDocs<
  TSelectData = ReadContractResult<typeof regCenterABI, 'counterOfDocs'>,
>(
  config: Omit<
    UseContractReadConfig<typeof regCenterABI, 'counterOfDocs', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: regCenterABI,
    functionName: 'counterOfDocs',
    ...config,
  } as UseContractReadConfig<typeof regCenterABI, 'counterOfDocs', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"counterOfVersions"`.
 */
export function useRegCenterCounterOfVersions<
  TSelectData = ReadContractResult<typeof regCenterABI, 'counterOfVersions'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof regCenterABI,
      'counterOfVersions',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: regCenterABI,
    functionName: 'counterOfVersions',
    ...config,
  } as UseContractReadConfig<
    typeof regCenterABI,
    'counterOfVersions',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"docExist"`.
 */
export function useRegCenterDocExist<
  TSelectData = ReadContractResult<typeof regCenterABI, 'docExist'>,
>(
  config: Omit<
    UseContractReadConfig<typeof regCenterABI, 'docExist', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: regCenterABI,
    functionName: 'docExist',
    ...config,
  } as UseContractReadConfig<typeof regCenterABI, 'docExist', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"getAllDocsSN"`.
 */
export function useRegCenterGetAllDocsSn<
  TSelectData = ReadContractResult<typeof regCenterABI, 'getAllDocsSN'>,
>(
  config: Omit<
    UseContractReadConfig<typeof regCenterABI, 'getAllDocsSN', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: regCenterABI,
    functionName: 'getAllDocsSN',
    ...config,
  } as UseContractReadConfig<typeof regCenterABI, 'getAllDocsSN', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"getBodiesList"`.
 */
export function useRegCenterGetBodiesList<
  TSelectData = ReadContractResult<typeof regCenterABI, 'getBodiesList'>,
>(
  config: Omit<
    UseContractReadConfig<typeof regCenterABI, 'getBodiesList', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: regCenterABI,
    functionName: 'getBodiesList',
    ...config,
  } as UseContractReadConfig<typeof regCenterABI, 'getBodiesList', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"getBookeeper"`.
 */
export function useRegCenterGetBookeeper<
  TSelectData = ReadContractResult<typeof regCenterABI, 'getBookeeper'>,
>(
  config: Omit<
    UseContractReadConfig<typeof regCenterABI, 'getBookeeper', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: regCenterABI,
    functionName: 'getBookeeper',
    ...config,
  } as UseContractReadConfig<typeof regCenterABI, 'getBookeeper', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"getDoc"`.
 */
export function useRegCenterGetDoc<
  TSelectData = ReadContractResult<typeof regCenterABI, 'getDoc'>,
>(
  config: Omit<
    UseContractReadConfig<typeof regCenterABI, 'getDoc', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: regCenterABI,
    functionName: 'getDoc',
    ...config,
  } as UseContractReadConfig<typeof regCenterABI, 'getDoc', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"getDocByUserNo"`.
 */
export function useRegCenterGetDocByUserNo<
  TSelectData = ReadContractResult<typeof regCenterABI, 'getDocByUserNo'>,
>(
  config: Omit<
    UseContractReadConfig<typeof regCenterABI, 'getDocByUserNo', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: regCenterABI,
    functionName: 'getDocByUserNo',
    ...config,
  } as UseContractReadConfig<
    typeof regCenterABI,
    'getDocByUserNo',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"getDocKeeper"`.
 */
export function useRegCenterGetDocKeeper<
  TSelectData = ReadContractResult<typeof regCenterABI, 'getDocKeeper'>,
>(
  config: Omit<
    UseContractReadConfig<typeof regCenterABI, 'getDocKeeper', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: regCenterABI,
    functionName: 'getDocKeeper',
    ...config,
  } as UseContractReadConfig<typeof regCenterABI, 'getDocKeeper', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"getDocsList"`.
 */
export function useRegCenterGetDocsList<
  TSelectData = ReadContractResult<typeof regCenterABI, 'getDocsList'>,
>(
  config: Omit<
    UseContractReadConfig<typeof regCenterABI, 'getDocsList', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: regCenterABI,
    functionName: 'getDocsList',
    ...config,
  } as UseContractReadConfig<typeof regCenterABI, 'getDocsList', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"getMyUserNo"`.
 */
export function useRegCenterGetMyUserNo<
  TSelectData = ReadContractResult<typeof regCenterABI, 'getMyUserNo'>,
>(
  config: Omit<
    UseContractReadConfig<typeof regCenterABI, 'getMyUserNo', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: regCenterABI,
    functionName: 'getMyUserNo',
    ...config,
  } as UseContractReadConfig<typeof regCenterABI, 'getMyUserNo', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"getOwner"`.
 */
export function useRegCenterGetOwner<
  TSelectData = ReadContractResult<typeof regCenterABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof regCenterABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: regCenterABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<typeof regCenterABI, 'getOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"getRewardSetting"`.
 */
export function useRegCenterGetRewardSetting<
  TSelectData = ReadContractResult<typeof regCenterABI, 'getRewardSetting'>,
>(
  config: Omit<
    UseContractReadConfig<typeof regCenterABI, 'getRewardSetting', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: regCenterABI,
    functionName: 'getRewardSetting',
    ...config,
  } as UseContractReadConfig<
    typeof regCenterABI,
    'getRewardSetting',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"getSNList"`.
 */
export function useRegCenterGetSnList<
  TSelectData = ReadContractResult<typeof regCenterABI, 'getSNList'>,
>(
  config: Omit<
    UseContractReadConfig<typeof regCenterABI, 'getSNList', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: regCenterABI,
    functionName: 'getSNList',
    ...config,
  } as UseContractReadConfig<typeof regCenterABI, 'getSNList', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"getTemplate"`.
 */
export function useRegCenterGetTemplate<
  TSelectData = ReadContractResult<typeof regCenterABI, 'getTemplate'>,
>(
  config: Omit<
    UseContractReadConfig<typeof regCenterABI, 'getTemplate', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: regCenterABI,
    functionName: 'getTemplate',
    ...config,
  } as UseContractReadConfig<typeof regCenterABI, 'getTemplate', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"getTempsList"`.
 */
export function useRegCenterGetTempsList<
  TSelectData = ReadContractResult<typeof regCenterABI, 'getTempsList'>,
>(
  config: Omit<
    UseContractReadConfig<typeof regCenterABI, 'getTempsList', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: regCenterABI,
    functionName: 'getTempsList',
    ...config,
  } as UseContractReadConfig<typeof regCenterABI, 'getTempsList', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"getUser"`.
 */
export function useRegCenterGetUser<
  TSelectData = ReadContractResult<typeof regCenterABI, 'getUser'>,
>(
  config: Omit<
    UseContractReadConfig<typeof regCenterABI, 'getUser', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: regCenterABI,
    functionName: 'getUser',
    ...config,
  } as UseContractReadConfig<typeof regCenterABI, 'getUser', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"isCOA"`.
 */
export function useRegCenterIsCoa<
  TSelectData = ReadContractResult<typeof regCenterABI, 'isCOA'>,
>(
  config: Omit<
    UseContractReadConfig<typeof regCenterABI, 'isCOA', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: regCenterABI,
    functionName: 'isCOA',
    ...config,
  } as UseContractReadConfig<typeof regCenterABI, 'isCOA', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"isKey"`.
 */
export function useRegCenterIsKey<
  TSelectData = ReadContractResult<typeof regCenterABI, 'isKey'>,
>(
  config: Omit<
    UseContractReadConfig<typeof regCenterABI, 'isKey', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: regCenterABI,
    functionName: 'isKey',
    ...config,
  } as UseContractReadConfig<typeof regCenterABI, 'isKey', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"verifyDoc"`.
 */
export function useRegCenterVerifyDoc<
  TSelectData = ReadContractResult<typeof regCenterABI, 'verifyDoc'>,
>(
  config: Omit<
    UseContractReadConfig<typeof regCenterABI, 'verifyDoc', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: regCenterABI,
    functionName: 'verifyDoc',
    ...config,
  } as UseContractReadConfig<typeof regCenterABI, 'verifyDoc', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link regCenterABI}__.
 */
export function useRegCenterWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof regCenterABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof regCenterABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof regCenterABI, TFunctionName>({
    abi: regCenterABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"createComp"`.
 */
export function useRegCenterCreateComp<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof regCenterABI, 'createComp'>['abi'],
        'createComp'
      > & { functionName?: 'createComp' }
    : UseContractWriteConfig<TMode, typeof regCenterABI, 'createComp'> & {
        abi?: never
        functionName?: 'createComp'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof regCenterABI, 'createComp'>({
    abi: regCenterABI,
    functionName: 'createComp',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"createDoc"`.
 */
export function useRegCenterCreateDoc<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof regCenterABI, 'createDoc'>['abi'],
        'createDoc'
      > & { functionName?: 'createDoc' }
    : UseContractWriteConfig<TMode, typeof regCenterABI, 'createDoc'> & {
        abi?: never
        functionName?: 'createDoc'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof regCenterABI, 'createDoc'>({
    abi: regCenterABI,
    functionName: 'createDoc',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"getUserNo"`.
 */
export function useRegCenterGetUserNo<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof regCenterABI, 'getUserNo'>['abi'],
        'getUserNo'
      > & { functionName?: 'getUserNo' }
    : UseContractWriteConfig<TMode, typeof regCenterABI, 'getUserNo'> & {
        abi?: never
        functionName?: 'getUserNo'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof regCenterABI, 'getUserNo'>({
    abi: regCenterABI,
    functionName: 'getUserNo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"initDocsRepo"`.
 */
export function useRegCenterInitDocsRepo<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof regCenterABI, 'initDocsRepo'>['abi'],
        'initDocsRepo'
      > & { functionName?: 'initDocsRepo' }
    : UseContractWriteConfig<TMode, typeof regCenterABI, 'initDocsRepo'> & {
        abi?: never
        functionName?: 'initDocsRepo'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof regCenterABI, 'initDocsRepo'>({
    abi: regCenterABI,
    functionName: 'initDocsRepo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"lockPoints"`.
 */
export function useRegCenterLockPoints<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof regCenterABI, 'lockPoints'>['abi'],
        'lockPoints'
      > & { functionName?: 'lockPoints' }
    : UseContractWriteConfig<TMode, typeof regCenterABI, 'lockPoints'> & {
        abi?: never
        functionName?: 'lockPoints'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof regCenterABI, 'lockPoints'>({
    abi: regCenterABI,
    functionName: 'lockPoints',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"mintAndLockPoints"`.
 */
export function useRegCenterMintAndLockPoints<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof regCenterABI,
          'mintAndLockPoints'
        >['abi'],
        'mintAndLockPoints'
      > & { functionName?: 'mintAndLockPoints' }
    : UseContractWriteConfig<
        TMode,
        typeof regCenterABI,
        'mintAndLockPoints'
      > & {
        abi?: never
        functionName?: 'mintAndLockPoints'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof regCenterABI, 'mintAndLockPoints'>({
    abi: regCenterABI,
    functionName: 'mintAndLockPoints',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"mintPoints"`.
 */
export function useRegCenterMintPoints<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof regCenterABI, 'mintPoints'>['abi'],
        'mintPoints'
      > & { functionName?: 'mintPoints' }
    : UseContractWriteConfig<TMode, typeof regCenterABI, 'mintPoints'> & {
        abi?: never
        functionName?: 'mintPoints'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof regCenterABI, 'mintPoints'>({
    abi: regCenterABI,
    functionName: 'mintPoints',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"regUser"`.
 */
export function useRegCenterRegUser<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof regCenterABI, 'regUser'>['abi'],
        'regUser'
      > & { functionName?: 'regUser' }
    : UseContractWriteConfig<TMode, typeof regCenterABI, 'regUser'> & {
        abi?: never
        functionName?: 'regUser'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof regCenterABI, 'regUser'>({
    abi: regCenterABI,
    functionName: 'regUser',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"releasePoints"`.
 */
export function useRegCenterReleasePoints<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof regCenterABI, 'releasePoints'>['abi'],
        'releasePoints'
      > & { functionName?: 'releasePoints' }
    : UseContractWriteConfig<TMode, typeof regCenterABI, 'releasePoints'> & {
        abi?: never
        functionName?: 'releasePoints'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof regCenterABI, 'releasePoints'>({
    abi: regCenterABI,
    functionName: 'releasePoints',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"setBackupKey"`.
 */
export function useRegCenterSetBackupKey<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof regCenterABI, 'setBackupKey'>['abi'],
        'setBackupKey'
      > & { functionName?: 'setBackupKey' }
    : UseContractWriteConfig<TMode, typeof regCenterABI, 'setBackupKey'> & {
        abi?: never
        functionName?: 'setBackupKey'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof regCenterABI, 'setBackupKey'>({
    abi: regCenterABI,
    functionName: 'setBackupKey',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"setDocSnOfUser"`.
 */
export function useRegCenterSetDocSnOfUser<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof regCenterABI,
          'setDocSnOfUser'
        >['abi'],
        'setDocSnOfUser'
      > & { functionName?: 'setDocSnOfUser' }
    : UseContractWriteConfig<TMode, typeof regCenterABI, 'setDocSnOfUser'> & {
        abi?: never
        functionName?: 'setDocSnOfUser'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof regCenterABI, 'setDocSnOfUser'>({
    abi: regCenterABI,
    functionName: 'setDocSnOfUser',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"setReward"`.
 */
export function useRegCenterSetReward<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof regCenterABI, 'setReward'>['abi'],
        'setReward'
      > & { functionName?: 'setReward' }
    : UseContractWriteConfig<TMode, typeof regCenterABI, 'setReward'> & {
        abi?: never
        functionName?: 'setReward'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof regCenterABI, 'setReward'>({
    abi: regCenterABI,
    functionName: 'setReward',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"setTemplate"`.
 */
export function useRegCenterSetTemplate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof regCenterABI, 'setTemplate'>['abi'],
        'setTemplate'
      > & { functionName?: 'setTemplate' }
    : UseContractWriteConfig<TMode, typeof regCenterABI, 'setTemplate'> & {
        abi?: never
        functionName?: 'setTemplate'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof regCenterABI, 'setTemplate'>({
    abi: regCenterABI,
    functionName: 'setTemplate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useRegCenterTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof regCenterABI,
          'transferOwnership'
        >['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        TMode,
        typeof regCenterABI,
        'transferOwnership'
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof regCenterABI, 'transferOwnership'>({
    abi: regCenterABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"transferPoints"`.
 */
export function useRegCenterTransferPoints<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof regCenterABI,
          'transferPoints'
        >['abi'],
        'transferPoints'
      > & { functionName?: 'transferPoints' }
    : UseContractWriteConfig<TMode, typeof regCenterABI, 'transferPoints'> & {
        abi?: never
        functionName?: 'transferPoints'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof regCenterABI, 'transferPoints'>({
    abi: regCenterABI,
    functionName: 'transferPoints',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"turnOverCenterKey"`.
 */
export function useRegCenterTurnOverCenterKey<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof regCenterABI,
          'turnOverCenterKey'
        >['abi'],
        'turnOverCenterKey'
      > & { functionName?: 'turnOverCenterKey' }
    : UseContractWriteConfig<
        TMode,
        typeof regCenterABI,
        'turnOverCenterKey'
      > & {
        abi?: never
        functionName?: 'turnOverCenterKey'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof regCenterABI, 'turnOverCenterKey'>({
    abi: regCenterABI,
    functionName: 'turnOverCenterKey',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"turnOverKeyOfDocsRepo"`.
 */
export function useRegCenterTurnOverKeyOfDocsRepo<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof regCenterABI,
          'turnOverKeyOfDocsRepo'
        >['abi'],
        'turnOverKeyOfDocsRepo'
      > & { functionName?: 'turnOverKeyOfDocsRepo' }
    : UseContractWriteConfig<
        TMode,
        typeof regCenterABI,
        'turnOverKeyOfDocsRepo'
      > & {
        abi?: never
        functionName?: 'turnOverKeyOfDocsRepo'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof regCenterABI, 'turnOverKeyOfDocsRepo'>({
    abi: regCenterABI,
    functionName: 'turnOverKeyOfDocsRepo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"updateUserInfo"`.
 */
export function useRegCenterUpdateUserInfo<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof regCenterABI,
          'updateUserInfo'
        >['abi'],
        'updateUserInfo'
      > & { functionName?: 'updateUserInfo' }
    : UseContractWriteConfig<TMode, typeof regCenterABI, 'updateUserInfo'> & {
        abi?: never
        functionName?: 'updateUserInfo'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof regCenterABI, 'updateUserInfo'>({
    abi: regCenterABI,
    functionName: 'updateUserInfo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"withdrawPoints"`.
 */
export function useRegCenterWithdrawPoints<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof regCenterABI,
          'withdrawPoints'
        >['abi'],
        'withdrawPoints'
      > & { functionName?: 'withdrawPoints' }
    : UseContractWriteConfig<TMode, typeof regCenterABI, 'withdrawPoints'> & {
        abi?: never
        functionName?: 'withdrawPoints'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof regCenterABI, 'withdrawPoints'>({
    abi: regCenterABI,
    functionName: 'withdrawPoints',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link regCenterABI}__.
 */
export function usePrepareRegCenterWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof regCenterABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: regCenterABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof regCenterABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"createComp"`.
 */
export function usePrepareRegCenterCreateComp(
  config: Omit<
    UsePrepareContractWriteConfig<typeof regCenterABI, 'createComp'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: regCenterABI,
    functionName: 'createComp',
    ...config,
  } as UsePrepareContractWriteConfig<typeof regCenterABI, 'createComp'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"createDoc"`.
 */
export function usePrepareRegCenterCreateDoc(
  config: Omit<
    UsePrepareContractWriteConfig<typeof regCenterABI, 'createDoc'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: regCenterABI,
    functionName: 'createDoc',
    ...config,
  } as UsePrepareContractWriteConfig<typeof regCenterABI, 'createDoc'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"getUserNo"`.
 */
export function usePrepareRegCenterGetUserNo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof regCenterABI, 'getUserNo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: regCenterABI,
    functionName: 'getUserNo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof regCenterABI, 'getUserNo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"initDocsRepo"`.
 */
export function usePrepareRegCenterInitDocsRepo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof regCenterABI, 'initDocsRepo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: regCenterABI,
    functionName: 'initDocsRepo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof regCenterABI, 'initDocsRepo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"lockPoints"`.
 */
export function usePrepareRegCenterLockPoints(
  config: Omit<
    UsePrepareContractWriteConfig<typeof regCenterABI, 'lockPoints'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: regCenterABI,
    functionName: 'lockPoints',
    ...config,
  } as UsePrepareContractWriteConfig<typeof regCenterABI, 'lockPoints'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"mintAndLockPoints"`.
 */
export function usePrepareRegCenterMintAndLockPoints(
  config: Omit<
    UsePrepareContractWriteConfig<typeof regCenterABI, 'mintAndLockPoints'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: regCenterABI,
    functionName: 'mintAndLockPoints',
    ...config,
  } as UsePrepareContractWriteConfig<typeof regCenterABI, 'mintAndLockPoints'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"mintPoints"`.
 */
export function usePrepareRegCenterMintPoints(
  config: Omit<
    UsePrepareContractWriteConfig<typeof regCenterABI, 'mintPoints'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: regCenterABI,
    functionName: 'mintPoints',
    ...config,
  } as UsePrepareContractWriteConfig<typeof regCenterABI, 'mintPoints'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"regUser"`.
 */
export function usePrepareRegCenterRegUser(
  config: Omit<
    UsePrepareContractWriteConfig<typeof regCenterABI, 'regUser'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: regCenterABI,
    functionName: 'regUser',
    ...config,
  } as UsePrepareContractWriteConfig<typeof regCenterABI, 'regUser'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"releasePoints"`.
 */
export function usePrepareRegCenterReleasePoints(
  config: Omit<
    UsePrepareContractWriteConfig<typeof regCenterABI, 'releasePoints'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: regCenterABI,
    functionName: 'releasePoints',
    ...config,
  } as UsePrepareContractWriteConfig<typeof regCenterABI, 'releasePoints'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"setBackupKey"`.
 */
export function usePrepareRegCenterSetBackupKey(
  config: Omit<
    UsePrepareContractWriteConfig<typeof regCenterABI, 'setBackupKey'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: regCenterABI,
    functionName: 'setBackupKey',
    ...config,
  } as UsePrepareContractWriteConfig<typeof regCenterABI, 'setBackupKey'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"setDocSnOfUser"`.
 */
export function usePrepareRegCenterSetDocSnOfUser(
  config: Omit<
    UsePrepareContractWriteConfig<typeof regCenterABI, 'setDocSnOfUser'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: regCenterABI,
    functionName: 'setDocSnOfUser',
    ...config,
  } as UsePrepareContractWriteConfig<typeof regCenterABI, 'setDocSnOfUser'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"setReward"`.
 */
export function usePrepareRegCenterSetReward(
  config: Omit<
    UsePrepareContractWriteConfig<typeof regCenterABI, 'setReward'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: regCenterABI,
    functionName: 'setReward',
    ...config,
  } as UsePrepareContractWriteConfig<typeof regCenterABI, 'setReward'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"setTemplate"`.
 */
export function usePrepareRegCenterSetTemplate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof regCenterABI, 'setTemplate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: regCenterABI,
    functionName: 'setTemplate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof regCenterABI, 'setTemplate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareRegCenterTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof regCenterABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: regCenterABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof regCenterABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"transferPoints"`.
 */
export function usePrepareRegCenterTransferPoints(
  config: Omit<
    UsePrepareContractWriteConfig<typeof regCenterABI, 'transferPoints'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: regCenterABI,
    functionName: 'transferPoints',
    ...config,
  } as UsePrepareContractWriteConfig<typeof regCenterABI, 'transferPoints'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"turnOverCenterKey"`.
 */
export function usePrepareRegCenterTurnOverCenterKey(
  config: Omit<
    UsePrepareContractWriteConfig<typeof regCenterABI, 'turnOverCenterKey'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: regCenterABI,
    functionName: 'turnOverCenterKey',
    ...config,
  } as UsePrepareContractWriteConfig<typeof regCenterABI, 'turnOverCenterKey'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"turnOverKeyOfDocsRepo"`.
 */
export function usePrepareRegCenterTurnOverKeyOfDocsRepo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof regCenterABI, 'turnOverKeyOfDocsRepo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: regCenterABI,
    functionName: 'turnOverKeyOfDocsRepo',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof regCenterABI,
    'turnOverKeyOfDocsRepo'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"updateUserInfo"`.
 */
export function usePrepareRegCenterUpdateUserInfo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof regCenterABI, 'updateUserInfo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: regCenterABI,
    functionName: 'updateUserInfo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof regCenterABI, 'updateUserInfo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link regCenterABI}__ and `functionName` set to `"withdrawPoints"`.
 */
export function usePrepareRegCenterWithdrawPoints(
  config: Omit<
    UsePrepareContractWriteConfig<typeof regCenterABI, 'withdrawPoints'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: regCenterABI,
    functionName: 'withdrawPoints',
    ...config,
  } as UsePrepareContractWriteConfig<typeof regCenterABI, 'withdrawPoints'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link regCenterABI}__.
 */
export function useRegCenterEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof regCenterABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: regCenterABI,
    ...config,
  } as UseContractEventConfig<typeof regCenterABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link regCenterABI}__ and `eventName` set to `"CreateDoc"`.
 */
export function useRegCenterCreateDocEvent(
  config: Omit<
    UseContractEventConfig<typeof regCenterABI, 'CreateDoc'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: regCenterABI,
    eventName: 'CreateDoc',
    ...config,
  } as UseContractEventConfig<typeof regCenterABI, 'CreateDoc'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link regCenterABI}__ and `eventName` set to `"LockPoints"`.
 */
export function useRegCenterLockPointsEvent(
  config: Omit<
    UseContractEventConfig<typeof regCenterABI, 'LockPoints'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: regCenterABI,
    eventName: 'LockPoints',
    ...config,
  } as UseContractEventConfig<typeof regCenterABI, 'LockPoints'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link regCenterABI}__ and `eventName` set to `"MintPoints"`.
 */
export function useRegCenterMintPointsEvent(
  config: Omit<
    UseContractEventConfig<typeof regCenterABI, 'MintPoints'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: regCenterABI,
    eventName: 'MintPoints',
    ...config,
  } as UseContractEventConfig<typeof regCenterABI, 'MintPoints'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link regCenterABI}__ and `eventName` set to `"ReleasePoints"`.
 */
export function useRegCenterReleasePointsEvent(
  config: Omit<
    UseContractEventConfig<typeof regCenterABI, 'ReleasePoints'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: regCenterABI,
    eventName: 'ReleasePoints',
    ...config,
  } as UseContractEventConfig<typeof regCenterABI, 'ReleasePoints'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link regCenterABI}__ and `eventName` set to `"SetDocKeeper"`.
 */
export function useRegCenterSetDocKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof regCenterABI, 'SetDocKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: regCenterABI,
    eventName: 'SetDocKeeper',
    ...config,
  } as UseContractEventConfig<typeof regCenterABI, 'SetDocKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link regCenterABI}__ and `eventName` set to `"SetReward"`.
 */
export function useRegCenterSetRewardEvent(
  config: Omit<
    UseContractEventConfig<typeof regCenterABI, 'SetReward'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: regCenterABI,
    eventName: 'SetReward',
    ...config,
  } as UseContractEventConfig<typeof regCenterABI, 'SetReward'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link regCenterABI}__ and `eventName` set to `"SetTemplate"`.
 */
export function useRegCenterSetTemplateEvent(
  config: Omit<
    UseContractEventConfig<typeof regCenterABI, 'SetTemplate'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: regCenterABI,
    eventName: 'SetTemplate',
    ...config,
  } as UseContractEventConfig<typeof regCenterABI, 'SetTemplate'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link regCenterABI}__ and `eventName` set to `"TransferOwnership"`.
 */
export function useRegCenterTransferOwnershipEvent(
  config: Omit<
    UseContractEventConfig<typeof regCenterABI, 'TransferOwnership'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: regCenterABI,
    eventName: 'TransferOwnership',
    ...config,
  } as UseContractEventConfig<typeof regCenterABI, 'TransferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link regCenterABI}__ and `eventName` set to `"TransferPoints"`.
 */
export function useRegCenterTransferPointsEvent(
  config: Omit<
    UseContractEventConfig<typeof regCenterABI, 'TransferPoints'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: regCenterABI,
    eventName: 'TransferPoints',
    ...config,
  } as UseContractEventConfig<typeof regCenterABI, 'TransferPoints'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link regCenterABI}__ and `eventName` set to `"TurnOverCenterKey"`.
 */
export function useRegCenterTurnOverCenterKeyEvent(
  config: Omit<
    UseContractEventConfig<typeof regCenterABI, 'TurnOverCenterKey'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: regCenterABI,
    eventName: 'TurnOverCenterKey',
    ...config,
  } as UseContractEventConfig<typeof regCenterABI, 'TurnOverCenterKey'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link regCenterABI}__ and `eventName` set to `"WithdrawPoints"`.
 */
export function useRegCenterWithdrawPointsEvent(
  config: Omit<
    UseContractEventConfig<typeof regCenterABI, 'WithdrawPoints'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: regCenterABI,
    eventName: 'WithdrawPoints',
    ...config,
  } as UseContractEventConfig<typeof regCenterABI, 'WithdrawPoints'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link boaKeeperABI}__.
 */
export function useBoaKeeper(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: boaKeeperABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link boaKeeperABI}__.
 */
export function useBoaKeeperRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof boaKeeperABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof boaKeeperABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: boaKeeperABI,
    ...config,
  } as UseContractReadConfig<typeof boaKeeperABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link boaKeeperABI}__ and `functionName` set to `"finalized"`.
 */
export function useBoaKeeperFinalized<
  TSelectData = ReadContractResult<typeof boaKeeperABI, 'finalized'>,
>(
  config: Omit<
    UseContractReadConfig<typeof boaKeeperABI, 'finalized', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: boaKeeperABI,
    functionName: 'finalized',
    ...config,
  } as UseContractReadConfig<typeof boaKeeperABI, 'finalized', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link boaKeeperABI}__ and `functionName` set to `"getBookeeper"`.
 */
export function useBoaKeeperGetBookeeper<
  TSelectData = ReadContractResult<typeof boaKeeperABI, 'getBookeeper'>,
>(
  config: Omit<
    UseContractReadConfig<typeof boaKeeperABI, 'getBookeeper', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: boaKeeperABI,
    functionName: 'getBookeeper',
    ...config,
  } as UseContractReadConfig<typeof boaKeeperABI, 'getBookeeper', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link boaKeeperABI}__ and `functionName` set to `"getGeneralCounsel"`.
 */
export function useBoaKeeperGetGeneralCounsel<
  TSelectData = ReadContractResult<typeof boaKeeperABI, 'getGeneralCounsel'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof boaKeeperABI,
      'getGeneralCounsel',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: boaKeeperABI,
    functionName: 'getGeneralCounsel',
    ...config,
  } as UseContractReadConfig<
    typeof boaKeeperABI,
    'getGeneralCounsel',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link boaKeeperABI}__ and `functionName` set to `"getOwner"`.
 */
export function useBoaKeeperGetOwner<
  TSelectData = ReadContractResult<typeof boaKeeperABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof boaKeeperABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: boaKeeperABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<typeof boaKeeperABI, 'getOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link boaKeeperABI}__ and `functionName` set to `"hasRole"`.
 */
export function useBoaKeeperHasRole<
  TSelectData = ReadContractResult<typeof boaKeeperABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof boaKeeperABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: boaKeeperABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof boaKeeperABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link boaKeeperABI}__.
 */
export function useBoaKeeperWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof boaKeeperABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof boaKeeperABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof boaKeeperABI, TFunctionName>({
    abi: boaKeeperABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link boaKeeperABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useBoaKeeperAbandonRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof boaKeeperABI, 'abandonRole'>['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<TMode, typeof boaKeeperABI, 'abandonRole'> & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof boaKeeperABI, 'abandonRole'>({
    abi: boaKeeperABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link boaKeeperABI}__ and `functionName` set to `"circulateIA"`.
 */
export function useBoaKeeperCirculateIa<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof boaKeeperABI, 'circulateIA'>['abi'],
        'circulateIA'
      > & { functionName?: 'circulateIA' }
    : UseContractWriteConfig<TMode, typeof boaKeeperABI, 'circulateIA'> & {
        abi?: never
        functionName?: 'circulateIA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof boaKeeperABI, 'circulateIA'>({
    abi: boaKeeperABI,
    functionName: 'circulateIA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link boaKeeperABI}__ and `functionName` set to `"closeDeal"`.
 */
export function useBoaKeeperCloseDeal<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof boaKeeperABI, 'closeDeal'>['abi'],
        'closeDeal'
      > & { functionName?: 'closeDeal' }
    : UseContractWriteConfig<TMode, typeof boaKeeperABI, 'closeDeal'> & {
        abi?: never
        functionName?: 'closeDeal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof boaKeeperABI, 'closeDeal'>({
    abi: boaKeeperABI,
    functionName: 'closeDeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link boaKeeperABI}__ and `functionName` set to `"createIA"`.
 */
export function useBoaKeeperCreateIa<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof boaKeeperABI, 'createIA'>['abi'],
        'createIA'
      > & { functionName?: 'createIA' }
    : UseContractWriteConfig<TMode, typeof boaKeeperABI, 'createIA'> & {
        abi?: never
        functionName?: 'createIA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof boaKeeperABI, 'createIA'>({
    abi: boaKeeperABI,
    functionName: 'createIA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link boaKeeperABI}__ and `functionName` set to `"grantRole"`.
 */
export function useBoaKeeperGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof boaKeeperABI, 'grantRole'>['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof boaKeeperABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof boaKeeperABI, 'grantRole'>({
    abi: boaKeeperABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link boaKeeperABI}__ and `functionName` set to `"init"`.
 */
export function useBoaKeeperInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof boaKeeperABI, 'init'>['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof boaKeeperABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof boaKeeperABI, 'init'>({
    abi: boaKeeperABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link boaKeeperABI}__ and `functionName` set to `"issueNewShare"`.
 */
export function useBoaKeeperIssueNewShare<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof boaKeeperABI, 'issueNewShare'>['abi'],
        'issueNewShare'
      > & { functionName?: 'issueNewShare' }
    : UseContractWriteConfig<TMode, typeof boaKeeperABI, 'issueNewShare'> & {
        abi?: never
        functionName?: 'issueNewShare'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof boaKeeperABI, 'issueNewShare'>({
    abi: boaKeeperABI,
    functionName: 'issueNewShare',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link boaKeeperABI}__ and `functionName` set to `"lockContents"`.
 */
export function useBoaKeeperLockContents<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof boaKeeperABI, 'lockContents'>['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<TMode, typeof boaKeeperABI, 'lockContents'> & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof boaKeeperABI, 'lockContents'>({
    abi: boaKeeperABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link boaKeeperABI}__ and `functionName` set to `"pushToCoffer"`.
 */
export function useBoaKeeperPushToCoffer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof boaKeeperABI, 'pushToCoffer'>['abi'],
        'pushToCoffer'
      > & { functionName?: 'pushToCoffer' }
    : UseContractWriteConfig<TMode, typeof boaKeeperABI, 'pushToCoffer'> & {
        abi?: never
        functionName?: 'pushToCoffer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof boaKeeperABI, 'pushToCoffer'>({
    abi: boaKeeperABI,
    functionName: 'pushToCoffer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link boaKeeperABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function useBoaKeeperRemoveDirectKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof boaKeeperABI,
          'removeDirectKeeper'
        >['abi'],
        'removeDirectKeeper'
      > & { functionName?: 'removeDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof boaKeeperABI,
        'removeDirectKeeper'
      > & {
        abi?: never
        functionName?: 'removeDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof boaKeeperABI, 'removeDirectKeeper'>({
    abi: boaKeeperABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link boaKeeperABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useBoaKeeperRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof boaKeeperABI, 'renounceRole'>['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<TMode, typeof boaKeeperABI, 'renounceRole'> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof boaKeeperABI, 'renounceRole'>({
    abi: boaKeeperABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link boaKeeperABI}__ and `functionName` set to `"revokeDeal"`.
 */
export function useBoaKeeperRevokeDeal<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof boaKeeperABI, 'revokeDeal'>['abi'],
        'revokeDeal'
      > & { functionName?: 'revokeDeal' }
    : UseContractWriteConfig<TMode, typeof boaKeeperABI, 'revokeDeal'> & {
        abi?: never
        functionName?: 'revokeDeal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof boaKeeperABI, 'revokeDeal'>({
    abi: boaKeeperABI,
    functionName: 'revokeDeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link boaKeeperABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useBoaKeeperRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof boaKeeperABI, 'revokeRole'>['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof boaKeeperABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof boaKeeperABI, 'revokeRole'>({
    abi: boaKeeperABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link boaKeeperABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useBoaKeeperSetDirectKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof boaKeeperABI,
          'setDirectKeeper'
        >['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<TMode, typeof boaKeeperABI, 'setDirectKeeper'> & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof boaKeeperABI, 'setDirectKeeper'>({
    abi: boaKeeperABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link boaKeeperABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function useBoaKeeperSetGeneralCounsel<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof boaKeeperABI,
          'setGeneralCounsel'
        >['abi'],
        'setGeneralCounsel'
      > & { functionName?: 'setGeneralCounsel' }
    : UseContractWriteConfig<
        TMode,
        typeof boaKeeperABI,
        'setGeneralCounsel'
      > & {
        abi?: never
        functionName?: 'setGeneralCounsel'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof boaKeeperABI, 'setGeneralCounsel'>({
    abi: boaKeeperABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link boaKeeperABI}__ and `functionName` set to `"setOwner"`.
 */
export function useBoaKeeperSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof boaKeeperABI, 'setOwner'>['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof boaKeeperABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof boaKeeperABI, 'setOwner'>({
    abi: boaKeeperABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link boaKeeperABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useBoaKeeperSetRoleAdmin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof boaKeeperABI, 'setRoleAdmin'>['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<TMode, typeof boaKeeperABI, 'setRoleAdmin'> & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof boaKeeperABI, 'setRoleAdmin'>({
    abi: boaKeeperABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link boaKeeperABI}__ and `functionName` set to `"signIA"`.
 */
export function useBoaKeeperSignIa<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof boaKeeperABI, 'signIA'>['abi'],
        'signIA'
      > & { functionName?: 'signIA' }
    : UseContractWriteConfig<TMode, typeof boaKeeperABI, 'signIA'> & {
        abi?: never
        functionName?: 'signIA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof boaKeeperABI, 'signIA'>({
    abi: boaKeeperABI,
    functionName: 'signIA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link boaKeeperABI}__ and `functionName` set to `"terminateDeal"`.
 */
export function useBoaKeeperTerminateDeal<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof boaKeeperABI, 'terminateDeal'>['abi'],
        'terminateDeal'
      > & { functionName?: 'terminateDeal' }
    : UseContractWriteConfig<TMode, typeof boaKeeperABI, 'terminateDeal'> & {
        abi?: never
        functionName?: 'terminateDeal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof boaKeeperABI, 'terminateDeal'>({
    abi: boaKeeperABI,
    functionName: 'terminateDeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link boaKeeperABI}__ and `functionName` set to `"transferTargetShare"`.
 */
export function useBoaKeeperTransferTargetShare<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof boaKeeperABI,
          'transferTargetShare'
        >['abi'],
        'transferTargetShare'
      > & { functionName?: 'transferTargetShare' }
    : UseContractWriteConfig<
        TMode,
        typeof boaKeeperABI,
        'transferTargetShare'
      > & {
        abi?: never
        functionName?: 'transferTargetShare'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof boaKeeperABI, 'transferTargetShare'>({
    abi: boaKeeperABI,
    functionName: 'transferTargetShare',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link boaKeeperABI}__.
 */
export function usePrepareBoaKeeperWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof boaKeeperABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: boaKeeperABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof boaKeeperABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link boaKeeperABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareBoaKeeperAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof boaKeeperABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: boaKeeperABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof boaKeeperABI, 'abandonRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link boaKeeperABI}__ and `functionName` set to `"circulateIA"`.
 */
export function usePrepareBoaKeeperCirculateIa(
  config: Omit<
    UsePrepareContractWriteConfig<typeof boaKeeperABI, 'circulateIA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: boaKeeperABI,
    functionName: 'circulateIA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof boaKeeperABI, 'circulateIA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link boaKeeperABI}__ and `functionName` set to `"closeDeal"`.
 */
export function usePrepareBoaKeeperCloseDeal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof boaKeeperABI, 'closeDeal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: boaKeeperABI,
    functionName: 'closeDeal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof boaKeeperABI, 'closeDeal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link boaKeeperABI}__ and `functionName` set to `"createIA"`.
 */
export function usePrepareBoaKeeperCreateIa(
  config: Omit<
    UsePrepareContractWriteConfig<typeof boaKeeperABI, 'createIA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: boaKeeperABI,
    functionName: 'createIA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof boaKeeperABI, 'createIA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link boaKeeperABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareBoaKeeperGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof boaKeeperABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: boaKeeperABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof boaKeeperABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link boaKeeperABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareBoaKeeperInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof boaKeeperABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: boaKeeperABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof boaKeeperABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link boaKeeperABI}__ and `functionName` set to `"issueNewShare"`.
 */
export function usePrepareBoaKeeperIssueNewShare(
  config: Omit<
    UsePrepareContractWriteConfig<typeof boaKeeperABI, 'issueNewShare'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: boaKeeperABI,
    functionName: 'issueNewShare',
    ...config,
  } as UsePrepareContractWriteConfig<typeof boaKeeperABI, 'issueNewShare'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link boaKeeperABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareBoaKeeperLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<typeof boaKeeperABI, 'lockContents'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: boaKeeperABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<typeof boaKeeperABI, 'lockContents'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link boaKeeperABI}__ and `functionName` set to `"pushToCoffer"`.
 */
export function usePrepareBoaKeeperPushToCoffer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof boaKeeperABI, 'pushToCoffer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: boaKeeperABI,
    functionName: 'pushToCoffer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof boaKeeperABI, 'pushToCoffer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link boaKeeperABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function usePrepareBoaKeeperRemoveDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof boaKeeperABI, 'removeDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: boaKeeperABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof boaKeeperABI, 'removeDirectKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link boaKeeperABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareBoaKeeperRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof boaKeeperABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: boaKeeperABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof boaKeeperABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link boaKeeperABI}__ and `functionName` set to `"revokeDeal"`.
 */
export function usePrepareBoaKeeperRevokeDeal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof boaKeeperABI, 'revokeDeal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: boaKeeperABI,
    functionName: 'revokeDeal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof boaKeeperABI, 'revokeDeal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link boaKeeperABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareBoaKeeperRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof boaKeeperABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: boaKeeperABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof boaKeeperABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link boaKeeperABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareBoaKeeperSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof boaKeeperABI, 'setDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: boaKeeperABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof boaKeeperABI, 'setDirectKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link boaKeeperABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function usePrepareBoaKeeperSetGeneralCounsel(
  config: Omit<
    UsePrepareContractWriteConfig<typeof boaKeeperABI, 'setGeneralCounsel'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: boaKeeperABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as UsePrepareContractWriteConfig<typeof boaKeeperABI, 'setGeneralCounsel'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link boaKeeperABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareBoaKeeperSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof boaKeeperABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: boaKeeperABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof boaKeeperABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link boaKeeperABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareBoaKeeperSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof boaKeeperABI, 'setRoleAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: boaKeeperABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof boaKeeperABI, 'setRoleAdmin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link boaKeeperABI}__ and `functionName` set to `"signIA"`.
 */
export function usePrepareBoaKeeperSignIa(
  config: Omit<
    UsePrepareContractWriteConfig<typeof boaKeeperABI, 'signIA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: boaKeeperABI,
    functionName: 'signIA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof boaKeeperABI, 'signIA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link boaKeeperABI}__ and `functionName` set to `"terminateDeal"`.
 */
export function usePrepareBoaKeeperTerminateDeal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof boaKeeperABI, 'terminateDeal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: boaKeeperABI,
    functionName: 'terminateDeal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof boaKeeperABI, 'terminateDeal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link boaKeeperABI}__ and `functionName` set to `"transferTargetShare"`.
 */
export function usePrepareBoaKeeperTransferTargetShare(
  config: Omit<
    UsePrepareContractWriteConfig<typeof boaKeeperABI, 'transferTargetShare'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: boaKeeperABI,
    functionName: 'transferTargetShare',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof boaKeeperABI,
    'transferTargetShare'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link boaKeeperABI}__.
 */
export function useBoaKeeperEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof boaKeeperABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: boaKeeperABI,
    ...config,
  } as UseContractEventConfig<typeof boaKeeperABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link boaKeeperABI}__ and `eventName` set to `"Init"`.
 */
export function useBoaKeeperInitEvent(
  config: Omit<
    UseContractEventConfig<typeof boaKeeperABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: boaKeeperABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof boaKeeperABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link boaKeeperABI}__ and `eventName` set to `"LockContents"`.
 */
export function useBoaKeeperLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof boaKeeperABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: boaKeeperABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof boaKeeperABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link boaKeeperABI}__ and `eventName` set to `"RemoveDirectKeeper"`.
 */
export function useBoaKeeperRemoveDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof boaKeeperABI, 'RemoveDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: boaKeeperABI,
    eventName: 'RemoveDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof boaKeeperABI, 'RemoveDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link boaKeeperABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useBoaKeeperSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof boaKeeperABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: boaKeeperABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof boaKeeperABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link boaKeeperABI}__ and `eventName` set to `"SetGeneralCounsel"`.
 */
export function useBoaKeeperSetGeneralCounselEvent(
  config: Omit<
    UseContractEventConfig<typeof boaKeeperABI, 'SetGeneralCounsel'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: boaKeeperABI,
    eventName: 'SetGeneralCounsel',
    ...config,
  } as UseContractEventConfig<typeof boaKeeperABI, 'SetGeneralCounsel'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link boaKeeperABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useBoaKeeperSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof boaKeeperABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: boaKeeperABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof boaKeeperABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link bodKeeperABI}__.
 */
export function useBodKeeper(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: bodKeeperABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bodKeeperABI}__.
 */
export function useBodKeeperRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof bodKeeperABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof bodKeeperABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: bodKeeperABI,
    ...config,
  } as UseContractReadConfig<typeof bodKeeperABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bodKeeperABI}__ and `functionName` set to `"finalized"`.
 */
export function useBodKeeperFinalized<
  TSelectData = ReadContractResult<typeof bodKeeperABI, 'finalized'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bodKeeperABI, 'finalized', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bodKeeperABI,
    functionName: 'finalized',
    ...config,
  } as UseContractReadConfig<typeof bodKeeperABI, 'finalized', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bodKeeperABI}__ and `functionName` set to `"getBookeeper"`.
 */
export function useBodKeeperGetBookeeper<
  TSelectData = ReadContractResult<typeof bodKeeperABI, 'getBookeeper'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bodKeeperABI, 'getBookeeper', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bodKeeperABI,
    functionName: 'getBookeeper',
    ...config,
  } as UseContractReadConfig<typeof bodKeeperABI, 'getBookeeper', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bodKeeperABI}__ and `functionName` set to `"getGeneralCounsel"`.
 */
export function useBodKeeperGetGeneralCounsel<
  TSelectData = ReadContractResult<typeof bodKeeperABI, 'getGeneralCounsel'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bodKeeperABI,
      'getGeneralCounsel',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bodKeeperABI,
    functionName: 'getGeneralCounsel',
    ...config,
  } as UseContractReadConfig<
    typeof bodKeeperABI,
    'getGeneralCounsel',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bodKeeperABI}__ and `functionName` set to `"getOwner"`.
 */
export function useBodKeeperGetOwner<
  TSelectData = ReadContractResult<typeof bodKeeperABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bodKeeperABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bodKeeperABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<typeof bodKeeperABI, 'getOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bodKeeperABI}__ and `functionName` set to `"hasRole"`.
 */
export function useBodKeeperHasRole<
  TSelectData = ReadContractResult<typeof bodKeeperABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bodKeeperABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bodKeeperABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof bodKeeperABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bodKeeperABI}__.
 */
export function useBodKeeperWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bodKeeperABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof bodKeeperABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bodKeeperABI, TFunctionName>({
    abi: bodKeeperABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bodKeeperABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useBodKeeperAbandonRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bodKeeperABI, 'abandonRole'>['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<TMode, typeof bodKeeperABI, 'abandonRole'> & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bodKeeperABI, 'abandonRole'>({
    abi: bodKeeperABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bodKeeperABI}__ and `functionName` set to `"castVote"`.
 */
export function useBodKeeperCastVote<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bodKeeperABI, 'castVote'>['abi'],
        'castVote'
      > & { functionName?: 'castVote' }
    : UseContractWriteConfig<TMode, typeof bodKeeperABI, 'castVote'> & {
        abi?: never
        functionName?: 'castVote'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bodKeeperABI, 'castVote'>({
    abi: bodKeeperABI,
    functionName: 'castVote',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bodKeeperABI}__ and `functionName` set to `"createAction"`.
 */
export function useBodKeeperCreateAction<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bodKeeperABI, 'createAction'>['abi'],
        'createAction'
      > & { functionName?: 'createAction' }
    : UseContractWriteConfig<TMode, typeof bodKeeperABI, 'createAction'> & {
        abi?: never
        functionName?: 'createAction'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bodKeeperABI, 'createAction'>({
    abi: bodKeeperABI,
    functionName: 'createAction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bodKeeperABI}__ and `functionName` set to `"createMotionToApproveDoc"`.
 */
export function useBodKeeperCreateMotionToApproveDoc<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bodKeeperABI,
          'createMotionToApproveDoc'
        >['abi'],
        'createMotionToApproveDoc'
      > & { functionName?: 'createMotionToApproveDoc' }
    : UseContractWriteConfig<
        TMode,
        typeof bodKeeperABI,
        'createMotionToApproveDoc'
      > & {
        abi?: never
        functionName?: 'createMotionToApproveDoc'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof bodKeeperABI,
    'createMotionToApproveDoc'
  >({
    abi: bodKeeperABI,
    functionName: 'createMotionToApproveDoc',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bodKeeperABI}__ and `functionName` set to `"createMotionToRemoveOfficer"`.
 */
export function useBodKeeperCreateMotionToRemoveOfficer<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bodKeeperABI,
          'createMotionToRemoveOfficer'
        >['abi'],
        'createMotionToRemoveOfficer'
      > & { functionName?: 'createMotionToRemoveOfficer' }
    : UseContractWriteConfig<
        TMode,
        typeof bodKeeperABI,
        'createMotionToRemoveOfficer'
      > & {
        abi?: never
        functionName?: 'createMotionToRemoveOfficer'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof bodKeeperABI,
    'createMotionToRemoveOfficer'
  >({
    abi: bodKeeperABI,
    functionName: 'createMotionToRemoveOfficer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bodKeeperABI}__ and `functionName` set to `"entrustDelegaterForBoardMeeting"`.
 */
export function useBodKeeperEntrustDelegaterForBoardMeeting<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bodKeeperABI,
          'entrustDelegaterForBoardMeeting'
        >['abi'],
        'entrustDelegaterForBoardMeeting'
      > & { functionName?: 'entrustDelegaterForBoardMeeting' }
    : UseContractWriteConfig<
        TMode,
        typeof bodKeeperABI,
        'entrustDelegaterForBoardMeeting'
      > & {
        abi?: never
        functionName?: 'entrustDelegaterForBoardMeeting'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof bodKeeperABI,
    'entrustDelegaterForBoardMeeting'
  >({
    abi: bodKeeperABI,
    functionName: 'entrustDelegaterForBoardMeeting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bodKeeperABI}__ and `functionName` set to `"execAction"`.
 */
export function useBodKeeperExecAction<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bodKeeperABI, 'execAction'>['abi'],
        'execAction'
      > & { functionName?: 'execAction' }
    : UseContractWriteConfig<TMode, typeof bodKeeperABI, 'execAction'> & {
        abi?: never
        functionName?: 'execAction'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bodKeeperABI, 'execAction'>({
    abi: bodKeeperABI,
    functionName: 'execAction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bodKeeperABI}__ and `functionName` set to `"grantRole"`.
 */
export function useBodKeeperGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bodKeeperABI, 'grantRole'>['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof bodKeeperABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bodKeeperABI, 'grantRole'>({
    abi: bodKeeperABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bodKeeperABI}__ and `functionName` set to `"init"`.
 */
export function useBodKeeperInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bodKeeperABI, 'init'>['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof bodKeeperABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bodKeeperABI, 'init'>({
    abi: bodKeeperABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bodKeeperABI}__ and `functionName` set to `"lockContents"`.
 */
export function useBodKeeperLockContents<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bodKeeperABI, 'lockContents'>['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<TMode, typeof bodKeeperABI, 'lockContents'> & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bodKeeperABI, 'lockContents'>({
    abi: bodKeeperABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bodKeeperABI}__ and `functionName` set to `"nominateOfficer"`.
 */
export function useBodKeeperNominateOfficer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bodKeeperABI,
          'nominateOfficer'
        >['abi'],
        'nominateOfficer'
      > & { functionName?: 'nominateOfficer' }
    : UseContractWriteConfig<TMode, typeof bodKeeperABI, 'nominateOfficer'> & {
        abi?: never
        functionName?: 'nominateOfficer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bodKeeperABI, 'nominateOfficer'>({
    abi: bodKeeperABI,
    functionName: 'nominateOfficer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bodKeeperABI}__ and `functionName` set to `"proposeMotionToBoard"`.
 */
export function useBodKeeperProposeMotionToBoard<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bodKeeperABI,
          'proposeMotionToBoard'
        >['abi'],
        'proposeMotionToBoard'
      > & { functionName?: 'proposeMotionToBoard' }
    : UseContractWriteConfig<
        TMode,
        typeof bodKeeperABI,
        'proposeMotionToBoard'
      > & {
        abi?: never
        functionName?: 'proposeMotionToBoard'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bodKeeperABI, 'proposeMotionToBoard'>({
    abi: bodKeeperABI,
    functionName: 'proposeMotionToBoard',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bodKeeperABI}__ and `functionName` set to `"quitPosition"`.
 */
export function useBodKeeperQuitPosition<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bodKeeperABI, 'quitPosition'>['abi'],
        'quitPosition'
      > & { functionName?: 'quitPosition' }
    : UseContractWriteConfig<TMode, typeof bodKeeperABI, 'quitPosition'> & {
        abi?: never
        functionName?: 'quitPosition'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bodKeeperABI, 'quitPosition'>({
    abi: bodKeeperABI,
    functionName: 'quitPosition',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bodKeeperABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function useBodKeeperRemoveDirectKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bodKeeperABI,
          'removeDirectKeeper'
        >['abi'],
        'removeDirectKeeper'
      > & { functionName?: 'removeDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof bodKeeperABI,
        'removeDirectKeeper'
      > & {
        abi?: never
        functionName?: 'removeDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bodKeeperABI, 'removeDirectKeeper'>({
    abi: bodKeeperABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bodKeeperABI}__ and `functionName` set to `"removeOfficer"`.
 */
export function useBodKeeperRemoveOfficer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bodKeeperABI, 'removeOfficer'>['abi'],
        'removeOfficer'
      > & { functionName?: 'removeOfficer' }
    : UseContractWriteConfig<TMode, typeof bodKeeperABI, 'removeOfficer'> & {
        abi?: never
        functionName?: 'removeOfficer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bodKeeperABI, 'removeOfficer'>({
    abi: bodKeeperABI,
    functionName: 'removeOfficer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bodKeeperABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useBodKeeperRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bodKeeperABI, 'renounceRole'>['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<TMode, typeof bodKeeperABI, 'renounceRole'> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bodKeeperABI, 'renounceRole'>({
    abi: bodKeeperABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bodKeeperABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useBodKeeperRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bodKeeperABI, 'revokeRole'>['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof bodKeeperABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bodKeeperABI, 'revokeRole'>({
    abi: bodKeeperABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bodKeeperABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useBodKeeperSetDirectKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bodKeeperABI,
          'setDirectKeeper'
        >['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<TMode, typeof bodKeeperABI, 'setDirectKeeper'> & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bodKeeperABI, 'setDirectKeeper'>({
    abi: bodKeeperABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bodKeeperABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function useBodKeeperSetGeneralCounsel<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bodKeeperABI,
          'setGeneralCounsel'
        >['abi'],
        'setGeneralCounsel'
      > & { functionName?: 'setGeneralCounsel' }
    : UseContractWriteConfig<
        TMode,
        typeof bodKeeperABI,
        'setGeneralCounsel'
      > & {
        abi?: never
        functionName?: 'setGeneralCounsel'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bodKeeperABI, 'setGeneralCounsel'>({
    abi: bodKeeperABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bodKeeperABI}__ and `functionName` set to `"setOwner"`.
 */
export function useBodKeeperSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bodKeeperABI, 'setOwner'>['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof bodKeeperABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bodKeeperABI, 'setOwner'>({
    abi: bodKeeperABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bodKeeperABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useBodKeeperSetRoleAdmin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bodKeeperABI, 'setRoleAdmin'>['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<TMode, typeof bodKeeperABI, 'setRoleAdmin'> & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bodKeeperABI, 'setRoleAdmin'>({
    abi: bodKeeperABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bodKeeperABI}__ and `functionName` set to `"takePosition"`.
 */
export function useBodKeeperTakePosition<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bodKeeperABI, 'takePosition'>['abi'],
        'takePosition'
      > & { functionName?: 'takePosition' }
    : UseContractWriteConfig<TMode, typeof bodKeeperABI, 'takePosition'> & {
        abi?: never
        functionName?: 'takePosition'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bodKeeperABI, 'takePosition'>({
    abi: bodKeeperABI,
    functionName: 'takePosition',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bodKeeperABI}__ and `functionName` set to `"voteCounting"`.
 */
export function useBodKeeperVoteCounting<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bodKeeperABI, 'voteCounting'>['abi'],
        'voteCounting'
      > & { functionName?: 'voteCounting' }
    : UseContractWriteConfig<TMode, typeof bodKeeperABI, 'voteCounting'> & {
        abi?: never
        functionName?: 'voteCounting'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bodKeeperABI, 'voteCounting'>({
    abi: bodKeeperABI,
    functionName: 'voteCounting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bodKeeperABI}__.
 */
export function usePrepareBodKeeperWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bodKeeperABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bodKeeperABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof bodKeeperABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bodKeeperABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareBodKeeperAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bodKeeperABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bodKeeperABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bodKeeperABI, 'abandonRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bodKeeperABI}__ and `functionName` set to `"castVote"`.
 */
export function usePrepareBodKeeperCastVote(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bodKeeperABI, 'castVote'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bodKeeperABI,
    functionName: 'castVote',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bodKeeperABI, 'castVote'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bodKeeperABI}__ and `functionName` set to `"createAction"`.
 */
export function usePrepareBodKeeperCreateAction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bodKeeperABI, 'createAction'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bodKeeperABI,
    functionName: 'createAction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bodKeeperABI, 'createAction'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bodKeeperABI}__ and `functionName` set to `"createMotionToApproveDoc"`.
 */
export function usePrepareBodKeeperCreateMotionToApproveDoc(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof bodKeeperABI,
      'createMotionToApproveDoc'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bodKeeperABI,
    functionName: 'createMotionToApproveDoc',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bodKeeperABI,
    'createMotionToApproveDoc'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bodKeeperABI}__ and `functionName` set to `"createMotionToRemoveOfficer"`.
 */
export function usePrepareBodKeeperCreateMotionToRemoveOfficer(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof bodKeeperABI,
      'createMotionToRemoveOfficer'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bodKeeperABI,
    functionName: 'createMotionToRemoveOfficer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bodKeeperABI,
    'createMotionToRemoveOfficer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bodKeeperABI}__ and `functionName` set to `"entrustDelegaterForBoardMeeting"`.
 */
export function usePrepareBodKeeperEntrustDelegaterForBoardMeeting(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof bodKeeperABI,
      'entrustDelegaterForBoardMeeting'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bodKeeperABI,
    functionName: 'entrustDelegaterForBoardMeeting',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bodKeeperABI,
    'entrustDelegaterForBoardMeeting'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bodKeeperABI}__ and `functionName` set to `"execAction"`.
 */
export function usePrepareBodKeeperExecAction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bodKeeperABI, 'execAction'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bodKeeperABI,
    functionName: 'execAction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bodKeeperABI, 'execAction'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bodKeeperABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareBodKeeperGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bodKeeperABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bodKeeperABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bodKeeperABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bodKeeperABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareBodKeeperInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bodKeeperABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bodKeeperABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bodKeeperABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bodKeeperABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareBodKeeperLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bodKeeperABI, 'lockContents'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bodKeeperABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bodKeeperABI, 'lockContents'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bodKeeperABI}__ and `functionName` set to `"nominateOfficer"`.
 */
export function usePrepareBodKeeperNominateOfficer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bodKeeperABI, 'nominateOfficer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bodKeeperABI,
    functionName: 'nominateOfficer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bodKeeperABI, 'nominateOfficer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bodKeeperABI}__ and `functionName` set to `"proposeMotionToBoard"`.
 */
export function usePrepareBodKeeperProposeMotionToBoard(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bodKeeperABI, 'proposeMotionToBoard'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bodKeeperABI,
    functionName: 'proposeMotionToBoard',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bodKeeperABI,
    'proposeMotionToBoard'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bodKeeperABI}__ and `functionName` set to `"quitPosition"`.
 */
export function usePrepareBodKeeperQuitPosition(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bodKeeperABI, 'quitPosition'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bodKeeperABI,
    functionName: 'quitPosition',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bodKeeperABI, 'quitPosition'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bodKeeperABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function usePrepareBodKeeperRemoveDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bodKeeperABI, 'removeDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bodKeeperABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bodKeeperABI, 'removeDirectKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bodKeeperABI}__ and `functionName` set to `"removeOfficer"`.
 */
export function usePrepareBodKeeperRemoveOfficer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bodKeeperABI, 'removeOfficer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bodKeeperABI,
    functionName: 'removeOfficer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bodKeeperABI, 'removeOfficer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bodKeeperABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareBodKeeperRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bodKeeperABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bodKeeperABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bodKeeperABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bodKeeperABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareBodKeeperRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bodKeeperABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bodKeeperABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bodKeeperABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bodKeeperABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareBodKeeperSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bodKeeperABI, 'setDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bodKeeperABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bodKeeperABI, 'setDirectKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bodKeeperABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function usePrepareBodKeeperSetGeneralCounsel(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bodKeeperABI, 'setGeneralCounsel'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bodKeeperABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bodKeeperABI, 'setGeneralCounsel'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bodKeeperABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareBodKeeperSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bodKeeperABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bodKeeperABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bodKeeperABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bodKeeperABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareBodKeeperSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bodKeeperABI, 'setRoleAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bodKeeperABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bodKeeperABI, 'setRoleAdmin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bodKeeperABI}__ and `functionName` set to `"takePosition"`.
 */
export function usePrepareBodKeeperTakePosition(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bodKeeperABI, 'takePosition'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bodKeeperABI,
    functionName: 'takePosition',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bodKeeperABI, 'takePosition'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bodKeeperABI}__ and `functionName` set to `"voteCounting"`.
 */
export function usePrepareBodKeeperVoteCounting(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bodKeeperABI, 'voteCounting'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bodKeeperABI,
    functionName: 'voteCounting',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bodKeeperABI, 'voteCounting'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bodKeeperABI}__.
 */
export function useBodKeeperEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof bodKeeperABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: bodKeeperABI,
    ...config,
  } as UseContractEventConfig<typeof bodKeeperABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bodKeeperABI}__ and `eventName` set to `"Init"`.
 */
export function useBodKeeperInitEvent(
  config: Omit<
    UseContractEventConfig<typeof bodKeeperABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bodKeeperABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof bodKeeperABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bodKeeperABI}__ and `eventName` set to `"LockContents"`.
 */
export function useBodKeeperLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof bodKeeperABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bodKeeperABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof bodKeeperABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bodKeeperABI}__ and `eventName` set to `"RemoveDirectKeeper"`.
 */
export function useBodKeeperRemoveDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof bodKeeperABI, 'RemoveDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bodKeeperABI,
    eventName: 'RemoveDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof bodKeeperABI, 'RemoveDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bodKeeperABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useBodKeeperSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof bodKeeperABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bodKeeperABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof bodKeeperABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bodKeeperABI}__ and `eventName` set to `"SetGeneralCounsel"`.
 */
export function useBodKeeperSetGeneralCounselEvent(
  config: Omit<
    UseContractEventConfig<typeof bodKeeperABI, 'SetGeneralCounsel'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bodKeeperABI,
    eventName: 'SetGeneralCounsel',
    ...config,
  } as UseContractEventConfig<typeof bodKeeperABI, 'SetGeneralCounsel'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bodKeeperABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useBodKeeperSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof bodKeeperABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bodKeeperABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof bodKeeperABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link bogKeeperABI}__.
 */
export function useBogKeeper(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: bogKeeperABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bogKeeperABI}__.
 */
export function useBogKeeperRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof bogKeeperABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof bogKeeperABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: bogKeeperABI,
    ...config,
  } as UseContractReadConfig<typeof bogKeeperABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bogKeeperABI}__ and `functionName` set to `"finalized"`.
 */
export function useBogKeeperFinalized<
  TSelectData = ReadContractResult<typeof bogKeeperABI, 'finalized'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bogKeeperABI, 'finalized', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bogKeeperABI,
    functionName: 'finalized',
    ...config,
  } as UseContractReadConfig<typeof bogKeeperABI, 'finalized', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bogKeeperABI}__ and `functionName` set to `"getBookeeper"`.
 */
export function useBogKeeperGetBookeeper<
  TSelectData = ReadContractResult<typeof bogKeeperABI, 'getBookeeper'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bogKeeperABI, 'getBookeeper', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bogKeeperABI,
    functionName: 'getBookeeper',
    ...config,
  } as UseContractReadConfig<typeof bogKeeperABI, 'getBookeeper', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bogKeeperABI}__ and `functionName` set to `"getGeneralCounsel"`.
 */
export function useBogKeeperGetGeneralCounsel<
  TSelectData = ReadContractResult<typeof bogKeeperABI, 'getGeneralCounsel'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bogKeeperABI,
      'getGeneralCounsel',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bogKeeperABI,
    functionName: 'getGeneralCounsel',
    ...config,
  } as UseContractReadConfig<
    typeof bogKeeperABI,
    'getGeneralCounsel',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bogKeeperABI}__ and `functionName` set to `"getOwner"`.
 */
export function useBogKeeperGetOwner<
  TSelectData = ReadContractResult<typeof bogKeeperABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bogKeeperABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bogKeeperABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<typeof bogKeeperABI, 'getOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bogKeeperABI}__ and `functionName` set to `"hasRole"`.
 */
export function useBogKeeperHasRole<
  TSelectData = ReadContractResult<typeof bogKeeperABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bogKeeperABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bogKeeperABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof bogKeeperABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bogKeeperABI}__.
 */
export function useBogKeeperWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bogKeeperABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof bogKeeperABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bogKeeperABI, TFunctionName>({
    abi: bogKeeperABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bogKeeperABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useBogKeeperAbandonRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bogKeeperABI, 'abandonRole'>['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<TMode, typeof bogKeeperABI, 'abandonRole'> & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bogKeeperABI, 'abandonRole'>({
    abi: bogKeeperABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bogKeeperABI}__ and `functionName` set to `"castVoteOfGM"`.
 */
export function useBogKeeperCastVoteOfGm<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bogKeeperABI, 'castVoteOfGM'>['abi'],
        'castVoteOfGM'
      > & { functionName?: 'castVoteOfGM' }
    : UseContractWriteConfig<TMode, typeof bogKeeperABI, 'castVoteOfGM'> & {
        abi?: never
        functionName?: 'castVoteOfGM'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bogKeeperABI, 'castVoteOfGM'>({
    abi: bogKeeperABI,
    functionName: 'castVoteOfGM',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bogKeeperABI}__ and `functionName` set to `"createActionOfGM"`.
 */
export function useBogKeeperCreateActionOfGm<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bogKeeperABI,
          'createActionOfGM'
        >['abi'],
        'createActionOfGM'
      > & { functionName?: 'createActionOfGM' }
    : UseContractWriteConfig<TMode, typeof bogKeeperABI, 'createActionOfGM'> & {
        abi?: never
        functionName?: 'createActionOfGM'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bogKeeperABI, 'createActionOfGM'>({
    abi: bogKeeperABI,
    functionName: 'createActionOfGM',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bogKeeperABI}__ and `functionName` set to `"createMotionToRemoveDirector"`.
 */
export function useBogKeeperCreateMotionToRemoveDirector<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bogKeeperABI,
          'createMotionToRemoveDirector'
        >['abi'],
        'createMotionToRemoveDirector'
      > & { functionName?: 'createMotionToRemoveDirector' }
    : UseContractWriteConfig<
        TMode,
        typeof bogKeeperABI,
        'createMotionToRemoveDirector'
      > & {
        abi?: never
        functionName?: 'createMotionToRemoveDirector'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof bogKeeperABI,
    'createMotionToRemoveDirector'
  >({
    abi: bogKeeperABI,
    functionName: 'createMotionToRemoveDirector',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bogKeeperABI}__ and `functionName` set to `"entrustDelegaterForGeneralMeeting"`.
 */
export function useBogKeeperEntrustDelegaterForGeneralMeeting<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bogKeeperABI,
          'entrustDelegaterForGeneralMeeting'
        >['abi'],
        'entrustDelegaterForGeneralMeeting'
      > & { functionName?: 'entrustDelegaterForGeneralMeeting' }
    : UseContractWriteConfig<
        TMode,
        typeof bogKeeperABI,
        'entrustDelegaterForGeneralMeeting'
      > & {
        abi?: never
        functionName?: 'entrustDelegaterForGeneralMeeting'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof bogKeeperABI,
    'entrustDelegaterForGeneralMeeting'
  >({
    abi: bogKeeperABI,
    functionName: 'entrustDelegaterForGeneralMeeting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bogKeeperABI}__ and `functionName` set to `"execActionOfGM"`.
 */
export function useBogKeeperExecActionOfGm<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bogKeeperABI,
          'execActionOfGM'
        >['abi'],
        'execActionOfGM'
      > & { functionName?: 'execActionOfGM' }
    : UseContractWriteConfig<TMode, typeof bogKeeperABI, 'execActionOfGM'> & {
        abi?: never
        functionName?: 'execActionOfGM'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bogKeeperABI, 'execActionOfGM'>({
    abi: bogKeeperABI,
    functionName: 'execActionOfGM',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bogKeeperABI}__ and `functionName` set to `"grantRole"`.
 */
export function useBogKeeperGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bogKeeperABI, 'grantRole'>['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof bogKeeperABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bogKeeperABI, 'grantRole'>({
    abi: bogKeeperABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bogKeeperABI}__ and `functionName` set to `"init"`.
 */
export function useBogKeeperInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bogKeeperABI, 'init'>['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof bogKeeperABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bogKeeperABI, 'init'>({
    abi: bogKeeperABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bogKeeperABI}__ and `functionName` set to `"lockContents"`.
 */
export function useBogKeeperLockContents<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bogKeeperABI, 'lockContents'>['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<TMode, typeof bogKeeperABI, 'lockContents'> & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bogKeeperABI, 'lockContents'>({
    abi: bogKeeperABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bogKeeperABI}__ and `functionName` set to `"nominateDirector"`.
 */
export function useBogKeeperNominateDirector<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bogKeeperABI,
          'nominateDirector'
        >['abi'],
        'nominateDirector'
      > & { functionName?: 'nominateDirector' }
    : UseContractWriteConfig<TMode, typeof bogKeeperABI, 'nominateDirector'> & {
        abi?: never
        functionName?: 'nominateDirector'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bogKeeperABI, 'nominateDirector'>({
    abi: bogKeeperABI,
    functionName: 'nominateDirector',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bogKeeperABI}__ and `functionName` set to `"proposeDocOfGM"`.
 */
export function useBogKeeperProposeDocOfGm<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bogKeeperABI,
          'proposeDocOfGM'
        >['abi'],
        'proposeDocOfGM'
      > & { functionName?: 'proposeDocOfGM' }
    : UseContractWriteConfig<TMode, typeof bogKeeperABI, 'proposeDocOfGM'> & {
        abi?: never
        functionName?: 'proposeDocOfGM'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bogKeeperABI, 'proposeDocOfGM'>({
    abi: bogKeeperABI,
    functionName: 'proposeDocOfGM',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bogKeeperABI}__ and `functionName` set to `"proposeMotionToGeneralMeeting"`.
 */
export function useBogKeeperProposeMotionToGeneralMeeting<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bogKeeperABI,
          'proposeMotionToGeneralMeeting'
        >['abi'],
        'proposeMotionToGeneralMeeting'
      > & { functionName?: 'proposeMotionToGeneralMeeting' }
    : UseContractWriteConfig<
        TMode,
        typeof bogKeeperABI,
        'proposeMotionToGeneralMeeting'
      > & {
        abi?: never
        functionName?: 'proposeMotionToGeneralMeeting'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof bogKeeperABI,
    'proposeMotionToGeneralMeeting'
  >({
    abi: bogKeeperABI,
    functionName: 'proposeMotionToGeneralMeeting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bogKeeperABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function useBogKeeperRemoveDirectKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bogKeeperABI,
          'removeDirectKeeper'
        >['abi'],
        'removeDirectKeeper'
      > & { functionName?: 'removeDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof bogKeeperABI,
        'removeDirectKeeper'
      > & {
        abi?: never
        functionName?: 'removeDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bogKeeperABI, 'removeDirectKeeper'>({
    abi: bogKeeperABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bogKeeperABI}__ and `functionName` set to `"removeDirector"`.
 */
export function useBogKeeperRemoveDirector<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bogKeeperABI,
          'removeDirector'
        >['abi'],
        'removeDirector'
      > & { functionName?: 'removeDirector' }
    : UseContractWriteConfig<TMode, typeof bogKeeperABI, 'removeDirector'> & {
        abi?: never
        functionName?: 'removeDirector'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bogKeeperABI, 'removeDirector'>({
    abi: bogKeeperABI,
    functionName: 'removeDirector',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bogKeeperABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useBogKeeperRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bogKeeperABI, 'renounceRole'>['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<TMode, typeof bogKeeperABI, 'renounceRole'> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bogKeeperABI, 'renounceRole'>({
    abi: bogKeeperABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bogKeeperABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useBogKeeperRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bogKeeperABI, 'revokeRole'>['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof bogKeeperABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bogKeeperABI, 'revokeRole'>({
    abi: bogKeeperABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bogKeeperABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useBogKeeperSetDirectKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bogKeeperABI,
          'setDirectKeeper'
        >['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<TMode, typeof bogKeeperABI, 'setDirectKeeper'> & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bogKeeperABI, 'setDirectKeeper'>({
    abi: bogKeeperABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bogKeeperABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function useBogKeeperSetGeneralCounsel<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bogKeeperABI,
          'setGeneralCounsel'
        >['abi'],
        'setGeneralCounsel'
      > & { functionName?: 'setGeneralCounsel' }
    : UseContractWriteConfig<
        TMode,
        typeof bogKeeperABI,
        'setGeneralCounsel'
      > & {
        abi?: never
        functionName?: 'setGeneralCounsel'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bogKeeperABI, 'setGeneralCounsel'>({
    abi: bogKeeperABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bogKeeperABI}__ and `functionName` set to `"setOwner"`.
 */
export function useBogKeeperSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bogKeeperABI, 'setOwner'>['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof bogKeeperABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bogKeeperABI, 'setOwner'>({
    abi: bogKeeperABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bogKeeperABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useBogKeeperSetRoleAdmin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bogKeeperABI, 'setRoleAdmin'>['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<TMode, typeof bogKeeperABI, 'setRoleAdmin'> & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bogKeeperABI, 'setRoleAdmin'>({
    abi: bogKeeperABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bogKeeperABI}__ and `functionName` set to `"takeSeat"`.
 */
export function useBogKeeperTakeSeat<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bogKeeperABI, 'takeSeat'>['abi'],
        'takeSeat'
      > & { functionName?: 'takeSeat' }
    : UseContractWriteConfig<TMode, typeof bogKeeperABI, 'takeSeat'> & {
        abi?: never
        functionName?: 'takeSeat'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bogKeeperABI, 'takeSeat'>({
    abi: bogKeeperABI,
    functionName: 'takeSeat',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bogKeeperABI}__ and `functionName` set to `"voteCountingOfGM"`.
 */
export function useBogKeeperVoteCountingOfGm<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bogKeeperABI,
          'voteCountingOfGM'
        >['abi'],
        'voteCountingOfGM'
      > & { functionName?: 'voteCountingOfGM' }
    : UseContractWriteConfig<TMode, typeof bogKeeperABI, 'voteCountingOfGM'> & {
        abi?: never
        functionName?: 'voteCountingOfGM'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bogKeeperABI, 'voteCountingOfGM'>({
    abi: bogKeeperABI,
    functionName: 'voteCountingOfGM',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bogKeeperABI}__.
 */
export function usePrepareBogKeeperWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bogKeeperABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bogKeeperABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof bogKeeperABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bogKeeperABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareBogKeeperAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bogKeeperABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bogKeeperABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bogKeeperABI, 'abandonRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bogKeeperABI}__ and `functionName` set to `"castVoteOfGM"`.
 */
export function usePrepareBogKeeperCastVoteOfGm(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bogKeeperABI, 'castVoteOfGM'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bogKeeperABI,
    functionName: 'castVoteOfGM',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bogKeeperABI, 'castVoteOfGM'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bogKeeperABI}__ and `functionName` set to `"createActionOfGM"`.
 */
export function usePrepareBogKeeperCreateActionOfGm(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bogKeeperABI, 'createActionOfGM'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bogKeeperABI,
    functionName: 'createActionOfGM',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bogKeeperABI, 'createActionOfGM'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bogKeeperABI}__ and `functionName` set to `"createMotionToRemoveDirector"`.
 */
export function usePrepareBogKeeperCreateMotionToRemoveDirector(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof bogKeeperABI,
      'createMotionToRemoveDirector'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bogKeeperABI,
    functionName: 'createMotionToRemoveDirector',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bogKeeperABI,
    'createMotionToRemoveDirector'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bogKeeperABI}__ and `functionName` set to `"entrustDelegaterForGeneralMeeting"`.
 */
export function usePrepareBogKeeperEntrustDelegaterForGeneralMeeting(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof bogKeeperABI,
      'entrustDelegaterForGeneralMeeting'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bogKeeperABI,
    functionName: 'entrustDelegaterForGeneralMeeting',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bogKeeperABI,
    'entrustDelegaterForGeneralMeeting'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bogKeeperABI}__ and `functionName` set to `"execActionOfGM"`.
 */
export function usePrepareBogKeeperExecActionOfGm(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bogKeeperABI, 'execActionOfGM'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bogKeeperABI,
    functionName: 'execActionOfGM',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bogKeeperABI, 'execActionOfGM'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bogKeeperABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareBogKeeperGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bogKeeperABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bogKeeperABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bogKeeperABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bogKeeperABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareBogKeeperInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bogKeeperABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bogKeeperABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bogKeeperABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bogKeeperABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareBogKeeperLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bogKeeperABI, 'lockContents'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bogKeeperABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bogKeeperABI, 'lockContents'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bogKeeperABI}__ and `functionName` set to `"nominateDirector"`.
 */
export function usePrepareBogKeeperNominateDirector(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bogKeeperABI, 'nominateDirector'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bogKeeperABI,
    functionName: 'nominateDirector',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bogKeeperABI, 'nominateDirector'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bogKeeperABI}__ and `functionName` set to `"proposeDocOfGM"`.
 */
export function usePrepareBogKeeperProposeDocOfGm(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bogKeeperABI, 'proposeDocOfGM'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bogKeeperABI,
    functionName: 'proposeDocOfGM',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bogKeeperABI, 'proposeDocOfGM'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bogKeeperABI}__ and `functionName` set to `"proposeMotionToGeneralMeeting"`.
 */
export function usePrepareBogKeeperProposeMotionToGeneralMeeting(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof bogKeeperABI,
      'proposeMotionToGeneralMeeting'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bogKeeperABI,
    functionName: 'proposeMotionToGeneralMeeting',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bogKeeperABI,
    'proposeMotionToGeneralMeeting'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bogKeeperABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function usePrepareBogKeeperRemoveDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bogKeeperABI, 'removeDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bogKeeperABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bogKeeperABI, 'removeDirectKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bogKeeperABI}__ and `functionName` set to `"removeDirector"`.
 */
export function usePrepareBogKeeperRemoveDirector(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bogKeeperABI, 'removeDirector'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bogKeeperABI,
    functionName: 'removeDirector',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bogKeeperABI, 'removeDirector'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bogKeeperABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareBogKeeperRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bogKeeperABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bogKeeperABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bogKeeperABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bogKeeperABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareBogKeeperRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bogKeeperABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bogKeeperABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bogKeeperABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bogKeeperABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareBogKeeperSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bogKeeperABI, 'setDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bogKeeperABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bogKeeperABI, 'setDirectKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bogKeeperABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function usePrepareBogKeeperSetGeneralCounsel(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bogKeeperABI, 'setGeneralCounsel'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bogKeeperABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bogKeeperABI, 'setGeneralCounsel'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bogKeeperABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareBogKeeperSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bogKeeperABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bogKeeperABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bogKeeperABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bogKeeperABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareBogKeeperSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bogKeeperABI, 'setRoleAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bogKeeperABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bogKeeperABI, 'setRoleAdmin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bogKeeperABI}__ and `functionName` set to `"takeSeat"`.
 */
export function usePrepareBogKeeperTakeSeat(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bogKeeperABI, 'takeSeat'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bogKeeperABI,
    functionName: 'takeSeat',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bogKeeperABI, 'takeSeat'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bogKeeperABI}__ and `functionName` set to `"voteCountingOfGM"`.
 */
export function usePrepareBogKeeperVoteCountingOfGm(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bogKeeperABI, 'voteCountingOfGM'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bogKeeperABI,
    functionName: 'voteCountingOfGM',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bogKeeperABI, 'voteCountingOfGM'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bogKeeperABI}__.
 */
export function useBogKeeperEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof bogKeeperABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: bogKeeperABI,
    ...config,
  } as UseContractEventConfig<typeof bogKeeperABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bogKeeperABI}__ and `eventName` set to `"Init"`.
 */
export function useBogKeeperInitEvent(
  config: Omit<
    UseContractEventConfig<typeof bogKeeperABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bogKeeperABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof bogKeeperABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bogKeeperABI}__ and `eventName` set to `"LockContents"`.
 */
export function useBogKeeperLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof bogKeeperABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bogKeeperABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof bogKeeperABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bogKeeperABI}__ and `eventName` set to `"RemoveDirectKeeper"`.
 */
export function useBogKeeperRemoveDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof bogKeeperABI, 'RemoveDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bogKeeperABI,
    eventName: 'RemoveDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof bogKeeperABI, 'RemoveDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bogKeeperABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useBogKeeperSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof bogKeeperABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bogKeeperABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof bogKeeperABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bogKeeperABI}__ and `eventName` set to `"SetGeneralCounsel"`.
 */
export function useBogKeeperSetGeneralCounselEvent(
  config: Omit<
    UseContractEventConfig<typeof bogKeeperABI, 'SetGeneralCounsel'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bogKeeperABI,
    eventName: 'SetGeneralCounsel',
    ...config,
  } as UseContractEventConfig<typeof bogKeeperABI, 'SetGeneralCounsel'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bogKeeperABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useBogKeeperSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof bogKeeperABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bogKeeperABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof bogKeeperABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link bohKeeperABI}__.
 */
export function useBohKeeper(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: bohKeeperABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bohKeeperABI}__.
 */
export function useBohKeeperRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof bohKeeperABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof bohKeeperABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: bohKeeperABI,
    ...config,
  } as UseContractReadConfig<typeof bohKeeperABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bohKeeperABI}__ and `functionName` set to `"finalized"`.
 */
export function useBohKeeperFinalized<
  TSelectData = ReadContractResult<typeof bohKeeperABI, 'finalized'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bohKeeperABI, 'finalized', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bohKeeperABI,
    functionName: 'finalized',
    ...config,
  } as UseContractReadConfig<typeof bohKeeperABI, 'finalized', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bohKeeperABI}__ and `functionName` set to `"getBookeeper"`.
 */
export function useBohKeeperGetBookeeper<
  TSelectData = ReadContractResult<typeof bohKeeperABI, 'getBookeeper'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bohKeeperABI, 'getBookeeper', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bohKeeperABI,
    functionName: 'getBookeeper',
    ...config,
  } as UseContractReadConfig<typeof bohKeeperABI, 'getBookeeper', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bohKeeperABI}__ and `functionName` set to `"getGeneralCounsel"`.
 */
export function useBohKeeperGetGeneralCounsel<
  TSelectData = ReadContractResult<typeof bohKeeperABI, 'getGeneralCounsel'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bohKeeperABI,
      'getGeneralCounsel',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bohKeeperABI,
    functionName: 'getGeneralCounsel',
    ...config,
  } as UseContractReadConfig<
    typeof bohKeeperABI,
    'getGeneralCounsel',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bohKeeperABI}__ and `functionName` set to `"getOwner"`.
 */
export function useBohKeeperGetOwner<
  TSelectData = ReadContractResult<typeof bohKeeperABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bohKeeperABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bohKeeperABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<typeof bohKeeperABI, 'getOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bohKeeperABI}__ and `functionName` set to `"hasRole"`.
 */
export function useBohKeeperHasRole<
  TSelectData = ReadContractResult<typeof bohKeeperABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bohKeeperABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bohKeeperABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof bohKeeperABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bohKeeperABI}__.
 */
export function useBohKeeperWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bohKeeperABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof bohKeeperABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bohKeeperABI, TFunctionName>({
    abi: bohKeeperABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bohKeeperABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useBohKeeperAbandonRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bohKeeperABI, 'abandonRole'>['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<TMode, typeof bohKeeperABI, 'abandonRole'> & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bohKeeperABI, 'abandonRole'>({
    abi: bohKeeperABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bohKeeperABI}__ and `functionName` set to `"acceptSHA"`.
 */
export function useBohKeeperAcceptSha<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bohKeeperABI, 'acceptSHA'>['abi'],
        'acceptSHA'
      > & { functionName?: 'acceptSHA' }
    : UseContractWriteConfig<TMode, typeof bohKeeperABI, 'acceptSHA'> & {
        abi?: never
        functionName?: 'acceptSHA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bohKeeperABI, 'acceptSHA'>({
    abi: bohKeeperABI,
    functionName: 'acceptSHA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bohKeeperABI}__ and `functionName` set to `"activateSHA"`.
 */
export function useBohKeeperActivateSha<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bohKeeperABI, 'activateSHA'>['abi'],
        'activateSHA'
      > & { functionName?: 'activateSHA' }
    : UseContractWriteConfig<TMode, typeof bohKeeperABI, 'activateSHA'> & {
        abi?: never
        functionName?: 'activateSHA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bohKeeperABI, 'activateSHA'>({
    abi: bohKeeperABI,
    functionName: 'activateSHA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bohKeeperABI}__ and `functionName` set to `"circulateSHA"`.
 */
export function useBohKeeperCirculateSha<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bohKeeperABI, 'circulateSHA'>['abi'],
        'circulateSHA'
      > & { functionName?: 'circulateSHA' }
    : UseContractWriteConfig<TMode, typeof bohKeeperABI, 'circulateSHA'> & {
        abi?: never
        functionName?: 'circulateSHA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bohKeeperABI, 'circulateSHA'>({
    abi: bohKeeperABI,
    functionName: 'circulateSHA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bohKeeperABI}__ and `functionName` set to `"createSHA"`.
 */
export function useBohKeeperCreateSha<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bohKeeperABI, 'createSHA'>['abi'],
        'createSHA'
      > & { functionName?: 'createSHA' }
    : UseContractWriteConfig<TMode, typeof bohKeeperABI, 'createSHA'> & {
        abi?: never
        functionName?: 'createSHA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bohKeeperABI, 'createSHA'>({
    abi: bohKeeperABI,
    functionName: 'createSHA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bohKeeperABI}__ and `functionName` set to `"grantRole"`.
 */
export function useBohKeeperGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bohKeeperABI, 'grantRole'>['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof bohKeeperABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bohKeeperABI, 'grantRole'>({
    abi: bohKeeperABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bohKeeperABI}__ and `functionName` set to `"init"`.
 */
export function useBohKeeperInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bohKeeperABI, 'init'>['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof bohKeeperABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bohKeeperABI, 'init'>({
    abi: bohKeeperABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bohKeeperABI}__ and `functionName` set to `"lockContents"`.
 */
export function useBohKeeperLockContents<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bohKeeperABI, 'lockContents'>['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<TMode, typeof bohKeeperABI, 'lockContents'> & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bohKeeperABI, 'lockContents'>({
    abi: bohKeeperABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bohKeeperABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function useBohKeeperRemoveDirectKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bohKeeperABI,
          'removeDirectKeeper'
        >['abi'],
        'removeDirectKeeper'
      > & { functionName?: 'removeDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof bohKeeperABI,
        'removeDirectKeeper'
      > & {
        abi?: never
        functionName?: 'removeDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bohKeeperABI, 'removeDirectKeeper'>({
    abi: bohKeeperABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bohKeeperABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useBohKeeperRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bohKeeperABI, 'renounceRole'>['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<TMode, typeof bohKeeperABI, 'renounceRole'> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bohKeeperABI, 'renounceRole'>({
    abi: bohKeeperABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bohKeeperABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useBohKeeperRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bohKeeperABI, 'revokeRole'>['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof bohKeeperABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bohKeeperABI, 'revokeRole'>({
    abi: bohKeeperABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bohKeeperABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useBohKeeperSetDirectKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bohKeeperABI,
          'setDirectKeeper'
        >['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<TMode, typeof bohKeeperABI, 'setDirectKeeper'> & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bohKeeperABI, 'setDirectKeeper'>({
    abi: bohKeeperABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bohKeeperABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function useBohKeeperSetGeneralCounsel<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bohKeeperABI,
          'setGeneralCounsel'
        >['abi'],
        'setGeneralCounsel'
      > & { functionName?: 'setGeneralCounsel' }
    : UseContractWriteConfig<
        TMode,
        typeof bohKeeperABI,
        'setGeneralCounsel'
      > & {
        abi?: never
        functionName?: 'setGeneralCounsel'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bohKeeperABI, 'setGeneralCounsel'>({
    abi: bohKeeperABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bohKeeperABI}__ and `functionName` set to `"setOwner"`.
 */
export function useBohKeeperSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bohKeeperABI, 'setOwner'>['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof bohKeeperABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bohKeeperABI, 'setOwner'>({
    abi: bohKeeperABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bohKeeperABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useBohKeeperSetRoleAdmin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bohKeeperABI, 'setRoleAdmin'>['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<TMode, typeof bohKeeperABI, 'setRoleAdmin'> & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bohKeeperABI, 'setRoleAdmin'>({
    abi: bohKeeperABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bohKeeperABI}__ and `functionName` set to `"signSHA"`.
 */
export function useBohKeeperSignSha<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bohKeeperABI, 'signSHA'>['abi'],
        'signSHA'
      > & { functionName?: 'signSHA' }
    : UseContractWriteConfig<TMode, typeof bohKeeperABI, 'signSHA'> & {
        abi?: never
        functionName?: 'signSHA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bohKeeperABI, 'signSHA'>({
    abi: bohKeeperABI,
    functionName: 'signSHA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bohKeeperABI}__.
 */
export function usePrepareBohKeeperWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bohKeeperABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bohKeeperABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof bohKeeperABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bohKeeperABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareBohKeeperAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bohKeeperABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bohKeeperABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bohKeeperABI, 'abandonRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bohKeeperABI}__ and `functionName` set to `"acceptSHA"`.
 */
export function usePrepareBohKeeperAcceptSha(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bohKeeperABI, 'acceptSHA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bohKeeperABI,
    functionName: 'acceptSHA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bohKeeperABI, 'acceptSHA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bohKeeperABI}__ and `functionName` set to `"activateSHA"`.
 */
export function usePrepareBohKeeperActivateSha(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bohKeeperABI, 'activateSHA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bohKeeperABI,
    functionName: 'activateSHA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bohKeeperABI, 'activateSHA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bohKeeperABI}__ and `functionName` set to `"circulateSHA"`.
 */
export function usePrepareBohKeeperCirculateSha(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bohKeeperABI, 'circulateSHA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bohKeeperABI,
    functionName: 'circulateSHA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bohKeeperABI, 'circulateSHA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bohKeeperABI}__ and `functionName` set to `"createSHA"`.
 */
export function usePrepareBohKeeperCreateSha(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bohKeeperABI, 'createSHA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bohKeeperABI,
    functionName: 'createSHA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bohKeeperABI, 'createSHA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bohKeeperABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareBohKeeperGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bohKeeperABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bohKeeperABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bohKeeperABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bohKeeperABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareBohKeeperInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bohKeeperABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bohKeeperABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bohKeeperABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bohKeeperABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareBohKeeperLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bohKeeperABI, 'lockContents'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bohKeeperABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bohKeeperABI, 'lockContents'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bohKeeperABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function usePrepareBohKeeperRemoveDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bohKeeperABI, 'removeDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bohKeeperABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bohKeeperABI, 'removeDirectKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bohKeeperABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareBohKeeperRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bohKeeperABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bohKeeperABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bohKeeperABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bohKeeperABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareBohKeeperRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bohKeeperABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bohKeeperABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bohKeeperABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bohKeeperABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareBohKeeperSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bohKeeperABI, 'setDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bohKeeperABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bohKeeperABI, 'setDirectKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bohKeeperABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function usePrepareBohKeeperSetGeneralCounsel(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bohKeeperABI, 'setGeneralCounsel'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bohKeeperABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bohKeeperABI, 'setGeneralCounsel'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bohKeeperABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareBohKeeperSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bohKeeperABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bohKeeperABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bohKeeperABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bohKeeperABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareBohKeeperSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bohKeeperABI, 'setRoleAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bohKeeperABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bohKeeperABI, 'setRoleAdmin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bohKeeperABI}__ and `functionName` set to `"signSHA"`.
 */
export function usePrepareBohKeeperSignSha(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bohKeeperABI, 'signSHA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bohKeeperABI,
    functionName: 'signSHA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bohKeeperABI, 'signSHA'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bohKeeperABI}__.
 */
export function useBohKeeperEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof bohKeeperABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: bohKeeperABI,
    ...config,
  } as UseContractEventConfig<typeof bohKeeperABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bohKeeperABI}__ and `eventName` set to `"Init"`.
 */
export function useBohKeeperInitEvent(
  config: Omit<
    UseContractEventConfig<typeof bohKeeperABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bohKeeperABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof bohKeeperABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bohKeeperABI}__ and `eventName` set to `"LockContents"`.
 */
export function useBohKeeperLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof bohKeeperABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bohKeeperABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof bohKeeperABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bohKeeperABI}__ and `eventName` set to `"RemoveDirectKeeper"`.
 */
export function useBohKeeperRemoveDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof bohKeeperABI, 'RemoveDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bohKeeperABI,
    eventName: 'RemoveDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof bohKeeperABI, 'RemoveDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bohKeeperABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useBohKeeperSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof bohKeeperABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bohKeeperABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof bohKeeperABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bohKeeperABI}__ and `eventName` set to `"SetGeneralCounsel"`.
 */
export function useBohKeeperSetGeneralCounselEvent(
  config: Omit<
    UseContractEventConfig<typeof bohKeeperABI, 'SetGeneralCounsel'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bohKeeperABI,
    eventName: 'SetGeneralCounsel',
    ...config,
  } as UseContractEventConfig<typeof bohKeeperABI, 'SetGeneralCounsel'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bohKeeperABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useBohKeeperSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof bohKeeperABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bohKeeperABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof bohKeeperABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link booKeeperABI}__.
 */
export function useBooKeeper(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: booKeeperABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link booKeeperABI}__.
 */
export function useBooKeeperRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof booKeeperABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof booKeeperABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: booKeeperABI,
    ...config,
  } as UseContractReadConfig<typeof booKeeperABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link booKeeperABI}__ and `functionName` set to `"finalized"`.
 */
export function useBooKeeperFinalized<
  TSelectData = ReadContractResult<typeof booKeeperABI, 'finalized'>,
>(
  config: Omit<
    UseContractReadConfig<typeof booKeeperABI, 'finalized', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: booKeeperABI,
    functionName: 'finalized',
    ...config,
  } as UseContractReadConfig<typeof booKeeperABI, 'finalized', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link booKeeperABI}__ and `functionName` set to `"getBookeeper"`.
 */
export function useBooKeeperGetBookeeper<
  TSelectData = ReadContractResult<typeof booKeeperABI, 'getBookeeper'>,
>(
  config: Omit<
    UseContractReadConfig<typeof booKeeperABI, 'getBookeeper', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: booKeeperABI,
    functionName: 'getBookeeper',
    ...config,
  } as UseContractReadConfig<typeof booKeeperABI, 'getBookeeper', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link booKeeperABI}__ and `functionName` set to `"getGeneralCounsel"`.
 */
export function useBooKeeperGetGeneralCounsel<
  TSelectData = ReadContractResult<typeof booKeeperABI, 'getGeneralCounsel'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof booKeeperABI,
      'getGeneralCounsel',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: booKeeperABI,
    functionName: 'getGeneralCounsel',
    ...config,
  } as UseContractReadConfig<
    typeof booKeeperABI,
    'getGeneralCounsel',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link booKeeperABI}__ and `functionName` set to `"getOwner"`.
 */
export function useBooKeeperGetOwner<
  TSelectData = ReadContractResult<typeof booKeeperABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof booKeeperABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: booKeeperABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<typeof booKeeperABI, 'getOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link booKeeperABI}__ and `functionName` set to `"hasRole"`.
 */
export function useBooKeeperHasRole<
  TSelectData = ReadContractResult<typeof booKeeperABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof booKeeperABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: booKeeperABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof booKeeperABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link booKeeperABI}__.
 */
export function useBooKeeperWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof booKeeperABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof booKeeperABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof booKeeperABI, TFunctionName>({
    abi: booKeeperABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link booKeeperABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useBooKeeperAbandonRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof booKeeperABI, 'abandonRole'>['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<TMode, typeof booKeeperABI, 'abandonRole'> & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof booKeeperABI, 'abandonRole'>({
    abi: booKeeperABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link booKeeperABI}__ and `functionName` set to `"execOption"`.
 */
export function useBooKeeperExecOption<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof booKeeperABI, 'execOption'>['abi'],
        'execOption'
      > & { functionName?: 'execOption' }
    : UseContractWriteConfig<TMode, typeof booKeeperABI, 'execOption'> & {
        abi?: never
        functionName?: 'execOption'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof booKeeperABI, 'execOption'>({
    abi: booKeeperABI,
    functionName: 'execOption',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link booKeeperABI}__ and `functionName` set to `"execSwapOrder"`.
 */
export function useBooKeeperExecSwapOrder<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof booKeeperABI, 'execSwapOrder'>['abi'],
        'execSwapOrder'
      > & { functionName?: 'execSwapOrder' }
    : UseContractWriteConfig<TMode, typeof booKeeperABI, 'execSwapOrder'> & {
        abi?: never
        functionName?: 'execSwapOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof booKeeperABI, 'execSwapOrder'>({
    abi: booKeeperABI,
    functionName: 'execSwapOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link booKeeperABI}__ and `functionName` set to `"grantRole"`.
 */
export function useBooKeeperGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof booKeeperABI, 'grantRole'>['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof booKeeperABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof booKeeperABI, 'grantRole'>({
    abi: booKeeperABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link booKeeperABI}__ and `functionName` set to `"init"`.
 */
export function useBooKeeperInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof booKeeperABI, 'init'>['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof booKeeperABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof booKeeperABI, 'init'>({
    abi: booKeeperABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link booKeeperABI}__ and `functionName` set to `"lockContents"`.
 */
export function useBooKeeperLockContents<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof booKeeperABI, 'lockContents'>['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<TMode, typeof booKeeperABI, 'lockContents'> & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof booKeeperABI, 'lockContents'>({
    abi: booKeeperABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link booKeeperABI}__ and `functionName` set to `"lockSwapOrder"`.
 */
export function useBooKeeperLockSwapOrder<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof booKeeperABI, 'lockSwapOrder'>['abi'],
        'lockSwapOrder'
      > & { functionName?: 'lockSwapOrder' }
    : UseContractWriteConfig<TMode, typeof booKeeperABI, 'lockSwapOrder'> & {
        abi?: never
        functionName?: 'lockSwapOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof booKeeperABI, 'lockSwapOrder'>({
    abi: booKeeperABI,
    functionName: 'lockSwapOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link booKeeperABI}__ and `functionName` set to `"placeSwapOrder"`.
 */
export function useBooKeeperPlaceSwapOrder<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof booKeeperABI,
          'placeSwapOrder'
        >['abi'],
        'placeSwapOrder'
      > & { functionName?: 'placeSwapOrder' }
    : UseContractWriteConfig<TMode, typeof booKeeperABI, 'placeSwapOrder'> & {
        abi?: never
        functionName?: 'placeSwapOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof booKeeperABI, 'placeSwapOrder'>({
    abi: booKeeperABI,
    functionName: 'placeSwapOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link booKeeperABI}__ and `functionName` set to `"releaseSwapOrder"`.
 */
export function useBooKeeperReleaseSwapOrder<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof booKeeperABI,
          'releaseSwapOrder'
        >['abi'],
        'releaseSwapOrder'
      > & { functionName?: 'releaseSwapOrder' }
    : UseContractWriteConfig<TMode, typeof booKeeperABI, 'releaseSwapOrder'> & {
        abi?: never
        functionName?: 'releaseSwapOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof booKeeperABI, 'releaseSwapOrder'>({
    abi: booKeeperABI,
    functionName: 'releaseSwapOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link booKeeperABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function useBooKeeperRemoveDirectKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof booKeeperABI,
          'removeDirectKeeper'
        >['abi'],
        'removeDirectKeeper'
      > & { functionName?: 'removeDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof booKeeperABI,
        'removeDirectKeeper'
      > & {
        abi?: never
        functionName?: 'removeDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof booKeeperABI, 'removeDirectKeeper'>({
    abi: booKeeperABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link booKeeperABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useBooKeeperRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof booKeeperABI, 'renounceRole'>['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<TMode, typeof booKeeperABI, 'renounceRole'> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof booKeeperABI, 'renounceRole'>({
    abi: booKeeperABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link booKeeperABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useBooKeeperRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof booKeeperABI, 'revokeRole'>['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof booKeeperABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof booKeeperABI, 'revokeRole'>({
    abi: booKeeperABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link booKeeperABI}__ and `functionName` set to `"revokeSwapOrder"`.
 */
export function useBooKeeperRevokeSwapOrder<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof booKeeperABI,
          'revokeSwapOrder'
        >['abi'],
        'revokeSwapOrder'
      > & { functionName?: 'revokeSwapOrder' }
    : UseContractWriteConfig<TMode, typeof booKeeperABI, 'revokeSwapOrder'> & {
        abi?: never
        functionName?: 'revokeSwapOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof booKeeperABI, 'revokeSwapOrder'>({
    abi: booKeeperABI,
    functionName: 'revokeSwapOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link booKeeperABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useBooKeeperSetDirectKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof booKeeperABI,
          'setDirectKeeper'
        >['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<TMode, typeof booKeeperABI, 'setDirectKeeper'> & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof booKeeperABI, 'setDirectKeeper'>({
    abi: booKeeperABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link booKeeperABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function useBooKeeperSetGeneralCounsel<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof booKeeperABI,
          'setGeneralCounsel'
        >['abi'],
        'setGeneralCounsel'
      > & { functionName?: 'setGeneralCounsel' }
    : UseContractWriteConfig<
        TMode,
        typeof booKeeperABI,
        'setGeneralCounsel'
      > & {
        abi?: never
        functionName?: 'setGeneralCounsel'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof booKeeperABI, 'setGeneralCounsel'>({
    abi: booKeeperABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link booKeeperABI}__ and `functionName` set to `"setOwner"`.
 */
export function useBooKeeperSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof booKeeperABI, 'setOwner'>['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof booKeeperABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof booKeeperABI, 'setOwner'>({
    abi: booKeeperABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link booKeeperABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useBooKeeperSetRoleAdmin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof booKeeperABI, 'setRoleAdmin'>['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<TMode, typeof booKeeperABI, 'setRoleAdmin'> & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof booKeeperABI, 'setRoleAdmin'>({
    abi: booKeeperABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link booKeeperABI}__ and `functionName` set to `"updateOracle"`.
 */
export function useBooKeeperUpdateOracle<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof booKeeperABI, 'updateOracle'>['abi'],
        'updateOracle'
      > & { functionName?: 'updateOracle' }
    : UseContractWriteConfig<TMode, typeof booKeeperABI, 'updateOracle'> & {
        abi?: never
        functionName?: 'updateOracle'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof booKeeperABI, 'updateOracle'>({
    abi: booKeeperABI,
    functionName: 'updateOracle',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link booKeeperABI}__.
 */
export function usePrepareBooKeeperWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof booKeeperABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: booKeeperABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof booKeeperABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link booKeeperABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareBooKeeperAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof booKeeperABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: booKeeperABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof booKeeperABI, 'abandonRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link booKeeperABI}__ and `functionName` set to `"execOption"`.
 */
export function usePrepareBooKeeperExecOption(
  config: Omit<
    UsePrepareContractWriteConfig<typeof booKeeperABI, 'execOption'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: booKeeperABI,
    functionName: 'execOption',
    ...config,
  } as UsePrepareContractWriteConfig<typeof booKeeperABI, 'execOption'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link booKeeperABI}__ and `functionName` set to `"execSwapOrder"`.
 */
export function usePrepareBooKeeperExecSwapOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof booKeeperABI, 'execSwapOrder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: booKeeperABI,
    functionName: 'execSwapOrder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof booKeeperABI, 'execSwapOrder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link booKeeperABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareBooKeeperGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof booKeeperABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: booKeeperABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof booKeeperABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link booKeeperABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareBooKeeperInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof booKeeperABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: booKeeperABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof booKeeperABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link booKeeperABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareBooKeeperLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<typeof booKeeperABI, 'lockContents'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: booKeeperABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<typeof booKeeperABI, 'lockContents'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link booKeeperABI}__ and `functionName` set to `"lockSwapOrder"`.
 */
export function usePrepareBooKeeperLockSwapOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof booKeeperABI, 'lockSwapOrder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: booKeeperABI,
    functionName: 'lockSwapOrder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof booKeeperABI, 'lockSwapOrder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link booKeeperABI}__ and `functionName` set to `"placeSwapOrder"`.
 */
export function usePrepareBooKeeperPlaceSwapOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof booKeeperABI, 'placeSwapOrder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: booKeeperABI,
    functionName: 'placeSwapOrder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof booKeeperABI, 'placeSwapOrder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link booKeeperABI}__ and `functionName` set to `"releaseSwapOrder"`.
 */
export function usePrepareBooKeeperReleaseSwapOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof booKeeperABI, 'releaseSwapOrder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: booKeeperABI,
    functionName: 'releaseSwapOrder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof booKeeperABI, 'releaseSwapOrder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link booKeeperABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function usePrepareBooKeeperRemoveDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof booKeeperABI, 'removeDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: booKeeperABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof booKeeperABI, 'removeDirectKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link booKeeperABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareBooKeeperRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof booKeeperABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: booKeeperABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof booKeeperABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link booKeeperABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareBooKeeperRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof booKeeperABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: booKeeperABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof booKeeperABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link booKeeperABI}__ and `functionName` set to `"revokeSwapOrder"`.
 */
export function usePrepareBooKeeperRevokeSwapOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof booKeeperABI, 'revokeSwapOrder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: booKeeperABI,
    functionName: 'revokeSwapOrder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof booKeeperABI, 'revokeSwapOrder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link booKeeperABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareBooKeeperSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof booKeeperABI, 'setDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: booKeeperABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof booKeeperABI, 'setDirectKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link booKeeperABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function usePrepareBooKeeperSetGeneralCounsel(
  config: Omit<
    UsePrepareContractWriteConfig<typeof booKeeperABI, 'setGeneralCounsel'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: booKeeperABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as UsePrepareContractWriteConfig<typeof booKeeperABI, 'setGeneralCounsel'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link booKeeperABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareBooKeeperSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof booKeeperABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: booKeeperABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof booKeeperABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link booKeeperABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareBooKeeperSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof booKeeperABI, 'setRoleAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: booKeeperABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof booKeeperABI, 'setRoleAdmin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link booKeeperABI}__ and `functionName` set to `"updateOracle"`.
 */
export function usePrepareBooKeeperUpdateOracle(
  config: Omit<
    UsePrepareContractWriteConfig<typeof booKeeperABI, 'updateOracle'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: booKeeperABI,
    functionName: 'updateOracle',
    ...config,
  } as UsePrepareContractWriteConfig<typeof booKeeperABI, 'updateOracle'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link booKeeperABI}__.
 */
export function useBooKeeperEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof booKeeperABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: booKeeperABI,
    ...config,
  } as UseContractEventConfig<typeof booKeeperABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link booKeeperABI}__ and `eventName` set to `"Init"`.
 */
export function useBooKeeperInitEvent(
  config: Omit<
    UseContractEventConfig<typeof booKeeperABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: booKeeperABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof booKeeperABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link booKeeperABI}__ and `eventName` set to `"LockContents"`.
 */
export function useBooKeeperLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof booKeeperABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: booKeeperABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof booKeeperABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link booKeeperABI}__ and `eventName` set to `"RemoveDirectKeeper"`.
 */
export function useBooKeeperRemoveDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof booKeeperABI, 'RemoveDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: booKeeperABI,
    eventName: 'RemoveDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof booKeeperABI, 'RemoveDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link booKeeperABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useBooKeeperSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof booKeeperABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: booKeeperABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof booKeeperABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link booKeeperABI}__ and `eventName` set to `"SetGeneralCounsel"`.
 */
export function useBooKeeperSetGeneralCounselEvent(
  config: Omit<
    UseContractEventConfig<typeof booKeeperABI, 'SetGeneralCounsel'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: booKeeperABI,
    eventName: 'SetGeneralCounsel',
    ...config,
  } as UseContractEventConfig<typeof booKeeperABI, 'SetGeneralCounsel'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link booKeeperABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useBooKeeperSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof booKeeperABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: booKeeperABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof booKeeperABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link bopKeeperABI}__.
 */
export function useBopKeeper(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: bopKeeperABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bopKeeperABI}__.
 */
export function useBopKeeperRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof bopKeeperABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof bopKeeperABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: bopKeeperABI,
    ...config,
  } as UseContractReadConfig<typeof bopKeeperABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bopKeeperABI}__ and `functionName` set to `"finalized"`.
 */
export function useBopKeeperFinalized<
  TSelectData = ReadContractResult<typeof bopKeeperABI, 'finalized'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bopKeeperABI, 'finalized', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bopKeeperABI,
    functionName: 'finalized',
    ...config,
  } as UseContractReadConfig<typeof bopKeeperABI, 'finalized', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bopKeeperABI}__ and `functionName` set to `"getBookeeper"`.
 */
export function useBopKeeperGetBookeeper<
  TSelectData = ReadContractResult<typeof bopKeeperABI, 'getBookeeper'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bopKeeperABI, 'getBookeeper', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bopKeeperABI,
    functionName: 'getBookeeper',
    ...config,
  } as UseContractReadConfig<typeof bopKeeperABI, 'getBookeeper', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bopKeeperABI}__ and `functionName` set to `"getGeneralCounsel"`.
 */
export function useBopKeeperGetGeneralCounsel<
  TSelectData = ReadContractResult<typeof bopKeeperABI, 'getGeneralCounsel'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bopKeeperABI,
      'getGeneralCounsel',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bopKeeperABI,
    functionName: 'getGeneralCounsel',
    ...config,
  } as UseContractReadConfig<
    typeof bopKeeperABI,
    'getGeneralCounsel',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bopKeeperABI}__ and `functionName` set to `"getOwner"`.
 */
export function useBopKeeperGetOwner<
  TSelectData = ReadContractResult<typeof bopKeeperABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bopKeeperABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bopKeeperABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<typeof bopKeeperABI, 'getOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bopKeeperABI}__ and `functionName` set to `"hasRole"`.
 */
export function useBopKeeperHasRole<
  TSelectData = ReadContractResult<typeof bopKeeperABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bopKeeperABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bopKeeperABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof bopKeeperABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bopKeeperABI}__.
 */
export function useBopKeeperWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bopKeeperABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof bopKeeperABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bopKeeperABI, TFunctionName>({
    abi: bopKeeperABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bopKeeperABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useBopKeeperAbandonRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bopKeeperABI, 'abandonRole'>['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<TMode, typeof bopKeeperABI, 'abandonRole'> & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bopKeeperABI, 'abandonRole'>({
    abi: bopKeeperABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bopKeeperABI}__ and `functionName` set to `"createPledge"`.
 */
export function useBopKeeperCreatePledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bopKeeperABI, 'createPledge'>['abi'],
        'createPledge'
      > & { functionName?: 'createPledge' }
    : UseContractWriteConfig<TMode, typeof bopKeeperABI, 'createPledge'> & {
        abi?: never
        functionName?: 'createPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bopKeeperABI, 'createPledge'>({
    abi: bopKeeperABI,
    functionName: 'createPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bopKeeperABI}__ and `functionName` set to `"execPledge"`.
 */
export function useBopKeeperExecPledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bopKeeperABI, 'execPledge'>['abi'],
        'execPledge'
      > & { functionName?: 'execPledge' }
    : UseContractWriteConfig<TMode, typeof bopKeeperABI, 'execPledge'> & {
        abi?: never
        functionName?: 'execPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bopKeeperABI, 'execPledge'>({
    abi: bopKeeperABI,
    functionName: 'execPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bopKeeperABI}__ and `functionName` set to `"extendPledge"`.
 */
export function useBopKeeperExtendPledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bopKeeperABI, 'extendPledge'>['abi'],
        'extendPledge'
      > & { functionName?: 'extendPledge' }
    : UseContractWriteConfig<TMode, typeof bopKeeperABI, 'extendPledge'> & {
        abi?: never
        functionName?: 'extendPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bopKeeperABI, 'extendPledge'>({
    abi: bopKeeperABI,
    functionName: 'extendPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bopKeeperABI}__ and `functionName` set to `"grantRole"`.
 */
export function useBopKeeperGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bopKeeperABI, 'grantRole'>['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof bopKeeperABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bopKeeperABI, 'grantRole'>({
    abi: bopKeeperABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bopKeeperABI}__ and `functionName` set to `"init"`.
 */
export function useBopKeeperInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bopKeeperABI, 'init'>['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof bopKeeperABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bopKeeperABI, 'init'>({
    abi: bopKeeperABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bopKeeperABI}__ and `functionName` set to `"lockContents"`.
 */
export function useBopKeeperLockContents<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bopKeeperABI, 'lockContents'>['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<TMode, typeof bopKeeperABI, 'lockContents'> & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bopKeeperABI, 'lockContents'>({
    abi: bopKeeperABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bopKeeperABI}__ and `functionName` set to `"lockPledge"`.
 */
export function useBopKeeperLockPledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bopKeeperABI, 'lockPledge'>['abi'],
        'lockPledge'
      > & { functionName?: 'lockPledge' }
    : UseContractWriteConfig<TMode, typeof bopKeeperABI, 'lockPledge'> & {
        abi?: never
        functionName?: 'lockPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bopKeeperABI, 'lockPledge'>({
    abi: bopKeeperABI,
    functionName: 'lockPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bopKeeperABI}__ and `functionName` set to `"refundDebt"`.
 */
export function useBopKeeperRefundDebt<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bopKeeperABI, 'refundDebt'>['abi'],
        'refundDebt'
      > & { functionName?: 'refundDebt' }
    : UseContractWriteConfig<TMode, typeof bopKeeperABI, 'refundDebt'> & {
        abi?: never
        functionName?: 'refundDebt'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bopKeeperABI, 'refundDebt'>({
    abi: bopKeeperABI,
    functionName: 'refundDebt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bopKeeperABI}__ and `functionName` set to `"releasePledge"`.
 */
export function useBopKeeperReleasePledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bopKeeperABI, 'releasePledge'>['abi'],
        'releasePledge'
      > & { functionName?: 'releasePledge' }
    : UseContractWriteConfig<TMode, typeof bopKeeperABI, 'releasePledge'> & {
        abi?: never
        functionName?: 'releasePledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bopKeeperABI, 'releasePledge'>({
    abi: bopKeeperABI,
    functionName: 'releasePledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bopKeeperABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function useBopKeeperRemoveDirectKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bopKeeperABI,
          'removeDirectKeeper'
        >['abi'],
        'removeDirectKeeper'
      > & { functionName?: 'removeDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof bopKeeperABI,
        'removeDirectKeeper'
      > & {
        abi?: never
        functionName?: 'removeDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bopKeeperABI, 'removeDirectKeeper'>({
    abi: bopKeeperABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bopKeeperABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useBopKeeperRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bopKeeperABI, 'renounceRole'>['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<TMode, typeof bopKeeperABI, 'renounceRole'> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bopKeeperABI, 'renounceRole'>({
    abi: bopKeeperABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bopKeeperABI}__ and `functionName` set to `"revokePledge"`.
 */
export function useBopKeeperRevokePledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bopKeeperABI, 'revokePledge'>['abi'],
        'revokePledge'
      > & { functionName?: 'revokePledge' }
    : UseContractWriteConfig<TMode, typeof bopKeeperABI, 'revokePledge'> & {
        abi?: never
        functionName?: 'revokePledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bopKeeperABI, 'revokePledge'>({
    abi: bopKeeperABI,
    functionName: 'revokePledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bopKeeperABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useBopKeeperRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bopKeeperABI, 'revokeRole'>['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof bopKeeperABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bopKeeperABI, 'revokeRole'>({
    abi: bopKeeperABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bopKeeperABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useBopKeeperSetDirectKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bopKeeperABI,
          'setDirectKeeper'
        >['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<TMode, typeof bopKeeperABI, 'setDirectKeeper'> & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bopKeeperABI, 'setDirectKeeper'>({
    abi: bopKeeperABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bopKeeperABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function useBopKeeperSetGeneralCounsel<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bopKeeperABI,
          'setGeneralCounsel'
        >['abi'],
        'setGeneralCounsel'
      > & { functionName?: 'setGeneralCounsel' }
    : UseContractWriteConfig<
        TMode,
        typeof bopKeeperABI,
        'setGeneralCounsel'
      > & {
        abi?: never
        functionName?: 'setGeneralCounsel'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bopKeeperABI, 'setGeneralCounsel'>({
    abi: bopKeeperABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bopKeeperABI}__ and `functionName` set to `"setOwner"`.
 */
export function useBopKeeperSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bopKeeperABI, 'setOwner'>['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof bopKeeperABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bopKeeperABI, 'setOwner'>({
    abi: bopKeeperABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bopKeeperABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useBopKeeperSetRoleAdmin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bopKeeperABI, 'setRoleAdmin'>['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<TMode, typeof bopKeeperABI, 'setRoleAdmin'> & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bopKeeperABI, 'setRoleAdmin'>({
    abi: bopKeeperABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bopKeeperABI}__ and `functionName` set to `"transferPledge"`.
 */
export function useBopKeeperTransferPledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bopKeeperABI,
          'transferPledge'
        >['abi'],
        'transferPledge'
      > & { functionName?: 'transferPledge' }
    : UseContractWriteConfig<TMode, typeof bopKeeperABI, 'transferPledge'> & {
        abi?: never
        functionName?: 'transferPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bopKeeperABI, 'transferPledge'>({
    abi: bopKeeperABI,
    functionName: 'transferPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bopKeeperABI}__.
 */
export function usePrepareBopKeeperWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bopKeeperABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bopKeeperABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof bopKeeperABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bopKeeperABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareBopKeeperAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bopKeeperABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bopKeeperABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bopKeeperABI, 'abandonRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bopKeeperABI}__ and `functionName` set to `"createPledge"`.
 */
export function usePrepareBopKeeperCreatePledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bopKeeperABI, 'createPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bopKeeperABI,
    functionName: 'createPledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bopKeeperABI, 'createPledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bopKeeperABI}__ and `functionName` set to `"execPledge"`.
 */
export function usePrepareBopKeeperExecPledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bopKeeperABI, 'execPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bopKeeperABI,
    functionName: 'execPledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bopKeeperABI, 'execPledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bopKeeperABI}__ and `functionName` set to `"extendPledge"`.
 */
export function usePrepareBopKeeperExtendPledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bopKeeperABI, 'extendPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bopKeeperABI,
    functionName: 'extendPledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bopKeeperABI, 'extendPledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bopKeeperABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareBopKeeperGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bopKeeperABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bopKeeperABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bopKeeperABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bopKeeperABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareBopKeeperInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bopKeeperABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bopKeeperABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bopKeeperABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bopKeeperABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareBopKeeperLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bopKeeperABI, 'lockContents'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bopKeeperABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bopKeeperABI, 'lockContents'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bopKeeperABI}__ and `functionName` set to `"lockPledge"`.
 */
export function usePrepareBopKeeperLockPledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bopKeeperABI, 'lockPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bopKeeperABI,
    functionName: 'lockPledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bopKeeperABI, 'lockPledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bopKeeperABI}__ and `functionName` set to `"refundDebt"`.
 */
export function usePrepareBopKeeperRefundDebt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bopKeeperABI, 'refundDebt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bopKeeperABI,
    functionName: 'refundDebt',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bopKeeperABI, 'refundDebt'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bopKeeperABI}__ and `functionName` set to `"releasePledge"`.
 */
export function usePrepareBopKeeperReleasePledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bopKeeperABI, 'releasePledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bopKeeperABI,
    functionName: 'releasePledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bopKeeperABI, 'releasePledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bopKeeperABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function usePrepareBopKeeperRemoveDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bopKeeperABI, 'removeDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bopKeeperABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bopKeeperABI, 'removeDirectKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bopKeeperABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareBopKeeperRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bopKeeperABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bopKeeperABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bopKeeperABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bopKeeperABI}__ and `functionName` set to `"revokePledge"`.
 */
export function usePrepareBopKeeperRevokePledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bopKeeperABI, 'revokePledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bopKeeperABI,
    functionName: 'revokePledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bopKeeperABI, 'revokePledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bopKeeperABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareBopKeeperRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bopKeeperABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bopKeeperABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bopKeeperABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bopKeeperABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareBopKeeperSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bopKeeperABI, 'setDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bopKeeperABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bopKeeperABI, 'setDirectKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bopKeeperABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function usePrepareBopKeeperSetGeneralCounsel(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bopKeeperABI, 'setGeneralCounsel'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bopKeeperABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bopKeeperABI, 'setGeneralCounsel'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bopKeeperABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareBopKeeperSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bopKeeperABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bopKeeperABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bopKeeperABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bopKeeperABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareBopKeeperSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bopKeeperABI, 'setRoleAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bopKeeperABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bopKeeperABI, 'setRoleAdmin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bopKeeperABI}__ and `functionName` set to `"transferPledge"`.
 */
export function usePrepareBopKeeperTransferPledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bopKeeperABI, 'transferPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bopKeeperABI,
    functionName: 'transferPledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bopKeeperABI, 'transferPledge'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bopKeeperABI}__.
 */
export function useBopKeeperEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof bopKeeperABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: bopKeeperABI,
    ...config,
  } as UseContractEventConfig<typeof bopKeeperABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bopKeeperABI}__ and `eventName` set to `"Init"`.
 */
export function useBopKeeperInitEvent(
  config: Omit<
    UseContractEventConfig<typeof bopKeeperABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bopKeeperABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof bopKeeperABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bopKeeperABI}__ and `eventName` set to `"LockContents"`.
 */
export function useBopKeeperLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof bopKeeperABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bopKeeperABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof bopKeeperABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bopKeeperABI}__ and `eventName` set to `"RemoveDirectKeeper"`.
 */
export function useBopKeeperRemoveDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof bopKeeperABI, 'RemoveDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bopKeeperABI,
    eventName: 'RemoveDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof bopKeeperABI, 'RemoveDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bopKeeperABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useBopKeeperSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof bopKeeperABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bopKeeperABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof bopKeeperABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bopKeeperABI}__ and `eventName` set to `"SetGeneralCounsel"`.
 */
export function useBopKeeperSetGeneralCounselEvent(
  config: Omit<
    UseContractEventConfig<typeof bopKeeperABI, 'SetGeneralCounsel'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bopKeeperABI,
    eventName: 'SetGeneralCounsel',
    ...config,
  } as UseContractEventConfig<typeof bopKeeperABI, 'SetGeneralCounsel'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bopKeeperABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useBopKeeperSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof bopKeeperABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bopKeeperABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof bopKeeperABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link bosKeeperABI}__.
 */
export function useBosKeeper(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: bosKeeperABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bosKeeperABI}__.
 */
export function useBosKeeperRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof bosKeeperABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof bosKeeperABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: bosKeeperABI,
    ...config,
  } as UseContractReadConfig<typeof bosKeeperABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bosKeeperABI}__ and `functionName` set to `"finalized"`.
 */
export function useBosKeeperFinalized<
  TSelectData = ReadContractResult<typeof bosKeeperABI, 'finalized'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bosKeeperABI, 'finalized', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bosKeeperABI,
    functionName: 'finalized',
    ...config,
  } as UseContractReadConfig<typeof bosKeeperABI, 'finalized', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bosKeeperABI}__ and `functionName` set to `"getBookeeper"`.
 */
export function useBosKeeperGetBookeeper<
  TSelectData = ReadContractResult<typeof bosKeeperABI, 'getBookeeper'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bosKeeperABI, 'getBookeeper', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bosKeeperABI,
    functionName: 'getBookeeper',
    ...config,
  } as UseContractReadConfig<typeof bosKeeperABI, 'getBookeeper', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bosKeeperABI}__ and `functionName` set to `"getGeneralCounsel"`.
 */
export function useBosKeeperGetGeneralCounsel<
  TSelectData = ReadContractResult<typeof bosKeeperABI, 'getGeneralCounsel'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bosKeeperABI,
      'getGeneralCounsel',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bosKeeperABI,
    functionName: 'getGeneralCounsel',
    ...config,
  } as UseContractReadConfig<
    typeof bosKeeperABI,
    'getGeneralCounsel',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bosKeeperABI}__ and `functionName` set to `"getOwner"`.
 */
export function useBosKeeperGetOwner<
  TSelectData = ReadContractResult<typeof bosKeeperABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bosKeeperABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bosKeeperABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<typeof bosKeeperABI, 'getOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bosKeeperABI}__ and `functionName` set to `"hasRole"`.
 */
export function useBosKeeperHasRole<
  TSelectData = ReadContractResult<typeof bosKeeperABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bosKeeperABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bosKeeperABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof bosKeeperABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bosKeeperABI}__.
 */
export function useBosKeeperWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bosKeeperABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof bosKeeperABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bosKeeperABI, TFunctionName>({
    abi: bosKeeperABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bosKeeperABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useBosKeeperAbandonRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bosKeeperABI, 'abandonRole'>['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<TMode, typeof bosKeeperABI, 'abandonRole'> & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bosKeeperABI, 'abandonRole'>({
    abi: bosKeeperABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bosKeeperABI}__ and `functionName` set to `"decreaseCapital"`.
 */
export function useBosKeeperDecreaseCapital<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bosKeeperABI,
          'decreaseCapital'
        >['abi'],
        'decreaseCapital'
      > & { functionName?: 'decreaseCapital' }
    : UseContractWriteConfig<TMode, typeof bosKeeperABI, 'decreaseCapital'> & {
        abi?: never
        functionName?: 'decreaseCapital'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bosKeeperABI, 'decreaseCapital'>({
    abi: bosKeeperABI,
    functionName: 'decreaseCapital',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bosKeeperABI}__ and `functionName` set to `"grantRole"`.
 */
export function useBosKeeperGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bosKeeperABI, 'grantRole'>['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof bosKeeperABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bosKeeperABI, 'grantRole'>({
    abi: bosKeeperABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bosKeeperABI}__ and `functionName` set to `"init"`.
 */
export function useBosKeeperInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bosKeeperABI, 'init'>['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof bosKeeperABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bosKeeperABI, 'init'>({
    abi: bosKeeperABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bosKeeperABI}__ and `functionName` set to `"lockContents"`.
 */
export function useBosKeeperLockContents<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bosKeeperABI, 'lockContents'>['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<TMode, typeof bosKeeperABI, 'lockContents'> & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bosKeeperABI, 'lockContents'>({
    abi: bosKeeperABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bosKeeperABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function useBosKeeperRemoveDirectKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bosKeeperABI,
          'removeDirectKeeper'
        >['abi'],
        'removeDirectKeeper'
      > & { functionName?: 'removeDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof bosKeeperABI,
        'removeDirectKeeper'
      > & {
        abi?: never
        functionName?: 'removeDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bosKeeperABI, 'removeDirectKeeper'>({
    abi: bosKeeperABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bosKeeperABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useBosKeeperRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bosKeeperABI, 'renounceRole'>['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<TMode, typeof bosKeeperABI, 'renounceRole'> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bosKeeperABI, 'renounceRole'>({
    abi: bosKeeperABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bosKeeperABI}__ and `functionName` set to `"requestPaidInCapital"`.
 */
export function useBosKeeperRequestPaidInCapital<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bosKeeperABI,
          'requestPaidInCapital'
        >['abi'],
        'requestPaidInCapital'
      > & { functionName?: 'requestPaidInCapital' }
    : UseContractWriteConfig<
        TMode,
        typeof bosKeeperABI,
        'requestPaidInCapital'
      > & {
        abi?: never
        functionName?: 'requestPaidInCapital'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bosKeeperABI, 'requestPaidInCapital'>({
    abi: bosKeeperABI,
    functionName: 'requestPaidInCapital',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bosKeeperABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useBosKeeperRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bosKeeperABI, 'revokeRole'>['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof bosKeeperABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bosKeeperABI, 'revokeRole'>({
    abi: bosKeeperABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bosKeeperABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useBosKeeperSetDirectKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bosKeeperABI,
          'setDirectKeeper'
        >['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<TMode, typeof bosKeeperABI, 'setDirectKeeper'> & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bosKeeperABI, 'setDirectKeeper'>({
    abi: bosKeeperABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bosKeeperABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function useBosKeeperSetGeneralCounsel<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bosKeeperABI,
          'setGeneralCounsel'
        >['abi'],
        'setGeneralCounsel'
      > & { functionName?: 'setGeneralCounsel' }
    : UseContractWriteConfig<
        TMode,
        typeof bosKeeperABI,
        'setGeneralCounsel'
      > & {
        abi?: never
        functionName?: 'setGeneralCounsel'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bosKeeperABI, 'setGeneralCounsel'>({
    abi: bosKeeperABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bosKeeperABI}__ and `functionName` set to `"setOwner"`.
 */
export function useBosKeeperSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bosKeeperABI, 'setOwner'>['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof bosKeeperABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bosKeeperABI, 'setOwner'>({
    abi: bosKeeperABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bosKeeperABI}__ and `functionName` set to `"setPayInAmt"`.
 */
export function useBosKeeperSetPayInAmt<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bosKeeperABI, 'setPayInAmt'>['abi'],
        'setPayInAmt'
      > & { functionName?: 'setPayInAmt' }
    : UseContractWriteConfig<TMode, typeof bosKeeperABI, 'setPayInAmt'> & {
        abi?: never
        functionName?: 'setPayInAmt'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bosKeeperABI, 'setPayInAmt'>({
    abi: bosKeeperABI,
    functionName: 'setPayInAmt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bosKeeperABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useBosKeeperSetRoleAdmin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bosKeeperABI, 'setRoleAdmin'>['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<TMode, typeof bosKeeperABI, 'setRoleAdmin'> & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bosKeeperABI, 'setRoleAdmin'>({
    abi: bosKeeperABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bosKeeperABI}__ and `functionName` set to `"withdrawPayInAmt"`.
 */
export function useBosKeeperWithdrawPayInAmt<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bosKeeperABI,
          'withdrawPayInAmt'
        >['abi'],
        'withdrawPayInAmt'
      > & { functionName?: 'withdrawPayInAmt' }
    : UseContractWriteConfig<TMode, typeof bosKeeperABI, 'withdrawPayInAmt'> & {
        abi?: never
        functionName?: 'withdrawPayInAmt'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bosKeeperABI, 'withdrawPayInAmt'>({
    abi: bosKeeperABI,
    functionName: 'withdrawPayInAmt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bosKeeperABI}__.
 */
export function usePrepareBosKeeperWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bosKeeperABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bosKeeperABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof bosKeeperABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bosKeeperABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareBosKeeperAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bosKeeperABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bosKeeperABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bosKeeperABI, 'abandonRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bosKeeperABI}__ and `functionName` set to `"decreaseCapital"`.
 */
export function usePrepareBosKeeperDecreaseCapital(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bosKeeperABI, 'decreaseCapital'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bosKeeperABI,
    functionName: 'decreaseCapital',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bosKeeperABI, 'decreaseCapital'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bosKeeperABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareBosKeeperGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bosKeeperABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bosKeeperABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bosKeeperABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bosKeeperABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareBosKeeperInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bosKeeperABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bosKeeperABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bosKeeperABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bosKeeperABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareBosKeeperLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bosKeeperABI, 'lockContents'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bosKeeperABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bosKeeperABI, 'lockContents'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bosKeeperABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function usePrepareBosKeeperRemoveDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bosKeeperABI, 'removeDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bosKeeperABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bosKeeperABI, 'removeDirectKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bosKeeperABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareBosKeeperRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bosKeeperABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bosKeeperABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bosKeeperABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bosKeeperABI}__ and `functionName` set to `"requestPaidInCapital"`.
 */
export function usePrepareBosKeeperRequestPaidInCapital(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bosKeeperABI, 'requestPaidInCapital'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bosKeeperABI,
    functionName: 'requestPaidInCapital',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bosKeeperABI,
    'requestPaidInCapital'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bosKeeperABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareBosKeeperRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bosKeeperABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bosKeeperABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bosKeeperABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bosKeeperABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareBosKeeperSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bosKeeperABI, 'setDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bosKeeperABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bosKeeperABI, 'setDirectKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bosKeeperABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function usePrepareBosKeeperSetGeneralCounsel(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bosKeeperABI, 'setGeneralCounsel'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bosKeeperABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bosKeeperABI, 'setGeneralCounsel'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bosKeeperABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareBosKeeperSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bosKeeperABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bosKeeperABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bosKeeperABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bosKeeperABI}__ and `functionName` set to `"setPayInAmt"`.
 */
export function usePrepareBosKeeperSetPayInAmt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bosKeeperABI, 'setPayInAmt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bosKeeperABI,
    functionName: 'setPayInAmt',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bosKeeperABI, 'setPayInAmt'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bosKeeperABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareBosKeeperSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bosKeeperABI, 'setRoleAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bosKeeperABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bosKeeperABI, 'setRoleAdmin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bosKeeperABI}__ and `functionName` set to `"withdrawPayInAmt"`.
 */
export function usePrepareBosKeeperWithdrawPayInAmt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bosKeeperABI, 'withdrawPayInAmt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bosKeeperABI,
    functionName: 'withdrawPayInAmt',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bosKeeperABI, 'withdrawPayInAmt'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bosKeeperABI}__.
 */
export function useBosKeeperEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof bosKeeperABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: bosKeeperABI,
    ...config,
  } as UseContractEventConfig<typeof bosKeeperABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bosKeeperABI}__ and `eventName` set to `"Init"`.
 */
export function useBosKeeperInitEvent(
  config: Omit<
    UseContractEventConfig<typeof bosKeeperABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bosKeeperABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof bosKeeperABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bosKeeperABI}__ and `eventName` set to `"LockContents"`.
 */
export function useBosKeeperLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof bosKeeperABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bosKeeperABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof bosKeeperABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bosKeeperABI}__ and `eventName` set to `"RemoveDirectKeeper"`.
 */
export function useBosKeeperRemoveDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof bosKeeperABI, 'RemoveDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bosKeeperABI,
    eventName: 'RemoveDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof bosKeeperABI, 'RemoveDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bosKeeperABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useBosKeeperSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof bosKeeperABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bosKeeperABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof bosKeeperABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bosKeeperABI}__ and `eventName` set to `"SetGeneralCounsel"`.
 */
export function useBosKeeperSetGeneralCounselEvent(
  config: Omit<
    UseContractEventConfig<typeof bosKeeperABI, 'SetGeneralCounsel'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bosKeeperABI,
    eventName: 'SetGeneralCounsel',
    ...config,
  } as UseContractEventConfig<typeof bosKeeperABI, 'SetGeneralCounsel'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bosKeeperABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useBosKeeperSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof bosKeeperABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bosKeeperABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof bosKeeperABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iboaKeeperABI}__.
 */
export function useIboaKeeper(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iboaKeeperABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iboaKeeperABI}__.
 */
export function useIboaKeeperWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iboaKeeperABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iboaKeeperABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iboaKeeperABI, TFunctionName>({
    abi: iboaKeeperABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iboaKeeperABI}__ and `functionName` set to `"circulateIA"`.
 */
export function useIboaKeeperCirculateIa<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iboaKeeperABI, 'circulateIA'>['abi'],
        'circulateIA'
      > & { functionName?: 'circulateIA' }
    : UseContractWriteConfig<TMode, typeof iboaKeeperABI, 'circulateIA'> & {
        abi?: never
        functionName?: 'circulateIA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iboaKeeperABI, 'circulateIA'>({
    abi: iboaKeeperABI,
    functionName: 'circulateIA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iboaKeeperABI}__ and `functionName` set to `"closeDeal"`.
 */
export function useIboaKeeperCloseDeal<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iboaKeeperABI, 'closeDeal'>['abi'],
        'closeDeal'
      > & { functionName?: 'closeDeal' }
    : UseContractWriteConfig<TMode, typeof iboaKeeperABI, 'closeDeal'> & {
        abi?: never
        functionName?: 'closeDeal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iboaKeeperABI, 'closeDeal'>({
    abi: iboaKeeperABI,
    functionName: 'closeDeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iboaKeeperABI}__ and `functionName` set to `"createIA"`.
 */
export function useIboaKeeperCreateIa<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iboaKeeperABI, 'createIA'>['abi'],
        'createIA'
      > & { functionName?: 'createIA' }
    : UseContractWriteConfig<TMode, typeof iboaKeeperABI, 'createIA'> & {
        abi?: never
        functionName?: 'createIA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iboaKeeperABI, 'createIA'>({
    abi: iboaKeeperABI,
    functionName: 'createIA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iboaKeeperABI}__ and `functionName` set to `"issueNewShare"`.
 */
export function useIboaKeeperIssueNewShare<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iboaKeeperABI,
          'issueNewShare'
        >['abi'],
        'issueNewShare'
      > & { functionName?: 'issueNewShare' }
    : UseContractWriteConfig<TMode, typeof iboaKeeperABI, 'issueNewShare'> & {
        abi?: never
        functionName?: 'issueNewShare'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iboaKeeperABI, 'issueNewShare'>({
    abi: iboaKeeperABI,
    functionName: 'issueNewShare',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iboaKeeperABI}__ and `functionName` set to `"pushToCoffer"`.
 */
export function useIboaKeeperPushToCoffer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iboaKeeperABI, 'pushToCoffer'>['abi'],
        'pushToCoffer'
      > & { functionName?: 'pushToCoffer' }
    : UseContractWriteConfig<TMode, typeof iboaKeeperABI, 'pushToCoffer'> & {
        abi?: never
        functionName?: 'pushToCoffer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iboaKeeperABI, 'pushToCoffer'>({
    abi: iboaKeeperABI,
    functionName: 'pushToCoffer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iboaKeeperABI}__ and `functionName` set to `"revokeDeal"`.
 */
export function useIboaKeeperRevokeDeal<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iboaKeeperABI, 'revokeDeal'>['abi'],
        'revokeDeal'
      > & { functionName?: 'revokeDeal' }
    : UseContractWriteConfig<TMode, typeof iboaKeeperABI, 'revokeDeal'> & {
        abi?: never
        functionName?: 'revokeDeal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iboaKeeperABI, 'revokeDeal'>({
    abi: iboaKeeperABI,
    functionName: 'revokeDeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iboaKeeperABI}__ and `functionName` set to `"signIA"`.
 */
export function useIboaKeeperSignIa<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iboaKeeperABI, 'signIA'>['abi'],
        'signIA'
      > & { functionName?: 'signIA' }
    : UseContractWriteConfig<TMode, typeof iboaKeeperABI, 'signIA'> & {
        abi?: never
        functionName?: 'signIA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iboaKeeperABI, 'signIA'>({
    abi: iboaKeeperABI,
    functionName: 'signIA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iboaKeeperABI}__ and `functionName` set to `"terminateDeal"`.
 */
export function useIboaKeeperTerminateDeal<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iboaKeeperABI,
          'terminateDeal'
        >['abi'],
        'terminateDeal'
      > & { functionName?: 'terminateDeal' }
    : UseContractWriteConfig<TMode, typeof iboaKeeperABI, 'terminateDeal'> & {
        abi?: never
        functionName?: 'terminateDeal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iboaKeeperABI, 'terminateDeal'>({
    abi: iboaKeeperABI,
    functionName: 'terminateDeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iboaKeeperABI}__ and `functionName` set to `"transferTargetShare"`.
 */
export function useIboaKeeperTransferTargetShare<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iboaKeeperABI,
          'transferTargetShare'
        >['abi'],
        'transferTargetShare'
      > & { functionName?: 'transferTargetShare' }
    : UseContractWriteConfig<
        TMode,
        typeof iboaKeeperABI,
        'transferTargetShare'
      > & {
        abi?: never
        functionName?: 'transferTargetShare'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iboaKeeperABI, 'transferTargetShare'>({
    abi: iboaKeeperABI,
    functionName: 'transferTargetShare',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iboaKeeperABI}__.
 */
export function usePrepareIboaKeeperWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iboaKeeperABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iboaKeeperABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iboaKeeperABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iboaKeeperABI}__ and `functionName` set to `"circulateIA"`.
 */
export function usePrepareIboaKeeperCirculateIa(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iboaKeeperABI, 'circulateIA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iboaKeeperABI,
    functionName: 'circulateIA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iboaKeeperABI, 'circulateIA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iboaKeeperABI}__ and `functionName` set to `"closeDeal"`.
 */
export function usePrepareIboaKeeperCloseDeal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iboaKeeperABI, 'closeDeal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iboaKeeperABI,
    functionName: 'closeDeal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iboaKeeperABI, 'closeDeal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iboaKeeperABI}__ and `functionName` set to `"createIA"`.
 */
export function usePrepareIboaKeeperCreateIa(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iboaKeeperABI, 'createIA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iboaKeeperABI,
    functionName: 'createIA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iboaKeeperABI, 'createIA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iboaKeeperABI}__ and `functionName` set to `"issueNewShare"`.
 */
export function usePrepareIboaKeeperIssueNewShare(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iboaKeeperABI, 'issueNewShare'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iboaKeeperABI,
    functionName: 'issueNewShare',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iboaKeeperABI, 'issueNewShare'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iboaKeeperABI}__ and `functionName` set to `"pushToCoffer"`.
 */
export function usePrepareIboaKeeperPushToCoffer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iboaKeeperABI, 'pushToCoffer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iboaKeeperABI,
    functionName: 'pushToCoffer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iboaKeeperABI, 'pushToCoffer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iboaKeeperABI}__ and `functionName` set to `"revokeDeal"`.
 */
export function usePrepareIboaKeeperRevokeDeal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iboaKeeperABI, 'revokeDeal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iboaKeeperABI,
    functionName: 'revokeDeal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iboaKeeperABI, 'revokeDeal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iboaKeeperABI}__ and `functionName` set to `"signIA"`.
 */
export function usePrepareIboaKeeperSignIa(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iboaKeeperABI, 'signIA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iboaKeeperABI,
    functionName: 'signIA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iboaKeeperABI, 'signIA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iboaKeeperABI}__ and `functionName` set to `"terminateDeal"`.
 */
export function usePrepareIboaKeeperTerminateDeal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iboaKeeperABI, 'terminateDeal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iboaKeeperABI,
    functionName: 'terminateDeal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iboaKeeperABI, 'terminateDeal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iboaKeeperABI}__ and `functionName` set to `"transferTargetShare"`.
 */
export function usePrepareIboaKeeperTransferTargetShare(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iboaKeeperABI, 'transferTargetShare'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iboaKeeperABI,
    functionName: 'transferTargetShare',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iboaKeeperABI,
    'transferTargetShare'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ibodKeeperABI}__.
 */
export function useIbodKeeper(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: ibodKeeperABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibodKeeperABI}__.
 */
export function useIbodKeeperWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ibodKeeperABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ibodKeeperABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ibodKeeperABI, TFunctionName>({
    abi: ibodKeeperABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibodKeeperABI}__ and `functionName` set to `"castVote"`.
 */
export function useIbodKeeperCastVote<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ibodKeeperABI, 'castVote'>['abi'],
        'castVote'
      > & { functionName?: 'castVote' }
    : UseContractWriteConfig<TMode, typeof ibodKeeperABI, 'castVote'> & {
        abi?: never
        functionName?: 'castVote'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ibodKeeperABI, 'castVote'>({
    abi: ibodKeeperABI,
    functionName: 'castVote',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibodKeeperABI}__ and `functionName` set to `"createAction"`.
 */
export function useIbodKeeperCreateAction<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ibodKeeperABI, 'createAction'>['abi'],
        'createAction'
      > & { functionName?: 'createAction' }
    : UseContractWriteConfig<TMode, typeof ibodKeeperABI, 'createAction'> & {
        abi?: never
        functionName?: 'createAction'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ibodKeeperABI, 'createAction'>({
    abi: ibodKeeperABI,
    functionName: 'createAction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibodKeeperABI}__ and `functionName` set to `"createMotionToApproveDoc"`.
 */
export function useIbodKeeperCreateMotionToApproveDoc<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ibodKeeperABI,
          'createMotionToApproveDoc'
        >['abi'],
        'createMotionToApproveDoc'
      > & { functionName?: 'createMotionToApproveDoc' }
    : UseContractWriteConfig<
        TMode,
        typeof ibodKeeperABI,
        'createMotionToApproveDoc'
      > & {
        abi?: never
        functionName?: 'createMotionToApproveDoc'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ibodKeeperABI,
    'createMotionToApproveDoc'
  >({
    abi: ibodKeeperABI,
    functionName: 'createMotionToApproveDoc',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibodKeeperABI}__ and `functionName` set to `"createMotionToRemoveOfficer"`.
 */
export function useIbodKeeperCreateMotionToRemoveOfficer<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ibodKeeperABI,
          'createMotionToRemoveOfficer'
        >['abi'],
        'createMotionToRemoveOfficer'
      > & { functionName?: 'createMotionToRemoveOfficer' }
    : UseContractWriteConfig<
        TMode,
        typeof ibodKeeperABI,
        'createMotionToRemoveOfficer'
      > & {
        abi?: never
        functionName?: 'createMotionToRemoveOfficer'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ibodKeeperABI,
    'createMotionToRemoveOfficer'
  >({
    abi: ibodKeeperABI,
    functionName: 'createMotionToRemoveOfficer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibodKeeperABI}__ and `functionName` set to `"entrustDelegaterForBoardMeeting"`.
 */
export function useIbodKeeperEntrustDelegaterForBoardMeeting<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ibodKeeperABI,
          'entrustDelegaterForBoardMeeting'
        >['abi'],
        'entrustDelegaterForBoardMeeting'
      > & { functionName?: 'entrustDelegaterForBoardMeeting' }
    : UseContractWriteConfig<
        TMode,
        typeof ibodKeeperABI,
        'entrustDelegaterForBoardMeeting'
      > & {
        abi?: never
        functionName?: 'entrustDelegaterForBoardMeeting'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ibodKeeperABI,
    'entrustDelegaterForBoardMeeting'
  >({
    abi: ibodKeeperABI,
    functionName: 'entrustDelegaterForBoardMeeting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibodKeeperABI}__ and `functionName` set to `"execAction"`.
 */
export function useIbodKeeperExecAction<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ibodKeeperABI, 'execAction'>['abi'],
        'execAction'
      > & { functionName?: 'execAction' }
    : UseContractWriteConfig<TMode, typeof ibodKeeperABI, 'execAction'> & {
        abi?: never
        functionName?: 'execAction'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ibodKeeperABI, 'execAction'>({
    abi: ibodKeeperABI,
    functionName: 'execAction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibodKeeperABI}__ and `functionName` set to `"nominateOfficer"`.
 */
export function useIbodKeeperNominateOfficer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ibodKeeperABI,
          'nominateOfficer'
        >['abi'],
        'nominateOfficer'
      > & { functionName?: 'nominateOfficer' }
    : UseContractWriteConfig<TMode, typeof ibodKeeperABI, 'nominateOfficer'> & {
        abi?: never
        functionName?: 'nominateOfficer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ibodKeeperABI, 'nominateOfficer'>({
    abi: ibodKeeperABI,
    functionName: 'nominateOfficer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibodKeeperABI}__ and `functionName` set to `"proposeMotionToBoard"`.
 */
export function useIbodKeeperProposeMotionToBoard<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ibodKeeperABI,
          'proposeMotionToBoard'
        >['abi'],
        'proposeMotionToBoard'
      > & { functionName?: 'proposeMotionToBoard' }
    : UseContractWriteConfig<
        TMode,
        typeof ibodKeeperABI,
        'proposeMotionToBoard'
      > & {
        abi?: never
        functionName?: 'proposeMotionToBoard'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ibodKeeperABI, 'proposeMotionToBoard'>({
    abi: ibodKeeperABI,
    functionName: 'proposeMotionToBoard',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibodKeeperABI}__ and `functionName` set to `"quitPosition"`.
 */
export function useIbodKeeperQuitPosition<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ibodKeeperABI, 'quitPosition'>['abi'],
        'quitPosition'
      > & { functionName?: 'quitPosition' }
    : UseContractWriteConfig<TMode, typeof ibodKeeperABI, 'quitPosition'> & {
        abi?: never
        functionName?: 'quitPosition'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ibodKeeperABI, 'quitPosition'>({
    abi: ibodKeeperABI,
    functionName: 'quitPosition',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibodKeeperABI}__ and `functionName` set to `"removeOfficer"`.
 */
export function useIbodKeeperRemoveOfficer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ibodKeeperABI,
          'removeOfficer'
        >['abi'],
        'removeOfficer'
      > & { functionName?: 'removeOfficer' }
    : UseContractWriteConfig<TMode, typeof ibodKeeperABI, 'removeOfficer'> & {
        abi?: never
        functionName?: 'removeOfficer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ibodKeeperABI, 'removeOfficer'>({
    abi: ibodKeeperABI,
    functionName: 'removeOfficer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibodKeeperABI}__ and `functionName` set to `"takePosition"`.
 */
export function useIbodKeeperTakePosition<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ibodKeeperABI, 'takePosition'>['abi'],
        'takePosition'
      > & { functionName?: 'takePosition' }
    : UseContractWriteConfig<TMode, typeof ibodKeeperABI, 'takePosition'> & {
        abi?: never
        functionName?: 'takePosition'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ibodKeeperABI, 'takePosition'>({
    abi: ibodKeeperABI,
    functionName: 'takePosition',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibodKeeperABI}__ and `functionName` set to `"voteCounting"`.
 */
export function useIbodKeeperVoteCounting<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ibodKeeperABI, 'voteCounting'>['abi'],
        'voteCounting'
      > & { functionName?: 'voteCounting' }
    : UseContractWriteConfig<TMode, typeof ibodKeeperABI, 'voteCounting'> & {
        abi?: never
        functionName?: 'voteCounting'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ibodKeeperABI, 'voteCounting'>({
    abi: ibodKeeperABI,
    functionName: 'voteCounting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibodKeeperABI}__.
 */
export function usePrepareIbodKeeperWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ibodKeeperABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibodKeeperABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ibodKeeperABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibodKeeperABI}__ and `functionName` set to `"castVote"`.
 */
export function usePrepareIbodKeeperCastVote(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ibodKeeperABI, 'castVote'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibodKeeperABI,
    functionName: 'castVote',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ibodKeeperABI, 'castVote'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibodKeeperABI}__ and `functionName` set to `"createAction"`.
 */
export function usePrepareIbodKeeperCreateAction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ibodKeeperABI, 'createAction'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibodKeeperABI,
    functionName: 'createAction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ibodKeeperABI, 'createAction'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibodKeeperABI}__ and `functionName` set to `"createMotionToApproveDoc"`.
 */
export function usePrepareIbodKeeperCreateMotionToApproveDoc(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ibodKeeperABI,
      'createMotionToApproveDoc'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibodKeeperABI,
    functionName: 'createMotionToApproveDoc',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ibodKeeperABI,
    'createMotionToApproveDoc'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibodKeeperABI}__ and `functionName` set to `"createMotionToRemoveOfficer"`.
 */
export function usePrepareIbodKeeperCreateMotionToRemoveOfficer(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ibodKeeperABI,
      'createMotionToRemoveOfficer'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibodKeeperABI,
    functionName: 'createMotionToRemoveOfficer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ibodKeeperABI,
    'createMotionToRemoveOfficer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibodKeeperABI}__ and `functionName` set to `"entrustDelegaterForBoardMeeting"`.
 */
export function usePrepareIbodKeeperEntrustDelegaterForBoardMeeting(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ibodKeeperABI,
      'entrustDelegaterForBoardMeeting'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibodKeeperABI,
    functionName: 'entrustDelegaterForBoardMeeting',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ibodKeeperABI,
    'entrustDelegaterForBoardMeeting'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibodKeeperABI}__ and `functionName` set to `"execAction"`.
 */
export function usePrepareIbodKeeperExecAction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ibodKeeperABI, 'execAction'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibodKeeperABI,
    functionName: 'execAction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ibodKeeperABI, 'execAction'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibodKeeperABI}__ and `functionName` set to `"nominateOfficer"`.
 */
export function usePrepareIbodKeeperNominateOfficer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ibodKeeperABI, 'nominateOfficer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibodKeeperABI,
    functionName: 'nominateOfficer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ibodKeeperABI, 'nominateOfficer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibodKeeperABI}__ and `functionName` set to `"proposeMotionToBoard"`.
 */
export function usePrepareIbodKeeperProposeMotionToBoard(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ibodKeeperABI, 'proposeMotionToBoard'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibodKeeperABI,
    functionName: 'proposeMotionToBoard',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ibodKeeperABI,
    'proposeMotionToBoard'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibodKeeperABI}__ and `functionName` set to `"quitPosition"`.
 */
export function usePrepareIbodKeeperQuitPosition(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ibodKeeperABI, 'quitPosition'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibodKeeperABI,
    functionName: 'quitPosition',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ibodKeeperABI, 'quitPosition'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibodKeeperABI}__ and `functionName` set to `"removeOfficer"`.
 */
export function usePrepareIbodKeeperRemoveOfficer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ibodKeeperABI, 'removeOfficer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibodKeeperABI,
    functionName: 'removeOfficer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ibodKeeperABI, 'removeOfficer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibodKeeperABI}__ and `functionName` set to `"takePosition"`.
 */
export function usePrepareIbodKeeperTakePosition(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ibodKeeperABI, 'takePosition'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibodKeeperABI,
    functionName: 'takePosition',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ibodKeeperABI, 'takePosition'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibodKeeperABI}__ and `functionName` set to `"voteCounting"`.
 */
export function usePrepareIbodKeeperVoteCounting(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ibodKeeperABI, 'voteCounting'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibodKeeperABI,
    functionName: 'voteCounting',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ibodKeeperABI, 'voteCounting'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ibogKeeperABI}__.
 */
export function useIbogKeeper(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: ibogKeeperABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibogKeeperABI}__.
 */
export function useIbogKeeperWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ibogKeeperABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ibogKeeperABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ibogKeeperABI, TFunctionName>({
    abi: ibogKeeperABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibogKeeperABI}__ and `functionName` set to `"castVoteOfGM"`.
 */
export function useIbogKeeperCastVoteOfGm<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ibogKeeperABI, 'castVoteOfGM'>['abi'],
        'castVoteOfGM'
      > & { functionName?: 'castVoteOfGM' }
    : UseContractWriteConfig<TMode, typeof ibogKeeperABI, 'castVoteOfGM'> & {
        abi?: never
        functionName?: 'castVoteOfGM'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ibogKeeperABI, 'castVoteOfGM'>({
    abi: ibogKeeperABI,
    functionName: 'castVoteOfGM',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibogKeeperABI}__ and `functionName` set to `"createActionOfGM"`.
 */
export function useIbogKeeperCreateActionOfGm<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ibogKeeperABI,
          'createActionOfGM'
        >['abi'],
        'createActionOfGM'
      > & { functionName?: 'createActionOfGM' }
    : UseContractWriteConfig<
        TMode,
        typeof ibogKeeperABI,
        'createActionOfGM'
      > & {
        abi?: never
        functionName?: 'createActionOfGM'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ibogKeeperABI, 'createActionOfGM'>({
    abi: ibogKeeperABI,
    functionName: 'createActionOfGM',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibogKeeperABI}__ and `functionName` set to `"createMotionToRemoveDirector"`.
 */
export function useIbogKeeperCreateMotionToRemoveDirector<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ibogKeeperABI,
          'createMotionToRemoveDirector'
        >['abi'],
        'createMotionToRemoveDirector'
      > & { functionName?: 'createMotionToRemoveDirector' }
    : UseContractWriteConfig<
        TMode,
        typeof ibogKeeperABI,
        'createMotionToRemoveDirector'
      > & {
        abi?: never
        functionName?: 'createMotionToRemoveDirector'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ibogKeeperABI,
    'createMotionToRemoveDirector'
  >({
    abi: ibogKeeperABI,
    functionName: 'createMotionToRemoveDirector',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibogKeeperABI}__ and `functionName` set to `"entrustDelegaterForGeneralMeeting"`.
 */
export function useIbogKeeperEntrustDelegaterForGeneralMeeting<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ibogKeeperABI,
          'entrustDelegaterForGeneralMeeting'
        >['abi'],
        'entrustDelegaterForGeneralMeeting'
      > & { functionName?: 'entrustDelegaterForGeneralMeeting' }
    : UseContractWriteConfig<
        TMode,
        typeof ibogKeeperABI,
        'entrustDelegaterForGeneralMeeting'
      > & {
        abi?: never
        functionName?: 'entrustDelegaterForGeneralMeeting'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ibogKeeperABI,
    'entrustDelegaterForGeneralMeeting'
  >({
    abi: ibogKeeperABI,
    functionName: 'entrustDelegaterForGeneralMeeting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibogKeeperABI}__ and `functionName` set to `"execActionOfGM"`.
 */
export function useIbogKeeperExecActionOfGm<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ibogKeeperABI,
          'execActionOfGM'
        >['abi'],
        'execActionOfGM'
      > & { functionName?: 'execActionOfGM' }
    : UseContractWriteConfig<TMode, typeof ibogKeeperABI, 'execActionOfGM'> & {
        abi?: never
        functionName?: 'execActionOfGM'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ibogKeeperABI, 'execActionOfGM'>({
    abi: ibogKeeperABI,
    functionName: 'execActionOfGM',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibogKeeperABI}__ and `functionName` set to `"nominateDirector"`.
 */
export function useIbogKeeperNominateDirector<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ibogKeeperABI,
          'nominateDirector'
        >['abi'],
        'nominateDirector'
      > & { functionName?: 'nominateDirector' }
    : UseContractWriteConfig<
        TMode,
        typeof ibogKeeperABI,
        'nominateDirector'
      > & {
        abi?: never
        functionName?: 'nominateDirector'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ibogKeeperABI, 'nominateDirector'>({
    abi: ibogKeeperABI,
    functionName: 'nominateDirector',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibogKeeperABI}__ and `functionName` set to `"proposeDocOfGM"`.
 */
export function useIbogKeeperProposeDocOfGm<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ibogKeeperABI,
          'proposeDocOfGM'
        >['abi'],
        'proposeDocOfGM'
      > & { functionName?: 'proposeDocOfGM' }
    : UseContractWriteConfig<TMode, typeof ibogKeeperABI, 'proposeDocOfGM'> & {
        abi?: never
        functionName?: 'proposeDocOfGM'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ibogKeeperABI, 'proposeDocOfGM'>({
    abi: ibogKeeperABI,
    functionName: 'proposeDocOfGM',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibogKeeperABI}__ and `functionName` set to `"proposeMotionToGeneralMeeting"`.
 */
export function useIbogKeeperProposeMotionToGeneralMeeting<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ibogKeeperABI,
          'proposeMotionToGeneralMeeting'
        >['abi'],
        'proposeMotionToGeneralMeeting'
      > & { functionName?: 'proposeMotionToGeneralMeeting' }
    : UseContractWriteConfig<
        TMode,
        typeof ibogKeeperABI,
        'proposeMotionToGeneralMeeting'
      > & {
        abi?: never
        functionName?: 'proposeMotionToGeneralMeeting'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ibogKeeperABI,
    'proposeMotionToGeneralMeeting'
  >({
    abi: ibogKeeperABI,
    functionName: 'proposeMotionToGeneralMeeting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibogKeeperABI}__ and `functionName` set to `"removeDirector"`.
 */
export function useIbogKeeperRemoveDirector<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ibogKeeperABI,
          'removeDirector'
        >['abi'],
        'removeDirector'
      > & { functionName?: 'removeDirector' }
    : UseContractWriteConfig<TMode, typeof ibogKeeperABI, 'removeDirector'> & {
        abi?: never
        functionName?: 'removeDirector'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ibogKeeperABI, 'removeDirector'>({
    abi: ibogKeeperABI,
    functionName: 'removeDirector',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibogKeeperABI}__ and `functionName` set to `"takeSeat"`.
 */
export function useIbogKeeperTakeSeat<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ibogKeeperABI, 'takeSeat'>['abi'],
        'takeSeat'
      > & { functionName?: 'takeSeat' }
    : UseContractWriteConfig<TMode, typeof ibogKeeperABI, 'takeSeat'> & {
        abi?: never
        functionName?: 'takeSeat'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ibogKeeperABI, 'takeSeat'>({
    abi: ibogKeeperABI,
    functionName: 'takeSeat',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibogKeeperABI}__ and `functionName` set to `"voteCountingOfGM"`.
 */
export function useIbogKeeperVoteCountingOfGm<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ibogKeeperABI,
          'voteCountingOfGM'
        >['abi'],
        'voteCountingOfGM'
      > & { functionName?: 'voteCountingOfGM' }
    : UseContractWriteConfig<
        TMode,
        typeof ibogKeeperABI,
        'voteCountingOfGM'
      > & {
        abi?: never
        functionName?: 'voteCountingOfGM'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ibogKeeperABI, 'voteCountingOfGM'>({
    abi: ibogKeeperABI,
    functionName: 'voteCountingOfGM',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibogKeeperABI}__.
 */
export function usePrepareIbogKeeperWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ibogKeeperABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibogKeeperABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ibogKeeperABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibogKeeperABI}__ and `functionName` set to `"castVoteOfGM"`.
 */
export function usePrepareIbogKeeperCastVoteOfGm(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ibogKeeperABI, 'castVoteOfGM'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibogKeeperABI,
    functionName: 'castVoteOfGM',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ibogKeeperABI, 'castVoteOfGM'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibogKeeperABI}__ and `functionName` set to `"createActionOfGM"`.
 */
export function usePrepareIbogKeeperCreateActionOfGm(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ibogKeeperABI, 'createActionOfGM'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibogKeeperABI,
    functionName: 'createActionOfGM',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ibogKeeperABI, 'createActionOfGM'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibogKeeperABI}__ and `functionName` set to `"createMotionToRemoveDirector"`.
 */
export function usePrepareIbogKeeperCreateMotionToRemoveDirector(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ibogKeeperABI,
      'createMotionToRemoveDirector'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibogKeeperABI,
    functionName: 'createMotionToRemoveDirector',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ibogKeeperABI,
    'createMotionToRemoveDirector'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibogKeeperABI}__ and `functionName` set to `"entrustDelegaterForGeneralMeeting"`.
 */
export function usePrepareIbogKeeperEntrustDelegaterForGeneralMeeting(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ibogKeeperABI,
      'entrustDelegaterForGeneralMeeting'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibogKeeperABI,
    functionName: 'entrustDelegaterForGeneralMeeting',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ibogKeeperABI,
    'entrustDelegaterForGeneralMeeting'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibogKeeperABI}__ and `functionName` set to `"execActionOfGM"`.
 */
export function usePrepareIbogKeeperExecActionOfGm(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ibogKeeperABI, 'execActionOfGM'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibogKeeperABI,
    functionName: 'execActionOfGM',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ibogKeeperABI, 'execActionOfGM'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibogKeeperABI}__ and `functionName` set to `"nominateDirector"`.
 */
export function usePrepareIbogKeeperNominateDirector(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ibogKeeperABI, 'nominateDirector'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibogKeeperABI,
    functionName: 'nominateDirector',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ibogKeeperABI, 'nominateDirector'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibogKeeperABI}__ and `functionName` set to `"proposeDocOfGM"`.
 */
export function usePrepareIbogKeeperProposeDocOfGm(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ibogKeeperABI, 'proposeDocOfGM'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibogKeeperABI,
    functionName: 'proposeDocOfGM',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ibogKeeperABI, 'proposeDocOfGM'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibogKeeperABI}__ and `functionName` set to `"proposeMotionToGeneralMeeting"`.
 */
export function usePrepareIbogKeeperProposeMotionToGeneralMeeting(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ibogKeeperABI,
      'proposeMotionToGeneralMeeting'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibogKeeperABI,
    functionName: 'proposeMotionToGeneralMeeting',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ibogKeeperABI,
    'proposeMotionToGeneralMeeting'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibogKeeperABI}__ and `functionName` set to `"removeDirector"`.
 */
export function usePrepareIbogKeeperRemoveDirector(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ibogKeeperABI, 'removeDirector'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibogKeeperABI,
    functionName: 'removeDirector',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ibogKeeperABI, 'removeDirector'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibogKeeperABI}__ and `functionName` set to `"takeSeat"`.
 */
export function usePrepareIbogKeeperTakeSeat(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ibogKeeperABI, 'takeSeat'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibogKeeperABI,
    functionName: 'takeSeat',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ibogKeeperABI, 'takeSeat'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibogKeeperABI}__ and `functionName` set to `"voteCountingOfGM"`.
 */
export function usePrepareIbogKeeperVoteCountingOfGm(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ibogKeeperABI, 'voteCountingOfGM'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibogKeeperABI,
    functionName: 'voteCountingOfGM',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ibogKeeperABI, 'voteCountingOfGM'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ibohKeeperABI}__.
 */
export function useIbohKeeper(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: ibohKeeperABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibohKeeperABI}__.
 */
export function useIbohKeeperWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ibohKeeperABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ibohKeeperABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ibohKeeperABI, TFunctionName>({
    abi: ibohKeeperABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibohKeeperABI}__ and `functionName` set to `"acceptSHA"`.
 */
export function useIbohKeeperAcceptSha<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ibohKeeperABI, 'acceptSHA'>['abi'],
        'acceptSHA'
      > & { functionName?: 'acceptSHA' }
    : UseContractWriteConfig<TMode, typeof ibohKeeperABI, 'acceptSHA'> & {
        abi?: never
        functionName?: 'acceptSHA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ibohKeeperABI, 'acceptSHA'>({
    abi: ibohKeeperABI,
    functionName: 'acceptSHA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibohKeeperABI}__ and `functionName` set to `"activateSHA"`.
 */
export function useIbohKeeperActivateSha<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ibohKeeperABI, 'activateSHA'>['abi'],
        'activateSHA'
      > & { functionName?: 'activateSHA' }
    : UseContractWriteConfig<TMode, typeof ibohKeeperABI, 'activateSHA'> & {
        abi?: never
        functionName?: 'activateSHA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ibohKeeperABI, 'activateSHA'>({
    abi: ibohKeeperABI,
    functionName: 'activateSHA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibohKeeperABI}__ and `functionName` set to `"circulateSHA"`.
 */
export function useIbohKeeperCirculateSha<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ibohKeeperABI, 'circulateSHA'>['abi'],
        'circulateSHA'
      > & { functionName?: 'circulateSHA' }
    : UseContractWriteConfig<TMode, typeof ibohKeeperABI, 'circulateSHA'> & {
        abi?: never
        functionName?: 'circulateSHA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ibohKeeperABI, 'circulateSHA'>({
    abi: ibohKeeperABI,
    functionName: 'circulateSHA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibohKeeperABI}__ and `functionName` set to `"createSHA"`.
 */
export function useIbohKeeperCreateSha<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ibohKeeperABI, 'createSHA'>['abi'],
        'createSHA'
      > & { functionName?: 'createSHA' }
    : UseContractWriteConfig<TMode, typeof ibohKeeperABI, 'createSHA'> & {
        abi?: never
        functionName?: 'createSHA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ibohKeeperABI, 'createSHA'>({
    abi: ibohKeeperABI,
    functionName: 'createSHA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibohKeeperABI}__ and `functionName` set to `"signSHA"`.
 */
export function useIbohKeeperSignSha<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ibohKeeperABI, 'signSHA'>['abi'],
        'signSHA'
      > & { functionName?: 'signSHA' }
    : UseContractWriteConfig<TMode, typeof ibohKeeperABI, 'signSHA'> & {
        abi?: never
        functionName?: 'signSHA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ibohKeeperABI, 'signSHA'>({
    abi: ibohKeeperABI,
    functionName: 'signSHA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibohKeeperABI}__.
 */
export function usePrepareIbohKeeperWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ibohKeeperABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibohKeeperABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ibohKeeperABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibohKeeperABI}__ and `functionName` set to `"acceptSHA"`.
 */
export function usePrepareIbohKeeperAcceptSha(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ibohKeeperABI, 'acceptSHA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibohKeeperABI,
    functionName: 'acceptSHA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ibohKeeperABI, 'acceptSHA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibohKeeperABI}__ and `functionName` set to `"activateSHA"`.
 */
export function usePrepareIbohKeeperActivateSha(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ibohKeeperABI, 'activateSHA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibohKeeperABI,
    functionName: 'activateSHA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ibohKeeperABI, 'activateSHA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibohKeeperABI}__ and `functionName` set to `"circulateSHA"`.
 */
export function usePrepareIbohKeeperCirculateSha(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ibohKeeperABI, 'circulateSHA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibohKeeperABI,
    functionName: 'circulateSHA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ibohKeeperABI, 'circulateSHA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibohKeeperABI}__ and `functionName` set to `"createSHA"`.
 */
export function usePrepareIbohKeeperCreateSha(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ibohKeeperABI, 'createSHA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibohKeeperABI,
    functionName: 'createSHA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ibohKeeperABI, 'createSHA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibohKeeperABI}__ and `functionName` set to `"signSHA"`.
 */
export function usePrepareIbohKeeperSignSha(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ibohKeeperABI, 'signSHA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibohKeeperABI,
    functionName: 'signSHA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ibohKeeperABI, 'signSHA'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ibooKeeperABI}__.
 */
export function useIbooKeeper(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: ibooKeeperABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibooKeeperABI}__.
 */
export function useIbooKeeperWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ibooKeeperABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ibooKeeperABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ibooKeeperABI, TFunctionName>({
    abi: ibooKeeperABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibooKeeperABI}__ and `functionName` set to `"execOption"`.
 */
export function useIbooKeeperExecOption<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ibooKeeperABI, 'execOption'>['abi'],
        'execOption'
      > & { functionName?: 'execOption' }
    : UseContractWriteConfig<TMode, typeof ibooKeeperABI, 'execOption'> & {
        abi?: never
        functionName?: 'execOption'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ibooKeeperABI, 'execOption'>({
    abi: ibooKeeperABI,
    functionName: 'execOption',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibooKeeperABI}__ and `functionName` set to `"execSwapOrder"`.
 */
export function useIbooKeeperExecSwapOrder<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ibooKeeperABI,
          'execSwapOrder'
        >['abi'],
        'execSwapOrder'
      > & { functionName?: 'execSwapOrder' }
    : UseContractWriteConfig<TMode, typeof ibooKeeperABI, 'execSwapOrder'> & {
        abi?: never
        functionName?: 'execSwapOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ibooKeeperABI, 'execSwapOrder'>({
    abi: ibooKeeperABI,
    functionName: 'execSwapOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibooKeeperABI}__ and `functionName` set to `"lockSwapOrder"`.
 */
export function useIbooKeeperLockSwapOrder<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ibooKeeperABI,
          'lockSwapOrder'
        >['abi'],
        'lockSwapOrder'
      > & { functionName?: 'lockSwapOrder' }
    : UseContractWriteConfig<TMode, typeof ibooKeeperABI, 'lockSwapOrder'> & {
        abi?: never
        functionName?: 'lockSwapOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ibooKeeperABI, 'lockSwapOrder'>({
    abi: ibooKeeperABI,
    functionName: 'lockSwapOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibooKeeperABI}__ and `functionName` set to `"placeSwapOrder"`.
 */
export function useIbooKeeperPlaceSwapOrder<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ibooKeeperABI,
          'placeSwapOrder'
        >['abi'],
        'placeSwapOrder'
      > & { functionName?: 'placeSwapOrder' }
    : UseContractWriteConfig<TMode, typeof ibooKeeperABI, 'placeSwapOrder'> & {
        abi?: never
        functionName?: 'placeSwapOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ibooKeeperABI, 'placeSwapOrder'>({
    abi: ibooKeeperABI,
    functionName: 'placeSwapOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibooKeeperABI}__ and `functionName` set to `"releaseSwapOrder"`.
 */
export function useIbooKeeperReleaseSwapOrder<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ibooKeeperABI,
          'releaseSwapOrder'
        >['abi'],
        'releaseSwapOrder'
      > & { functionName?: 'releaseSwapOrder' }
    : UseContractWriteConfig<
        TMode,
        typeof ibooKeeperABI,
        'releaseSwapOrder'
      > & {
        abi?: never
        functionName?: 'releaseSwapOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ibooKeeperABI, 'releaseSwapOrder'>({
    abi: ibooKeeperABI,
    functionName: 'releaseSwapOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibooKeeperABI}__ and `functionName` set to `"revokeSwapOrder"`.
 */
export function useIbooKeeperRevokeSwapOrder<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ibooKeeperABI,
          'revokeSwapOrder'
        >['abi'],
        'revokeSwapOrder'
      > & { functionName?: 'revokeSwapOrder' }
    : UseContractWriteConfig<TMode, typeof ibooKeeperABI, 'revokeSwapOrder'> & {
        abi?: never
        functionName?: 'revokeSwapOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ibooKeeperABI, 'revokeSwapOrder'>({
    abi: ibooKeeperABI,
    functionName: 'revokeSwapOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibooKeeperABI}__ and `functionName` set to `"updateOracle"`.
 */
export function useIbooKeeperUpdateOracle<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ibooKeeperABI, 'updateOracle'>['abi'],
        'updateOracle'
      > & { functionName?: 'updateOracle' }
    : UseContractWriteConfig<TMode, typeof ibooKeeperABI, 'updateOracle'> & {
        abi?: never
        functionName?: 'updateOracle'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ibooKeeperABI, 'updateOracle'>({
    abi: ibooKeeperABI,
    functionName: 'updateOracle',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibooKeeperABI}__.
 */
export function usePrepareIbooKeeperWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ibooKeeperABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibooKeeperABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ibooKeeperABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibooKeeperABI}__ and `functionName` set to `"execOption"`.
 */
export function usePrepareIbooKeeperExecOption(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ibooKeeperABI, 'execOption'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibooKeeperABI,
    functionName: 'execOption',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ibooKeeperABI, 'execOption'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibooKeeperABI}__ and `functionName` set to `"execSwapOrder"`.
 */
export function usePrepareIbooKeeperExecSwapOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ibooKeeperABI, 'execSwapOrder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibooKeeperABI,
    functionName: 'execSwapOrder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ibooKeeperABI, 'execSwapOrder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibooKeeperABI}__ and `functionName` set to `"lockSwapOrder"`.
 */
export function usePrepareIbooKeeperLockSwapOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ibooKeeperABI, 'lockSwapOrder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibooKeeperABI,
    functionName: 'lockSwapOrder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ibooKeeperABI, 'lockSwapOrder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibooKeeperABI}__ and `functionName` set to `"placeSwapOrder"`.
 */
export function usePrepareIbooKeeperPlaceSwapOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ibooKeeperABI, 'placeSwapOrder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibooKeeperABI,
    functionName: 'placeSwapOrder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ibooKeeperABI, 'placeSwapOrder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibooKeeperABI}__ and `functionName` set to `"releaseSwapOrder"`.
 */
export function usePrepareIbooKeeperReleaseSwapOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ibooKeeperABI, 'releaseSwapOrder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibooKeeperABI,
    functionName: 'releaseSwapOrder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ibooKeeperABI, 'releaseSwapOrder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibooKeeperABI}__ and `functionName` set to `"revokeSwapOrder"`.
 */
export function usePrepareIbooKeeperRevokeSwapOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ibooKeeperABI, 'revokeSwapOrder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibooKeeperABI,
    functionName: 'revokeSwapOrder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ibooKeeperABI, 'revokeSwapOrder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibooKeeperABI}__ and `functionName` set to `"updateOracle"`.
 */
export function usePrepareIbooKeeperUpdateOracle(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ibooKeeperABI, 'updateOracle'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibooKeeperABI,
    functionName: 'updateOracle',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ibooKeeperABI, 'updateOracle'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ibopKeeperABI}__.
 */
export function useIbopKeeper(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: ibopKeeperABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibopKeeperABI}__.
 */
export function useIbopKeeperWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ibopKeeperABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ibopKeeperABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ibopKeeperABI, TFunctionName>({
    abi: ibopKeeperABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibopKeeperABI}__ and `functionName` set to `"createPledge"`.
 */
export function useIbopKeeperCreatePledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ibopKeeperABI, 'createPledge'>['abi'],
        'createPledge'
      > & { functionName?: 'createPledge' }
    : UseContractWriteConfig<TMode, typeof ibopKeeperABI, 'createPledge'> & {
        abi?: never
        functionName?: 'createPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ibopKeeperABI, 'createPledge'>({
    abi: ibopKeeperABI,
    functionName: 'createPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibopKeeperABI}__ and `functionName` set to `"execPledge"`.
 */
export function useIbopKeeperExecPledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ibopKeeperABI, 'execPledge'>['abi'],
        'execPledge'
      > & { functionName?: 'execPledge' }
    : UseContractWriteConfig<TMode, typeof ibopKeeperABI, 'execPledge'> & {
        abi?: never
        functionName?: 'execPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ibopKeeperABI, 'execPledge'>({
    abi: ibopKeeperABI,
    functionName: 'execPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibopKeeperABI}__ and `functionName` set to `"extendPledge"`.
 */
export function useIbopKeeperExtendPledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ibopKeeperABI, 'extendPledge'>['abi'],
        'extendPledge'
      > & { functionName?: 'extendPledge' }
    : UseContractWriteConfig<TMode, typeof ibopKeeperABI, 'extendPledge'> & {
        abi?: never
        functionName?: 'extendPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ibopKeeperABI, 'extendPledge'>({
    abi: ibopKeeperABI,
    functionName: 'extendPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibopKeeperABI}__ and `functionName` set to `"lockPledge"`.
 */
export function useIbopKeeperLockPledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ibopKeeperABI, 'lockPledge'>['abi'],
        'lockPledge'
      > & { functionName?: 'lockPledge' }
    : UseContractWriteConfig<TMode, typeof ibopKeeperABI, 'lockPledge'> & {
        abi?: never
        functionName?: 'lockPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ibopKeeperABI, 'lockPledge'>({
    abi: ibopKeeperABI,
    functionName: 'lockPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibopKeeperABI}__ and `functionName` set to `"refundDebt"`.
 */
export function useIbopKeeperRefundDebt<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ibopKeeperABI, 'refundDebt'>['abi'],
        'refundDebt'
      > & { functionName?: 'refundDebt' }
    : UseContractWriteConfig<TMode, typeof ibopKeeperABI, 'refundDebt'> & {
        abi?: never
        functionName?: 'refundDebt'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ibopKeeperABI, 'refundDebt'>({
    abi: ibopKeeperABI,
    functionName: 'refundDebt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibopKeeperABI}__ and `functionName` set to `"releasePledge"`.
 */
export function useIbopKeeperReleasePledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ibopKeeperABI,
          'releasePledge'
        >['abi'],
        'releasePledge'
      > & { functionName?: 'releasePledge' }
    : UseContractWriteConfig<TMode, typeof ibopKeeperABI, 'releasePledge'> & {
        abi?: never
        functionName?: 'releasePledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ibopKeeperABI, 'releasePledge'>({
    abi: ibopKeeperABI,
    functionName: 'releasePledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibopKeeperABI}__ and `functionName` set to `"revokePledge"`.
 */
export function useIbopKeeperRevokePledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ibopKeeperABI, 'revokePledge'>['abi'],
        'revokePledge'
      > & { functionName?: 'revokePledge' }
    : UseContractWriteConfig<TMode, typeof ibopKeeperABI, 'revokePledge'> & {
        abi?: never
        functionName?: 'revokePledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ibopKeeperABI, 'revokePledge'>({
    abi: ibopKeeperABI,
    functionName: 'revokePledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibopKeeperABI}__ and `functionName` set to `"transferPledge"`.
 */
export function useIbopKeeperTransferPledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ibopKeeperABI,
          'transferPledge'
        >['abi'],
        'transferPledge'
      > & { functionName?: 'transferPledge' }
    : UseContractWriteConfig<TMode, typeof ibopKeeperABI, 'transferPledge'> & {
        abi?: never
        functionName?: 'transferPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ibopKeeperABI, 'transferPledge'>({
    abi: ibopKeeperABI,
    functionName: 'transferPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibopKeeperABI}__.
 */
export function usePrepareIbopKeeperWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ibopKeeperABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibopKeeperABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ibopKeeperABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibopKeeperABI}__ and `functionName` set to `"createPledge"`.
 */
export function usePrepareIbopKeeperCreatePledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ibopKeeperABI, 'createPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibopKeeperABI,
    functionName: 'createPledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ibopKeeperABI, 'createPledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibopKeeperABI}__ and `functionName` set to `"execPledge"`.
 */
export function usePrepareIbopKeeperExecPledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ibopKeeperABI, 'execPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibopKeeperABI,
    functionName: 'execPledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ibopKeeperABI, 'execPledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibopKeeperABI}__ and `functionName` set to `"extendPledge"`.
 */
export function usePrepareIbopKeeperExtendPledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ibopKeeperABI, 'extendPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibopKeeperABI,
    functionName: 'extendPledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ibopKeeperABI, 'extendPledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibopKeeperABI}__ and `functionName` set to `"lockPledge"`.
 */
export function usePrepareIbopKeeperLockPledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ibopKeeperABI, 'lockPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibopKeeperABI,
    functionName: 'lockPledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ibopKeeperABI, 'lockPledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibopKeeperABI}__ and `functionName` set to `"refundDebt"`.
 */
export function usePrepareIbopKeeperRefundDebt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ibopKeeperABI, 'refundDebt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibopKeeperABI,
    functionName: 'refundDebt',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ibopKeeperABI, 'refundDebt'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibopKeeperABI}__ and `functionName` set to `"releasePledge"`.
 */
export function usePrepareIbopKeeperReleasePledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ibopKeeperABI, 'releasePledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibopKeeperABI,
    functionName: 'releasePledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ibopKeeperABI, 'releasePledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibopKeeperABI}__ and `functionName` set to `"revokePledge"`.
 */
export function usePrepareIbopKeeperRevokePledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ibopKeeperABI, 'revokePledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibopKeeperABI,
    functionName: 'revokePledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ibopKeeperABI, 'revokePledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibopKeeperABI}__ and `functionName` set to `"transferPledge"`.
 */
export function usePrepareIbopKeeperTransferPledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ibopKeeperABI, 'transferPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibopKeeperABI,
    functionName: 'transferPledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ibopKeeperABI, 'transferPledge'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ibosKeeperABI}__.
 */
export function useIbosKeeper(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: ibosKeeperABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibosKeeperABI}__.
 */
export function useIbosKeeperWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ibosKeeperABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ibosKeeperABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ibosKeeperABI, TFunctionName>({
    abi: ibosKeeperABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibosKeeperABI}__ and `functionName` set to `"decreaseCapital"`.
 */
export function useIbosKeeperDecreaseCapital<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ibosKeeperABI,
          'decreaseCapital'
        >['abi'],
        'decreaseCapital'
      > & { functionName?: 'decreaseCapital' }
    : UseContractWriteConfig<TMode, typeof ibosKeeperABI, 'decreaseCapital'> & {
        abi?: never
        functionName?: 'decreaseCapital'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ibosKeeperABI, 'decreaseCapital'>({
    abi: ibosKeeperABI,
    functionName: 'decreaseCapital',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibosKeeperABI}__ and `functionName` set to `"requestPaidInCapital"`.
 */
export function useIbosKeeperRequestPaidInCapital<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ibosKeeperABI,
          'requestPaidInCapital'
        >['abi'],
        'requestPaidInCapital'
      > & { functionName?: 'requestPaidInCapital' }
    : UseContractWriteConfig<
        TMode,
        typeof ibosKeeperABI,
        'requestPaidInCapital'
      > & {
        abi?: never
        functionName?: 'requestPaidInCapital'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ibosKeeperABI, 'requestPaidInCapital'>({
    abi: ibosKeeperABI,
    functionName: 'requestPaidInCapital',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibosKeeperABI}__ and `functionName` set to `"setPayInAmt"`.
 */
export function useIbosKeeperSetPayInAmt<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ibosKeeperABI, 'setPayInAmt'>['abi'],
        'setPayInAmt'
      > & { functionName?: 'setPayInAmt' }
    : UseContractWriteConfig<TMode, typeof ibosKeeperABI, 'setPayInAmt'> & {
        abi?: never
        functionName?: 'setPayInAmt'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ibosKeeperABI, 'setPayInAmt'>({
    abi: ibosKeeperABI,
    functionName: 'setPayInAmt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ibosKeeperABI}__ and `functionName` set to `"withdrawPayInAmt"`.
 */
export function useIbosKeeperWithdrawPayInAmt<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ibosKeeperABI,
          'withdrawPayInAmt'
        >['abi'],
        'withdrawPayInAmt'
      > & { functionName?: 'withdrawPayInAmt' }
    : UseContractWriteConfig<
        TMode,
        typeof ibosKeeperABI,
        'withdrawPayInAmt'
      > & {
        abi?: never
        functionName?: 'withdrawPayInAmt'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ibosKeeperABI, 'withdrawPayInAmt'>({
    abi: ibosKeeperABI,
    functionName: 'withdrawPayInAmt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibosKeeperABI}__.
 */
export function usePrepareIbosKeeperWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ibosKeeperABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibosKeeperABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ibosKeeperABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibosKeeperABI}__ and `functionName` set to `"decreaseCapital"`.
 */
export function usePrepareIbosKeeperDecreaseCapital(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ibosKeeperABI, 'decreaseCapital'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibosKeeperABI,
    functionName: 'decreaseCapital',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ibosKeeperABI, 'decreaseCapital'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibosKeeperABI}__ and `functionName` set to `"requestPaidInCapital"`.
 */
export function usePrepareIbosKeeperRequestPaidInCapital(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ibosKeeperABI, 'requestPaidInCapital'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibosKeeperABI,
    functionName: 'requestPaidInCapital',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ibosKeeperABI,
    'requestPaidInCapital'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibosKeeperABI}__ and `functionName` set to `"setPayInAmt"`.
 */
export function usePrepareIbosKeeperSetPayInAmt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ibosKeeperABI, 'setPayInAmt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibosKeeperABI,
    functionName: 'setPayInAmt',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ibosKeeperABI, 'setPayInAmt'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ibosKeeperABI}__ and `functionName` set to `"withdrawPayInAmt"`.
 */
export function usePrepareIbosKeeperWithdrawPayInAmt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ibosKeeperABI, 'withdrawPayInAmt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ibosKeeperABI,
    functionName: 'withdrawPayInAmt',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ibosKeeperABI, 'withdrawPayInAmt'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iromKeeperABI}__.
 */
export function useIromKeeper(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iromKeeperABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iromKeeperABI}__.
 */
export function useIromKeeperWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iromKeeperABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iromKeeperABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iromKeeperABI, TFunctionName>({
    abi: iromKeeperABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iromKeeperABI}__ and `functionName` set to `"setAmtBase"`.
 */
export function useIromKeeperSetAmtBase<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iromKeeperABI, 'setAmtBase'>['abi'],
        'setAmtBase'
      > & { functionName?: 'setAmtBase' }
    : UseContractWriteConfig<TMode, typeof iromKeeperABI, 'setAmtBase'> & {
        abi?: never
        functionName?: 'setAmtBase'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iromKeeperABI, 'setAmtBase'>({
    abi: iromKeeperABI,
    functionName: 'setAmtBase',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iromKeeperABI}__ and `functionName` set to `"setMaxQtyOfMembers"`.
 */
export function useIromKeeperSetMaxQtyOfMembers<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iromKeeperABI,
          'setMaxQtyOfMembers'
        >['abi'],
        'setMaxQtyOfMembers'
      > & { functionName?: 'setMaxQtyOfMembers' }
    : UseContractWriteConfig<
        TMode,
        typeof iromKeeperABI,
        'setMaxQtyOfMembers'
      > & {
        abi?: never
        functionName?: 'setMaxQtyOfMembers'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iromKeeperABI, 'setMaxQtyOfMembers'>({
    abi: iromKeeperABI,
    functionName: 'setMaxQtyOfMembers',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iromKeeperABI}__ and `functionName` set to `"setVoteBase"`.
 */
export function useIromKeeperSetVoteBase<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iromKeeperABI, 'setVoteBase'>['abi'],
        'setVoteBase'
      > & { functionName?: 'setVoteBase' }
    : UseContractWriteConfig<TMode, typeof iromKeeperABI, 'setVoteBase'> & {
        abi?: never
        functionName?: 'setVoteBase'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iromKeeperABI, 'setVoteBase'>({
    abi: iromKeeperABI,
    functionName: 'setVoteBase',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iromKeeperABI}__.
 */
export function usePrepareIromKeeperWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iromKeeperABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iromKeeperABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iromKeeperABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iromKeeperABI}__ and `functionName` set to `"setAmtBase"`.
 */
export function usePrepareIromKeeperSetAmtBase(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iromKeeperABI, 'setAmtBase'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iromKeeperABI,
    functionName: 'setAmtBase',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iromKeeperABI, 'setAmtBase'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iromKeeperABI}__ and `functionName` set to `"setMaxQtyOfMembers"`.
 */
export function usePrepareIromKeeperSetMaxQtyOfMembers(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iromKeeperABI, 'setMaxQtyOfMembers'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iromKeeperABI,
    functionName: 'setMaxQtyOfMembers',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iromKeeperABI,
    'setMaxQtyOfMembers'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iromKeeperABI}__ and `functionName` set to `"setVoteBase"`.
 */
export function usePrepareIromKeeperSetVoteBase(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iromKeeperABI, 'setVoteBase'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iromKeeperABI,
    functionName: 'setVoteBase',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iromKeeperABI, 'setVoteBase'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link irosKeeperABI}__.
 */
export function useIrosKeeper(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: irosKeeperABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link irosKeeperABI}__.
 */
export function useIrosKeeperWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof irosKeeperABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof irosKeeperABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof irosKeeperABI, TFunctionName>({
    abi: irosKeeperABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link irosKeeperABI}__ and `functionName` set to `"createSwap"`.
 */
export function useIrosKeeperCreateSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof irosKeeperABI, 'createSwap'>['abi'],
        'createSwap'
      > & { functionName?: 'createSwap' }
    : UseContractWriteConfig<TMode, typeof irosKeeperABI, 'createSwap'> & {
        abi?: never
        functionName?: 'createSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof irosKeeperABI, 'createSwap'>({
    abi: irosKeeperABI,
    functionName: 'createSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link irosKeeperABI}__ and `functionName` set to `"crystalizeSwap"`.
 */
export function useIrosKeeperCrystalizeSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof irosKeeperABI,
          'crystalizeSwap'
        >['abi'],
        'crystalizeSwap'
      > & { functionName?: 'crystalizeSwap' }
    : UseContractWriteConfig<TMode, typeof irosKeeperABI, 'crystalizeSwap'> & {
        abi?: never
        functionName?: 'crystalizeSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof irosKeeperABI, 'crystalizeSwap'>({
    abi: irosKeeperABI,
    functionName: 'crystalizeSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link irosKeeperABI}__ and `functionName` set to `"execSwap"`.
 */
export function useIrosKeeperExecSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof irosKeeperABI, 'execSwap'>['abi'],
        'execSwap'
      > & { functionName?: 'execSwap' }
    : UseContractWriteConfig<TMode, typeof irosKeeperABI, 'execSwap'> & {
        abi?: never
        functionName?: 'execSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof irosKeeperABI, 'execSwap'>({
    abi: irosKeeperABI,
    functionName: 'execSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link irosKeeperABI}__ and `functionName` set to `"lockSwap"`.
 */
export function useIrosKeeperLockSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof irosKeeperABI, 'lockSwap'>['abi'],
        'lockSwap'
      > & { functionName?: 'lockSwap' }
    : UseContractWriteConfig<TMode, typeof irosKeeperABI, 'lockSwap'> & {
        abi?: never
        functionName?: 'lockSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof irosKeeperABI, 'lockSwap'>({
    abi: irosKeeperABI,
    functionName: 'lockSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link irosKeeperABI}__ and `functionName` set to `"releaseSwap"`.
 */
export function useIrosKeeperReleaseSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof irosKeeperABI, 'releaseSwap'>['abi'],
        'releaseSwap'
      > & { functionName?: 'releaseSwap' }
    : UseContractWriteConfig<TMode, typeof irosKeeperABI, 'releaseSwap'> & {
        abi?: never
        functionName?: 'releaseSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof irosKeeperABI, 'releaseSwap'>({
    abi: irosKeeperABI,
    functionName: 'releaseSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link irosKeeperABI}__ and `functionName` set to `"requestToBuy"`.
 */
export function useIrosKeeperRequestToBuy<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof irosKeeperABI, 'requestToBuy'>['abi'],
        'requestToBuy'
      > & { functionName?: 'requestToBuy' }
    : UseContractWriteConfig<TMode, typeof irosKeeperABI, 'requestToBuy'> & {
        abi?: never
        functionName?: 'requestToBuy'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof irosKeeperABI, 'requestToBuy'>({
    abi: irosKeeperABI,
    functionName: 'requestToBuy',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link irosKeeperABI}__ and `functionName` set to `"revokeSwap"`.
 */
export function useIrosKeeperRevokeSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof irosKeeperABI, 'revokeSwap'>['abi'],
        'revokeSwap'
      > & { functionName?: 'revokeSwap' }
    : UseContractWriteConfig<TMode, typeof irosKeeperABI, 'revokeSwap'> & {
        abi?: never
        functionName?: 'revokeSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof irosKeeperABI, 'revokeSwap'>({
    abi: irosKeeperABI,
    functionName: 'revokeSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link irosKeeperABI}__ and `functionName` set to `"transferSwap"`.
 */
export function useIrosKeeperTransferSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof irosKeeperABI, 'transferSwap'>['abi'],
        'transferSwap'
      > & { functionName?: 'transferSwap' }
    : UseContractWriteConfig<TMode, typeof irosKeeperABI, 'transferSwap'> & {
        abi?: never
        functionName?: 'transferSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof irosKeeperABI, 'transferSwap'>({
    abi: irosKeeperABI,
    functionName: 'transferSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link irosKeeperABI}__.
 */
export function usePrepareIrosKeeperWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof irosKeeperABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: irosKeeperABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof irosKeeperABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link irosKeeperABI}__ and `functionName` set to `"createSwap"`.
 */
export function usePrepareIrosKeeperCreateSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof irosKeeperABI, 'createSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: irosKeeperABI,
    functionName: 'createSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof irosKeeperABI, 'createSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link irosKeeperABI}__ and `functionName` set to `"crystalizeSwap"`.
 */
export function usePrepareIrosKeeperCrystalizeSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof irosKeeperABI, 'crystalizeSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: irosKeeperABI,
    functionName: 'crystalizeSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof irosKeeperABI, 'crystalizeSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link irosKeeperABI}__ and `functionName` set to `"execSwap"`.
 */
export function usePrepareIrosKeeperExecSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof irosKeeperABI, 'execSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: irosKeeperABI,
    functionName: 'execSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof irosKeeperABI, 'execSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link irosKeeperABI}__ and `functionName` set to `"lockSwap"`.
 */
export function usePrepareIrosKeeperLockSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof irosKeeperABI, 'lockSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: irosKeeperABI,
    functionName: 'lockSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof irosKeeperABI, 'lockSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link irosKeeperABI}__ and `functionName` set to `"releaseSwap"`.
 */
export function usePrepareIrosKeeperReleaseSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof irosKeeperABI, 'releaseSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: irosKeeperABI,
    functionName: 'releaseSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof irosKeeperABI, 'releaseSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link irosKeeperABI}__ and `functionName` set to `"requestToBuy"`.
 */
export function usePrepareIrosKeeperRequestToBuy(
  config: Omit<
    UsePrepareContractWriteConfig<typeof irosKeeperABI, 'requestToBuy'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: irosKeeperABI,
    functionName: 'requestToBuy',
    ...config,
  } as UsePrepareContractWriteConfig<typeof irosKeeperABI, 'requestToBuy'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link irosKeeperABI}__ and `functionName` set to `"revokeSwap"`.
 */
export function usePrepareIrosKeeperRevokeSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof irosKeeperABI, 'revokeSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: irosKeeperABI,
    functionName: 'revokeSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof irosKeeperABI, 'revokeSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link irosKeeperABI}__ and `functionName` set to `"transferSwap"`.
 */
export function usePrepareIrosKeeperTransferSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof irosKeeperABI, 'transferSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: irosKeeperABI,
    functionName: 'transferSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof irosKeeperABI, 'transferSwap'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ishaKeeperABI}__.
 */
export function useIshaKeeper(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: ishaKeeperABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ishaKeeperABI}__.
 */
export function useIshaKeeperWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ishaKeeperABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ishaKeeperABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ishaKeeperABI, TFunctionName>({
    abi: ishaKeeperABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ishaKeeperABI}__ and `functionName` set to `"acceptAlongDeal"`.
 */
export function useIshaKeeperAcceptAlongDeal<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ishaKeeperABI,
          'acceptAlongDeal'
        >['abi'],
        'acceptAlongDeal'
      > & { functionName?: 'acceptAlongDeal' }
    : UseContractWriteConfig<TMode, typeof ishaKeeperABI, 'acceptAlongDeal'> & {
        abi?: never
        functionName?: 'acceptAlongDeal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ishaKeeperABI, 'acceptAlongDeal'>({
    abi: ishaKeeperABI,
    functionName: 'acceptAlongDeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ishaKeeperABI}__ and `functionName` set to `"acceptFirstRefusal"`.
 */
export function useIshaKeeperAcceptFirstRefusal<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ishaKeeperABI,
          'acceptFirstRefusal'
        >['abi'],
        'acceptFirstRefusal'
      > & { functionName?: 'acceptFirstRefusal' }
    : UseContractWriteConfig<
        TMode,
        typeof ishaKeeperABI,
        'acceptFirstRefusal'
      > & {
        abi?: never
        functionName?: 'acceptFirstRefusal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ishaKeeperABI, 'acceptFirstRefusal'>({
    abi: ishaKeeperABI,
    functionName: 'acceptFirstRefusal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ishaKeeperABI}__ and `functionName` set to `"execAlongRight"`.
 */
export function useIshaKeeperExecAlongRight<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ishaKeeperABI,
          'execAlongRight'
        >['abi'],
        'execAlongRight'
      > & { functionName?: 'execAlongRight' }
    : UseContractWriteConfig<TMode, typeof ishaKeeperABI, 'execAlongRight'> & {
        abi?: never
        functionName?: 'execAlongRight'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ishaKeeperABI, 'execAlongRight'>({
    abi: ishaKeeperABI,
    functionName: 'execAlongRight',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ishaKeeperABI}__ and `functionName` set to `"execAntiDilution"`.
 */
export function useIshaKeeperExecAntiDilution<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ishaKeeperABI,
          'execAntiDilution'
        >['abi'],
        'execAntiDilution'
      > & { functionName?: 'execAntiDilution' }
    : UseContractWriteConfig<
        TMode,
        typeof ishaKeeperABI,
        'execAntiDilution'
      > & {
        abi?: never
        functionName?: 'execAntiDilution'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ishaKeeperABI, 'execAntiDilution'>({
    abi: ishaKeeperABI,
    functionName: 'execAntiDilution',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ishaKeeperABI}__ and `functionName` set to `"execFirstRefusal"`.
 */
export function useIshaKeeperExecFirstRefusal<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ishaKeeperABI,
          'execFirstRefusal'
        >['abi'],
        'execFirstRefusal'
      > & { functionName?: 'execFirstRefusal' }
    : UseContractWriteConfig<
        TMode,
        typeof ishaKeeperABI,
        'execFirstRefusal'
      > & {
        abi?: never
        functionName?: 'execFirstRefusal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ishaKeeperABI, 'execFirstRefusal'>({
    abi: ishaKeeperABI,
    functionName: 'execFirstRefusal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ishaKeeperABI}__ and `functionName` set to `"takeGiftShares"`.
 */
export function useIshaKeeperTakeGiftShares<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ishaKeeperABI,
          'takeGiftShares'
        >['abi'],
        'takeGiftShares'
      > & { functionName?: 'takeGiftShares' }
    : UseContractWriteConfig<TMode, typeof ishaKeeperABI, 'takeGiftShares'> & {
        abi?: never
        functionName?: 'takeGiftShares'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ishaKeeperABI, 'takeGiftShares'>({
    abi: ishaKeeperABI,
    functionName: 'takeGiftShares',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ishaKeeperABI}__.
 */
export function usePrepareIshaKeeperWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ishaKeeperABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ishaKeeperABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ishaKeeperABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ishaKeeperABI}__ and `functionName` set to `"acceptAlongDeal"`.
 */
export function usePrepareIshaKeeperAcceptAlongDeal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ishaKeeperABI, 'acceptAlongDeal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ishaKeeperABI,
    functionName: 'acceptAlongDeal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ishaKeeperABI, 'acceptAlongDeal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ishaKeeperABI}__ and `functionName` set to `"acceptFirstRefusal"`.
 */
export function usePrepareIshaKeeperAcceptFirstRefusal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ishaKeeperABI, 'acceptFirstRefusal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ishaKeeperABI,
    functionName: 'acceptFirstRefusal',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ishaKeeperABI,
    'acceptFirstRefusal'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ishaKeeperABI}__ and `functionName` set to `"execAlongRight"`.
 */
export function usePrepareIshaKeeperExecAlongRight(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ishaKeeperABI, 'execAlongRight'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ishaKeeperABI,
    functionName: 'execAlongRight',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ishaKeeperABI, 'execAlongRight'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ishaKeeperABI}__ and `functionName` set to `"execAntiDilution"`.
 */
export function usePrepareIshaKeeperExecAntiDilution(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ishaKeeperABI, 'execAntiDilution'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ishaKeeperABI,
    functionName: 'execAntiDilution',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ishaKeeperABI, 'execAntiDilution'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ishaKeeperABI}__ and `functionName` set to `"execFirstRefusal"`.
 */
export function usePrepareIshaKeeperExecFirstRefusal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ishaKeeperABI, 'execFirstRefusal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ishaKeeperABI,
    functionName: 'execFirstRefusal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ishaKeeperABI, 'execFirstRefusal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ishaKeeperABI}__ and `functionName` set to `"takeGiftShares"`.
 */
export function usePrepareIshaKeeperTakeGiftShares(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ishaKeeperABI, 'takeGiftShares'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ishaKeeperABI,
    functionName: 'takeGiftShares',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ishaKeeperABI, 'takeGiftShares'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link romKeeperABI}__.
 */
export function useRomKeeper(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: romKeeperABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link romKeeperABI}__.
 */
export function useRomKeeperRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof romKeeperABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof romKeeperABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: romKeeperABI,
    ...config,
  } as UseContractReadConfig<typeof romKeeperABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"finalized"`.
 */
export function useRomKeeperFinalized<
  TSelectData = ReadContractResult<typeof romKeeperABI, 'finalized'>,
>(
  config: Omit<
    UseContractReadConfig<typeof romKeeperABI, 'finalized', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: romKeeperABI,
    functionName: 'finalized',
    ...config,
  } as UseContractReadConfig<typeof romKeeperABI, 'finalized', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"getBookeeper"`.
 */
export function useRomKeeperGetBookeeper<
  TSelectData = ReadContractResult<typeof romKeeperABI, 'getBookeeper'>,
>(
  config: Omit<
    UseContractReadConfig<typeof romKeeperABI, 'getBookeeper', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: romKeeperABI,
    functionName: 'getBookeeper',
    ...config,
  } as UseContractReadConfig<typeof romKeeperABI, 'getBookeeper', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"getGeneralCounsel"`.
 */
export function useRomKeeperGetGeneralCounsel<
  TSelectData = ReadContractResult<typeof romKeeperABI, 'getGeneralCounsel'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof romKeeperABI,
      'getGeneralCounsel',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: romKeeperABI,
    functionName: 'getGeneralCounsel',
    ...config,
  } as UseContractReadConfig<
    typeof romKeeperABI,
    'getGeneralCounsel',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"getOwner"`.
 */
export function useRomKeeperGetOwner<
  TSelectData = ReadContractResult<typeof romKeeperABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof romKeeperABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: romKeeperABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<typeof romKeeperABI, 'getOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"hasRole"`.
 */
export function useRomKeeperHasRole<
  TSelectData = ReadContractResult<typeof romKeeperABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof romKeeperABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: romKeeperABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof romKeeperABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link romKeeperABI}__.
 */
export function useRomKeeperWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof romKeeperABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof romKeeperABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof romKeeperABI, TFunctionName>({
    abi: romKeeperABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useRomKeeperAbandonRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof romKeeperABI, 'abandonRole'>['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<TMode, typeof romKeeperABI, 'abandonRole'> & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof romKeeperABI, 'abandonRole'>({
    abi: romKeeperABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"grantRole"`.
 */
export function useRomKeeperGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof romKeeperABI, 'grantRole'>['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof romKeeperABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof romKeeperABI, 'grantRole'>({
    abi: romKeeperABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"init"`.
 */
export function useRomKeeperInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof romKeeperABI, 'init'>['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof romKeeperABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof romKeeperABI, 'init'>({
    abi: romKeeperABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"lockContents"`.
 */
export function useRomKeeperLockContents<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof romKeeperABI, 'lockContents'>['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<TMode, typeof romKeeperABI, 'lockContents'> & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof romKeeperABI, 'lockContents'>({
    abi: romKeeperABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function useRomKeeperRemoveDirectKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof romKeeperABI,
          'removeDirectKeeper'
        >['abi'],
        'removeDirectKeeper'
      > & { functionName?: 'removeDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof romKeeperABI,
        'removeDirectKeeper'
      > & {
        abi?: never
        functionName?: 'removeDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof romKeeperABI, 'removeDirectKeeper'>({
    abi: romKeeperABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useRomKeeperRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof romKeeperABI, 'renounceRole'>['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<TMode, typeof romKeeperABI, 'renounceRole'> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof romKeeperABI, 'renounceRole'>({
    abi: romKeeperABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useRomKeeperRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof romKeeperABI, 'revokeRole'>['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof romKeeperABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof romKeeperABI, 'revokeRole'>({
    abi: romKeeperABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"setAmtBase"`.
 */
export function useRomKeeperSetAmtBase<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof romKeeperABI, 'setAmtBase'>['abi'],
        'setAmtBase'
      > & { functionName?: 'setAmtBase' }
    : UseContractWriteConfig<TMode, typeof romKeeperABI, 'setAmtBase'> & {
        abi?: never
        functionName?: 'setAmtBase'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof romKeeperABI, 'setAmtBase'>({
    abi: romKeeperABI,
    functionName: 'setAmtBase',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useRomKeeperSetDirectKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof romKeeperABI,
          'setDirectKeeper'
        >['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<TMode, typeof romKeeperABI, 'setDirectKeeper'> & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof romKeeperABI, 'setDirectKeeper'>({
    abi: romKeeperABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function useRomKeeperSetGeneralCounsel<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof romKeeperABI,
          'setGeneralCounsel'
        >['abi'],
        'setGeneralCounsel'
      > & { functionName?: 'setGeneralCounsel' }
    : UseContractWriteConfig<
        TMode,
        typeof romKeeperABI,
        'setGeneralCounsel'
      > & {
        abi?: never
        functionName?: 'setGeneralCounsel'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof romKeeperABI, 'setGeneralCounsel'>({
    abi: romKeeperABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"setMaxQtyOfMembers"`.
 */
export function useRomKeeperSetMaxQtyOfMembers<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof romKeeperABI,
          'setMaxQtyOfMembers'
        >['abi'],
        'setMaxQtyOfMembers'
      > & { functionName?: 'setMaxQtyOfMembers' }
    : UseContractWriteConfig<
        TMode,
        typeof romKeeperABI,
        'setMaxQtyOfMembers'
      > & {
        abi?: never
        functionName?: 'setMaxQtyOfMembers'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof romKeeperABI, 'setMaxQtyOfMembers'>({
    abi: romKeeperABI,
    functionName: 'setMaxQtyOfMembers',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"setOwner"`.
 */
export function useRomKeeperSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof romKeeperABI, 'setOwner'>['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof romKeeperABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof romKeeperABI, 'setOwner'>({
    abi: romKeeperABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useRomKeeperSetRoleAdmin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof romKeeperABI, 'setRoleAdmin'>['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<TMode, typeof romKeeperABI, 'setRoleAdmin'> & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof romKeeperABI, 'setRoleAdmin'>({
    abi: romKeeperABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"setVoteBase"`.
 */
export function useRomKeeperSetVoteBase<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof romKeeperABI, 'setVoteBase'>['abi'],
        'setVoteBase'
      > & { functionName?: 'setVoteBase' }
    : UseContractWriteConfig<TMode, typeof romKeeperABI, 'setVoteBase'> & {
        abi?: never
        functionName?: 'setVoteBase'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof romKeeperABI, 'setVoteBase'>({
    abi: romKeeperABI,
    functionName: 'setVoteBase',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link romKeeperABI}__.
 */
export function usePrepareRomKeeperWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof romKeeperABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: romKeeperABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof romKeeperABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareRomKeeperAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof romKeeperABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: romKeeperABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof romKeeperABI, 'abandonRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareRomKeeperGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof romKeeperABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: romKeeperABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof romKeeperABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareRomKeeperInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof romKeeperABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: romKeeperABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof romKeeperABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareRomKeeperLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<typeof romKeeperABI, 'lockContents'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: romKeeperABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<typeof romKeeperABI, 'lockContents'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function usePrepareRomKeeperRemoveDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof romKeeperABI, 'removeDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: romKeeperABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof romKeeperABI, 'removeDirectKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareRomKeeperRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof romKeeperABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: romKeeperABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof romKeeperABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareRomKeeperRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof romKeeperABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: romKeeperABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof romKeeperABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"setAmtBase"`.
 */
export function usePrepareRomKeeperSetAmtBase(
  config: Omit<
    UsePrepareContractWriteConfig<typeof romKeeperABI, 'setAmtBase'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: romKeeperABI,
    functionName: 'setAmtBase',
    ...config,
  } as UsePrepareContractWriteConfig<typeof romKeeperABI, 'setAmtBase'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareRomKeeperSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof romKeeperABI, 'setDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: romKeeperABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof romKeeperABI, 'setDirectKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function usePrepareRomKeeperSetGeneralCounsel(
  config: Omit<
    UsePrepareContractWriteConfig<typeof romKeeperABI, 'setGeneralCounsel'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: romKeeperABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as UsePrepareContractWriteConfig<typeof romKeeperABI, 'setGeneralCounsel'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"setMaxQtyOfMembers"`.
 */
export function usePrepareRomKeeperSetMaxQtyOfMembers(
  config: Omit<
    UsePrepareContractWriteConfig<typeof romKeeperABI, 'setMaxQtyOfMembers'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: romKeeperABI,
    functionName: 'setMaxQtyOfMembers',
    ...config,
  } as UsePrepareContractWriteConfig<typeof romKeeperABI, 'setMaxQtyOfMembers'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareRomKeeperSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof romKeeperABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: romKeeperABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof romKeeperABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareRomKeeperSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof romKeeperABI, 'setRoleAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: romKeeperABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof romKeeperABI, 'setRoleAdmin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link romKeeperABI}__ and `functionName` set to `"setVoteBase"`.
 */
export function usePrepareRomKeeperSetVoteBase(
  config: Omit<
    UsePrepareContractWriteConfig<typeof romKeeperABI, 'setVoteBase'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: romKeeperABI,
    functionName: 'setVoteBase',
    ...config,
  } as UsePrepareContractWriteConfig<typeof romKeeperABI, 'setVoteBase'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link romKeeperABI}__.
 */
export function useRomKeeperEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof romKeeperABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: romKeeperABI,
    ...config,
  } as UseContractEventConfig<typeof romKeeperABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link romKeeperABI}__ and `eventName` set to `"Init"`.
 */
export function useRomKeeperInitEvent(
  config: Omit<
    UseContractEventConfig<typeof romKeeperABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: romKeeperABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof romKeeperABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link romKeeperABI}__ and `eventName` set to `"LockContents"`.
 */
export function useRomKeeperLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof romKeeperABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: romKeeperABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof romKeeperABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link romKeeperABI}__ and `eventName` set to `"RemoveDirectKeeper"`.
 */
export function useRomKeeperRemoveDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof romKeeperABI, 'RemoveDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: romKeeperABI,
    eventName: 'RemoveDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof romKeeperABI, 'RemoveDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link romKeeperABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useRomKeeperSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof romKeeperABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: romKeeperABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof romKeeperABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link romKeeperABI}__ and `eventName` set to `"SetGeneralCounsel"`.
 */
export function useRomKeeperSetGeneralCounselEvent(
  config: Omit<
    UseContractEventConfig<typeof romKeeperABI, 'SetGeneralCounsel'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: romKeeperABI,
    eventName: 'SetGeneralCounsel',
    ...config,
  } as UseContractEventConfig<typeof romKeeperABI, 'SetGeneralCounsel'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link romKeeperABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useRomKeeperSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof romKeeperABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: romKeeperABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof romKeeperABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link rosKeeperABI}__.
 */
export function useRosKeeper(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: rosKeeperABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rosKeeperABI}__.
 */
export function useRosKeeperRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof rosKeeperABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof rosKeeperABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: rosKeeperABI,
    ...config,
  } as UseContractReadConfig<typeof rosKeeperABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"finalized"`.
 */
export function useRosKeeperFinalized<
  TSelectData = ReadContractResult<typeof rosKeeperABI, 'finalized'>,
>(
  config: Omit<
    UseContractReadConfig<typeof rosKeeperABI, 'finalized', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rosKeeperABI,
    functionName: 'finalized',
    ...config,
  } as UseContractReadConfig<typeof rosKeeperABI, 'finalized', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"getBookeeper"`.
 */
export function useRosKeeperGetBookeeper<
  TSelectData = ReadContractResult<typeof rosKeeperABI, 'getBookeeper'>,
>(
  config: Omit<
    UseContractReadConfig<typeof rosKeeperABI, 'getBookeeper', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rosKeeperABI,
    functionName: 'getBookeeper',
    ...config,
  } as UseContractReadConfig<typeof rosKeeperABI, 'getBookeeper', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"getGeneralCounsel"`.
 */
export function useRosKeeperGetGeneralCounsel<
  TSelectData = ReadContractResult<typeof rosKeeperABI, 'getGeneralCounsel'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof rosKeeperABI,
      'getGeneralCounsel',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rosKeeperABI,
    functionName: 'getGeneralCounsel',
    ...config,
  } as UseContractReadConfig<
    typeof rosKeeperABI,
    'getGeneralCounsel',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"getOwner"`.
 */
export function useRosKeeperGetOwner<
  TSelectData = ReadContractResult<typeof rosKeeperABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof rosKeeperABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rosKeeperABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<typeof rosKeeperABI, 'getOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"hasRole"`.
 */
export function useRosKeeperHasRole<
  TSelectData = ReadContractResult<typeof rosKeeperABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof rosKeeperABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rosKeeperABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof rosKeeperABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rosKeeperABI}__.
 */
export function useRosKeeperWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rosKeeperABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof rosKeeperABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rosKeeperABI, TFunctionName>({
    abi: rosKeeperABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useRosKeeperAbandonRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rosKeeperABI, 'abandonRole'>['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<TMode, typeof rosKeeperABI, 'abandonRole'> & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rosKeeperABI, 'abandonRole'>({
    abi: rosKeeperABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"createSwap"`.
 */
export function useRosKeeperCreateSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rosKeeperABI, 'createSwap'>['abi'],
        'createSwap'
      > & { functionName?: 'createSwap' }
    : UseContractWriteConfig<TMode, typeof rosKeeperABI, 'createSwap'> & {
        abi?: never
        functionName?: 'createSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rosKeeperABI, 'createSwap'>({
    abi: rosKeeperABI,
    functionName: 'createSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"crystalizeSwap"`.
 */
export function useRosKeeperCrystalizeSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof rosKeeperABI,
          'crystalizeSwap'
        >['abi'],
        'crystalizeSwap'
      > & { functionName?: 'crystalizeSwap' }
    : UseContractWriteConfig<TMode, typeof rosKeeperABI, 'crystalizeSwap'> & {
        abi?: never
        functionName?: 'crystalizeSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rosKeeperABI, 'crystalizeSwap'>({
    abi: rosKeeperABI,
    functionName: 'crystalizeSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"execSwap"`.
 */
export function useRosKeeperExecSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rosKeeperABI, 'execSwap'>['abi'],
        'execSwap'
      > & { functionName?: 'execSwap' }
    : UseContractWriteConfig<TMode, typeof rosKeeperABI, 'execSwap'> & {
        abi?: never
        functionName?: 'execSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rosKeeperABI, 'execSwap'>({
    abi: rosKeeperABI,
    functionName: 'execSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"grantRole"`.
 */
export function useRosKeeperGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rosKeeperABI, 'grantRole'>['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof rosKeeperABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rosKeeperABI, 'grantRole'>({
    abi: rosKeeperABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"init"`.
 */
export function useRosKeeperInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rosKeeperABI, 'init'>['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof rosKeeperABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rosKeeperABI, 'init'>({
    abi: rosKeeperABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"lockContents"`.
 */
export function useRosKeeperLockContents<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rosKeeperABI, 'lockContents'>['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<TMode, typeof rosKeeperABI, 'lockContents'> & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rosKeeperABI, 'lockContents'>({
    abi: rosKeeperABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"lockSwap"`.
 */
export function useRosKeeperLockSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rosKeeperABI, 'lockSwap'>['abi'],
        'lockSwap'
      > & { functionName?: 'lockSwap' }
    : UseContractWriteConfig<TMode, typeof rosKeeperABI, 'lockSwap'> & {
        abi?: never
        functionName?: 'lockSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rosKeeperABI, 'lockSwap'>({
    abi: rosKeeperABI,
    functionName: 'lockSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"releaseSwap"`.
 */
export function useRosKeeperReleaseSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rosKeeperABI, 'releaseSwap'>['abi'],
        'releaseSwap'
      > & { functionName?: 'releaseSwap' }
    : UseContractWriteConfig<TMode, typeof rosKeeperABI, 'releaseSwap'> & {
        abi?: never
        functionName?: 'releaseSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rosKeeperABI, 'releaseSwap'>({
    abi: rosKeeperABI,
    functionName: 'releaseSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function useRosKeeperRemoveDirectKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof rosKeeperABI,
          'removeDirectKeeper'
        >['abi'],
        'removeDirectKeeper'
      > & { functionName?: 'removeDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof rosKeeperABI,
        'removeDirectKeeper'
      > & {
        abi?: never
        functionName?: 'removeDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rosKeeperABI, 'removeDirectKeeper'>({
    abi: rosKeeperABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useRosKeeperRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rosKeeperABI, 'renounceRole'>['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<TMode, typeof rosKeeperABI, 'renounceRole'> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rosKeeperABI, 'renounceRole'>({
    abi: rosKeeperABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"requestToBuy"`.
 */
export function useRosKeeperRequestToBuy<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rosKeeperABI, 'requestToBuy'>['abi'],
        'requestToBuy'
      > & { functionName?: 'requestToBuy' }
    : UseContractWriteConfig<TMode, typeof rosKeeperABI, 'requestToBuy'> & {
        abi?: never
        functionName?: 'requestToBuy'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rosKeeperABI, 'requestToBuy'>({
    abi: rosKeeperABI,
    functionName: 'requestToBuy',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useRosKeeperRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rosKeeperABI, 'revokeRole'>['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof rosKeeperABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rosKeeperABI, 'revokeRole'>({
    abi: rosKeeperABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"revokeSwap"`.
 */
export function useRosKeeperRevokeSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rosKeeperABI, 'revokeSwap'>['abi'],
        'revokeSwap'
      > & { functionName?: 'revokeSwap' }
    : UseContractWriteConfig<TMode, typeof rosKeeperABI, 'revokeSwap'> & {
        abi?: never
        functionName?: 'revokeSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rosKeeperABI, 'revokeSwap'>({
    abi: rosKeeperABI,
    functionName: 'revokeSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useRosKeeperSetDirectKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof rosKeeperABI,
          'setDirectKeeper'
        >['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<TMode, typeof rosKeeperABI, 'setDirectKeeper'> & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rosKeeperABI, 'setDirectKeeper'>({
    abi: rosKeeperABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function useRosKeeperSetGeneralCounsel<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof rosKeeperABI,
          'setGeneralCounsel'
        >['abi'],
        'setGeneralCounsel'
      > & { functionName?: 'setGeneralCounsel' }
    : UseContractWriteConfig<
        TMode,
        typeof rosKeeperABI,
        'setGeneralCounsel'
      > & {
        abi?: never
        functionName?: 'setGeneralCounsel'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rosKeeperABI, 'setGeneralCounsel'>({
    abi: rosKeeperABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"setOwner"`.
 */
export function useRosKeeperSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rosKeeperABI, 'setOwner'>['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof rosKeeperABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rosKeeperABI, 'setOwner'>({
    abi: rosKeeperABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useRosKeeperSetRoleAdmin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rosKeeperABI, 'setRoleAdmin'>['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<TMode, typeof rosKeeperABI, 'setRoleAdmin'> & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rosKeeperABI, 'setRoleAdmin'>({
    abi: rosKeeperABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"transferSwap"`.
 */
export function useRosKeeperTransferSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof rosKeeperABI, 'transferSwap'>['abi'],
        'transferSwap'
      > & { functionName?: 'transferSwap' }
    : UseContractWriteConfig<TMode, typeof rosKeeperABI, 'transferSwap'> & {
        abi?: never
        functionName?: 'transferSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof rosKeeperABI, 'transferSwap'>({
    abi: rosKeeperABI,
    functionName: 'transferSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rosKeeperABI}__.
 */
export function usePrepareRosKeeperWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rosKeeperABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rosKeeperABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof rosKeeperABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareRosKeeperAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rosKeeperABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rosKeeperABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rosKeeperABI, 'abandonRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"createSwap"`.
 */
export function usePrepareRosKeeperCreateSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rosKeeperABI, 'createSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rosKeeperABI,
    functionName: 'createSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rosKeeperABI, 'createSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"crystalizeSwap"`.
 */
export function usePrepareRosKeeperCrystalizeSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rosKeeperABI, 'crystalizeSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rosKeeperABI,
    functionName: 'crystalizeSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rosKeeperABI, 'crystalizeSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"execSwap"`.
 */
export function usePrepareRosKeeperExecSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rosKeeperABI, 'execSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rosKeeperABI,
    functionName: 'execSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rosKeeperABI, 'execSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareRosKeeperGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rosKeeperABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rosKeeperABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rosKeeperABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareRosKeeperInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rosKeeperABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rosKeeperABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rosKeeperABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareRosKeeperLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rosKeeperABI, 'lockContents'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rosKeeperABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rosKeeperABI, 'lockContents'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"lockSwap"`.
 */
export function usePrepareRosKeeperLockSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rosKeeperABI, 'lockSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rosKeeperABI,
    functionName: 'lockSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rosKeeperABI, 'lockSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"releaseSwap"`.
 */
export function usePrepareRosKeeperReleaseSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rosKeeperABI, 'releaseSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rosKeeperABI,
    functionName: 'releaseSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rosKeeperABI, 'releaseSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function usePrepareRosKeeperRemoveDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rosKeeperABI, 'removeDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rosKeeperABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rosKeeperABI, 'removeDirectKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareRosKeeperRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rosKeeperABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rosKeeperABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rosKeeperABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"requestToBuy"`.
 */
export function usePrepareRosKeeperRequestToBuy(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rosKeeperABI, 'requestToBuy'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rosKeeperABI,
    functionName: 'requestToBuy',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rosKeeperABI, 'requestToBuy'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareRosKeeperRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rosKeeperABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rosKeeperABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rosKeeperABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"revokeSwap"`.
 */
export function usePrepareRosKeeperRevokeSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rosKeeperABI, 'revokeSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rosKeeperABI,
    functionName: 'revokeSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rosKeeperABI, 'revokeSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareRosKeeperSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rosKeeperABI, 'setDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rosKeeperABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rosKeeperABI, 'setDirectKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function usePrepareRosKeeperSetGeneralCounsel(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rosKeeperABI, 'setGeneralCounsel'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rosKeeperABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rosKeeperABI, 'setGeneralCounsel'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareRosKeeperSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rosKeeperABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rosKeeperABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rosKeeperABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareRosKeeperSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rosKeeperABI, 'setRoleAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rosKeeperABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rosKeeperABI, 'setRoleAdmin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rosKeeperABI}__ and `functionName` set to `"transferSwap"`.
 */
export function usePrepareRosKeeperTransferSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rosKeeperABI, 'transferSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rosKeeperABI,
    functionName: 'transferSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rosKeeperABI, 'transferSwap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rosKeeperABI}__.
 */
export function useRosKeeperEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof rosKeeperABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: rosKeeperABI,
    ...config,
  } as UseContractEventConfig<typeof rosKeeperABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rosKeeperABI}__ and `eventName` set to `"Init"`.
 */
export function useRosKeeperInitEvent(
  config: Omit<
    UseContractEventConfig<typeof rosKeeperABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: rosKeeperABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof rosKeeperABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rosKeeperABI}__ and `eventName` set to `"LockContents"`.
 */
export function useRosKeeperLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof rosKeeperABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: rosKeeperABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof rosKeeperABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rosKeeperABI}__ and `eventName` set to `"RemoveDirectKeeper"`.
 */
export function useRosKeeperRemoveDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof rosKeeperABI, 'RemoveDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: rosKeeperABI,
    eventName: 'RemoveDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof rosKeeperABI, 'RemoveDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rosKeeperABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useRosKeeperSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof rosKeeperABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: rosKeeperABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof rosKeeperABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rosKeeperABI}__ and `eventName` set to `"SetGeneralCounsel"`.
 */
export function useRosKeeperSetGeneralCounselEvent(
  config: Omit<
    UseContractEventConfig<typeof rosKeeperABI, 'SetGeneralCounsel'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: rosKeeperABI,
    eventName: 'SetGeneralCounsel',
    ...config,
  } as UseContractEventConfig<typeof rosKeeperABI, 'SetGeneralCounsel'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rosKeeperABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useRosKeeperSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof rosKeeperABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: rosKeeperABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof rosKeeperABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link shaKeeperABI}__.
 */
export function useShaKeeper(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: shaKeeperABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shaKeeperABI}__.
 */
export function useShaKeeperRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof shaKeeperABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof shaKeeperABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: shaKeeperABI,
    ...config,
  } as UseContractReadConfig<typeof shaKeeperABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"finalized"`.
 */
export function useShaKeeperFinalized<
  TSelectData = ReadContractResult<typeof shaKeeperABI, 'finalized'>,
>(
  config: Omit<
    UseContractReadConfig<typeof shaKeeperABI, 'finalized', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shaKeeperABI,
    functionName: 'finalized',
    ...config,
  } as UseContractReadConfig<typeof shaKeeperABI, 'finalized', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"getBookeeper"`.
 */
export function useShaKeeperGetBookeeper<
  TSelectData = ReadContractResult<typeof shaKeeperABI, 'getBookeeper'>,
>(
  config: Omit<
    UseContractReadConfig<typeof shaKeeperABI, 'getBookeeper', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shaKeeperABI,
    functionName: 'getBookeeper',
    ...config,
  } as UseContractReadConfig<typeof shaKeeperABI, 'getBookeeper', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"getGeneralCounsel"`.
 */
export function useShaKeeperGetGeneralCounsel<
  TSelectData = ReadContractResult<typeof shaKeeperABI, 'getGeneralCounsel'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shaKeeperABI,
      'getGeneralCounsel',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shaKeeperABI,
    functionName: 'getGeneralCounsel',
    ...config,
  } as UseContractReadConfig<
    typeof shaKeeperABI,
    'getGeneralCounsel',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"getOwner"`.
 */
export function useShaKeeperGetOwner<
  TSelectData = ReadContractResult<typeof shaKeeperABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof shaKeeperABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shaKeeperABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<typeof shaKeeperABI, 'getOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"hasRole"`.
 */
export function useShaKeeperHasRole<
  TSelectData = ReadContractResult<typeof shaKeeperABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof shaKeeperABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shaKeeperABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof shaKeeperABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shaKeeperABI}__.
 */
export function useShaKeeperWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof shaKeeperABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof shaKeeperABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shaKeeperABI, TFunctionName>({
    abi: shaKeeperABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useShaKeeperAbandonRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof shaKeeperABI, 'abandonRole'>['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<TMode, typeof shaKeeperABI, 'abandonRole'> & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shaKeeperABI, 'abandonRole'>({
    abi: shaKeeperABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"acceptAlongDeal"`.
 */
export function useShaKeeperAcceptAlongDeal<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shaKeeperABI,
          'acceptAlongDeal'
        >['abi'],
        'acceptAlongDeal'
      > & { functionName?: 'acceptAlongDeal' }
    : UseContractWriteConfig<TMode, typeof shaKeeperABI, 'acceptAlongDeal'> & {
        abi?: never
        functionName?: 'acceptAlongDeal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shaKeeperABI, 'acceptAlongDeal'>({
    abi: shaKeeperABI,
    functionName: 'acceptAlongDeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"acceptFirstRefusal"`.
 */
export function useShaKeeperAcceptFirstRefusal<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shaKeeperABI,
          'acceptFirstRefusal'
        >['abi'],
        'acceptFirstRefusal'
      > & { functionName?: 'acceptFirstRefusal' }
    : UseContractWriteConfig<
        TMode,
        typeof shaKeeperABI,
        'acceptFirstRefusal'
      > & {
        abi?: never
        functionName?: 'acceptFirstRefusal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shaKeeperABI, 'acceptFirstRefusal'>({
    abi: shaKeeperABI,
    functionName: 'acceptFirstRefusal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"execAlongRight"`.
 */
export function useShaKeeperExecAlongRight<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shaKeeperABI,
          'execAlongRight'
        >['abi'],
        'execAlongRight'
      > & { functionName?: 'execAlongRight' }
    : UseContractWriteConfig<TMode, typeof shaKeeperABI, 'execAlongRight'> & {
        abi?: never
        functionName?: 'execAlongRight'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shaKeeperABI, 'execAlongRight'>({
    abi: shaKeeperABI,
    functionName: 'execAlongRight',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"execAntiDilution"`.
 */
export function useShaKeeperExecAntiDilution<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shaKeeperABI,
          'execAntiDilution'
        >['abi'],
        'execAntiDilution'
      > & { functionName?: 'execAntiDilution' }
    : UseContractWriteConfig<TMode, typeof shaKeeperABI, 'execAntiDilution'> & {
        abi?: never
        functionName?: 'execAntiDilution'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shaKeeperABI, 'execAntiDilution'>({
    abi: shaKeeperABI,
    functionName: 'execAntiDilution',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"execFirstRefusal"`.
 */
export function useShaKeeperExecFirstRefusal<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shaKeeperABI,
          'execFirstRefusal'
        >['abi'],
        'execFirstRefusal'
      > & { functionName?: 'execFirstRefusal' }
    : UseContractWriteConfig<TMode, typeof shaKeeperABI, 'execFirstRefusal'> & {
        abi?: never
        functionName?: 'execFirstRefusal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shaKeeperABI, 'execFirstRefusal'>({
    abi: shaKeeperABI,
    functionName: 'execFirstRefusal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"grantRole"`.
 */
export function useShaKeeperGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof shaKeeperABI, 'grantRole'>['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof shaKeeperABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shaKeeperABI, 'grantRole'>({
    abi: shaKeeperABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"init"`.
 */
export function useShaKeeperInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof shaKeeperABI, 'init'>['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof shaKeeperABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shaKeeperABI, 'init'>({
    abi: shaKeeperABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"lockContents"`.
 */
export function useShaKeeperLockContents<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof shaKeeperABI, 'lockContents'>['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<TMode, typeof shaKeeperABI, 'lockContents'> & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shaKeeperABI, 'lockContents'>({
    abi: shaKeeperABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function useShaKeeperRemoveDirectKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shaKeeperABI,
          'removeDirectKeeper'
        >['abi'],
        'removeDirectKeeper'
      > & { functionName?: 'removeDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof shaKeeperABI,
        'removeDirectKeeper'
      > & {
        abi?: never
        functionName?: 'removeDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shaKeeperABI, 'removeDirectKeeper'>({
    abi: shaKeeperABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useShaKeeperRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof shaKeeperABI, 'renounceRole'>['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<TMode, typeof shaKeeperABI, 'renounceRole'> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shaKeeperABI, 'renounceRole'>({
    abi: shaKeeperABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useShaKeeperRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof shaKeeperABI, 'revokeRole'>['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof shaKeeperABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shaKeeperABI, 'revokeRole'>({
    abi: shaKeeperABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useShaKeeperSetDirectKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shaKeeperABI,
          'setDirectKeeper'
        >['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<TMode, typeof shaKeeperABI, 'setDirectKeeper'> & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shaKeeperABI, 'setDirectKeeper'>({
    abi: shaKeeperABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function useShaKeeperSetGeneralCounsel<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shaKeeperABI,
          'setGeneralCounsel'
        >['abi'],
        'setGeneralCounsel'
      > & { functionName?: 'setGeneralCounsel' }
    : UseContractWriteConfig<
        TMode,
        typeof shaKeeperABI,
        'setGeneralCounsel'
      > & {
        abi?: never
        functionName?: 'setGeneralCounsel'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shaKeeperABI, 'setGeneralCounsel'>({
    abi: shaKeeperABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"setOwner"`.
 */
export function useShaKeeperSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof shaKeeperABI, 'setOwner'>['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof shaKeeperABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shaKeeperABI, 'setOwner'>({
    abi: shaKeeperABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useShaKeeperSetRoleAdmin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof shaKeeperABI, 'setRoleAdmin'>['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<TMode, typeof shaKeeperABI, 'setRoleAdmin'> & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shaKeeperABI, 'setRoleAdmin'>({
    abi: shaKeeperABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"takeGiftShares"`.
 */
export function useShaKeeperTakeGiftShares<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shaKeeperABI,
          'takeGiftShares'
        >['abi'],
        'takeGiftShares'
      > & { functionName?: 'takeGiftShares' }
    : UseContractWriteConfig<TMode, typeof shaKeeperABI, 'takeGiftShares'> & {
        abi?: never
        functionName?: 'takeGiftShares'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shaKeeperABI, 'takeGiftShares'>({
    abi: shaKeeperABI,
    functionName: 'takeGiftShares',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shaKeeperABI}__.
 */
export function usePrepareShaKeeperWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof shaKeeperABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shaKeeperABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof shaKeeperABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareShaKeeperAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof shaKeeperABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shaKeeperABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof shaKeeperABI, 'abandonRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"acceptAlongDeal"`.
 */
export function usePrepareShaKeeperAcceptAlongDeal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof shaKeeperABI, 'acceptAlongDeal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shaKeeperABI,
    functionName: 'acceptAlongDeal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof shaKeeperABI, 'acceptAlongDeal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"acceptFirstRefusal"`.
 */
export function usePrepareShaKeeperAcceptFirstRefusal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof shaKeeperABI, 'acceptFirstRefusal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shaKeeperABI,
    functionName: 'acceptFirstRefusal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof shaKeeperABI, 'acceptFirstRefusal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"execAlongRight"`.
 */
export function usePrepareShaKeeperExecAlongRight(
  config: Omit<
    UsePrepareContractWriteConfig<typeof shaKeeperABI, 'execAlongRight'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shaKeeperABI,
    functionName: 'execAlongRight',
    ...config,
  } as UsePrepareContractWriteConfig<typeof shaKeeperABI, 'execAlongRight'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"execAntiDilution"`.
 */
export function usePrepareShaKeeperExecAntiDilution(
  config: Omit<
    UsePrepareContractWriteConfig<typeof shaKeeperABI, 'execAntiDilution'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shaKeeperABI,
    functionName: 'execAntiDilution',
    ...config,
  } as UsePrepareContractWriteConfig<typeof shaKeeperABI, 'execAntiDilution'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"execFirstRefusal"`.
 */
export function usePrepareShaKeeperExecFirstRefusal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof shaKeeperABI, 'execFirstRefusal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shaKeeperABI,
    functionName: 'execFirstRefusal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof shaKeeperABI, 'execFirstRefusal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareShaKeeperGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof shaKeeperABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shaKeeperABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof shaKeeperABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareShaKeeperInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof shaKeeperABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shaKeeperABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof shaKeeperABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareShaKeeperLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<typeof shaKeeperABI, 'lockContents'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shaKeeperABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<typeof shaKeeperABI, 'lockContents'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function usePrepareShaKeeperRemoveDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof shaKeeperABI, 'removeDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shaKeeperABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof shaKeeperABI, 'removeDirectKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareShaKeeperRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof shaKeeperABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shaKeeperABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof shaKeeperABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareShaKeeperRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof shaKeeperABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shaKeeperABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof shaKeeperABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareShaKeeperSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof shaKeeperABI, 'setDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shaKeeperABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof shaKeeperABI, 'setDirectKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function usePrepareShaKeeperSetGeneralCounsel(
  config: Omit<
    UsePrepareContractWriteConfig<typeof shaKeeperABI, 'setGeneralCounsel'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shaKeeperABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as UsePrepareContractWriteConfig<typeof shaKeeperABI, 'setGeneralCounsel'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareShaKeeperSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof shaKeeperABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shaKeeperABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof shaKeeperABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareShaKeeperSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof shaKeeperABI, 'setRoleAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shaKeeperABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof shaKeeperABI, 'setRoleAdmin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shaKeeperABI}__ and `functionName` set to `"takeGiftShares"`.
 */
export function usePrepareShaKeeperTakeGiftShares(
  config: Omit<
    UsePrepareContractWriteConfig<typeof shaKeeperABI, 'takeGiftShares'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shaKeeperABI,
    functionName: 'takeGiftShares',
    ...config,
  } as UsePrepareContractWriteConfig<typeof shaKeeperABI, 'takeGiftShares'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link shaKeeperABI}__.
 */
export function useShaKeeperEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof shaKeeperABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: shaKeeperABI,
    ...config,
  } as UseContractEventConfig<typeof shaKeeperABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link shaKeeperABI}__ and `eventName` set to `"Init"`.
 */
export function useShaKeeperInitEvent(
  config: Omit<
    UseContractEventConfig<typeof shaKeeperABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: shaKeeperABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof shaKeeperABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link shaKeeperABI}__ and `eventName` set to `"LockContents"`.
 */
export function useShaKeeperLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof shaKeeperABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: shaKeeperABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof shaKeeperABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link shaKeeperABI}__ and `eventName` set to `"RemoveDirectKeeper"`.
 */
export function useShaKeeperRemoveDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof shaKeeperABI, 'RemoveDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: shaKeeperABI,
    eventName: 'RemoveDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof shaKeeperABI, 'RemoveDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link shaKeeperABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useShaKeeperSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof shaKeeperABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: shaKeeperABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof shaKeeperABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link shaKeeperABI}__ and `eventName` set to `"SetGeneralCounsel"`.
 */
export function useShaKeeperSetGeneralCounselEvent(
  config: Omit<
    UseContractEventConfig<typeof shaKeeperABI, 'SetGeneralCounsel'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: shaKeeperABI,
    eventName: 'SetGeneralCounsel',
    ...config,
  } as UseContractEventConfig<typeof shaKeeperABI, 'SetGeneralCounsel'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link shaKeeperABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useShaKeeperSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof shaKeeperABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: shaKeeperABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof shaKeeperABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link bookOfIaABI}__.
 */
export function useBookOfIa(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: bookOfIaABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfIaABI}__.
 */
export function useBookOfIaRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof bookOfIaABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfIaABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfIaABI,
    ...config,
  } as UseContractReadConfig<typeof bookOfIaABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"claimsOfFR"`.
 */
export function useBookOfIaClaimsOfFr<
  TSelectData = ReadContractResult<typeof bookOfIaABI, 'claimsOfFR'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfIaABI, 'claimsOfFR', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfIaABI,
    functionName: 'claimsOfFR',
    ...config,
  } as UseContractReadConfig<typeof bookOfIaABI, 'claimsOfFR', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"closingDeadline"`.
 */
export function useBookOfIaClosingDeadline<
  TSelectData = ReadContractResult<typeof bookOfIaABI, 'closingDeadline'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfIaABI, 'closingDeadline', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfIaABI,
    functionName: 'closingDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfIaABI,
    'closingDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"finalized"`.
 */
export function useBookOfIaFinalized<
  TSelectData = ReadContractResult<typeof bookOfIaABI, 'finalized'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfIaABI, 'finalized', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfIaABI,
    functionName: 'finalized',
    ...config,
  } as UseContractReadConfig<typeof bookOfIaABI, 'finalized', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"getBookeeper"`.
 */
export function useBookOfIaGetBookeeper<
  TSelectData = ReadContractResult<typeof bookOfIaABI, 'getBookeeper'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfIaABI, 'getBookeeper', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfIaABI,
    functionName: 'getBookeeper',
    ...config,
  } as UseContractReadConfig<typeof bookOfIaABI, 'getBookeeper', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"getDTClaimForShare"`.
 */
export function useBookOfIaGetDtClaimForShare<
  TSelectData = ReadContractResult<typeof bookOfIaABI, 'getDTClaimForShare'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bookOfIaABI,
      'getDTClaimForShare',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfIaABI,
    functionName: 'getDTClaimForShare',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfIaABI,
    'getDTClaimForShare',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"getDTClaimsForDeal"`.
 */
export function useBookOfIaGetDtClaimsForDeal<
  TSelectData = ReadContractResult<typeof bookOfIaABI, 'getDTClaimsForDeal'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bookOfIaABI,
      'getDTClaimsForDeal',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfIaABI,
    functionName: 'getDTClaimsForDeal',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfIaABI,
    'getDTClaimsForDeal',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"getDraggingDeals"`.
 */
export function useBookOfIaGetDraggingDeals<
  TSelectData = ReadContractResult<typeof bookOfIaABI, 'getDraggingDeals'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfIaABI, 'getDraggingDeals', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfIaABI,
    functionName: 'getDraggingDeals',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfIaABI,
    'getDraggingDeals',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"getFile"`.
 */
export function useBookOfIaGetFile<
  TSelectData = ReadContractResult<typeof bookOfIaABI, 'getFile'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfIaABI, 'getFile', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfIaABI,
    functionName: 'getFile',
    ...config,
  } as UseContractReadConfig<typeof bookOfIaABI, 'getFile', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"getFilesList"`.
 */
export function useBookOfIaGetFilesList<
  TSelectData = ReadContractResult<typeof bookOfIaABI, 'getFilesList'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfIaABI, 'getFilesList', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfIaABI,
    functionName: 'getFilesList',
    ...config,
  } as UseContractReadConfig<typeof bookOfIaABI, 'getFilesList', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"getGeneralCounsel"`.
 */
export function useBookOfIaGetGeneralCounsel<
  TSelectData = ReadContractResult<typeof bookOfIaABI, 'getGeneralCounsel'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfIaABI, 'getGeneralCounsel', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfIaABI,
    functionName: 'getGeneralCounsel',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfIaABI,
    'getGeneralCounsel',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"getHeadOfFile"`.
 */
export function useBookOfIaGetHeadOfFile<
  TSelectData = ReadContractResult<typeof bookOfIaABI, 'getHeadOfFile'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfIaABI, 'getHeadOfFile', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfIaABI,
    functionName: 'getHeadOfFile',
    ...config,
  } as UseContractReadConfig<typeof bookOfIaABI, 'getHeadOfFile', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"getOwner"`.
 */
export function useBookOfIaGetOwner<
  TSelectData = ReadContractResult<typeof bookOfIaABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfIaABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfIaABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<typeof bookOfIaABI, 'getOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"getRefOfFile"`.
 */
export function useBookOfIaGetRefOfFile<
  TSelectData = ReadContractResult<typeof bookOfIaABI, 'getRefOfFile'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfIaABI, 'getRefOfFile', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfIaABI,
    functionName: 'getRefOfFile',
    ...config,
  } as UseContractReadConfig<typeof bookOfIaABI, 'getRefOfFile', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"getSNOfFile"`.
 */
export function useBookOfIaGetSnOfFile<
  TSelectData = ReadContractResult<typeof bookOfIaABI, 'getSNOfFile'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfIaABI, 'getSNOfFile', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfIaABI,
    functionName: 'getSNOfFile',
    ...config,
  } as UseContractReadConfig<typeof bookOfIaABI, 'getSNOfFile', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"hasDTClaims"`.
 */
export function useBookOfIaHasDtClaims<
  TSelectData = ReadContractResult<typeof bookOfIaABI, 'hasDTClaims'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfIaABI, 'hasDTClaims', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfIaABI,
    functionName: 'hasDTClaims',
    ...config,
  } as UseContractReadConfig<typeof bookOfIaABI, 'hasDTClaims', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"hasRole"`.
 */
export function useBookOfIaHasRole<
  TSelectData = ReadContractResult<typeof bookOfIaABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfIaABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfIaABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof bookOfIaABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"isFRClaimer"`.
 */
export function useBookOfIaIsFrClaimer<
  TSelectData = ReadContractResult<typeof bookOfIaABI, 'isFRClaimer'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfIaABI, 'isFRClaimer', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfIaABI,
    functionName: 'isFRClaimer',
    ...config,
  } as UseContractReadConfig<typeof bookOfIaABI, 'isFRClaimer', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"isRegistered"`.
 */
export function useBookOfIaIsRegistered<
  TSelectData = ReadContractResult<typeof bookOfIaABI, 'isRegistered'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfIaABI, 'isRegistered', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfIaABI,
    functionName: 'isRegistered',
    ...config,
  } as UseContractReadConfig<typeof bookOfIaABI, 'isRegistered', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"mockResultsOfAcct"`.
 */
export function useBookOfIaMockResultsOfAcct<
  TSelectData = ReadContractResult<typeof bookOfIaABI, 'mockResultsOfAcct'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfIaABI, 'mockResultsOfAcct', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfIaABI,
    functionName: 'mockResultsOfAcct',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfIaABI,
    'mockResultsOfAcct',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"mockResultsOfIA"`.
 */
export function useBookOfIaMockResultsOfIa<
  TSelectData = ReadContractResult<typeof bookOfIaABI, 'mockResultsOfIA'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfIaABI, 'mockResultsOfIA', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfIaABI,
    functionName: 'mockResultsOfIA',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfIaABI,
    'mockResultsOfIA',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"qtyOfFiles"`.
 */
export function useBookOfIaQtyOfFiles<
  TSelectData = ReadContractResult<typeof bookOfIaABI, 'qtyOfFiles'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfIaABI, 'qtyOfFiles', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfIaABI,
    functionName: 'qtyOfFiles',
    ...config,
  } as UseContractReadConfig<typeof bookOfIaABI, 'qtyOfFiles', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"shaExecDeadline"`.
 */
export function useBookOfIaShaExecDeadline<
  TSelectData = ReadContractResult<typeof bookOfIaABI, 'shaExecDeadline'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfIaABI, 'shaExecDeadline', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfIaABI,
    functionName: 'shaExecDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfIaABI,
    'shaExecDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"signingDeadline"`.
 */
export function useBookOfIaSigningDeadline<
  TSelectData = ReadContractResult<typeof bookOfIaABI, 'signingDeadline'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfIaABI, 'signingDeadline', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfIaABI,
    functionName: 'signingDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfIaABI,
    'signingDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"terminateStartpoint"`.
 */
export function useBookOfIaTerminateStartpoint<
  TSelectData = ReadContractResult<typeof bookOfIaABI, 'terminateStartpoint'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bookOfIaABI,
      'terminateStartpoint',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfIaABI,
    functionName: 'terminateStartpoint',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfIaABI,
    'terminateStartpoint',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"votingDeadline"`.
 */
export function useBookOfIaVotingDeadline<
  TSelectData = ReadContractResult<typeof bookOfIaABI, 'votingDeadline'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfIaABI, 'votingDeadline', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfIaABI,
    functionName: 'votingDeadline',
    ...config,
  } as UseContractReadConfig<typeof bookOfIaABI, 'votingDeadline', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfIaABI}__.
 */
export function useBookOfIaWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfIaABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof bookOfIaABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfIaABI, TFunctionName>({
    abi: bookOfIaABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useBookOfIaAbandonRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfIaABI, 'abandonRole'>['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<TMode, typeof bookOfIaABI, 'abandonRole'> & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfIaABI, 'abandonRole'>({
    abi: bookOfIaABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"acceptFirstRefusalClaims"`.
 */
export function useBookOfIaAcceptFirstRefusalClaims<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfIaABI,
          'acceptFirstRefusalClaims'
        >['abi'],
        'acceptFirstRefusalClaims'
      > & { functionName?: 'acceptFirstRefusalClaims' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfIaABI,
        'acceptFirstRefusalClaims'
      > & {
        abi?: never
        functionName?: 'acceptFirstRefusalClaims'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof bookOfIaABI,
    'acceptFirstRefusalClaims'
  >({
    abi: bookOfIaABI,
    functionName: 'acceptFirstRefusalClaims',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"circulateFile"`.
 */
export function useBookOfIaCirculateFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfIaABI, 'circulateFile'>['abi'],
        'circulateFile'
      > & { functionName?: 'circulateFile' }
    : UseContractWriteConfig<TMode, typeof bookOfIaABI, 'circulateFile'> & {
        abi?: never
        functionName?: 'circulateFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfIaABI, 'circulateFile'>({
    abi: bookOfIaABI,
    functionName: 'circulateFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"createMockOfIA"`.
 */
export function useBookOfIaCreateMockOfIa<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfIaABI, 'createMockOfIA'>['abi'],
        'createMockOfIA'
      > & { functionName?: 'createMockOfIA' }
    : UseContractWriteConfig<TMode, typeof bookOfIaABI, 'createMockOfIA'> & {
        abi?: never
        functionName?: 'createMockOfIA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfIaABI, 'createMockOfIA'>({
    abi: bookOfIaABI,
    functionName: 'createMockOfIA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"establishFile"`.
 */
export function useBookOfIaEstablishFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfIaABI, 'establishFile'>['abi'],
        'establishFile'
      > & { functionName?: 'establishFile' }
    : UseContractWriteConfig<TMode, typeof bookOfIaABI, 'establishFile'> & {
        abi?: never
        functionName?: 'establishFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfIaABI, 'establishFile'>({
    abi: bookOfIaABI,
    functionName: 'establishFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"execAlongRight"`.
 */
export function useBookOfIaExecAlongRight<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfIaABI, 'execAlongRight'>['abi'],
        'execAlongRight'
      > & { functionName?: 'execAlongRight' }
    : UseContractWriteConfig<TMode, typeof bookOfIaABI, 'execAlongRight'> & {
        abi?: never
        functionName?: 'execAlongRight'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfIaABI, 'execAlongRight'>({
    abi: bookOfIaABI,
    functionName: 'execAlongRight',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"execFile"`.
 */
export function useBookOfIaExecFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfIaABI, 'execFile'>['abi'],
        'execFile'
      > & { functionName?: 'execFile' }
    : UseContractWriteConfig<TMode, typeof bookOfIaABI, 'execFile'> & {
        abi?: never
        functionName?: 'execFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfIaABI, 'execFile'>({
    abi: bookOfIaABI,
    functionName: 'execFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"execFirstRefusalRight"`.
 */
export function useBookOfIaExecFirstRefusalRight<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfIaABI,
          'execFirstRefusalRight'
        >['abi'],
        'execFirstRefusalRight'
      > & { functionName?: 'execFirstRefusalRight' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfIaABI,
        'execFirstRefusalRight'
      > & {
        abi?: never
        functionName?: 'execFirstRefusalRight'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfIaABI, 'execFirstRefusalRight'>({
    abi: bookOfIaABI,
    functionName: 'execFirstRefusalRight',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"grantRole"`.
 */
export function useBookOfIaGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfIaABI, 'grantRole'>['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof bookOfIaABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfIaABI, 'grantRole'>({
    abi: bookOfIaABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"init"`.
 */
export function useBookOfIaInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfIaABI, 'init'>['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof bookOfIaABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfIaABI, 'init'>({
    abi: bookOfIaABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"lockContents"`.
 */
export function useBookOfIaLockContents<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfIaABI, 'lockContents'>['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<TMode, typeof bookOfIaABI, 'lockContents'> & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfIaABI, 'lockContents'>({
    abi: bookOfIaABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"mockDealOfBuy"`.
 */
export function useBookOfIaMockDealOfBuy<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfIaABI, 'mockDealOfBuy'>['abi'],
        'mockDealOfBuy'
      > & { functionName?: 'mockDealOfBuy' }
    : UseContractWriteConfig<TMode, typeof bookOfIaABI, 'mockDealOfBuy'> & {
        abi?: never
        functionName?: 'mockDealOfBuy'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfIaABI, 'mockDealOfBuy'>({
    abi: bookOfIaABI,
    functionName: 'mockDealOfBuy',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"mockDealOfSell"`.
 */
export function useBookOfIaMockDealOfSell<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfIaABI, 'mockDealOfSell'>['abi'],
        'mockDealOfSell'
      > & { functionName?: 'mockDealOfSell' }
    : UseContractWriteConfig<TMode, typeof bookOfIaABI, 'mockDealOfSell'> & {
        abi?: never
        functionName?: 'mockDealOfSell'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfIaABI, 'mockDealOfSell'>({
    abi: bookOfIaABI,
    functionName: 'mockDealOfSell',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"proposeFile"`.
 */
export function useBookOfIaProposeFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfIaABI, 'proposeFile'>['abi'],
        'proposeFile'
      > & { functionName?: 'proposeFile' }
    : UseContractWriteConfig<TMode, typeof bookOfIaABI, 'proposeFile'> & {
        abi?: never
        functionName?: 'proposeFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfIaABI, 'proposeFile'>({
    abi: bookOfIaABI,
    functionName: 'proposeFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"regFile"`.
 */
export function useBookOfIaRegFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfIaABI, 'regFile'>['abi'],
        'regFile'
      > & { functionName?: 'regFile' }
    : UseContractWriteConfig<TMode, typeof bookOfIaABI, 'regFile'> & {
        abi?: never
        functionName?: 'regFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfIaABI, 'regFile'>({
    abi: bookOfIaABI,
    functionName: 'regFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function useBookOfIaRemoveDirectKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfIaABI,
          'removeDirectKeeper'
        >['abi'],
        'removeDirectKeeper'
      > & { functionName?: 'removeDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfIaABI,
        'removeDirectKeeper'
      > & {
        abi?: never
        functionName?: 'removeDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfIaABI, 'removeDirectKeeper'>({
    abi: bookOfIaABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useBookOfIaRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfIaABI, 'renounceRole'>['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<TMode, typeof bookOfIaABI, 'renounceRole'> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfIaABI, 'renounceRole'>({
    abi: bookOfIaABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useBookOfIaRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfIaABI, 'revokeRole'>['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof bookOfIaABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfIaABI, 'revokeRole'>({
    abi: bookOfIaABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useBookOfIaSetDirectKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfIaABI,
          'setDirectKeeper'
        >['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<TMode, typeof bookOfIaABI, 'setDirectKeeper'> & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfIaABI, 'setDirectKeeper'>({
    abi: bookOfIaABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function useBookOfIaSetGeneralCounsel<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfIaABI,
          'setGeneralCounsel'
        >['abi'],
        'setGeneralCounsel'
      > & { functionName?: 'setGeneralCounsel' }
    : UseContractWriteConfig<TMode, typeof bookOfIaABI, 'setGeneralCounsel'> & {
        abi?: never
        functionName?: 'setGeneralCounsel'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfIaABI, 'setGeneralCounsel'>({
    abi: bookOfIaABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"setOwner"`.
 */
export function useBookOfIaSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfIaABI, 'setOwner'>['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof bookOfIaABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfIaABI, 'setOwner'>({
    abi: bookOfIaABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useBookOfIaSetRoleAdmin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfIaABI, 'setRoleAdmin'>['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<TMode, typeof bookOfIaABI, 'setRoleAdmin'> & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfIaABI, 'setRoleAdmin'>({
    abi: bookOfIaABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"setStateOfFile"`.
 */
export function useBookOfIaSetStateOfFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfIaABI, 'setStateOfFile'>['abi'],
        'setStateOfFile'
      > & { functionName?: 'setStateOfFile' }
    : UseContractWriteConfig<TMode, typeof bookOfIaABI, 'setStateOfFile'> & {
        abi?: never
        functionName?: 'setStateOfFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfIaABI, 'setStateOfFile'>({
    abi: bookOfIaABI,
    functionName: 'setStateOfFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"terminateFile"`.
 */
export function useBookOfIaTerminateFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfIaABI, 'terminateFile'>['abi'],
        'terminateFile'
      > & { functionName?: 'terminateFile' }
    : UseContractWriteConfig<TMode, typeof bookOfIaABI, 'terminateFile'> & {
        abi?: never
        functionName?: 'terminateFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfIaABI, 'terminateFile'>({
    abi: bookOfIaABI,
    functionName: 'terminateFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"voteCountingForFile"`.
 */
export function useBookOfIaVoteCountingForFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfIaABI,
          'voteCountingForFile'
        >['abi'],
        'voteCountingForFile'
      > & { functionName?: 'voteCountingForFile' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfIaABI,
        'voteCountingForFile'
      > & {
        abi?: never
        functionName?: 'voteCountingForFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfIaABI, 'voteCountingForFile'>({
    abi: bookOfIaABI,
    functionName: 'voteCountingForFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfIaABI}__.
 */
export function usePrepareBookOfIaWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfIaABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfIaABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfIaABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareBookOfIaAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfIaABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfIaABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfIaABI, 'abandonRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"acceptFirstRefusalClaims"`.
 */
export function usePrepareBookOfIaAcceptFirstRefusalClaims(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof bookOfIaABI,
      'acceptFirstRefusalClaims'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfIaABI,
    functionName: 'acceptFirstRefusalClaims',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bookOfIaABI,
    'acceptFirstRefusalClaims'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"circulateFile"`.
 */
export function usePrepareBookOfIaCirculateFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfIaABI, 'circulateFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfIaABI,
    functionName: 'circulateFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfIaABI, 'circulateFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"createMockOfIA"`.
 */
export function usePrepareBookOfIaCreateMockOfIa(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfIaABI, 'createMockOfIA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfIaABI,
    functionName: 'createMockOfIA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfIaABI, 'createMockOfIA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"establishFile"`.
 */
export function usePrepareBookOfIaEstablishFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfIaABI, 'establishFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfIaABI,
    functionName: 'establishFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfIaABI, 'establishFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"execAlongRight"`.
 */
export function usePrepareBookOfIaExecAlongRight(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfIaABI, 'execAlongRight'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfIaABI,
    functionName: 'execAlongRight',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfIaABI, 'execAlongRight'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"execFile"`.
 */
export function usePrepareBookOfIaExecFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfIaABI, 'execFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfIaABI,
    functionName: 'execFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfIaABI, 'execFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"execFirstRefusalRight"`.
 */
export function usePrepareBookOfIaExecFirstRefusalRight(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfIaABI, 'execFirstRefusalRight'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfIaABI,
    functionName: 'execFirstRefusalRight',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bookOfIaABI,
    'execFirstRefusalRight'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareBookOfIaGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfIaABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfIaABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfIaABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareBookOfIaInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfIaABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfIaABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfIaABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareBookOfIaLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfIaABI, 'lockContents'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfIaABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfIaABI, 'lockContents'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"mockDealOfBuy"`.
 */
export function usePrepareBookOfIaMockDealOfBuy(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfIaABI, 'mockDealOfBuy'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfIaABI,
    functionName: 'mockDealOfBuy',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfIaABI, 'mockDealOfBuy'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"mockDealOfSell"`.
 */
export function usePrepareBookOfIaMockDealOfSell(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfIaABI, 'mockDealOfSell'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfIaABI,
    functionName: 'mockDealOfSell',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfIaABI, 'mockDealOfSell'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"proposeFile"`.
 */
export function usePrepareBookOfIaProposeFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfIaABI, 'proposeFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfIaABI,
    functionName: 'proposeFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfIaABI, 'proposeFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"regFile"`.
 */
export function usePrepareBookOfIaRegFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfIaABI, 'regFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfIaABI,
    functionName: 'regFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfIaABI, 'regFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function usePrepareBookOfIaRemoveDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfIaABI, 'removeDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfIaABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfIaABI, 'removeDirectKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareBookOfIaRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfIaABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfIaABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfIaABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareBookOfIaRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfIaABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfIaABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfIaABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareBookOfIaSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfIaABI, 'setDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfIaABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfIaABI, 'setDirectKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function usePrepareBookOfIaSetGeneralCounsel(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfIaABI, 'setGeneralCounsel'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfIaABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfIaABI, 'setGeneralCounsel'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareBookOfIaSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfIaABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfIaABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfIaABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareBookOfIaSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfIaABI, 'setRoleAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfIaABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfIaABI, 'setRoleAdmin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"setStateOfFile"`.
 */
export function usePrepareBookOfIaSetStateOfFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfIaABI, 'setStateOfFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfIaABI,
    functionName: 'setStateOfFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfIaABI, 'setStateOfFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"terminateFile"`.
 */
export function usePrepareBookOfIaTerminateFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfIaABI, 'terminateFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfIaABI,
    functionName: 'terminateFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfIaABI, 'terminateFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfIaABI}__ and `functionName` set to `"voteCountingForFile"`.
 */
export function usePrepareBookOfIaVoteCountingForFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfIaABI, 'voteCountingForFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfIaABI,
    functionName: 'voteCountingForFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfIaABI, 'voteCountingForFile'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfIaABI}__.
 */
export function useBookOfIaEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof bookOfIaABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfIaABI,
    ...config,
  } as UseContractEventConfig<typeof bookOfIaABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfIaABI}__ and `eventName` set to `"AcceptFirstRefusalClaims"`.
 */
export function useBookOfIaAcceptFirstRefusalClaimsEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfIaABI, 'AcceptFirstRefusalClaims'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfIaABI,
    eventName: 'AcceptFirstRefusalClaims',
    ...config,
  } as UseContractEventConfig<typeof bookOfIaABI, 'AcceptFirstRefusalClaims'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfIaABI}__ and `eventName` set to `"ExecAlongRight"`.
 */
export function useBookOfIaExecAlongRightEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfIaABI, 'ExecAlongRight'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfIaABI,
    eventName: 'ExecAlongRight',
    ...config,
  } as UseContractEventConfig<typeof bookOfIaABI, 'ExecAlongRight'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfIaABI}__ and `eventName` set to `"ExecFirstRefusalRight"`.
 */
export function useBookOfIaExecFirstRefusalRightEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfIaABI, 'ExecFirstRefusalRight'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfIaABI,
    eventName: 'ExecFirstRefusalRight',
    ...config,
  } as UseContractEventConfig<typeof bookOfIaABI, 'ExecFirstRefusalRight'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfIaABI}__ and `eventName` set to `"Init"`.
 */
export function useBookOfIaInitEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfIaABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfIaABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof bookOfIaABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfIaABI}__ and `eventName` set to `"LockContents"`.
 */
export function useBookOfIaLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfIaABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfIaABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof bookOfIaABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfIaABI}__ and `eventName` set to `"RemoveDirectKeeper"`.
 */
export function useBookOfIaRemoveDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfIaABI, 'RemoveDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfIaABI,
    eventName: 'RemoveDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof bookOfIaABI, 'RemoveDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfIaABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useBookOfIaSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfIaABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfIaABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof bookOfIaABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfIaABI}__ and `eventName` set to `"SetGeneralCounsel"`.
 */
export function useBookOfIaSetGeneralCounselEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfIaABI, 'SetGeneralCounsel'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfIaABI,
    eventName: 'SetGeneralCounsel',
    ...config,
  } as UseContractEventConfig<typeof bookOfIaABI, 'SetGeneralCounsel'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfIaABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useBookOfIaSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfIaABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfIaABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof bookOfIaABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfIaABI}__ and `eventName` set to `"UpdateStateOfFile"`.
 */
export function useBookOfIaUpdateStateOfFileEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfIaABI, 'UpdateStateOfFile'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfIaABI,
    eventName: 'UpdateStateOfFile',
    ...config,
  } as UseContractEventConfig<typeof bookOfIaABI, 'UpdateStateOfFile'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iBookOfIaABI}__.
 */
export function useIBookOfIa(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iBookOfIaABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfIaABI}__.
 */
export function useIBookOfIaRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iBookOfIaABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfIaABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfIaABI,
    ...config,
  } as UseContractReadConfig<typeof iBookOfIaABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfIaABI}__ and `functionName` set to `"closingDeadline"`.
 */
export function useIBookOfIaClosingDeadline<
  TSelectData = ReadContractResult<typeof iBookOfIaABI, 'closingDeadline'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfIaABI, 'closingDeadline', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfIaABI,
    functionName: 'closingDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfIaABI,
    'closingDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfIaABI}__ and `functionName` set to `"getDTClaimForShare"`.
 */
export function useIBookOfIaGetDtClaimForShare<
  TSelectData = ReadContractResult<typeof iBookOfIaABI, 'getDTClaimForShare'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfIaABI,
      'getDTClaimForShare',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfIaABI,
    functionName: 'getDTClaimForShare',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfIaABI,
    'getDTClaimForShare',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfIaABI}__ and `functionName` set to `"getDTClaimsForDeal"`.
 */
export function useIBookOfIaGetDtClaimsForDeal<
  TSelectData = ReadContractResult<typeof iBookOfIaABI, 'getDTClaimsForDeal'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfIaABI,
      'getDTClaimsForDeal',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfIaABI,
    functionName: 'getDTClaimsForDeal',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfIaABI,
    'getDTClaimsForDeal',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfIaABI}__ and `functionName` set to `"getDraggingDeals"`.
 */
export function useIBookOfIaGetDraggingDeals<
  TSelectData = ReadContractResult<typeof iBookOfIaABI, 'getDraggingDeals'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfIaABI, 'getDraggingDeals', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfIaABI,
    functionName: 'getDraggingDeals',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfIaABI,
    'getDraggingDeals',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfIaABI}__ and `functionName` set to `"getFile"`.
 */
export function useIBookOfIaGetFile<
  TSelectData = ReadContractResult<typeof iBookOfIaABI, 'getFile'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfIaABI, 'getFile', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfIaABI,
    functionName: 'getFile',
    ...config,
  } as UseContractReadConfig<typeof iBookOfIaABI, 'getFile', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfIaABI}__ and `functionName` set to `"getFilesList"`.
 */
export function useIBookOfIaGetFilesList<
  TSelectData = ReadContractResult<typeof iBookOfIaABI, 'getFilesList'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfIaABI, 'getFilesList', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfIaABI,
    functionName: 'getFilesList',
    ...config,
  } as UseContractReadConfig<typeof iBookOfIaABI, 'getFilesList', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfIaABI}__ and `functionName` set to `"getHeadOfFile"`.
 */
export function useIBookOfIaGetHeadOfFile<
  TSelectData = ReadContractResult<typeof iBookOfIaABI, 'getHeadOfFile'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfIaABI, 'getHeadOfFile', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfIaABI,
    functionName: 'getHeadOfFile',
    ...config,
  } as UseContractReadConfig<typeof iBookOfIaABI, 'getHeadOfFile', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfIaABI}__ and `functionName` set to `"getRefOfFile"`.
 */
export function useIBookOfIaGetRefOfFile<
  TSelectData = ReadContractResult<typeof iBookOfIaABI, 'getRefOfFile'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfIaABI, 'getRefOfFile', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfIaABI,
    functionName: 'getRefOfFile',
    ...config,
  } as UseContractReadConfig<typeof iBookOfIaABI, 'getRefOfFile', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfIaABI}__ and `functionName` set to `"getSNOfFile"`.
 */
export function useIBookOfIaGetSnOfFile<
  TSelectData = ReadContractResult<typeof iBookOfIaABI, 'getSNOfFile'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfIaABI, 'getSNOfFile', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfIaABI,
    functionName: 'getSNOfFile',
    ...config,
  } as UseContractReadConfig<typeof iBookOfIaABI, 'getSNOfFile', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfIaABI}__ and `functionName` set to `"hasDTClaims"`.
 */
export function useIBookOfIaHasDtClaims<
  TSelectData = ReadContractResult<typeof iBookOfIaABI, 'hasDTClaims'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfIaABI, 'hasDTClaims', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfIaABI,
    functionName: 'hasDTClaims',
    ...config,
  } as UseContractReadConfig<typeof iBookOfIaABI, 'hasDTClaims', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfIaABI}__ and `functionName` set to `"isRegistered"`.
 */
export function useIBookOfIaIsRegistered<
  TSelectData = ReadContractResult<typeof iBookOfIaABI, 'isRegistered'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfIaABI, 'isRegistered', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfIaABI,
    functionName: 'isRegistered',
    ...config,
  } as UseContractReadConfig<typeof iBookOfIaABI, 'isRegistered', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfIaABI}__ and `functionName` set to `"mockResultsOfAcct"`.
 */
export function useIBookOfIaMockResultsOfAcct<
  TSelectData = ReadContractResult<typeof iBookOfIaABI, 'mockResultsOfAcct'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfIaABI,
      'mockResultsOfAcct',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfIaABI,
    functionName: 'mockResultsOfAcct',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfIaABI,
    'mockResultsOfAcct',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfIaABI}__ and `functionName` set to `"mockResultsOfIA"`.
 */
export function useIBookOfIaMockResultsOfIa<
  TSelectData = ReadContractResult<typeof iBookOfIaABI, 'mockResultsOfIA'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfIaABI, 'mockResultsOfIA', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfIaABI,
    functionName: 'mockResultsOfIA',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfIaABI,
    'mockResultsOfIA',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfIaABI}__ and `functionName` set to `"qtyOfFiles"`.
 */
export function useIBookOfIaQtyOfFiles<
  TSelectData = ReadContractResult<typeof iBookOfIaABI, 'qtyOfFiles'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfIaABI, 'qtyOfFiles', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfIaABI,
    functionName: 'qtyOfFiles',
    ...config,
  } as UseContractReadConfig<typeof iBookOfIaABI, 'qtyOfFiles', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfIaABI}__ and `functionName` set to `"shaExecDeadline"`.
 */
export function useIBookOfIaShaExecDeadline<
  TSelectData = ReadContractResult<typeof iBookOfIaABI, 'shaExecDeadline'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfIaABI, 'shaExecDeadline', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfIaABI,
    functionName: 'shaExecDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfIaABI,
    'shaExecDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfIaABI}__ and `functionName` set to `"signingDeadline"`.
 */
export function useIBookOfIaSigningDeadline<
  TSelectData = ReadContractResult<typeof iBookOfIaABI, 'signingDeadline'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfIaABI, 'signingDeadline', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfIaABI,
    functionName: 'signingDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfIaABI,
    'signingDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfIaABI}__ and `functionName` set to `"terminateStartpoint"`.
 */
export function useIBookOfIaTerminateStartpoint<
  TSelectData = ReadContractResult<typeof iBookOfIaABI, 'terminateStartpoint'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfIaABI,
      'terminateStartpoint',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfIaABI,
    functionName: 'terminateStartpoint',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfIaABI,
    'terminateStartpoint',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfIaABI}__ and `functionName` set to `"votingDeadline"`.
 */
export function useIBookOfIaVotingDeadline<
  TSelectData = ReadContractResult<typeof iBookOfIaABI, 'votingDeadline'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfIaABI, 'votingDeadline', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfIaABI,
    functionName: 'votingDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfIaABI,
    'votingDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfIaABI}__.
 */
export function useIBookOfIaWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iBookOfIaABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iBookOfIaABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfIaABI, TFunctionName>({
    abi: iBookOfIaABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfIaABI}__ and `functionName` set to `"acceptFirstRefusalClaims"`.
 */
export function useIBookOfIaAcceptFirstRefusalClaims<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfIaABI,
          'acceptFirstRefusalClaims'
        >['abi'],
        'acceptFirstRefusalClaims'
      > & { functionName?: 'acceptFirstRefusalClaims' }
    : UseContractWriteConfig<
        TMode,
        typeof iBookOfIaABI,
        'acceptFirstRefusalClaims'
      > & {
        abi?: never
        functionName?: 'acceptFirstRefusalClaims'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iBookOfIaABI,
    'acceptFirstRefusalClaims'
  >({
    abi: iBookOfIaABI,
    functionName: 'acceptFirstRefusalClaims',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfIaABI}__ and `functionName` set to `"circulateFile"`.
 */
export function useIBookOfIaCirculateFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iBookOfIaABI, 'circulateFile'>['abi'],
        'circulateFile'
      > & { functionName?: 'circulateFile' }
    : UseContractWriteConfig<TMode, typeof iBookOfIaABI, 'circulateFile'> & {
        abi?: never
        functionName?: 'circulateFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfIaABI, 'circulateFile'>({
    abi: iBookOfIaABI,
    functionName: 'circulateFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfIaABI}__ and `functionName` set to `"claimsOfFR"`.
 */
export function useIBookOfIaClaimsOfFr<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iBookOfIaABI, 'claimsOfFR'>['abi'],
        'claimsOfFR'
      > & { functionName?: 'claimsOfFR' }
    : UseContractWriteConfig<TMode, typeof iBookOfIaABI, 'claimsOfFR'> & {
        abi?: never
        functionName?: 'claimsOfFR'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfIaABI, 'claimsOfFR'>({
    abi: iBookOfIaABI,
    functionName: 'claimsOfFR',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfIaABI}__ and `functionName` set to `"createMockOfIA"`.
 */
export function useIBookOfIaCreateMockOfIa<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfIaABI,
          'createMockOfIA'
        >['abi'],
        'createMockOfIA'
      > & { functionName?: 'createMockOfIA' }
    : UseContractWriteConfig<TMode, typeof iBookOfIaABI, 'createMockOfIA'> & {
        abi?: never
        functionName?: 'createMockOfIA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfIaABI, 'createMockOfIA'>({
    abi: iBookOfIaABI,
    functionName: 'createMockOfIA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfIaABI}__ and `functionName` set to `"establishFile"`.
 */
export function useIBookOfIaEstablishFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iBookOfIaABI, 'establishFile'>['abi'],
        'establishFile'
      > & { functionName?: 'establishFile' }
    : UseContractWriteConfig<TMode, typeof iBookOfIaABI, 'establishFile'> & {
        abi?: never
        functionName?: 'establishFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfIaABI, 'establishFile'>({
    abi: iBookOfIaABI,
    functionName: 'establishFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfIaABI}__ and `functionName` set to `"execAlongRight"`.
 */
export function useIBookOfIaExecAlongRight<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfIaABI,
          'execAlongRight'
        >['abi'],
        'execAlongRight'
      > & { functionName?: 'execAlongRight' }
    : UseContractWriteConfig<TMode, typeof iBookOfIaABI, 'execAlongRight'> & {
        abi?: never
        functionName?: 'execAlongRight'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfIaABI, 'execAlongRight'>({
    abi: iBookOfIaABI,
    functionName: 'execAlongRight',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfIaABI}__ and `functionName` set to `"execFile"`.
 */
export function useIBookOfIaExecFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iBookOfIaABI, 'execFile'>['abi'],
        'execFile'
      > & { functionName?: 'execFile' }
    : UseContractWriteConfig<TMode, typeof iBookOfIaABI, 'execFile'> & {
        abi?: never
        functionName?: 'execFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfIaABI, 'execFile'>({
    abi: iBookOfIaABI,
    functionName: 'execFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfIaABI}__ and `functionName` set to `"execFirstRefusalRight"`.
 */
export function useIBookOfIaExecFirstRefusalRight<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfIaABI,
          'execFirstRefusalRight'
        >['abi'],
        'execFirstRefusalRight'
      > & { functionName?: 'execFirstRefusalRight' }
    : UseContractWriteConfig<
        TMode,
        typeof iBookOfIaABI,
        'execFirstRefusalRight'
      > & {
        abi?: never
        functionName?: 'execFirstRefusalRight'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfIaABI, 'execFirstRefusalRight'>({
    abi: iBookOfIaABI,
    functionName: 'execFirstRefusalRight',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfIaABI}__ and `functionName` set to `"isFRClaimer"`.
 */
export function useIBookOfIaIsFrClaimer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iBookOfIaABI, 'isFRClaimer'>['abi'],
        'isFRClaimer'
      > & { functionName?: 'isFRClaimer' }
    : UseContractWriteConfig<TMode, typeof iBookOfIaABI, 'isFRClaimer'> & {
        abi?: never
        functionName?: 'isFRClaimer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfIaABI, 'isFRClaimer'>({
    abi: iBookOfIaABI,
    functionName: 'isFRClaimer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfIaABI}__ and `functionName` set to `"mockDealOfBuy"`.
 */
export function useIBookOfIaMockDealOfBuy<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iBookOfIaABI, 'mockDealOfBuy'>['abi'],
        'mockDealOfBuy'
      > & { functionName?: 'mockDealOfBuy' }
    : UseContractWriteConfig<TMode, typeof iBookOfIaABI, 'mockDealOfBuy'> & {
        abi?: never
        functionName?: 'mockDealOfBuy'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfIaABI, 'mockDealOfBuy'>({
    abi: iBookOfIaABI,
    functionName: 'mockDealOfBuy',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfIaABI}__ and `functionName` set to `"mockDealOfSell"`.
 */
export function useIBookOfIaMockDealOfSell<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfIaABI,
          'mockDealOfSell'
        >['abi'],
        'mockDealOfSell'
      > & { functionName?: 'mockDealOfSell' }
    : UseContractWriteConfig<TMode, typeof iBookOfIaABI, 'mockDealOfSell'> & {
        abi?: never
        functionName?: 'mockDealOfSell'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfIaABI, 'mockDealOfSell'>({
    abi: iBookOfIaABI,
    functionName: 'mockDealOfSell',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfIaABI}__ and `functionName` set to `"proposeFile"`.
 */
export function useIBookOfIaProposeFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iBookOfIaABI, 'proposeFile'>['abi'],
        'proposeFile'
      > & { functionName?: 'proposeFile' }
    : UseContractWriteConfig<TMode, typeof iBookOfIaABI, 'proposeFile'> & {
        abi?: never
        functionName?: 'proposeFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfIaABI, 'proposeFile'>({
    abi: iBookOfIaABI,
    functionName: 'proposeFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfIaABI}__ and `functionName` set to `"regFile"`.
 */
export function useIBookOfIaRegFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iBookOfIaABI, 'regFile'>['abi'],
        'regFile'
      > & { functionName?: 'regFile' }
    : UseContractWriteConfig<TMode, typeof iBookOfIaABI, 'regFile'> & {
        abi?: never
        functionName?: 'regFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfIaABI, 'regFile'>({
    abi: iBookOfIaABI,
    functionName: 'regFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfIaABI}__ and `functionName` set to `"setStateOfFile"`.
 */
export function useIBookOfIaSetStateOfFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfIaABI,
          'setStateOfFile'
        >['abi'],
        'setStateOfFile'
      > & { functionName?: 'setStateOfFile' }
    : UseContractWriteConfig<TMode, typeof iBookOfIaABI, 'setStateOfFile'> & {
        abi?: never
        functionName?: 'setStateOfFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfIaABI, 'setStateOfFile'>({
    abi: iBookOfIaABI,
    functionName: 'setStateOfFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfIaABI}__ and `functionName` set to `"terminateFile"`.
 */
export function useIBookOfIaTerminateFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iBookOfIaABI, 'terminateFile'>['abi'],
        'terminateFile'
      > & { functionName?: 'terminateFile' }
    : UseContractWriteConfig<TMode, typeof iBookOfIaABI, 'terminateFile'> & {
        abi?: never
        functionName?: 'terminateFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfIaABI, 'terminateFile'>({
    abi: iBookOfIaABI,
    functionName: 'terminateFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfIaABI}__ and `functionName` set to `"voteCountingForFile"`.
 */
export function useIBookOfIaVoteCountingForFile<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfIaABI,
          'voteCountingForFile'
        >['abi'],
        'voteCountingForFile'
      > & { functionName?: 'voteCountingForFile' }
    : UseContractWriteConfig<
        TMode,
        typeof iBookOfIaABI,
        'voteCountingForFile'
      > & {
        abi?: never
        functionName?: 'voteCountingForFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfIaABI, 'voteCountingForFile'>({
    abi: iBookOfIaABI,
    functionName: 'voteCountingForFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfIaABI}__.
 */
export function usePrepareIBookOfIaWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfIaABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfIaABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfIaABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfIaABI}__ and `functionName` set to `"acceptFirstRefusalClaims"`.
 */
export function usePrepareIBookOfIaAcceptFirstRefusalClaims(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iBookOfIaABI,
      'acceptFirstRefusalClaims'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfIaABI,
    functionName: 'acceptFirstRefusalClaims',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iBookOfIaABI,
    'acceptFirstRefusalClaims'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfIaABI}__ and `functionName` set to `"circulateFile"`.
 */
export function usePrepareIBookOfIaCirculateFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfIaABI, 'circulateFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfIaABI,
    functionName: 'circulateFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfIaABI, 'circulateFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfIaABI}__ and `functionName` set to `"claimsOfFR"`.
 */
export function usePrepareIBookOfIaClaimsOfFr(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfIaABI, 'claimsOfFR'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfIaABI,
    functionName: 'claimsOfFR',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfIaABI, 'claimsOfFR'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfIaABI}__ and `functionName` set to `"createMockOfIA"`.
 */
export function usePrepareIBookOfIaCreateMockOfIa(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfIaABI, 'createMockOfIA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfIaABI,
    functionName: 'createMockOfIA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfIaABI, 'createMockOfIA'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfIaABI}__ and `functionName` set to `"establishFile"`.
 */
export function usePrepareIBookOfIaEstablishFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfIaABI, 'establishFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfIaABI,
    functionName: 'establishFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfIaABI, 'establishFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfIaABI}__ and `functionName` set to `"execAlongRight"`.
 */
export function usePrepareIBookOfIaExecAlongRight(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfIaABI, 'execAlongRight'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfIaABI,
    functionName: 'execAlongRight',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfIaABI, 'execAlongRight'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfIaABI}__ and `functionName` set to `"execFile"`.
 */
export function usePrepareIBookOfIaExecFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfIaABI, 'execFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfIaABI,
    functionName: 'execFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfIaABI, 'execFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfIaABI}__ and `functionName` set to `"execFirstRefusalRight"`.
 */
export function usePrepareIBookOfIaExecFirstRefusalRight(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfIaABI, 'execFirstRefusalRight'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfIaABI,
    functionName: 'execFirstRefusalRight',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iBookOfIaABI,
    'execFirstRefusalRight'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfIaABI}__ and `functionName` set to `"isFRClaimer"`.
 */
export function usePrepareIBookOfIaIsFrClaimer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfIaABI, 'isFRClaimer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfIaABI,
    functionName: 'isFRClaimer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfIaABI, 'isFRClaimer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfIaABI}__ and `functionName` set to `"mockDealOfBuy"`.
 */
export function usePrepareIBookOfIaMockDealOfBuy(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfIaABI, 'mockDealOfBuy'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfIaABI,
    functionName: 'mockDealOfBuy',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfIaABI, 'mockDealOfBuy'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfIaABI}__ and `functionName` set to `"mockDealOfSell"`.
 */
export function usePrepareIBookOfIaMockDealOfSell(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfIaABI, 'mockDealOfSell'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfIaABI,
    functionName: 'mockDealOfSell',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfIaABI, 'mockDealOfSell'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfIaABI}__ and `functionName` set to `"proposeFile"`.
 */
export function usePrepareIBookOfIaProposeFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfIaABI, 'proposeFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfIaABI,
    functionName: 'proposeFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfIaABI, 'proposeFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfIaABI}__ and `functionName` set to `"regFile"`.
 */
export function usePrepareIBookOfIaRegFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfIaABI, 'regFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfIaABI,
    functionName: 'regFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfIaABI, 'regFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfIaABI}__ and `functionName` set to `"setStateOfFile"`.
 */
export function usePrepareIBookOfIaSetStateOfFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfIaABI, 'setStateOfFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfIaABI,
    functionName: 'setStateOfFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfIaABI, 'setStateOfFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfIaABI}__ and `functionName` set to `"terminateFile"`.
 */
export function usePrepareIBookOfIaTerminateFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfIaABI, 'terminateFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfIaABI,
    functionName: 'terminateFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfIaABI, 'terminateFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfIaABI}__ and `functionName` set to `"voteCountingForFile"`.
 */
export function usePrepareIBookOfIaVoteCountingForFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfIaABI, 'voteCountingForFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfIaABI,
    functionName: 'voteCountingForFile',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iBookOfIaABI,
    'voteCountingForFile'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfIaABI}__.
 */
export function useIBookOfIaEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iBookOfIaABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfIaABI,
    ...config,
  } as UseContractEventConfig<typeof iBookOfIaABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfIaABI}__ and `eventName` set to `"AcceptFirstRefusalClaims"`.
 */
export function useIBookOfIaAcceptFirstRefusalClaimsEvent(
  config: Omit<
    UseContractEventConfig<typeof iBookOfIaABI, 'AcceptFirstRefusalClaims'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfIaABI,
    eventName: 'AcceptFirstRefusalClaims',
    ...config,
  } as UseContractEventConfig<typeof iBookOfIaABI, 'AcceptFirstRefusalClaims'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfIaABI}__ and `eventName` set to `"ExecAlongRight"`.
 */
export function useIBookOfIaExecAlongRightEvent(
  config: Omit<
    UseContractEventConfig<typeof iBookOfIaABI, 'ExecAlongRight'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfIaABI,
    eventName: 'ExecAlongRight',
    ...config,
  } as UseContractEventConfig<typeof iBookOfIaABI, 'ExecAlongRight'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfIaABI}__ and `eventName` set to `"ExecFirstRefusalRight"`.
 */
export function useIBookOfIaExecFirstRefusalRightEvent(
  config: Omit<
    UseContractEventConfig<typeof iBookOfIaABI, 'ExecFirstRefusalRight'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfIaABI,
    eventName: 'ExecFirstRefusalRight',
    ...config,
  } as UseContractEventConfig<typeof iBookOfIaABI, 'ExecFirstRefusalRight'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfIaABI}__ and `eventName` set to `"UpdateStateOfFile"`.
 */
export function useIBookOfIaUpdateStateOfFileEvent(
  config: Omit<
    UseContractEventConfig<typeof iBookOfIaABI, 'UpdateStateOfFile'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfIaABI,
    eventName: 'UpdateStateOfFile',
    ...config,
  } as UseContractEventConfig<typeof iBookOfIaABI, 'UpdateStateOfFile'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iInvestmentAgreementABI}__.
 */
export function useIInvestmentAgreement(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iInvestmentAgreementABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iInvestmentAgreementABI}__.
 */
export function useIInvestmentAgreementRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof iInvestmentAgreementABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iInvestmentAgreementABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iInvestmentAgreementABI,
    ...config,
  } as UseContractReadConfig<
    typeof iInvestmentAgreementABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"counterOfClosedDeal"`.
 */
export function useIInvestmentAgreementCounterOfClosedDeal<
  TSelectData = ReadContractResult<
    typeof iInvestmentAgreementABI,
    'counterOfClosedDeal'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iInvestmentAgreementABI,
      'counterOfClosedDeal',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iInvestmentAgreementABI,
    functionName: 'counterOfClosedDeal',
    ...config,
  } as UseContractReadConfig<
    typeof iInvestmentAgreementABI,
    'counterOfClosedDeal',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"counterOfDeal"`.
 */
export function useIInvestmentAgreementCounterOfDeal<
  TSelectData = ReadContractResult<
    typeof iInvestmentAgreementABI,
    'counterOfDeal'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iInvestmentAgreementABI,
      'counterOfDeal',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iInvestmentAgreementABI,
    functionName: 'counterOfDeal',
    ...config,
  } as UseContractReadConfig<
    typeof iInvestmentAgreementABI,
    'counterOfDeal',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"getBodyOfDeal"`.
 */
export function useIInvestmentAgreementGetBodyOfDeal<
  TSelectData = ReadContractResult<
    typeof iInvestmentAgreementABI,
    'getBodyOfDeal'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iInvestmentAgreementABI,
      'getBodyOfDeal',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iInvestmentAgreementABI,
    functionName: 'getBodyOfDeal',
    ...config,
  } as UseContractReadConfig<
    typeof iInvestmentAgreementABI,
    'getBodyOfDeal',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"getDeal"`.
 */
export function useIInvestmentAgreementGetDeal<
  TSelectData = ReadContractResult<typeof iInvestmentAgreementABI, 'getDeal'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iInvestmentAgreementABI,
      'getDeal',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iInvestmentAgreementABI,
    functionName: 'getDeal',
    ...config,
  } as UseContractReadConfig<
    typeof iInvestmentAgreementABI,
    'getDeal',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"getHashLockOfDeal"`.
 */
export function useIInvestmentAgreementGetHashLockOfDeal<
  TSelectData = ReadContractResult<
    typeof iInvestmentAgreementABI,
    'getHashLockOfDeal'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iInvestmentAgreementABI,
      'getHashLockOfDeal',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iInvestmentAgreementABI,
    functionName: 'getHashLockOfDeal',
    ...config,
  } as UseContractReadConfig<
    typeof iInvestmentAgreementABI,
    'getHashLockOfDeal',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"getHeadOfDeal"`.
 */
export function useIInvestmentAgreementGetHeadOfDeal<
  TSelectData = ReadContractResult<
    typeof iInvestmentAgreementABI,
    'getHeadOfDeal'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iInvestmentAgreementABI,
      'getHeadOfDeal',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iInvestmentAgreementABI,
    functionName: 'getHeadOfDeal',
    ...config,
  } as UseContractReadConfig<
    typeof iInvestmentAgreementABI,
    'getHeadOfDeal',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"getSeqList"`.
 */
export function useIInvestmentAgreementGetSeqList<
  TSelectData = ReadContractResult<
    typeof iInvestmentAgreementABI,
    'getSeqList'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iInvestmentAgreementABI,
      'getSeqList',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iInvestmentAgreementABI,
    functionName: 'getSeqList',
    ...config,
  } as UseContractReadConfig<
    typeof iInvestmentAgreementABI,
    'getSeqList',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"getTypeOfIA"`.
 */
export function useIInvestmentAgreementGetTypeOfIa<
  TSelectData = ReadContractResult<
    typeof iInvestmentAgreementABI,
    'getTypeOfIA'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iInvestmentAgreementABI,
      'getTypeOfIA',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iInvestmentAgreementABI,
    functionName: 'getTypeOfIA',
    ...config,
  } as UseContractReadConfig<
    typeof iInvestmentAgreementABI,
    'getTypeOfIA',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"isDeal"`.
 */
export function useIInvestmentAgreementIsDeal<
  TSelectData = ReadContractResult<typeof iInvestmentAgreementABI, 'isDeal'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iInvestmentAgreementABI,
      'isDeal',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iInvestmentAgreementABI,
    functionName: 'isDeal',
    ...config,
  } as UseContractReadConfig<
    typeof iInvestmentAgreementABI,
    'isDeal',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__.
 */
export function useIInvestmentAgreementWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iInvestmentAgreementABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof iInvestmentAgreementABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iInvestmentAgreementABI, TFunctionName>(
    { abi: iInvestmentAgreementABI, ...config } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"addDeal"`.
 */
export function useIInvestmentAgreementAddDeal<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iInvestmentAgreementABI,
          'addDeal'
        >['abi'],
        'addDeal'
      > & { functionName?: 'addDeal' }
    : UseContractWriteConfig<
        TMode,
        typeof iInvestmentAgreementABI,
        'addDeal'
      > & {
        abi?: never
        functionName?: 'addDeal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iInvestmentAgreementABI, 'addDeal'>({
    abi: iInvestmentAgreementABI,
    functionName: 'addDeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"clearDealCP"`.
 */
export function useIInvestmentAgreementClearDealCp<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iInvestmentAgreementABI,
          'clearDealCP'
        >['abi'],
        'clearDealCP'
      > & { functionName?: 'clearDealCP' }
    : UseContractWriteConfig<
        TMode,
        typeof iInvestmentAgreementABI,
        'clearDealCP'
      > & {
        abi?: never
        functionName?: 'clearDealCP'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iInvestmentAgreementABI, 'clearDealCP'>(
    {
      abi: iInvestmentAgreementABI,
      functionName: 'clearDealCP',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"closeDeal"`.
 */
export function useIInvestmentAgreementCloseDeal<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iInvestmentAgreementABI,
          'closeDeal'
        >['abi'],
        'closeDeal'
      > & { functionName?: 'closeDeal' }
    : UseContractWriteConfig<
        TMode,
        typeof iInvestmentAgreementABI,
        'closeDeal'
      > & {
        abi?: never
        functionName?: 'closeDeal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iInvestmentAgreementABI, 'closeDeal'>({
    abi: iInvestmentAgreementABI,
    functionName: 'closeDeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"delDeal"`.
 */
export function useIInvestmentAgreementDelDeal<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iInvestmentAgreementABI,
          'delDeal'
        >['abi'],
        'delDeal'
      > & { functionName?: 'delDeal' }
    : UseContractWriteConfig<
        TMode,
        typeof iInvestmentAgreementABI,
        'delDeal'
      > & {
        abi?: never
        functionName?: 'delDeal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iInvestmentAgreementABI, 'delDeal'>({
    abi: iInvestmentAgreementABI,
    functionName: 'delDeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"directCloseDeal"`.
 */
export function useIInvestmentAgreementDirectCloseDeal<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iInvestmentAgreementABI,
          'directCloseDeal'
        >['abi'],
        'directCloseDeal'
      > & { functionName?: 'directCloseDeal' }
    : UseContractWriteConfig<
        TMode,
        typeof iInvestmentAgreementABI,
        'directCloseDeal'
      > & {
        abi?: never
        functionName?: 'directCloseDeal'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iInvestmentAgreementABI,
    'directCloseDeal'
  >({
    abi: iInvestmentAgreementABI,
    functionName: 'directCloseDeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"lockDealSubject"`.
 */
export function useIInvestmentAgreementLockDealSubject<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iInvestmentAgreementABI,
          'lockDealSubject'
        >['abi'],
        'lockDealSubject'
      > & { functionName?: 'lockDealSubject' }
    : UseContractWriteConfig<
        TMode,
        typeof iInvestmentAgreementABI,
        'lockDealSubject'
      > & {
        abi?: never
        functionName?: 'lockDealSubject'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iInvestmentAgreementABI,
    'lockDealSubject'
  >({
    abi: iInvestmentAgreementABI,
    functionName: 'lockDealSubject',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"regDeal"`.
 */
export function useIInvestmentAgreementRegDeal<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iInvestmentAgreementABI,
          'regDeal'
        >['abi'],
        'regDeal'
      > & { functionName?: 'regDeal' }
    : UseContractWriteConfig<
        TMode,
        typeof iInvestmentAgreementABI,
        'regDeal'
      > & {
        abi?: never
        functionName?: 'regDeal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iInvestmentAgreementABI, 'regDeal'>({
    abi: iInvestmentAgreementABI,
    functionName: 'regDeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"releaseDealSubject"`.
 */
export function useIInvestmentAgreementReleaseDealSubject<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iInvestmentAgreementABI,
          'releaseDealSubject'
        >['abi'],
        'releaseDealSubject'
      > & { functionName?: 'releaseDealSubject' }
    : UseContractWriteConfig<
        TMode,
        typeof iInvestmentAgreementABI,
        'releaseDealSubject'
      > & {
        abi?: never
        functionName?: 'releaseDealSubject'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iInvestmentAgreementABI,
    'releaseDealSubject'
  >({
    abi: iInvestmentAgreementABI,
    functionName: 'releaseDealSubject',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"revokeDeal"`.
 */
export function useIInvestmentAgreementRevokeDeal<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iInvestmentAgreementABI,
          'revokeDeal'
        >['abi'],
        'revokeDeal'
      > & { functionName?: 'revokeDeal' }
    : UseContractWriteConfig<
        TMode,
        typeof iInvestmentAgreementABI,
        'revokeDeal'
      > & {
        abi?: never
        functionName?: 'revokeDeal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iInvestmentAgreementABI, 'revokeDeal'>({
    abi: iInvestmentAgreementABI,
    functionName: 'revokeDeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"setTypeOfIA"`.
 */
export function useIInvestmentAgreementSetTypeOfIa<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iInvestmentAgreementABI,
          'setTypeOfIA'
        >['abi'],
        'setTypeOfIA'
      > & { functionName?: 'setTypeOfIA' }
    : UseContractWriteConfig<
        TMode,
        typeof iInvestmentAgreementABI,
        'setTypeOfIA'
      > & {
        abi?: never
        functionName?: 'setTypeOfIA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iInvestmentAgreementABI, 'setTypeOfIA'>(
    {
      abi: iInvestmentAgreementABI,
      functionName: 'setTypeOfIA',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"takeGift"`.
 */
export function useIInvestmentAgreementTakeGift<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iInvestmentAgreementABI,
          'takeGift'
        >['abi'],
        'takeGift'
      > & { functionName?: 'takeGift' }
    : UseContractWriteConfig<
        TMode,
        typeof iInvestmentAgreementABI,
        'takeGift'
      > & {
        abi?: never
        functionName?: 'takeGift'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iInvestmentAgreementABI, 'takeGift'>({
    abi: iInvestmentAgreementABI,
    functionName: 'takeGift',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"terminateDeal"`.
 */
export function useIInvestmentAgreementTerminateDeal<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iInvestmentAgreementABI,
          'terminateDeal'
        >['abi'],
        'terminateDeal'
      > & { functionName?: 'terminateDeal' }
    : UseContractWriteConfig<
        TMode,
        typeof iInvestmentAgreementABI,
        'terminateDeal'
      > & {
        abi?: never
        functionName?: 'terminateDeal'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iInvestmentAgreementABI,
    'terminateDeal'
  >({
    abi: iInvestmentAgreementABI,
    functionName: 'terminateDeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__.
 */
export function usePrepareIInvestmentAgreementWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iInvestmentAgreementABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iInvestmentAgreementABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iInvestmentAgreementABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"addDeal"`.
 */
export function usePrepareIInvestmentAgreementAddDeal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iInvestmentAgreementABI, 'addDeal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iInvestmentAgreementABI,
    functionName: 'addDeal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iInvestmentAgreementABI, 'addDeal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"clearDealCP"`.
 */
export function usePrepareIInvestmentAgreementClearDealCp(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iInvestmentAgreementABI,
      'clearDealCP'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iInvestmentAgreementABI,
    functionName: 'clearDealCP',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iInvestmentAgreementABI,
    'clearDealCP'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"closeDeal"`.
 */
export function usePrepareIInvestmentAgreementCloseDeal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iInvestmentAgreementABI, 'closeDeal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iInvestmentAgreementABI,
    functionName: 'closeDeal',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iInvestmentAgreementABI,
    'closeDeal'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"delDeal"`.
 */
export function usePrepareIInvestmentAgreementDelDeal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iInvestmentAgreementABI, 'delDeal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iInvestmentAgreementABI,
    functionName: 'delDeal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iInvestmentAgreementABI, 'delDeal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"directCloseDeal"`.
 */
export function usePrepareIInvestmentAgreementDirectCloseDeal(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iInvestmentAgreementABI,
      'directCloseDeal'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iInvestmentAgreementABI,
    functionName: 'directCloseDeal',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iInvestmentAgreementABI,
    'directCloseDeal'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"lockDealSubject"`.
 */
export function usePrepareIInvestmentAgreementLockDealSubject(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iInvestmentAgreementABI,
      'lockDealSubject'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iInvestmentAgreementABI,
    functionName: 'lockDealSubject',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iInvestmentAgreementABI,
    'lockDealSubject'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"regDeal"`.
 */
export function usePrepareIInvestmentAgreementRegDeal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iInvestmentAgreementABI, 'regDeal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iInvestmentAgreementABI,
    functionName: 'regDeal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iInvestmentAgreementABI, 'regDeal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"releaseDealSubject"`.
 */
export function usePrepareIInvestmentAgreementReleaseDealSubject(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iInvestmentAgreementABI,
      'releaseDealSubject'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iInvestmentAgreementABI,
    functionName: 'releaseDealSubject',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iInvestmentAgreementABI,
    'releaseDealSubject'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"revokeDeal"`.
 */
export function usePrepareIInvestmentAgreementRevokeDeal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iInvestmentAgreementABI, 'revokeDeal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iInvestmentAgreementABI,
    functionName: 'revokeDeal',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iInvestmentAgreementABI,
    'revokeDeal'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"setTypeOfIA"`.
 */
export function usePrepareIInvestmentAgreementSetTypeOfIa(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iInvestmentAgreementABI,
      'setTypeOfIA'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iInvestmentAgreementABI,
    functionName: 'setTypeOfIA',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iInvestmentAgreementABI,
    'setTypeOfIA'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"takeGift"`.
 */
export function usePrepareIInvestmentAgreementTakeGift(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iInvestmentAgreementABI, 'takeGift'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iInvestmentAgreementABI,
    functionName: 'takeGift',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iInvestmentAgreementABI,
    'takeGift'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `functionName` set to `"terminateDeal"`.
 */
export function usePrepareIInvestmentAgreementTerminateDeal(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iInvestmentAgreementABI,
      'terminateDeal'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iInvestmentAgreementABI,
    functionName: 'terminateDeal',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iInvestmentAgreementABI,
    'terminateDeal'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iInvestmentAgreementABI}__.
 */
export function useIInvestmentAgreementEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iInvestmentAgreementABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iInvestmentAgreementABI,
    ...config,
  } as UseContractEventConfig<typeof iInvestmentAgreementABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `eventName` set to `"AddDeal"`.
 */
export function useIInvestmentAgreementAddDealEvent(
  config: Omit<
    UseContractEventConfig<typeof iInvestmentAgreementABI, 'AddDeal'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iInvestmentAgreementABI,
    eventName: 'AddDeal',
    ...config,
  } as UseContractEventConfig<typeof iInvestmentAgreementABI, 'AddDeal'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `eventName` set to `"ClearDealCP"`.
 */
export function useIInvestmentAgreementClearDealCpEvent(
  config: Omit<
    UseContractEventConfig<typeof iInvestmentAgreementABI, 'ClearDealCP'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iInvestmentAgreementABI,
    eventName: 'ClearDealCP',
    ...config,
  } as UseContractEventConfig<typeof iInvestmentAgreementABI, 'ClearDealCP'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `eventName` set to `"CloseDeal"`.
 */
export function useIInvestmentAgreementCloseDealEvent(
  config: Omit<
    UseContractEventConfig<typeof iInvestmentAgreementABI, 'CloseDeal'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iInvestmentAgreementABI,
    eventName: 'CloseDeal',
    ...config,
  } as UseContractEventConfig<typeof iInvestmentAgreementABI, 'CloseDeal'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `eventName` set to `"RevokeDeal"`.
 */
export function useIInvestmentAgreementRevokeDealEvent(
  config: Omit<
    UseContractEventConfig<typeof iInvestmentAgreementABI, 'RevokeDeal'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iInvestmentAgreementABI,
    eventName: 'RevokeDeal',
    ...config,
  } as UseContractEventConfig<typeof iInvestmentAgreementABI, 'RevokeDeal'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iInvestmentAgreementABI}__ and `eventName` set to `"TerminateDeal"`.
 */
export function useIInvestmentAgreementTerminateDealEvent(
  config: Omit<
    UseContractEventConfig<typeof iInvestmentAgreementABI, 'TerminateDeal'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iInvestmentAgreementABI,
    eventName: 'TerminateDeal',
    ...config,
  } as UseContractEventConfig<typeof iInvestmentAgreementABI, 'TerminateDeal'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link investmentAgreementABI}__.
 */
export function useInvestmentAgreement(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: investmentAgreementABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__.
 */
export function useInvestmentAgreementRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof investmentAgreementABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"circulated"`.
 */
export function useInvestmentAgreementCirculated<
  TSelectData = ReadContractResult<typeof investmentAgreementABI, 'circulated'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'circulated',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'circulated',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'circulated',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"counterOfClosedDeal"`.
 */
export function useInvestmentAgreementCounterOfClosedDeal<
  TSelectData = ReadContractResult<
    typeof investmentAgreementABI,
    'counterOfClosedDeal'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'counterOfClosedDeal',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'counterOfClosedDeal',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'counterOfClosedDeal',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"counterOfDeal"`.
 */
export function useInvestmentAgreementCounterOfDeal<
  TSelectData = ReadContractResult<
    typeof investmentAgreementABI,
    'counterOfDeal'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'counterOfDeal',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'counterOfDeal',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'counterOfDeal',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"established"`.
 */
export function useInvestmentAgreementEstablished<
  TSelectData = ReadContractResult<
    typeof investmentAgreementABI,
    'established'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'established',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'established',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'established',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"finalized"`.
 */
export function useInvestmentAgreementFinalized<
  TSelectData = ReadContractResult<typeof investmentAgreementABI, 'finalized'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'finalized',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'finalized',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'finalized',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"getBodyOfDeal"`.
 */
export function useInvestmentAgreementGetBodyOfDeal<
  TSelectData = ReadContractResult<
    typeof investmentAgreementABI,
    'getBodyOfDeal'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'getBodyOfDeal',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'getBodyOfDeal',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'getBodyOfDeal',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"getBookeeper"`.
 */
export function useInvestmentAgreementGetBookeeper<
  TSelectData = ReadContractResult<
    typeof investmentAgreementABI,
    'getBookeeper'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'getBookeeper',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'getBookeeper',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'getBookeeper',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"getBuyers"`.
 */
export function useInvestmentAgreementGetBuyers<
  TSelectData = ReadContractResult<typeof investmentAgreementABI, 'getBuyers'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'getBuyers',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'getBuyers',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'getBuyers',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"getCirculateDate"`.
 */
export function useInvestmentAgreementGetCirculateDate<
  TSelectData = ReadContractResult<
    typeof investmentAgreementABI,
    'getCirculateDate'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'getCirculateDate',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'getCirculateDate',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'getCirculateDate',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"getClosingDays"`.
 */
export function useInvestmentAgreementGetClosingDays<
  TSelectData = ReadContractResult<
    typeof investmentAgreementABI,
    'getClosingDays'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'getClosingDays',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'getClosingDays',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'getClosingDays',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"getClosingDeadline"`.
 */
export function useInvestmentAgreementGetClosingDeadline<
  TSelectData = ReadContractResult<
    typeof investmentAgreementABI,
    'getClosingDeadline'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'getClosingDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'getClosingDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'getClosingDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"getDeal"`.
 */
export function useInvestmentAgreementGetDeal<
  TSelectData = ReadContractResult<typeof investmentAgreementABI, 'getDeal'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'getDeal',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'getDeal',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'getDeal',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"getGeneralCounsel"`.
 */
export function useInvestmentAgreementGetGeneralCounsel<
  TSelectData = ReadContractResult<
    typeof investmentAgreementABI,
    'getGeneralCounsel'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'getGeneralCounsel',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'getGeneralCounsel',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'getGeneralCounsel',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"getHashLockOfDeal"`.
 */
export function useInvestmentAgreementGetHashLockOfDeal<
  TSelectData = ReadContractResult<
    typeof investmentAgreementABI,
    'getHashLockOfDeal'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'getHashLockOfDeal',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'getHashLockOfDeal',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'getHashLockOfDeal',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"getHeadOfDeal"`.
 */
export function useInvestmentAgreementGetHeadOfDeal<
  TSelectData = ReadContractResult<
    typeof investmentAgreementABI,
    'getHeadOfDeal'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'getHeadOfDeal',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'getHeadOfDeal',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'getHeadOfDeal',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"getOwner"`.
 */
export function useInvestmentAgreementGetOwner<
  TSelectData = ReadContractResult<typeof investmentAgreementABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'getOwner',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'getOwner',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"getParasOfPage"`.
 */
export function useInvestmentAgreementGetParasOfPage<
  TSelectData = ReadContractResult<
    typeof investmentAgreementABI,
    'getParasOfPage'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'getParasOfPage',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'getParasOfPage',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'getParasOfPage',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"getParties"`.
 */
export function useInvestmentAgreementGetParties<
  TSelectData = ReadContractResult<typeof investmentAgreementABI, 'getParties'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'getParties',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'getParties',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'getParties',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"getSellers"`.
 */
export function useInvestmentAgreementGetSellers<
  TSelectData = ReadContractResult<typeof investmentAgreementABI, 'getSellers'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'getSellers',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'getSellers',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'getSellers',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"getSeqList"`.
 */
export function useInvestmentAgreementGetSeqList<
  TSelectData = ReadContractResult<typeof investmentAgreementABI, 'getSeqList'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'getSeqList',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'getSeqList',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'getSeqList',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"getSigDeadline"`.
 */
export function useInvestmentAgreementGetSigDeadline<
  TSelectData = ReadContractResult<
    typeof investmentAgreementABI,
    'getSigDeadline'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'getSigDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'getSigDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'getSigDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"getSigOfParty"`.
 */
export function useInvestmentAgreementGetSigOfParty<
  TSelectData = ReadContractResult<
    typeof investmentAgreementABI,
    'getSigOfParty'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'getSigOfParty',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'getSigOfParty',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'getSigOfParty',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"getSigningDays"`.
 */
export function useInvestmentAgreementGetSigningDays<
  TSelectData = ReadContractResult<
    typeof investmentAgreementABI,
    'getSigningDays'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'getSigningDays',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'getSigningDays',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'getSigningDays',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"getSigsOfPage"`.
 */
export function useInvestmentAgreementGetSigsOfPage<
  TSelectData = ReadContractResult<
    typeof investmentAgreementABI,
    'getSigsOfPage'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'getSigsOfPage',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'getSigsOfPage',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'getSigsOfPage',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"getTypeOfIA"`.
 */
export function useInvestmentAgreementGetTypeOfIa<
  TSelectData = ReadContractResult<
    typeof investmentAgreementABI,
    'getTypeOfIA'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'getTypeOfIA',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'getTypeOfIA',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'getTypeOfIA',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"hasRole"`.
 */
export function useInvestmentAgreementHasRole<
  TSelectData = ReadContractResult<typeof investmentAgreementABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'hasRole',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'hasRole',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"isBuyer"`.
 */
export function useInvestmentAgreementIsBuyer<
  TSelectData = ReadContractResult<typeof investmentAgreementABI, 'isBuyer'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'isBuyer',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'isBuyer',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'isBuyer',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"isDeal"`.
 */
export function useInvestmentAgreementIsDeal<
  TSelectData = ReadContractResult<typeof investmentAgreementABI, 'isDeal'>,
>(
  config: Omit<
    UseContractReadConfig<typeof investmentAgreementABI, 'isDeal', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'isDeal',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'isDeal',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"isInitSigner"`.
 */
export function useInvestmentAgreementIsInitSigner<
  TSelectData = ReadContractResult<
    typeof investmentAgreementABI,
    'isInitSigner'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'isInitSigner',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'isInitSigner',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'isInitSigner',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"isParty"`.
 */
export function useInvestmentAgreementIsParty<
  TSelectData = ReadContractResult<typeof investmentAgreementABI, 'isParty'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'isParty',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'isParty',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'isParty',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"isSeller"`.
 */
export function useInvestmentAgreementIsSeller<
  TSelectData = ReadContractResult<typeof investmentAgreementABI, 'isSeller'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'isSeller',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'isSeller',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'isSeller',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"isSigner"`.
 */
export function useInvestmentAgreementIsSigner<
  TSelectData = ReadContractResult<typeof investmentAgreementABI, 'isSigner'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof investmentAgreementABI,
      'isSigner',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: investmentAgreementABI,
    functionName: 'isSigner',
    ...config,
  } as UseContractReadConfig<
    typeof investmentAgreementABI,
    'isSigner',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__.
 */
export function useInvestmentAgreementWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof investmentAgreementABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof investmentAgreementABI, TFunctionName>({
    abi: investmentAgreementABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useInvestmentAgreementAbandonRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          'abandonRole'
        >['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<
        TMode,
        typeof investmentAgreementABI,
        'abandonRole'
      > & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof investmentAgreementABI, 'abandonRole'>({
    abi: investmentAgreementABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"addBlank"`.
 */
export function useInvestmentAgreementAddBlank<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          'addBlank'
        >['abi'],
        'addBlank'
      > & { functionName?: 'addBlank' }
    : UseContractWriteConfig<
        TMode,
        typeof investmentAgreementABI,
        'addBlank'
      > & {
        abi?: never
        functionName?: 'addBlank'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof investmentAgreementABI, 'addBlank'>({
    abi: investmentAgreementABI,
    functionName: 'addBlank',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"addDeal"`.
 */
export function useInvestmentAgreementAddDeal<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          'addDeal'
        >['abi'],
        'addDeal'
      > & { functionName?: 'addDeal' }
    : UseContractWriteConfig<
        TMode,
        typeof investmentAgreementABI,
        'addDeal'
      > & {
        abi?: never
        functionName?: 'addDeal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof investmentAgreementABI, 'addDeal'>({
    abi: investmentAgreementABI,
    functionName: 'addDeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"circulateDoc"`.
 */
export function useInvestmentAgreementCirculateDoc<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          'circulateDoc'
        >['abi'],
        'circulateDoc'
      > & { functionName?: 'circulateDoc' }
    : UseContractWriteConfig<
        TMode,
        typeof investmentAgreementABI,
        'circulateDoc'
      > & {
        abi?: never
        functionName?: 'circulateDoc'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof investmentAgreementABI, 'circulateDoc'>(
    {
      abi: investmentAgreementABI,
      functionName: 'circulateDoc',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"clearDealCP"`.
 */
export function useInvestmentAgreementClearDealCp<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          'clearDealCP'
        >['abi'],
        'clearDealCP'
      > & { functionName?: 'clearDealCP' }
    : UseContractWriteConfig<
        TMode,
        typeof investmentAgreementABI,
        'clearDealCP'
      > & {
        abi?: never
        functionName?: 'clearDealCP'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof investmentAgreementABI, 'clearDealCP'>({
    abi: investmentAgreementABI,
    functionName: 'clearDealCP',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"closeDeal"`.
 */
export function useInvestmentAgreementCloseDeal<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          'closeDeal'
        >['abi'],
        'closeDeal'
      > & { functionName?: 'closeDeal' }
    : UseContractWriteConfig<
        TMode,
        typeof investmentAgreementABI,
        'closeDeal'
      > & {
        abi?: never
        functionName?: 'closeDeal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof investmentAgreementABI, 'closeDeal'>({
    abi: investmentAgreementABI,
    functionName: 'closeDeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"delDeal"`.
 */
export function useInvestmentAgreementDelDeal<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          'delDeal'
        >['abi'],
        'delDeal'
      > & { functionName?: 'delDeal' }
    : UseContractWriteConfig<
        TMode,
        typeof investmentAgreementABI,
        'delDeal'
      > & {
        abi?: never
        functionName?: 'delDeal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof investmentAgreementABI, 'delDeal'>({
    abi: investmentAgreementABI,
    functionName: 'delDeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"directCloseDeal"`.
 */
export function useInvestmentAgreementDirectCloseDeal<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          'directCloseDeal'
        >['abi'],
        'directCloseDeal'
      > & { functionName?: 'directCloseDeal' }
    : UseContractWriteConfig<
        TMode,
        typeof investmentAgreementABI,
        'directCloseDeal'
      > & {
        abi?: never
        functionName?: 'directCloseDeal'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof investmentAgreementABI,
    'directCloseDeal'
  >({
    abi: investmentAgreementABI,
    functionName: 'directCloseDeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"grantRole"`.
 */
export function useInvestmentAgreementGrantRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          'grantRole'
        >['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<
        TMode,
        typeof investmentAgreementABI,
        'grantRole'
      > & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof investmentAgreementABI, 'grantRole'>({
    abi: investmentAgreementABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"init"`.
 */
export function useInvestmentAgreementInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          'init'
        >['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof investmentAgreementABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof investmentAgreementABI, 'init'>({
    abi: investmentAgreementABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"lockContents"`.
 */
export function useInvestmentAgreementLockContents<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          'lockContents'
        >['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<
        TMode,
        typeof investmentAgreementABI,
        'lockContents'
      > & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof investmentAgreementABI, 'lockContents'>(
    {
      abi: investmentAgreementABI,
      functionName: 'lockContents',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"lockDealSubject"`.
 */
export function useInvestmentAgreementLockDealSubject<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          'lockDealSubject'
        >['abi'],
        'lockDealSubject'
      > & { functionName?: 'lockDealSubject' }
    : UseContractWriteConfig<
        TMode,
        typeof investmentAgreementABI,
        'lockDealSubject'
      > & {
        abi?: never
        functionName?: 'lockDealSubject'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof investmentAgreementABI,
    'lockDealSubject'
  >({
    abi: investmentAgreementABI,
    functionName: 'lockDealSubject',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"regDeal"`.
 */
export function useInvestmentAgreementRegDeal<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          'regDeal'
        >['abi'],
        'regDeal'
      > & { functionName?: 'regDeal' }
    : UseContractWriteConfig<
        TMode,
        typeof investmentAgreementABI,
        'regDeal'
      > & {
        abi?: never
        functionName?: 'regDeal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof investmentAgreementABI, 'regDeal'>({
    abi: investmentAgreementABI,
    functionName: 'regDeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"regSig"`.
 */
export function useInvestmentAgreementRegSig<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          'regSig'
        >['abi'],
        'regSig'
      > & { functionName?: 'regSig' }
    : UseContractWriteConfig<TMode, typeof investmentAgreementABI, 'regSig'> & {
        abi?: never
        functionName?: 'regSig'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof investmentAgreementABI, 'regSig'>({
    abi: investmentAgreementABI,
    functionName: 'regSig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"releaseDealSubject"`.
 */
export function useInvestmentAgreementReleaseDealSubject<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          'releaseDealSubject'
        >['abi'],
        'releaseDealSubject'
      > & { functionName?: 'releaseDealSubject' }
    : UseContractWriteConfig<
        TMode,
        typeof investmentAgreementABI,
        'releaseDealSubject'
      > & {
        abi?: never
        functionName?: 'releaseDealSubject'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof investmentAgreementABI,
    'releaseDealSubject'
  >({
    abi: investmentAgreementABI,
    functionName: 'releaseDealSubject',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"removeBlank"`.
 */
export function useInvestmentAgreementRemoveBlank<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          'removeBlank'
        >['abi'],
        'removeBlank'
      > & { functionName?: 'removeBlank' }
    : UseContractWriteConfig<
        TMode,
        typeof investmentAgreementABI,
        'removeBlank'
      > & {
        abi?: never
        functionName?: 'removeBlank'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof investmentAgreementABI, 'removeBlank'>({
    abi: investmentAgreementABI,
    functionName: 'removeBlank',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function useInvestmentAgreementRemoveDirectKeeper<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          'removeDirectKeeper'
        >['abi'],
        'removeDirectKeeper'
      > & { functionName?: 'removeDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof investmentAgreementABI,
        'removeDirectKeeper'
      > & {
        abi?: never
        functionName?: 'removeDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof investmentAgreementABI,
    'removeDirectKeeper'
  >({
    abi: investmentAgreementABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useInvestmentAgreementRenounceRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          'renounceRole'
        >['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<
        TMode,
        typeof investmentAgreementABI,
        'renounceRole'
      > & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof investmentAgreementABI, 'renounceRole'>(
    {
      abi: investmentAgreementABI,
      functionName: 'renounceRole',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"revokeDeal"`.
 */
export function useInvestmentAgreementRevokeDeal<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          'revokeDeal'
        >['abi'],
        'revokeDeal'
      > & { functionName?: 'revokeDeal' }
    : UseContractWriteConfig<
        TMode,
        typeof investmentAgreementABI,
        'revokeDeal'
      > & {
        abi?: never
        functionName?: 'revokeDeal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof investmentAgreementABI, 'revokeDeal'>({
    abi: investmentAgreementABI,
    functionName: 'revokeDeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useInvestmentAgreementRevokeRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          'revokeRole'
        >['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<
        TMode,
        typeof investmentAgreementABI,
        'revokeRole'
      > & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof investmentAgreementABI, 'revokeRole'>({
    abi: investmentAgreementABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useInvestmentAgreementSetDirectKeeper<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          'setDirectKeeper'
        >['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof investmentAgreementABI,
        'setDirectKeeper'
      > & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof investmentAgreementABI,
    'setDirectKeeper'
  >({
    abi: investmentAgreementABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function useInvestmentAgreementSetGeneralCounsel<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          'setGeneralCounsel'
        >['abi'],
        'setGeneralCounsel'
      > & { functionName?: 'setGeneralCounsel' }
    : UseContractWriteConfig<
        TMode,
        typeof investmentAgreementABI,
        'setGeneralCounsel'
      > & {
        abi?: never
        functionName?: 'setGeneralCounsel'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof investmentAgreementABI,
    'setGeneralCounsel'
  >({
    abi: investmentAgreementABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"setOwner"`.
 */
export function useInvestmentAgreementSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          'setOwner'
        >['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<
        TMode,
        typeof investmentAgreementABI,
        'setOwner'
      > & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof investmentAgreementABI, 'setOwner'>({
    abi: investmentAgreementABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useInvestmentAgreementSetRoleAdmin<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          'setRoleAdmin'
        >['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<
        TMode,
        typeof investmentAgreementABI,
        'setRoleAdmin'
      > & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof investmentAgreementABI, 'setRoleAdmin'>(
    {
      abi: investmentAgreementABI,
      functionName: 'setRoleAdmin',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"setTiming"`.
 */
export function useInvestmentAgreementSetTiming<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          'setTiming'
        >['abi'],
        'setTiming'
      > & { functionName?: 'setTiming' }
    : UseContractWriteConfig<
        TMode,
        typeof investmentAgreementABI,
        'setTiming'
      > & {
        abi?: never
        functionName?: 'setTiming'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof investmentAgreementABI, 'setTiming'>({
    abi: investmentAgreementABI,
    functionName: 'setTiming',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"setTypeOfIA"`.
 */
export function useInvestmentAgreementSetTypeOfIa<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          'setTypeOfIA'
        >['abi'],
        'setTypeOfIA'
      > & { functionName?: 'setTypeOfIA' }
    : UseContractWriteConfig<
        TMode,
        typeof investmentAgreementABI,
        'setTypeOfIA'
      > & {
        abi?: never
        functionName?: 'setTypeOfIA'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof investmentAgreementABI, 'setTypeOfIA'>({
    abi: investmentAgreementABI,
    functionName: 'setTypeOfIA',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"signDoc"`.
 */
export function useInvestmentAgreementSignDoc<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          'signDoc'
        >['abi'],
        'signDoc'
      > & { functionName?: 'signDoc' }
    : UseContractWriteConfig<
        TMode,
        typeof investmentAgreementABI,
        'signDoc'
      > & {
        abi?: never
        functionName?: 'signDoc'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof investmentAgreementABI, 'signDoc'>({
    abi: investmentAgreementABI,
    functionName: 'signDoc',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"takeGift"`.
 */
export function useInvestmentAgreementTakeGift<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          'takeGift'
        >['abi'],
        'takeGift'
      > & { functionName?: 'takeGift' }
    : UseContractWriteConfig<
        TMode,
        typeof investmentAgreementABI,
        'takeGift'
      > & {
        abi?: never
        functionName?: 'takeGift'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof investmentAgreementABI, 'takeGift'>({
    abi: investmentAgreementABI,
    functionName: 'takeGift',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"terminateDeal"`.
 */
export function useInvestmentAgreementTerminateDeal<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof investmentAgreementABI,
          'terminateDeal'
        >['abi'],
        'terminateDeal'
      > & { functionName?: 'terminateDeal' }
    : UseContractWriteConfig<
        TMode,
        typeof investmentAgreementABI,
        'terminateDeal'
      > & {
        abi?: never
        functionName?: 'terminateDeal'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof investmentAgreementABI,
    'terminateDeal'
  >({
    abi: investmentAgreementABI,
    functionName: 'terminateDeal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__.
 */
export function usePrepareInvestmentAgreementWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof investmentAgreementABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof investmentAgreementABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareInvestmentAgreementAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof investmentAgreementABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof investmentAgreementABI,
    'abandonRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"addBlank"`.
 */
export function usePrepareInvestmentAgreementAddBlank(
  config: Omit<
    UsePrepareContractWriteConfig<typeof investmentAgreementABI, 'addBlank'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    functionName: 'addBlank',
    ...config,
  } as UsePrepareContractWriteConfig<typeof investmentAgreementABI, 'addBlank'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"addDeal"`.
 */
export function usePrepareInvestmentAgreementAddDeal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof investmentAgreementABI, 'addDeal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    functionName: 'addDeal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof investmentAgreementABI, 'addDeal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"circulateDoc"`.
 */
export function usePrepareInvestmentAgreementCirculateDoc(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof investmentAgreementABI,
      'circulateDoc'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    functionName: 'circulateDoc',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof investmentAgreementABI,
    'circulateDoc'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"clearDealCP"`.
 */
export function usePrepareInvestmentAgreementClearDealCp(
  config: Omit<
    UsePrepareContractWriteConfig<typeof investmentAgreementABI, 'clearDealCP'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    functionName: 'clearDealCP',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof investmentAgreementABI,
    'clearDealCP'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"closeDeal"`.
 */
export function usePrepareInvestmentAgreementCloseDeal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof investmentAgreementABI, 'closeDeal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    functionName: 'closeDeal',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof investmentAgreementABI,
    'closeDeal'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"delDeal"`.
 */
export function usePrepareInvestmentAgreementDelDeal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof investmentAgreementABI, 'delDeal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    functionName: 'delDeal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof investmentAgreementABI, 'delDeal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"directCloseDeal"`.
 */
export function usePrepareInvestmentAgreementDirectCloseDeal(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof investmentAgreementABI,
      'directCloseDeal'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    functionName: 'directCloseDeal',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof investmentAgreementABI,
    'directCloseDeal'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareInvestmentAgreementGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof investmentAgreementABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof investmentAgreementABI,
    'grantRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareInvestmentAgreementInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof investmentAgreementABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof investmentAgreementABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareInvestmentAgreementLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof investmentAgreementABI,
      'lockContents'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof investmentAgreementABI,
    'lockContents'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"lockDealSubject"`.
 */
export function usePrepareInvestmentAgreementLockDealSubject(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof investmentAgreementABI,
      'lockDealSubject'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    functionName: 'lockDealSubject',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof investmentAgreementABI,
    'lockDealSubject'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"regDeal"`.
 */
export function usePrepareInvestmentAgreementRegDeal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof investmentAgreementABI, 'regDeal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    functionName: 'regDeal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof investmentAgreementABI, 'regDeal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"regSig"`.
 */
export function usePrepareInvestmentAgreementRegSig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof investmentAgreementABI, 'regSig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    functionName: 'regSig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof investmentAgreementABI, 'regSig'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"releaseDealSubject"`.
 */
export function usePrepareInvestmentAgreementReleaseDealSubject(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof investmentAgreementABI,
      'releaseDealSubject'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    functionName: 'releaseDealSubject',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof investmentAgreementABI,
    'releaseDealSubject'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"removeBlank"`.
 */
export function usePrepareInvestmentAgreementRemoveBlank(
  config: Omit<
    UsePrepareContractWriteConfig<typeof investmentAgreementABI, 'removeBlank'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    functionName: 'removeBlank',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof investmentAgreementABI,
    'removeBlank'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function usePrepareInvestmentAgreementRemoveDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof investmentAgreementABI,
      'removeDirectKeeper'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof investmentAgreementABI,
    'removeDirectKeeper'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareInvestmentAgreementRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof investmentAgreementABI,
      'renounceRole'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof investmentAgreementABI,
    'renounceRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"revokeDeal"`.
 */
export function usePrepareInvestmentAgreementRevokeDeal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof investmentAgreementABI, 'revokeDeal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    functionName: 'revokeDeal',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof investmentAgreementABI,
    'revokeDeal'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareInvestmentAgreementRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof investmentAgreementABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof investmentAgreementABI,
    'revokeRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareInvestmentAgreementSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof investmentAgreementABI,
      'setDirectKeeper'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof investmentAgreementABI,
    'setDirectKeeper'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function usePrepareInvestmentAgreementSetGeneralCounsel(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof investmentAgreementABI,
      'setGeneralCounsel'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof investmentAgreementABI,
    'setGeneralCounsel'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareInvestmentAgreementSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof investmentAgreementABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof investmentAgreementABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareInvestmentAgreementSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof investmentAgreementABI,
      'setRoleAdmin'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof investmentAgreementABI,
    'setRoleAdmin'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"setTiming"`.
 */
export function usePrepareInvestmentAgreementSetTiming(
  config: Omit<
    UsePrepareContractWriteConfig<typeof investmentAgreementABI, 'setTiming'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    functionName: 'setTiming',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof investmentAgreementABI,
    'setTiming'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"setTypeOfIA"`.
 */
export function usePrepareInvestmentAgreementSetTypeOfIa(
  config: Omit<
    UsePrepareContractWriteConfig<typeof investmentAgreementABI, 'setTypeOfIA'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    functionName: 'setTypeOfIA',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof investmentAgreementABI,
    'setTypeOfIA'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"signDoc"`.
 */
export function usePrepareInvestmentAgreementSignDoc(
  config: Omit<
    UsePrepareContractWriteConfig<typeof investmentAgreementABI, 'signDoc'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    functionName: 'signDoc',
    ...config,
  } as UsePrepareContractWriteConfig<typeof investmentAgreementABI, 'signDoc'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"takeGift"`.
 */
export function usePrepareInvestmentAgreementTakeGift(
  config: Omit<
    UsePrepareContractWriteConfig<typeof investmentAgreementABI, 'takeGift'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    functionName: 'takeGift',
    ...config,
  } as UsePrepareContractWriteConfig<typeof investmentAgreementABI, 'takeGift'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link investmentAgreementABI}__ and `functionName` set to `"terminateDeal"`.
 */
export function usePrepareInvestmentAgreementTerminateDeal(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof investmentAgreementABI,
      'terminateDeal'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: investmentAgreementABI,
    functionName: 'terminateDeal',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof investmentAgreementABI,
    'terminateDeal'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link investmentAgreementABI}__.
 */
export function useInvestmentAgreementEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof investmentAgreementABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: investmentAgreementABI,
    ...config,
  } as UseContractEventConfig<typeof investmentAgreementABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link investmentAgreementABI}__ and `eventName` set to `"AddDeal"`.
 */
export function useInvestmentAgreementAddDealEvent(
  config: Omit<
    UseContractEventConfig<typeof investmentAgreementABI, 'AddDeal'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: investmentAgreementABI,
    eventName: 'AddDeal',
    ...config,
  } as UseContractEventConfig<typeof investmentAgreementABI, 'AddDeal'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link investmentAgreementABI}__ and `eventName` set to `"CirculateDoc"`.
 */
export function useInvestmentAgreementCirculateDocEvent(
  config: Omit<
    UseContractEventConfig<typeof investmentAgreementABI, 'CirculateDoc'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: investmentAgreementABI,
    eventName: 'CirculateDoc',
    ...config,
  } as UseContractEventConfig<typeof investmentAgreementABI, 'CirculateDoc'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link investmentAgreementABI}__ and `eventName` set to `"ClearDealCP"`.
 */
export function useInvestmentAgreementClearDealCpEvent(
  config: Omit<
    UseContractEventConfig<typeof investmentAgreementABI, 'ClearDealCP'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: investmentAgreementABI,
    eventName: 'ClearDealCP',
    ...config,
  } as UseContractEventConfig<typeof investmentAgreementABI, 'ClearDealCP'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link investmentAgreementABI}__ and `eventName` set to `"CloseDeal"`.
 */
export function useInvestmentAgreementCloseDealEvent(
  config: Omit<
    UseContractEventConfig<typeof investmentAgreementABI, 'CloseDeal'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: investmentAgreementABI,
    eventName: 'CloseDeal',
    ...config,
  } as UseContractEventConfig<typeof investmentAgreementABI, 'CloseDeal'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link investmentAgreementABI}__ and `eventName` set to `"Init"`.
 */
export function useInvestmentAgreementInitEvent(
  config: Omit<
    UseContractEventConfig<typeof investmentAgreementABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: investmentAgreementABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof investmentAgreementABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link investmentAgreementABI}__ and `eventName` set to `"LockContents"`.
 */
export function useInvestmentAgreementLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof investmentAgreementABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: investmentAgreementABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof investmentAgreementABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link investmentAgreementABI}__ and `eventName` set to `"RemoveDirectKeeper"`.
 */
export function useInvestmentAgreementRemoveDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof investmentAgreementABI, 'RemoveDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: investmentAgreementABI,
    eventName: 'RemoveDirectKeeper',
    ...config,
  } as UseContractEventConfig<
    typeof investmentAgreementABI,
    'RemoveDirectKeeper'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link investmentAgreementABI}__ and `eventName` set to `"RevokeDeal"`.
 */
export function useInvestmentAgreementRevokeDealEvent(
  config: Omit<
    UseContractEventConfig<typeof investmentAgreementABI, 'RevokeDeal'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: investmentAgreementABI,
    eventName: 'RevokeDeal',
    ...config,
  } as UseContractEventConfig<typeof investmentAgreementABI, 'RevokeDeal'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link investmentAgreementABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useInvestmentAgreementSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof investmentAgreementABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: investmentAgreementABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof investmentAgreementABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link investmentAgreementABI}__ and `eventName` set to `"SetGeneralCounsel"`.
 */
export function useInvestmentAgreementSetGeneralCounselEvent(
  config: Omit<
    UseContractEventConfig<typeof investmentAgreementABI, 'SetGeneralCounsel'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: investmentAgreementABI,
    eventName: 'SetGeneralCounsel',
    ...config,
  } as UseContractEventConfig<
    typeof investmentAgreementABI,
    'SetGeneralCounsel'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link investmentAgreementABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useInvestmentAgreementSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof investmentAgreementABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: investmentAgreementABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof investmentAgreementABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link investmentAgreementABI}__ and `eventName` set to `"TerminateDeal"`.
 */
export function useInvestmentAgreementTerminateDealEvent(
  config: Omit<
    UseContractEventConfig<typeof investmentAgreementABI, 'TerminateDeal'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: investmentAgreementABI,
    eventName: 'TerminateDeal',
    ...config,
  } as UseContractEventConfig<typeof investmentAgreementABI, 'TerminateDeal'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link bookOfDirectorsABI}__.
 */
export function useBookOfDirectors(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: bookOfDirectorsABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfDirectorsABI}__.
 */
export function useBookOfDirectorsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof bookOfDirectorsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bookOfDirectorsABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfDirectorsABI,
    ...config,
  } as UseContractReadConfig<
    typeof bookOfDirectorsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"finalized"`.
 */
export function useBookOfDirectorsFinalized<
  TSelectData = ReadContractResult<typeof bookOfDirectorsABI, 'finalized'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfDirectorsABI, 'finalized', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfDirectorsABI,
    functionName: 'finalized',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfDirectorsABI,
    'finalized',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"getBallot"`.
 */
export function useBookOfDirectorsGetBallot<
  TSelectData = ReadContractResult<typeof bookOfDirectorsABI, 'getBallot'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfDirectorsABI, 'getBallot', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfDirectorsABI,
    functionName: 'getBallot',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfDirectorsABI,
    'getBallot',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"getBoardSeatsOccupied"`.
 */
export function useBookOfDirectorsGetBoardSeatsOccupied<
  TSelectData = ReadContractResult<
    typeof bookOfDirectorsABI,
    'getBoardSeatsOccupied'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bookOfDirectorsABI,
      'getBoardSeatsOccupied',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfDirectorsABI,
    functionName: 'getBoardSeatsOccupied',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfDirectorsABI,
    'getBoardSeatsOccupied',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"getBoardSeatsQuota"`.
 */
export function useBookOfDirectorsGetBoardSeatsQuota<
  TSelectData = ReadContractResult<
    typeof bookOfDirectorsABI,
    'getBoardSeatsQuota'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bookOfDirectorsABI,
      'getBoardSeatsQuota',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfDirectorsABI,
    functionName: 'getBoardSeatsQuota',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfDirectorsABI,
    'getBoardSeatsQuota',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"getBookeeper"`.
 */
export function useBookOfDirectorsGetBookeeper<
  TSelectData = ReadContractResult<typeof bookOfDirectorsABI, 'getBookeeper'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bookOfDirectorsABI,
      'getBookeeper',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfDirectorsABI,
    functionName: 'getBookeeper',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfDirectorsABI,
    'getBookeeper',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"getCaseOfAttitude"`.
 */
export function useBookOfDirectorsGetCaseOfAttitude<
  TSelectData = ReadContractResult<
    typeof bookOfDirectorsABI,
    'getCaseOfAttitude'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bookOfDirectorsABI,
      'getCaseOfAttitude',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfDirectorsABI,
    functionName: 'getCaseOfAttitude',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfDirectorsABI,
    'getCaseOfAttitude',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"getDelegateOf"`.
 */
export function useBookOfDirectorsGetDelegateOf<
  TSelectData = ReadContractResult<typeof bookOfDirectorsABI, 'getDelegateOf'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bookOfDirectorsABI,
      'getDelegateOf',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfDirectorsABI,
    functionName: 'getDelegateOf',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfDirectorsABI,
    'getDelegateOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"getDirectorsFullPosInfo"`.
 */
export function useBookOfDirectorsGetDirectorsFullPosInfo<
  TSelectData = ReadContractResult<
    typeof bookOfDirectorsABI,
    'getDirectorsFullPosInfo'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bookOfDirectorsABI,
      'getDirectorsFullPosInfo',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfDirectorsABI,
    functionName: 'getDirectorsFullPosInfo',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfDirectorsABI,
    'getDirectorsFullPosInfo',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"getDirectorsList"`.
 */
export function useBookOfDirectorsGetDirectorsList<
  TSelectData = ReadContractResult<
    typeof bookOfDirectorsABI,
    'getDirectorsList'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bookOfDirectorsABI,
      'getDirectorsList',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfDirectorsABI,
    functionName: 'getDirectorsList',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfDirectorsABI,
    'getDirectorsList',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"getDirectorsPosList"`.
 */
export function useBookOfDirectorsGetDirectorsPosList<
  TSelectData = ReadContractResult<
    typeof bookOfDirectorsABI,
    'getDirectorsPosList'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bookOfDirectorsABI,
      'getDirectorsPosList',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfDirectorsABI,
    functionName: 'getDirectorsPosList',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfDirectorsABI,
    'getDirectorsPosList',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"getFullPosInfoInHand"`.
 */
export function useBookOfDirectorsGetFullPosInfoInHand<
  TSelectData = ReadContractResult<
    typeof bookOfDirectorsABI,
    'getFullPosInfoInHand'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bookOfDirectorsABI,
      'getFullPosInfoInHand',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfDirectorsABI,
    functionName: 'getFullPosInfoInHand',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfDirectorsABI,
    'getFullPosInfoInHand',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"getGeneralCounsel"`.
 */
export function useBookOfDirectorsGetGeneralCounsel<
  TSelectData = ReadContractResult<
    typeof bookOfDirectorsABI,
    'getGeneralCounsel'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bookOfDirectorsABI,
      'getGeneralCounsel',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfDirectorsABI,
    functionName: 'getGeneralCounsel',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfDirectorsABI,
    'getGeneralCounsel',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"getLeavesHeadcountOfDirectors"`.
 */
export function useBookOfDirectorsGetLeavesHeadcountOfDirectors<
  TSelectData = ReadContractResult<
    typeof bookOfDirectorsABI,
    'getLeavesHeadcountOfDirectors'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bookOfDirectorsABI,
      'getLeavesHeadcountOfDirectors',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfDirectorsABI,
    functionName: 'getLeavesHeadcountOfDirectors',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfDirectorsABI,
    'getLeavesHeadcountOfDirectors',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"getLeavesWeightAtDate"`.
 */
export function useBookOfDirectorsGetLeavesWeightAtDate<
  TSelectData = ReadContractResult<
    typeof bookOfDirectorsABI,
    'getLeavesWeightAtDate'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bookOfDirectorsABI,
      'getLeavesWeightAtDate',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfDirectorsABI,
    functionName: 'getLeavesWeightAtDate',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfDirectorsABI,
    'getLeavesWeightAtDate',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"getManagersFullPosInfo"`.
 */
export function useBookOfDirectorsGetManagersFullPosInfo<
  TSelectData = ReadContractResult<
    typeof bookOfDirectorsABI,
    'getManagersFullPosInfo'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bookOfDirectorsABI,
      'getManagersFullPosInfo',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfDirectorsABI,
    functionName: 'getManagersFullPosInfo',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfDirectorsABI,
    'getManagersFullPosInfo',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"getManagersList"`.
 */
export function useBookOfDirectorsGetManagersList<
  TSelectData = ReadContractResult<
    typeof bookOfDirectorsABI,
    'getManagersList'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bookOfDirectorsABI,
      'getManagersList',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfDirectorsABI,
    functionName: 'getManagersList',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfDirectorsABI,
    'getManagersList',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"getManagersPosList"`.
 */
export function useBookOfDirectorsGetManagersPosList<
  TSelectData = ReadContractResult<
    typeof bookOfDirectorsABI,
    'getManagersPosList'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bookOfDirectorsABI,
      'getManagersPosList',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfDirectorsABI,
    functionName: 'getManagersPosList',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfDirectorsABI,
    'getManagersPosList',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"getMotion"`.
 */
export function useBookOfDirectorsGetMotion<
  TSelectData = ReadContractResult<typeof bookOfDirectorsABI, 'getMotion'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfDirectorsABI, 'getMotion', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfDirectorsABI,
    functionName: 'getMotion',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfDirectorsABI,
    'getMotion',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"getNumOfDirectors"`.
 */
export function useBookOfDirectorsGetNumOfDirectors<
  TSelectData = ReadContractResult<
    typeof bookOfDirectorsABI,
    'getNumOfDirectors'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bookOfDirectorsABI,
      'getNumOfDirectors',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfDirectorsABI,
    functionName: 'getNumOfDirectors',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfDirectorsABI,
    'getNumOfDirectors',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"getNumOfManagers"`.
 */
export function useBookOfDirectorsGetNumOfManagers<
  TSelectData = ReadContractResult<
    typeof bookOfDirectorsABI,
    'getNumOfManagers'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bookOfDirectorsABI,
      'getNumOfManagers',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfDirectorsABI,
    functionName: 'getNumOfManagers',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfDirectorsABI,
    'getNumOfManagers',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"getOwner"`.
 */
export function useBookOfDirectorsGetOwner<
  TSelectData = ReadContractResult<typeof bookOfDirectorsABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfDirectorsABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfDirectorsABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfDirectorsABI,
    'getOwner',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"getPosInHand"`.
 */
export function useBookOfDirectorsGetPosInHand<
  TSelectData = ReadContractResult<typeof bookOfDirectorsABI, 'getPosInHand'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bookOfDirectorsABI,
      'getPosInHand',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfDirectorsABI,
    functionName: 'getPosInHand',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfDirectorsABI,
    'getPosInHand',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"getPosition"`.
 */
export function useBookOfDirectorsGetPosition<
  TSelectData = ReadContractResult<typeof bookOfDirectorsABI, 'getPosition'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bookOfDirectorsABI,
      'getPosition',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfDirectorsABI,
    functionName: 'getPosition',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfDirectorsABI,
    'getPosition',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"getSeqList"`.
 */
export function useBookOfDirectorsGetSeqList<
  TSelectData = ReadContractResult<typeof bookOfDirectorsABI, 'getSeqList'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfDirectorsABI, 'getSeqList', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfDirectorsABI,
    functionName: 'getSeqList',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfDirectorsABI,
    'getSeqList',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"getVoterOfDelegateMap"`.
 */
export function useBookOfDirectorsGetVoterOfDelegateMap<
  TSelectData = ReadContractResult<
    typeof bookOfDirectorsABI,
    'getVoterOfDelegateMap'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bookOfDirectorsABI,
      'getVoterOfDelegateMap',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfDirectorsABI,
    functionName: 'getVoterOfDelegateMap',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfDirectorsABI,
    'getVoterOfDelegateMap',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"hasNominationRight"`.
 */
export function useBookOfDirectorsHasNominationRight<
  TSelectData = ReadContractResult<
    typeof bookOfDirectorsABI,
    'hasNominationRight'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bookOfDirectorsABI,
      'hasNominationRight',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfDirectorsABI,
    functionName: 'hasNominationRight',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfDirectorsABI,
    'hasNominationRight',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"hasPosition"`.
 */
export function useBookOfDirectorsHasPosition<
  TSelectData = ReadContractResult<typeof bookOfDirectorsABI, 'hasPosition'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bookOfDirectorsABI,
      'hasPosition',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfDirectorsABI,
    functionName: 'hasPosition',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfDirectorsABI,
    'hasPosition',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"hasRole"`.
 */
export function useBookOfDirectorsHasRole<
  TSelectData = ReadContractResult<typeof bookOfDirectorsABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfDirectorsABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfDirectorsABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof bookOfDirectorsABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"isDirector"`.
 */
export function useBookOfDirectorsIsDirector<
  TSelectData = ReadContractResult<typeof bookOfDirectorsABI, 'isDirector'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfDirectorsABI, 'isDirector', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfDirectorsABI,
    functionName: 'isDirector',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfDirectorsABI,
    'isDirector',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"isManager"`.
 */
export function useBookOfDirectorsIsManager<
  TSelectData = ReadContractResult<typeof bookOfDirectorsABI, 'isManager'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfDirectorsABI, 'isManager', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfDirectorsABI,
    functionName: 'isManager',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfDirectorsABI,
    'isManager',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"isOccupied"`.
 */
export function useBookOfDirectorsIsOccupied<
  TSelectData = ReadContractResult<typeof bookOfDirectorsABI, 'isOccupied'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfDirectorsABI, 'isOccupied', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfDirectorsABI,
    functionName: 'isOccupied',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfDirectorsABI,
    'isOccupied',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"isPassed"`.
 */
export function useBookOfDirectorsIsPassed<
  TSelectData = ReadContractResult<typeof bookOfDirectorsABI, 'isPassed'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfDirectorsABI, 'isPassed', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfDirectorsABI,
    functionName: 'isPassed',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfDirectorsABI,
    'isPassed',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"isProposed"`.
 */
export function useBookOfDirectorsIsProposed<
  TSelectData = ReadContractResult<typeof bookOfDirectorsABI, 'isProposed'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfDirectorsABI, 'isProposed', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfDirectorsABI,
    functionName: 'isProposed',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfDirectorsABI,
    'isProposed',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"isVoted"`.
 */
export function useBookOfDirectorsIsVoted<
  TSelectData = ReadContractResult<typeof bookOfDirectorsABI, 'isVoted'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfDirectorsABI, 'isVoted', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfDirectorsABI,
    functionName: 'isVoted',
    ...config,
  } as UseContractReadConfig<typeof bookOfDirectorsABI, 'isVoted', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"isVotedFor"`.
 */
export function useBookOfDirectorsIsVotedFor<
  TSelectData = ReadContractResult<typeof bookOfDirectorsABI, 'isVotedFor'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfDirectorsABI, 'isVotedFor', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfDirectorsABI,
    functionName: 'isVotedFor',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfDirectorsABI,
    'isVotedFor',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"posExist"`.
 */
export function useBookOfDirectorsPosExist<
  TSelectData = ReadContractResult<typeof bookOfDirectorsABI, 'posExist'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfDirectorsABI, 'posExist', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfDirectorsABI,
    functionName: 'posExist',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfDirectorsABI,
    'posExist',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"voteEnded"`.
 */
export function useBookOfDirectorsVoteEnded<
  TSelectData = ReadContractResult<typeof bookOfDirectorsABI, 'voteEnded'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfDirectorsABI, 'voteEnded', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfDirectorsABI,
    functionName: 'voteEnded',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfDirectorsABI,
    'voteEnded',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"voteStarted"`.
 */
export function useBookOfDirectorsVoteStarted<
  TSelectData = ReadContractResult<typeof bookOfDirectorsABI, 'voteStarted'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bookOfDirectorsABI,
      'voteStarted',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfDirectorsABI,
    functionName: 'voteStarted',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfDirectorsABI,
    'voteStarted',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__.
 */
export function useBookOfDirectorsWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfDirectorsABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof bookOfDirectorsABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfDirectorsABI, TFunctionName>({
    abi: bookOfDirectorsABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useBookOfDirectorsAbandonRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfDirectorsABI,
          'abandonRole'
        >['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfDirectorsABI,
        'abandonRole'
      > & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfDirectorsABI, 'abandonRole'>({
    abi: bookOfDirectorsABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"castVoteInBoardMeeting"`.
 */
export function useBookOfDirectorsCastVoteInBoardMeeting<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfDirectorsABI,
          'castVoteInBoardMeeting'
        >['abi'],
        'castVoteInBoardMeeting'
      > & { functionName?: 'castVoteInBoardMeeting' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfDirectorsABI,
        'castVoteInBoardMeeting'
      > & {
        abi?: never
        functionName?: 'castVoteInBoardMeeting'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof bookOfDirectorsABI,
    'castVoteInBoardMeeting'
  >({
    abi: bookOfDirectorsABI,
    functionName: 'castVoteInBoardMeeting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"castVoteInGeneralMeeting"`.
 */
export function useBookOfDirectorsCastVoteInGeneralMeeting<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfDirectorsABI,
          'castVoteInGeneralMeeting'
        >['abi'],
        'castVoteInGeneralMeeting'
      > & { functionName?: 'castVoteInGeneralMeeting' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfDirectorsABI,
        'castVoteInGeneralMeeting'
      > & {
        abi?: never
        functionName?: 'castVoteInGeneralMeeting'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof bookOfDirectorsABI,
    'castVoteInGeneralMeeting'
  >({
    abi: bookOfDirectorsABI,
    functionName: 'castVoteInGeneralMeeting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"createAction"`.
 */
export function useBookOfDirectorsCreateAction<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfDirectorsABI,
          'createAction'
        >['abi'],
        'createAction'
      > & { functionName?: 'createAction' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfDirectorsABI,
        'createAction'
      > & {
        abi?: never
        functionName?: 'createAction'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfDirectorsABI, 'createAction'>({
    abi: bookOfDirectorsABI,
    functionName: 'createAction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"createMotionToApproveDoc"`.
 */
export function useBookOfDirectorsCreateMotionToApproveDoc<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfDirectorsABI,
          'createMotionToApproveDoc'
        >['abi'],
        'createMotionToApproveDoc'
      > & { functionName?: 'createMotionToApproveDoc' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfDirectorsABI,
        'createMotionToApproveDoc'
      > & {
        abi?: never
        functionName?: 'createMotionToApproveDoc'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof bookOfDirectorsABI,
    'createMotionToApproveDoc'
  >({
    abi: bookOfDirectorsABI,
    functionName: 'createMotionToApproveDoc',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"createMotionToRemoveOfficer"`.
 */
export function useBookOfDirectorsCreateMotionToRemoveOfficer<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfDirectorsABI,
          'createMotionToRemoveOfficer'
        >['abi'],
        'createMotionToRemoveOfficer'
      > & { functionName?: 'createMotionToRemoveOfficer' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfDirectorsABI,
        'createMotionToRemoveOfficer'
      > & {
        abi?: never
        functionName?: 'createMotionToRemoveOfficer'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof bookOfDirectorsABI,
    'createMotionToRemoveOfficer'
  >({
    abi: bookOfDirectorsABI,
    functionName: 'createMotionToRemoveOfficer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"createPosition"`.
 */
export function useBookOfDirectorsCreatePosition<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfDirectorsABI,
          'createPosition'
        >['abi'],
        'createPosition'
      > & { functionName?: 'createPosition' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfDirectorsABI,
        'createPosition'
      > & {
        abi?: never
        functionName?: 'createPosition'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfDirectorsABI, 'createPosition'>({
    abi: bookOfDirectorsABI,
    functionName: 'createPosition',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"entrustDelegate"`.
 */
export function useBookOfDirectorsEntrustDelegate<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfDirectorsABI,
          'entrustDelegate'
        >['abi'],
        'entrustDelegate'
      > & { functionName?: 'entrustDelegate' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfDirectorsABI,
        'entrustDelegate'
      > & {
        abi?: never
        functionName?: 'entrustDelegate'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfDirectorsABI, 'entrustDelegate'>({
    abi: bookOfDirectorsABI,
    functionName: 'entrustDelegate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"execAction"`.
 */
export function useBookOfDirectorsExecAction<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfDirectorsABI,
          'execAction'
        >['abi'],
        'execAction'
      > & { functionName?: 'execAction' }
    : UseContractWriteConfig<TMode, typeof bookOfDirectorsABI, 'execAction'> & {
        abi?: never
        functionName?: 'execAction'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfDirectorsABI, 'execAction'>({
    abi: bookOfDirectorsABI,
    functionName: 'execAction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"execResolution"`.
 */
export function useBookOfDirectorsExecResolution<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfDirectorsABI,
          'execResolution'
        >['abi'],
        'execResolution'
      > & { functionName?: 'execResolution' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfDirectorsABI,
        'execResolution'
      > & {
        abi?: never
        functionName?: 'execResolution'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfDirectorsABI, 'execResolution'>({
    abi: bookOfDirectorsABI,
    functionName: 'execResolution',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"grantRole"`.
 */
export function useBookOfDirectorsGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfDirectorsABI,
          'grantRole'
        >['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof bookOfDirectorsABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfDirectorsABI, 'grantRole'>({
    abi: bookOfDirectorsABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"init"`.
 */
export function useBookOfDirectorsInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfDirectorsABI, 'init'>['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof bookOfDirectorsABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfDirectorsABI, 'init'>({
    abi: bookOfDirectorsABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"lockContents"`.
 */
export function useBookOfDirectorsLockContents<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfDirectorsABI,
          'lockContents'
        >['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfDirectorsABI,
        'lockContents'
      > & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfDirectorsABI, 'lockContents'>({
    abi: bookOfDirectorsABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"nominateOfficer"`.
 */
export function useBookOfDirectorsNominateOfficer<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfDirectorsABI,
          'nominateOfficer'
        >['abi'],
        'nominateOfficer'
      > & { functionName?: 'nominateOfficer' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfDirectorsABI,
        'nominateOfficer'
      > & {
        abi?: never
        functionName?: 'nominateOfficer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfDirectorsABI, 'nominateOfficer'>({
    abi: bookOfDirectorsABI,
    functionName: 'nominateOfficer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"proposeMotionToBoard"`.
 */
export function useBookOfDirectorsProposeMotionToBoard<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfDirectorsABI,
          'proposeMotionToBoard'
        >['abi'],
        'proposeMotionToBoard'
      > & { functionName?: 'proposeMotionToBoard' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfDirectorsABI,
        'proposeMotionToBoard'
      > & {
        abi?: never
        functionName?: 'proposeMotionToBoard'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof bookOfDirectorsABI,
    'proposeMotionToBoard'
  >({
    abi: bookOfDirectorsABI,
    functionName: 'proposeMotionToBoard',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"proposeMotionToGeneralMeeting"`.
 */
export function useBookOfDirectorsProposeMotionToGeneralMeeting<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfDirectorsABI,
          'proposeMotionToGeneralMeeting'
        >['abi'],
        'proposeMotionToGeneralMeeting'
      > & { functionName?: 'proposeMotionToGeneralMeeting' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfDirectorsABI,
        'proposeMotionToGeneralMeeting'
      > & {
        abi?: never
        functionName?: 'proposeMotionToGeneralMeeting'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof bookOfDirectorsABI,
    'proposeMotionToGeneralMeeting'
  >({
    abi: bookOfDirectorsABI,
    functionName: 'proposeMotionToGeneralMeeting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"quitPosition"`.
 */
export function useBookOfDirectorsQuitPosition<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfDirectorsABI,
          'quitPosition'
        >['abi'],
        'quitPosition'
      > & { functionName?: 'quitPosition' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfDirectorsABI,
        'quitPosition'
      > & {
        abi?: never
        functionName?: 'quitPosition'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfDirectorsABI, 'quitPosition'>({
    abi: bookOfDirectorsABI,
    functionName: 'quitPosition',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function useBookOfDirectorsRemoveDirectKeeper<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfDirectorsABI,
          'removeDirectKeeper'
        >['abi'],
        'removeDirectKeeper'
      > & { functionName?: 'removeDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfDirectorsABI,
        'removeDirectKeeper'
      > & {
        abi?: never
        functionName?: 'removeDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof bookOfDirectorsABI,
    'removeDirectKeeper'
  >({
    abi: bookOfDirectorsABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"removeOfficer"`.
 */
export function useBookOfDirectorsRemoveOfficer<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfDirectorsABI,
          'removeOfficer'
        >['abi'],
        'removeOfficer'
      > & { functionName?: 'removeOfficer' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfDirectorsABI,
        'removeOfficer'
      > & {
        abi?: never
        functionName?: 'removeOfficer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfDirectorsABI, 'removeOfficer'>({
    abi: bookOfDirectorsABI,
    functionName: 'removeOfficer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"removePosition"`.
 */
export function useBookOfDirectorsRemovePosition<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfDirectorsABI,
          'removePosition'
        >['abi'],
        'removePosition'
      > & { functionName?: 'removePosition' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfDirectorsABI,
        'removePosition'
      > & {
        abi?: never
        functionName?: 'removePosition'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfDirectorsABI, 'removePosition'>({
    abi: bookOfDirectorsABI,
    functionName: 'removePosition',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useBookOfDirectorsRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfDirectorsABI,
          'renounceRole'
        >['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfDirectorsABI,
        'renounceRole'
      > & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfDirectorsABI, 'renounceRole'>({
    abi: bookOfDirectorsABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useBookOfDirectorsRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfDirectorsABI,
          'revokeRole'
        >['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof bookOfDirectorsABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfDirectorsABI, 'revokeRole'>({
    abi: bookOfDirectorsABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useBookOfDirectorsSetDirectKeeper<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfDirectorsABI,
          'setDirectKeeper'
        >['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfDirectorsABI,
        'setDirectKeeper'
      > & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfDirectorsABI, 'setDirectKeeper'>({
    abi: bookOfDirectorsABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function useBookOfDirectorsSetGeneralCounsel<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfDirectorsABI,
          'setGeneralCounsel'
        >['abi'],
        'setGeneralCounsel'
      > & { functionName?: 'setGeneralCounsel' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfDirectorsABI,
        'setGeneralCounsel'
      > & {
        abi?: never
        functionName?: 'setGeneralCounsel'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof bookOfDirectorsABI,
    'setGeneralCounsel'
  >({
    abi: bookOfDirectorsABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"setOwner"`.
 */
export function useBookOfDirectorsSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfDirectorsABI,
          'setOwner'
        >['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof bookOfDirectorsABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfDirectorsABI, 'setOwner'>({
    abi: bookOfDirectorsABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useBookOfDirectorsSetRoleAdmin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfDirectorsABI,
          'setRoleAdmin'
        >['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfDirectorsABI,
        'setRoleAdmin'
      > & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfDirectorsABI, 'setRoleAdmin'>({
    abi: bookOfDirectorsABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"takePosition"`.
 */
export function useBookOfDirectorsTakePosition<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfDirectorsABI,
          'takePosition'
        >['abi'],
        'takePosition'
      > & { functionName?: 'takePosition' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfDirectorsABI,
        'takePosition'
      > & {
        abi?: never
        functionName?: 'takePosition'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfDirectorsABI, 'takePosition'>({
    abi: bookOfDirectorsABI,
    functionName: 'takePosition',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"updatePosition"`.
 */
export function useBookOfDirectorsUpdatePosition<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfDirectorsABI,
          'updatePosition'
        >['abi'],
        'updatePosition'
      > & { functionName?: 'updatePosition' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfDirectorsABI,
        'updatePosition'
      > & {
        abi?: never
        functionName?: 'updatePosition'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfDirectorsABI, 'updatePosition'>({
    abi: bookOfDirectorsABI,
    functionName: 'updatePosition',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"voteCounting"`.
 */
export function useBookOfDirectorsVoteCounting<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfDirectorsABI,
          'voteCounting'
        >['abi'],
        'voteCounting'
      > & { functionName?: 'voteCounting' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfDirectorsABI,
        'voteCounting'
      > & {
        abi?: never
        functionName?: 'voteCounting'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfDirectorsABI, 'voteCounting'>({
    abi: bookOfDirectorsABI,
    functionName: 'voteCounting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__.
 */
export function usePrepareBookOfDirectorsWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfDirectorsABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfDirectorsABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfDirectorsABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareBookOfDirectorsAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfDirectorsABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfDirectorsABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfDirectorsABI, 'abandonRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"castVoteInBoardMeeting"`.
 */
export function usePrepareBookOfDirectorsCastVoteInBoardMeeting(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof bookOfDirectorsABI,
      'castVoteInBoardMeeting'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfDirectorsABI,
    functionName: 'castVoteInBoardMeeting',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bookOfDirectorsABI,
    'castVoteInBoardMeeting'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"castVoteInGeneralMeeting"`.
 */
export function usePrepareBookOfDirectorsCastVoteInGeneralMeeting(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof bookOfDirectorsABI,
      'castVoteInGeneralMeeting'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfDirectorsABI,
    functionName: 'castVoteInGeneralMeeting',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bookOfDirectorsABI,
    'castVoteInGeneralMeeting'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"createAction"`.
 */
export function usePrepareBookOfDirectorsCreateAction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfDirectorsABI, 'createAction'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfDirectorsABI,
    functionName: 'createAction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfDirectorsABI, 'createAction'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"createMotionToApproveDoc"`.
 */
export function usePrepareBookOfDirectorsCreateMotionToApproveDoc(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof bookOfDirectorsABI,
      'createMotionToApproveDoc'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfDirectorsABI,
    functionName: 'createMotionToApproveDoc',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bookOfDirectorsABI,
    'createMotionToApproveDoc'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"createMotionToRemoveOfficer"`.
 */
export function usePrepareBookOfDirectorsCreateMotionToRemoveOfficer(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof bookOfDirectorsABI,
      'createMotionToRemoveOfficer'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfDirectorsABI,
    functionName: 'createMotionToRemoveOfficer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bookOfDirectorsABI,
    'createMotionToRemoveOfficer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"createPosition"`.
 */
export function usePrepareBookOfDirectorsCreatePosition(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfDirectorsABI, 'createPosition'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfDirectorsABI,
    functionName: 'createPosition',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bookOfDirectorsABI,
    'createPosition'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"entrustDelegate"`.
 */
export function usePrepareBookOfDirectorsEntrustDelegate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfDirectorsABI, 'entrustDelegate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfDirectorsABI,
    functionName: 'entrustDelegate',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bookOfDirectorsABI,
    'entrustDelegate'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"execAction"`.
 */
export function usePrepareBookOfDirectorsExecAction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfDirectorsABI, 'execAction'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfDirectorsABI,
    functionName: 'execAction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfDirectorsABI, 'execAction'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"execResolution"`.
 */
export function usePrepareBookOfDirectorsExecResolution(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfDirectorsABI, 'execResolution'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfDirectorsABI,
    functionName: 'execResolution',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bookOfDirectorsABI,
    'execResolution'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareBookOfDirectorsGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfDirectorsABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfDirectorsABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfDirectorsABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareBookOfDirectorsInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfDirectorsABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfDirectorsABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfDirectorsABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareBookOfDirectorsLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfDirectorsABI, 'lockContents'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfDirectorsABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfDirectorsABI, 'lockContents'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"nominateOfficer"`.
 */
export function usePrepareBookOfDirectorsNominateOfficer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfDirectorsABI, 'nominateOfficer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfDirectorsABI,
    functionName: 'nominateOfficer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bookOfDirectorsABI,
    'nominateOfficer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"proposeMotionToBoard"`.
 */
export function usePrepareBookOfDirectorsProposeMotionToBoard(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof bookOfDirectorsABI,
      'proposeMotionToBoard'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfDirectorsABI,
    functionName: 'proposeMotionToBoard',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bookOfDirectorsABI,
    'proposeMotionToBoard'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"proposeMotionToGeneralMeeting"`.
 */
export function usePrepareBookOfDirectorsProposeMotionToGeneralMeeting(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof bookOfDirectorsABI,
      'proposeMotionToGeneralMeeting'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfDirectorsABI,
    functionName: 'proposeMotionToGeneralMeeting',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bookOfDirectorsABI,
    'proposeMotionToGeneralMeeting'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"quitPosition"`.
 */
export function usePrepareBookOfDirectorsQuitPosition(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfDirectorsABI, 'quitPosition'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfDirectorsABI,
    functionName: 'quitPosition',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfDirectorsABI, 'quitPosition'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function usePrepareBookOfDirectorsRemoveDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof bookOfDirectorsABI,
      'removeDirectKeeper'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfDirectorsABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bookOfDirectorsABI,
    'removeDirectKeeper'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"removeOfficer"`.
 */
export function usePrepareBookOfDirectorsRemoveOfficer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfDirectorsABI, 'removeOfficer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfDirectorsABI,
    functionName: 'removeOfficer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bookOfDirectorsABI,
    'removeOfficer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"removePosition"`.
 */
export function usePrepareBookOfDirectorsRemovePosition(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfDirectorsABI, 'removePosition'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfDirectorsABI,
    functionName: 'removePosition',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bookOfDirectorsABI,
    'removePosition'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareBookOfDirectorsRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfDirectorsABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfDirectorsABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfDirectorsABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareBookOfDirectorsRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfDirectorsABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfDirectorsABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfDirectorsABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareBookOfDirectorsSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfDirectorsABI, 'setDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfDirectorsABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bookOfDirectorsABI,
    'setDirectKeeper'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function usePrepareBookOfDirectorsSetGeneralCounsel(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof bookOfDirectorsABI,
      'setGeneralCounsel'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfDirectorsABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bookOfDirectorsABI,
    'setGeneralCounsel'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareBookOfDirectorsSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfDirectorsABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfDirectorsABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfDirectorsABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareBookOfDirectorsSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfDirectorsABI, 'setRoleAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfDirectorsABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfDirectorsABI, 'setRoleAdmin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"takePosition"`.
 */
export function usePrepareBookOfDirectorsTakePosition(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfDirectorsABI, 'takePosition'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfDirectorsABI,
    functionName: 'takePosition',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfDirectorsABI, 'takePosition'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"updatePosition"`.
 */
export function usePrepareBookOfDirectorsUpdatePosition(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfDirectorsABI, 'updatePosition'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfDirectorsABI,
    functionName: 'updatePosition',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bookOfDirectorsABI,
    'updatePosition'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `functionName` set to `"voteCounting"`.
 */
export function usePrepareBookOfDirectorsVoteCounting(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfDirectorsABI, 'voteCounting'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfDirectorsABI,
    functionName: 'voteCounting',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfDirectorsABI, 'voteCounting'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfDirectorsABI}__.
 */
export function useBookOfDirectorsEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof bookOfDirectorsABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfDirectorsABI,
    ...config,
  } as UseContractEventConfig<typeof bookOfDirectorsABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `eventName` set to `"AddPosition"`.
 */
export function useBookOfDirectorsAddPositionEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfDirectorsABI, 'AddPosition'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfDirectorsABI,
    eventName: 'AddPosition',
    ...config,
  } as UseContractEventConfig<typeof bookOfDirectorsABI, 'AddPosition'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `eventName` set to `"CastVoteInBoardMeeting"`.
 */
export function useBookOfDirectorsCastVoteInBoardMeetingEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfDirectorsABI, 'CastVoteInBoardMeeting'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfDirectorsABI,
    eventName: 'CastVoteInBoardMeeting',
    ...config,
  } as UseContractEventConfig<
    typeof bookOfDirectorsABI,
    'CastVoteInBoardMeeting'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `eventName` set to `"CastVoteInGeneralMeeting"`.
 */
export function useBookOfDirectorsCastVoteInGeneralMeetingEvent(
  config: Omit<
    UseContractEventConfig<
      typeof bookOfDirectorsABI,
      'CastVoteInGeneralMeeting'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfDirectorsABI,
    eventName: 'CastVoteInGeneralMeeting',
    ...config,
  } as UseContractEventConfig<
    typeof bookOfDirectorsABI,
    'CastVoteInGeneralMeeting'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `eventName` set to `"CreateMotion"`.
 */
export function useBookOfDirectorsCreateMotionEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfDirectorsABI, 'CreateMotion'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfDirectorsABI,
    eventName: 'CreateMotion',
    ...config,
  } as UseContractEventConfig<typeof bookOfDirectorsABI, 'CreateMotion'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `eventName` set to `"EntrustDelegate"`.
 */
export function useBookOfDirectorsEntrustDelegateEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfDirectorsABI, 'EntrustDelegate'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfDirectorsABI,
    eventName: 'EntrustDelegate',
    ...config,
  } as UseContractEventConfig<typeof bookOfDirectorsABI, 'EntrustDelegate'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `eventName` set to `"ExecResolution"`.
 */
export function useBookOfDirectorsExecResolutionEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfDirectorsABI, 'ExecResolution'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfDirectorsABI,
    eventName: 'ExecResolution',
    ...config,
  } as UseContractEventConfig<typeof bookOfDirectorsABI, 'ExecResolution'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `eventName` set to `"Init"`.
 */
export function useBookOfDirectorsInitEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfDirectorsABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfDirectorsABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof bookOfDirectorsABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `eventName` set to `"LockContents"`.
 */
export function useBookOfDirectorsLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfDirectorsABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfDirectorsABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof bookOfDirectorsABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `eventName` set to `"ProposeMotionToBoard"`.
 */
export function useBookOfDirectorsProposeMotionToBoardEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfDirectorsABI, 'ProposeMotionToBoard'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfDirectorsABI,
    eventName: 'ProposeMotionToBoard',
    ...config,
  } as UseContractEventConfig<
    typeof bookOfDirectorsABI,
    'ProposeMotionToBoard'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `eventName` set to `"ProposeMotionToGeneralMeeting"`.
 */
export function useBookOfDirectorsProposeMotionToGeneralMeetingEvent(
  config: Omit<
    UseContractEventConfig<
      typeof bookOfDirectorsABI,
      'ProposeMotionToGeneralMeeting'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfDirectorsABI,
    eventName: 'ProposeMotionToGeneralMeeting',
    ...config,
  } as UseContractEventConfig<
    typeof bookOfDirectorsABI,
    'ProposeMotionToGeneralMeeting'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `eventName` set to `"QuitPosition"`.
 */
export function useBookOfDirectorsQuitPositionEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfDirectorsABI, 'QuitPosition'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfDirectorsABI,
    eventName: 'QuitPosition',
    ...config,
  } as UseContractEventConfig<typeof bookOfDirectorsABI, 'QuitPosition'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `eventName` set to `"RemoveDirectKeeper"`.
 */
export function useBookOfDirectorsRemoveDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfDirectorsABI, 'RemoveDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfDirectorsABI,
    eventName: 'RemoveDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof bookOfDirectorsABI, 'RemoveDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `eventName` set to `"RemoveOfficer"`.
 */
export function useBookOfDirectorsRemoveOfficerEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfDirectorsABI, 'RemoveOfficer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfDirectorsABI,
    eventName: 'RemoveOfficer',
    ...config,
  } as UseContractEventConfig<typeof bookOfDirectorsABI, 'RemoveOfficer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `eventName` set to `"RemovePosition"`.
 */
export function useBookOfDirectorsRemovePositionEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfDirectorsABI, 'RemovePosition'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfDirectorsABI,
    eventName: 'RemovePosition',
    ...config,
  } as UseContractEventConfig<typeof bookOfDirectorsABI, 'RemovePosition'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useBookOfDirectorsSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfDirectorsABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfDirectorsABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof bookOfDirectorsABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `eventName` set to `"SetGeneralCounsel"`.
 */
export function useBookOfDirectorsSetGeneralCounselEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfDirectorsABI, 'SetGeneralCounsel'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfDirectorsABI,
    eventName: 'SetGeneralCounsel',
    ...config,
  } as UseContractEventConfig<typeof bookOfDirectorsABI, 'SetGeneralCounsel'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useBookOfDirectorsSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfDirectorsABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfDirectorsABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof bookOfDirectorsABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `eventName` set to `"TakePosition"`.
 */
export function useBookOfDirectorsTakePositionEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfDirectorsABI, 'TakePosition'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfDirectorsABI,
    eventName: 'TakePosition',
    ...config,
  } as UseContractEventConfig<typeof bookOfDirectorsABI, 'TakePosition'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfDirectorsABI}__ and `eventName` set to `"VoteCounting"`.
 */
export function useBookOfDirectorsVoteCountingEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfDirectorsABI, 'VoteCounting'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfDirectorsABI,
    eventName: 'VoteCounting',
    ...config,
  } as UseContractEventConfig<typeof bookOfDirectorsABI, 'VoteCounting'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iBookOfDirectorsABI}__.
 */
export function useIBookOfDirectors(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iBookOfDirectorsABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfDirectorsABI}__.
 */
export function useIBookOfDirectorsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iBookOfDirectorsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfDirectorsABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfDirectorsABI,
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfDirectorsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"getBallot"`.
 */
export function useIBookOfDirectorsGetBallot<
  TSelectData = ReadContractResult<typeof iBookOfDirectorsABI, 'getBallot'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfDirectorsABI, 'getBallot', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfDirectorsABI,
    functionName: 'getBallot',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfDirectorsABI,
    'getBallot',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"getBoardSeatsOccupied"`.
 */
export function useIBookOfDirectorsGetBoardSeatsOccupied<
  TSelectData = ReadContractResult<
    typeof iBookOfDirectorsABI,
    'getBoardSeatsOccupied'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfDirectorsABI,
      'getBoardSeatsOccupied',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfDirectorsABI,
    functionName: 'getBoardSeatsOccupied',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfDirectorsABI,
    'getBoardSeatsOccupied',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"getBoardSeatsQuota"`.
 */
export function useIBookOfDirectorsGetBoardSeatsQuota<
  TSelectData = ReadContractResult<
    typeof iBookOfDirectorsABI,
    'getBoardSeatsQuota'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfDirectorsABI,
      'getBoardSeatsQuota',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfDirectorsABI,
    functionName: 'getBoardSeatsQuota',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfDirectorsABI,
    'getBoardSeatsQuota',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"getCaseOfAttitude"`.
 */
export function useIBookOfDirectorsGetCaseOfAttitude<
  TSelectData = ReadContractResult<
    typeof iBookOfDirectorsABI,
    'getCaseOfAttitude'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfDirectorsABI,
      'getCaseOfAttitude',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfDirectorsABI,
    functionName: 'getCaseOfAttitude',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfDirectorsABI,
    'getCaseOfAttitude',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"getDelegateOf"`.
 */
export function useIBookOfDirectorsGetDelegateOf<
  TSelectData = ReadContractResult<typeof iBookOfDirectorsABI, 'getDelegateOf'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfDirectorsABI,
      'getDelegateOf',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfDirectorsABI,
    functionName: 'getDelegateOf',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfDirectorsABI,
    'getDelegateOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"getDirectorsFullPosInfo"`.
 */
export function useIBookOfDirectorsGetDirectorsFullPosInfo<
  TSelectData = ReadContractResult<
    typeof iBookOfDirectorsABI,
    'getDirectorsFullPosInfo'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfDirectorsABI,
      'getDirectorsFullPosInfo',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfDirectorsABI,
    functionName: 'getDirectorsFullPosInfo',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfDirectorsABI,
    'getDirectorsFullPosInfo',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"getDirectorsList"`.
 */
export function useIBookOfDirectorsGetDirectorsList<
  TSelectData = ReadContractResult<
    typeof iBookOfDirectorsABI,
    'getDirectorsList'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfDirectorsABI,
      'getDirectorsList',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfDirectorsABI,
    functionName: 'getDirectorsList',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfDirectorsABI,
    'getDirectorsList',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"getDirectorsPosList"`.
 */
export function useIBookOfDirectorsGetDirectorsPosList<
  TSelectData = ReadContractResult<
    typeof iBookOfDirectorsABI,
    'getDirectorsPosList'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfDirectorsABI,
      'getDirectorsPosList',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfDirectorsABI,
    functionName: 'getDirectorsPosList',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfDirectorsABI,
    'getDirectorsPosList',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"getFullPosInfoInHand"`.
 */
export function useIBookOfDirectorsGetFullPosInfoInHand<
  TSelectData = ReadContractResult<
    typeof iBookOfDirectorsABI,
    'getFullPosInfoInHand'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfDirectorsABI,
      'getFullPosInfoInHand',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfDirectorsABI,
    functionName: 'getFullPosInfoInHand',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfDirectorsABI,
    'getFullPosInfoInHand',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"getLeavesHeadcountOfDirectors"`.
 */
export function useIBookOfDirectorsGetLeavesHeadcountOfDirectors<
  TSelectData = ReadContractResult<
    typeof iBookOfDirectorsABI,
    'getLeavesHeadcountOfDirectors'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfDirectorsABI,
      'getLeavesHeadcountOfDirectors',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfDirectorsABI,
    functionName: 'getLeavesHeadcountOfDirectors',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfDirectorsABI,
    'getLeavesHeadcountOfDirectors',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"getLeavesWeightAtDate"`.
 */
export function useIBookOfDirectorsGetLeavesWeightAtDate<
  TSelectData = ReadContractResult<
    typeof iBookOfDirectorsABI,
    'getLeavesWeightAtDate'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfDirectorsABI,
      'getLeavesWeightAtDate',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfDirectorsABI,
    functionName: 'getLeavesWeightAtDate',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfDirectorsABI,
    'getLeavesWeightAtDate',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"getManagersFullPosInfo"`.
 */
export function useIBookOfDirectorsGetManagersFullPosInfo<
  TSelectData = ReadContractResult<
    typeof iBookOfDirectorsABI,
    'getManagersFullPosInfo'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfDirectorsABI,
      'getManagersFullPosInfo',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfDirectorsABI,
    functionName: 'getManagersFullPosInfo',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfDirectorsABI,
    'getManagersFullPosInfo',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"getManagersList"`.
 */
export function useIBookOfDirectorsGetManagersList<
  TSelectData = ReadContractResult<
    typeof iBookOfDirectorsABI,
    'getManagersList'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfDirectorsABI,
      'getManagersList',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfDirectorsABI,
    functionName: 'getManagersList',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfDirectorsABI,
    'getManagersList',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"getManagersPosList"`.
 */
export function useIBookOfDirectorsGetManagersPosList<
  TSelectData = ReadContractResult<
    typeof iBookOfDirectorsABI,
    'getManagersPosList'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfDirectorsABI,
      'getManagersPosList',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfDirectorsABI,
    functionName: 'getManagersPosList',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfDirectorsABI,
    'getManagersPosList',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"getMotion"`.
 */
export function useIBookOfDirectorsGetMotion<
  TSelectData = ReadContractResult<typeof iBookOfDirectorsABI, 'getMotion'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfDirectorsABI, 'getMotion', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfDirectorsABI,
    functionName: 'getMotion',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfDirectorsABI,
    'getMotion',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"getNumOfDirectors"`.
 */
export function useIBookOfDirectorsGetNumOfDirectors<
  TSelectData = ReadContractResult<
    typeof iBookOfDirectorsABI,
    'getNumOfDirectors'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfDirectorsABI,
      'getNumOfDirectors',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfDirectorsABI,
    functionName: 'getNumOfDirectors',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfDirectorsABI,
    'getNumOfDirectors',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"getNumOfManagers"`.
 */
export function useIBookOfDirectorsGetNumOfManagers<
  TSelectData = ReadContractResult<
    typeof iBookOfDirectorsABI,
    'getNumOfManagers'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfDirectorsABI,
      'getNumOfManagers',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfDirectorsABI,
    functionName: 'getNumOfManagers',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfDirectorsABI,
    'getNumOfManagers',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"getPosInHand"`.
 */
export function useIBookOfDirectorsGetPosInHand<
  TSelectData = ReadContractResult<typeof iBookOfDirectorsABI, 'getPosInHand'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfDirectorsABI,
      'getPosInHand',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfDirectorsABI,
    functionName: 'getPosInHand',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfDirectorsABI,
    'getPosInHand',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"getPosition"`.
 */
export function useIBookOfDirectorsGetPosition<
  TSelectData = ReadContractResult<typeof iBookOfDirectorsABI, 'getPosition'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfDirectorsABI,
      'getPosition',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfDirectorsABI,
    functionName: 'getPosition',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfDirectorsABI,
    'getPosition',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"getSeqList"`.
 */
export function useIBookOfDirectorsGetSeqList<
  TSelectData = ReadContractResult<typeof iBookOfDirectorsABI, 'getSeqList'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfDirectorsABI,
      'getSeqList',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfDirectorsABI,
    functionName: 'getSeqList',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfDirectorsABI,
    'getSeqList',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"getVoterOfDelegateMap"`.
 */
export function useIBookOfDirectorsGetVoterOfDelegateMap<
  TSelectData = ReadContractResult<
    typeof iBookOfDirectorsABI,
    'getVoterOfDelegateMap'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfDirectorsABI,
      'getVoterOfDelegateMap',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfDirectorsABI,
    functionName: 'getVoterOfDelegateMap',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfDirectorsABI,
    'getVoterOfDelegateMap',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"hasNominationRight"`.
 */
export function useIBookOfDirectorsHasNominationRight<
  TSelectData = ReadContractResult<
    typeof iBookOfDirectorsABI,
    'hasNominationRight'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfDirectorsABI,
      'hasNominationRight',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfDirectorsABI,
    functionName: 'hasNominationRight',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfDirectorsABI,
    'hasNominationRight',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"hasPosition"`.
 */
export function useIBookOfDirectorsHasPosition<
  TSelectData = ReadContractResult<typeof iBookOfDirectorsABI, 'hasPosition'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfDirectorsABI,
      'hasPosition',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfDirectorsABI,
    functionName: 'hasPosition',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfDirectorsABI,
    'hasPosition',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"isDirector"`.
 */
export function useIBookOfDirectorsIsDirector<
  TSelectData = ReadContractResult<typeof iBookOfDirectorsABI, 'isDirector'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfDirectorsABI,
      'isDirector',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfDirectorsABI,
    functionName: 'isDirector',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfDirectorsABI,
    'isDirector',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"isManager"`.
 */
export function useIBookOfDirectorsIsManager<
  TSelectData = ReadContractResult<typeof iBookOfDirectorsABI, 'isManager'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfDirectorsABI, 'isManager', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfDirectorsABI,
    functionName: 'isManager',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfDirectorsABI,
    'isManager',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"isOccupied"`.
 */
export function useIBookOfDirectorsIsOccupied<
  TSelectData = ReadContractResult<typeof iBookOfDirectorsABI, 'isOccupied'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfDirectorsABI,
      'isOccupied',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfDirectorsABI,
    functionName: 'isOccupied',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfDirectorsABI,
    'isOccupied',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"isPassed"`.
 */
export function useIBookOfDirectorsIsPassed<
  TSelectData = ReadContractResult<typeof iBookOfDirectorsABI, 'isPassed'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfDirectorsABI, 'isPassed', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfDirectorsABI,
    functionName: 'isPassed',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfDirectorsABI,
    'isPassed',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"isProposed"`.
 */
export function useIBookOfDirectorsIsProposed<
  TSelectData = ReadContractResult<typeof iBookOfDirectorsABI, 'isProposed'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfDirectorsABI,
      'isProposed',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfDirectorsABI,
    functionName: 'isProposed',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfDirectorsABI,
    'isProposed',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"isVoted"`.
 */
export function useIBookOfDirectorsIsVoted<
  TSelectData = ReadContractResult<typeof iBookOfDirectorsABI, 'isVoted'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfDirectorsABI, 'isVoted', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfDirectorsABI,
    functionName: 'isVoted',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfDirectorsABI,
    'isVoted',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"isVotedFor"`.
 */
export function useIBookOfDirectorsIsVotedFor<
  TSelectData = ReadContractResult<typeof iBookOfDirectorsABI, 'isVotedFor'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfDirectorsABI,
      'isVotedFor',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfDirectorsABI,
    functionName: 'isVotedFor',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfDirectorsABI,
    'isVotedFor',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"posExist"`.
 */
export function useIBookOfDirectorsPosExist<
  TSelectData = ReadContractResult<typeof iBookOfDirectorsABI, 'posExist'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfDirectorsABI, 'posExist', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfDirectorsABI,
    functionName: 'posExist',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfDirectorsABI,
    'posExist',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"voteEnded"`.
 */
export function useIBookOfDirectorsVoteEnded<
  TSelectData = ReadContractResult<typeof iBookOfDirectorsABI, 'voteEnded'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfDirectorsABI, 'voteEnded', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfDirectorsABI,
    functionName: 'voteEnded',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfDirectorsABI,
    'voteEnded',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"voteStarted"`.
 */
export function useIBookOfDirectorsVoteStarted<
  TSelectData = ReadContractResult<typeof iBookOfDirectorsABI, 'voteStarted'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfDirectorsABI,
      'voteStarted',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfDirectorsABI,
    functionName: 'voteStarted',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfDirectorsABI,
    'voteStarted',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfDirectorsABI}__.
 */
export function useIBookOfDirectorsWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iBookOfDirectorsABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof iBookOfDirectorsABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfDirectorsABI, TFunctionName>({
    abi: iBookOfDirectorsABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"castVoteInBoardMeeting"`.
 */
export function useIBookOfDirectorsCastVoteInBoardMeeting<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfDirectorsABI,
          'castVoteInBoardMeeting'
        >['abi'],
        'castVoteInBoardMeeting'
      > & { functionName?: 'castVoteInBoardMeeting' }
    : UseContractWriteConfig<
        TMode,
        typeof iBookOfDirectorsABI,
        'castVoteInBoardMeeting'
      > & {
        abi?: never
        functionName?: 'castVoteInBoardMeeting'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iBookOfDirectorsABI,
    'castVoteInBoardMeeting'
  >({
    abi: iBookOfDirectorsABI,
    functionName: 'castVoteInBoardMeeting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"castVoteInGeneralMeeting"`.
 */
export function useIBookOfDirectorsCastVoteInGeneralMeeting<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfDirectorsABI,
          'castVoteInGeneralMeeting'
        >['abi'],
        'castVoteInGeneralMeeting'
      > & { functionName?: 'castVoteInGeneralMeeting' }
    : UseContractWriteConfig<
        TMode,
        typeof iBookOfDirectorsABI,
        'castVoteInGeneralMeeting'
      > & {
        abi?: never
        functionName?: 'castVoteInGeneralMeeting'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iBookOfDirectorsABI,
    'castVoteInGeneralMeeting'
  >({
    abi: iBookOfDirectorsABI,
    functionName: 'castVoteInGeneralMeeting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"createAction"`.
 */
export function useIBookOfDirectorsCreateAction<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfDirectorsABI,
          'createAction'
        >['abi'],
        'createAction'
      > & { functionName?: 'createAction' }
    : UseContractWriteConfig<
        TMode,
        typeof iBookOfDirectorsABI,
        'createAction'
      > & {
        abi?: never
        functionName?: 'createAction'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfDirectorsABI, 'createAction'>({
    abi: iBookOfDirectorsABI,
    functionName: 'createAction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"createMotionToApproveDoc"`.
 */
export function useIBookOfDirectorsCreateMotionToApproveDoc<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfDirectorsABI,
          'createMotionToApproveDoc'
        >['abi'],
        'createMotionToApproveDoc'
      > & { functionName?: 'createMotionToApproveDoc' }
    : UseContractWriteConfig<
        TMode,
        typeof iBookOfDirectorsABI,
        'createMotionToApproveDoc'
      > & {
        abi?: never
        functionName?: 'createMotionToApproveDoc'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iBookOfDirectorsABI,
    'createMotionToApproveDoc'
  >({
    abi: iBookOfDirectorsABI,
    functionName: 'createMotionToApproveDoc',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"createMotionToRemoveOfficer"`.
 */
export function useIBookOfDirectorsCreateMotionToRemoveOfficer<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfDirectorsABI,
          'createMotionToRemoveOfficer'
        >['abi'],
        'createMotionToRemoveOfficer'
      > & { functionName?: 'createMotionToRemoveOfficer' }
    : UseContractWriteConfig<
        TMode,
        typeof iBookOfDirectorsABI,
        'createMotionToRemoveOfficer'
      > & {
        abi?: never
        functionName?: 'createMotionToRemoveOfficer'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iBookOfDirectorsABI,
    'createMotionToRemoveOfficer'
  >({
    abi: iBookOfDirectorsABI,
    functionName: 'createMotionToRemoveOfficer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"createPosition"`.
 */
export function useIBookOfDirectorsCreatePosition<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfDirectorsABI,
          'createPosition'
        >['abi'],
        'createPosition'
      > & { functionName?: 'createPosition' }
    : UseContractWriteConfig<
        TMode,
        typeof iBookOfDirectorsABI,
        'createPosition'
      > & {
        abi?: never
        functionName?: 'createPosition'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfDirectorsABI, 'createPosition'>({
    abi: iBookOfDirectorsABI,
    functionName: 'createPosition',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"entrustDelegate"`.
 */
export function useIBookOfDirectorsEntrustDelegate<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfDirectorsABI,
          'entrustDelegate'
        >['abi'],
        'entrustDelegate'
      > & { functionName?: 'entrustDelegate' }
    : UseContractWriteConfig<
        TMode,
        typeof iBookOfDirectorsABI,
        'entrustDelegate'
      > & {
        abi?: never
        functionName?: 'entrustDelegate'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfDirectorsABI, 'entrustDelegate'>(
    {
      abi: iBookOfDirectorsABI,
      functionName: 'entrustDelegate',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"execAction"`.
 */
export function useIBookOfDirectorsExecAction<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfDirectorsABI,
          'execAction'
        >['abi'],
        'execAction'
      > & { functionName?: 'execAction' }
    : UseContractWriteConfig<
        TMode,
        typeof iBookOfDirectorsABI,
        'execAction'
      > & {
        abi?: never
        functionName?: 'execAction'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfDirectorsABI, 'execAction'>({
    abi: iBookOfDirectorsABI,
    functionName: 'execAction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"execResolution"`.
 */
export function useIBookOfDirectorsExecResolution<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfDirectorsABI,
          'execResolution'
        >['abi'],
        'execResolution'
      > & { functionName?: 'execResolution' }
    : UseContractWriteConfig<
        TMode,
        typeof iBookOfDirectorsABI,
        'execResolution'
      > & {
        abi?: never
        functionName?: 'execResolution'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfDirectorsABI, 'execResolution'>({
    abi: iBookOfDirectorsABI,
    functionName: 'execResolution',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"nominateOfficer"`.
 */
export function useIBookOfDirectorsNominateOfficer<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfDirectorsABI,
          'nominateOfficer'
        >['abi'],
        'nominateOfficer'
      > & { functionName?: 'nominateOfficer' }
    : UseContractWriteConfig<
        TMode,
        typeof iBookOfDirectorsABI,
        'nominateOfficer'
      > & {
        abi?: never
        functionName?: 'nominateOfficer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfDirectorsABI, 'nominateOfficer'>(
    {
      abi: iBookOfDirectorsABI,
      functionName: 'nominateOfficer',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"proposeMotionToBoard"`.
 */
export function useIBookOfDirectorsProposeMotionToBoard<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfDirectorsABI,
          'proposeMotionToBoard'
        >['abi'],
        'proposeMotionToBoard'
      > & { functionName?: 'proposeMotionToBoard' }
    : UseContractWriteConfig<
        TMode,
        typeof iBookOfDirectorsABI,
        'proposeMotionToBoard'
      > & {
        abi?: never
        functionName?: 'proposeMotionToBoard'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iBookOfDirectorsABI,
    'proposeMotionToBoard'
  >({
    abi: iBookOfDirectorsABI,
    functionName: 'proposeMotionToBoard',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"proposeMotionToGeneralMeeting"`.
 */
export function useIBookOfDirectorsProposeMotionToGeneralMeeting<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfDirectorsABI,
          'proposeMotionToGeneralMeeting'
        >['abi'],
        'proposeMotionToGeneralMeeting'
      > & { functionName?: 'proposeMotionToGeneralMeeting' }
    : UseContractWriteConfig<
        TMode,
        typeof iBookOfDirectorsABI,
        'proposeMotionToGeneralMeeting'
      > & {
        abi?: never
        functionName?: 'proposeMotionToGeneralMeeting'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iBookOfDirectorsABI,
    'proposeMotionToGeneralMeeting'
  >({
    abi: iBookOfDirectorsABI,
    functionName: 'proposeMotionToGeneralMeeting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"quitPosition"`.
 */
export function useIBookOfDirectorsQuitPosition<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfDirectorsABI,
          'quitPosition'
        >['abi'],
        'quitPosition'
      > & { functionName?: 'quitPosition' }
    : UseContractWriteConfig<
        TMode,
        typeof iBookOfDirectorsABI,
        'quitPosition'
      > & {
        abi?: never
        functionName?: 'quitPosition'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfDirectorsABI, 'quitPosition'>({
    abi: iBookOfDirectorsABI,
    functionName: 'quitPosition',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"removeOfficer"`.
 */
export function useIBookOfDirectorsRemoveOfficer<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfDirectorsABI,
          'removeOfficer'
        >['abi'],
        'removeOfficer'
      > & { functionName?: 'removeOfficer' }
    : UseContractWriteConfig<
        TMode,
        typeof iBookOfDirectorsABI,
        'removeOfficer'
      > & {
        abi?: never
        functionName?: 'removeOfficer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfDirectorsABI, 'removeOfficer'>({
    abi: iBookOfDirectorsABI,
    functionName: 'removeOfficer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"removePosition"`.
 */
export function useIBookOfDirectorsRemovePosition<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfDirectorsABI,
          'removePosition'
        >['abi'],
        'removePosition'
      > & { functionName?: 'removePosition' }
    : UseContractWriteConfig<
        TMode,
        typeof iBookOfDirectorsABI,
        'removePosition'
      > & {
        abi?: never
        functionName?: 'removePosition'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfDirectorsABI, 'removePosition'>({
    abi: iBookOfDirectorsABI,
    functionName: 'removePosition',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"takePosition"`.
 */
export function useIBookOfDirectorsTakePosition<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfDirectorsABI,
          'takePosition'
        >['abi'],
        'takePosition'
      > & { functionName?: 'takePosition' }
    : UseContractWriteConfig<
        TMode,
        typeof iBookOfDirectorsABI,
        'takePosition'
      > & {
        abi?: never
        functionName?: 'takePosition'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfDirectorsABI, 'takePosition'>({
    abi: iBookOfDirectorsABI,
    functionName: 'takePosition',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"updatePosition"`.
 */
export function useIBookOfDirectorsUpdatePosition<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfDirectorsABI,
          'updatePosition'
        >['abi'],
        'updatePosition'
      > & { functionName?: 'updatePosition' }
    : UseContractWriteConfig<
        TMode,
        typeof iBookOfDirectorsABI,
        'updatePosition'
      > & {
        abi?: never
        functionName?: 'updatePosition'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfDirectorsABI, 'updatePosition'>({
    abi: iBookOfDirectorsABI,
    functionName: 'updatePosition',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"voteCounting"`.
 */
export function useIBookOfDirectorsVoteCounting<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfDirectorsABI,
          'voteCounting'
        >['abi'],
        'voteCounting'
      > & { functionName?: 'voteCounting' }
    : UseContractWriteConfig<
        TMode,
        typeof iBookOfDirectorsABI,
        'voteCounting'
      > & {
        abi?: never
        functionName?: 'voteCounting'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfDirectorsABI, 'voteCounting'>({
    abi: iBookOfDirectorsABI,
    functionName: 'voteCounting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfDirectorsABI}__.
 */
export function usePrepareIBookOfDirectorsWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfDirectorsABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfDirectorsABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfDirectorsABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"castVoteInBoardMeeting"`.
 */
export function usePrepareIBookOfDirectorsCastVoteInBoardMeeting(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iBookOfDirectorsABI,
      'castVoteInBoardMeeting'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfDirectorsABI,
    functionName: 'castVoteInBoardMeeting',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iBookOfDirectorsABI,
    'castVoteInBoardMeeting'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"castVoteInGeneralMeeting"`.
 */
export function usePrepareIBookOfDirectorsCastVoteInGeneralMeeting(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iBookOfDirectorsABI,
      'castVoteInGeneralMeeting'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfDirectorsABI,
    functionName: 'castVoteInGeneralMeeting',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iBookOfDirectorsABI,
    'castVoteInGeneralMeeting'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"createAction"`.
 */
export function usePrepareIBookOfDirectorsCreateAction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfDirectorsABI, 'createAction'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfDirectorsABI,
    functionName: 'createAction',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iBookOfDirectorsABI,
    'createAction'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"createMotionToApproveDoc"`.
 */
export function usePrepareIBookOfDirectorsCreateMotionToApproveDoc(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iBookOfDirectorsABI,
      'createMotionToApproveDoc'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfDirectorsABI,
    functionName: 'createMotionToApproveDoc',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iBookOfDirectorsABI,
    'createMotionToApproveDoc'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"createMotionToRemoveOfficer"`.
 */
export function usePrepareIBookOfDirectorsCreateMotionToRemoveOfficer(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iBookOfDirectorsABI,
      'createMotionToRemoveOfficer'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfDirectorsABI,
    functionName: 'createMotionToRemoveOfficer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iBookOfDirectorsABI,
    'createMotionToRemoveOfficer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"createPosition"`.
 */
export function usePrepareIBookOfDirectorsCreatePosition(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfDirectorsABI, 'createPosition'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfDirectorsABI,
    functionName: 'createPosition',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iBookOfDirectorsABI,
    'createPosition'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"entrustDelegate"`.
 */
export function usePrepareIBookOfDirectorsEntrustDelegate(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iBookOfDirectorsABI,
      'entrustDelegate'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfDirectorsABI,
    functionName: 'entrustDelegate',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iBookOfDirectorsABI,
    'entrustDelegate'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"execAction"`.
 */
export function usePrepareIBookOfDirectorsExecAction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfDirectorsABI, 'execAction'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfDirectorsABI,
    functionName: 'execAction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfDirectorsABI, 'execAction'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"execResolution"`.
 */
export function usePrepareIBookOfDirectorsExecResolution(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfDirectorsABI, 'execResolution'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfDirectorsABI,
    functionName: 'execResolution',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iBookOfDirectorsABI,
    'execResolution'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"nominateOfficer"`.
 */
export function usePrepareIBookOfDirectorsNominateOfficer(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iBookOfDirectorsABI,
      'nominateOfficer'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfDirectorsABI,
    functionName: 'nominateOfficer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iBookOfDirectorsABI,
    'nominateOfficer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"proposeMotionToBoard"`.
 */
export function usePrepareIBookOfDirectorsProposeMotionToBoard(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iBookOfDirectorsABI,
      'proposeMotionToBoard'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfDirectorsABI,
    functionName: 'proposeMotionToBoard',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iBookOfDirectorsABI,
    'proposeMotionToBoard'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"proposeMotionToGeneralMeeting"`.
 */
export function usePrepareIBookOfDirectorsProposeMotionToGeneralMeeting(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iBookOfDirectorsABI,
      'proposeMotionToGeneralMeeting'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfDirectorsABI,
    functionName: 'proposeMotionToGeneralMeeting',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iBookOfDirectorsABI,
    'proposeMotionToGeneralMeeting'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"quitPosition"`.
 */
export function usePrepareIBookOfDirectorsQuitPosition(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfDirectorsABI, 'quitPosition'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfDirectorsABI,
    functionName: 'quitPosition',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iBookOfDirectorsABI,
    'quitPosition'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"removeOfficer"`.
 */
export function usePrepareIBookOfDirectorsRemoveOfficer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfDirectorsABI, 'removeOfficer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfDirectorsABI,
    functionName: 'removeOfficer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iBookOfDirectorsABI,
    'removeOfficer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"removePosition"`.
 */
export function usePrepareIBookOfDirectorsRemovePosition(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfDirectorsABI, 'removePosition'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfDirectorsABI,
    functionName: 'removePosition',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iBookOfDirectorsABI,
    'removePosition'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"takePosition"`.
 */
export function usePrepareIBookOfDirectorsTakePosition(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfDirectorsABI, 'takePosition'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfDirectorsABI,
    functionName: 'takePosition',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iBookOfDirectorsABI,
    'takePosition'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"updatePosition"`.
 */
export function usePrepareIBookOfDirectorsUpdatePosition(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfDirectorsABI, 'updatePosition'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfDirectorsABI,
    functionName: 'updatePosition',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iBookOfDirectorsABI,
    'updatePosition'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `functionName` set to `"voteCounting"`.
 */
export function usePrepareIBookOfDirectorsVoteCounting(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfDirectorsABI, 'voteCounting'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfDirectorsABI,
    functionName: 'voteCounting',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iBookOfDirectorsABI,
    'voteCounting'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfDirectorsABI}__.
 */
export function useIBookOfDirectorsEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iBookOfDirectorsABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfDirectorsABI,
    ...config,
  } as UseContractEventConfig<typeof iBookOfDirectorsABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `eventName` set to `"AddPosition"`.
 */
export function useIBookOfDirectorsAddPositionEvent(
  config: Omit<
    UseContractEventConfig<typeof iBookOfDirectorsABI, 'AddPosition'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfDirectorsABI,
    eventName: 'AddPosition',
    ...config,
  } as UseContractEventConfig<typeof iBookOfDirectorsABI, 'AddPosition'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `eventName` set to `"CastVoteInBoardMeeting"`.
 */
export function useIBookOfDirectorsCastVoteInBoardMeetingEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iBookOfDirectorsABI,
      'CastVoteInBoardMeeting'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfDirectorsABI,
    eventName: 'CastVoteInBoardMeeting',
    ...config,
  } as UseContractEventConfig<
    typeof iBookOfDirectorsABI,
    'CastVoteInBoardMeeting'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `eventName` set to `"CastVoteInGeneralMeeting"`.
 */
export function useIBookOfDirectorsCastVoteInGeneralMeetingEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iBookOfDirectorsABI,
      'CastVoteInGeneralMeeting'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfDirectorsABI,
    eventName: 'CastVoteInGeneralMeeting',
    ...config,
  } as UseContractEventConfig<
    typeof iBookOfDirectorsABI,
    'CastVoteInGeneralMeeting'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `eventName` set to `"CreateMotion"`.
 */
export function useIBookOfDirectorsCreateMotionEvent(
  config: Omit<
    UseContractEventConfig<typeof iBookOfDirectorsABI, 'CreateMotion'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfDirectorsABI,
    eventName: 'CreateMotion',
    ...config,
  } as UseContractEventConfig<typeof iBookOfDirectorsABI, 'CreateMotion'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `eventName` set to `"EntrustDelegate"`.
 */
export function useIBookOfDirectorsEntrustDelegateEvent(
  config: Omit<
    UseContractEventConfig<typeof iBookOfDirectorsABI, 'EntrustDelegate'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfDirectorsABI,
    eventName: 'EntrustDelegate',
    ...config,
  } as UseContractEventConfig<typeof iBookOfDirectorsABI, 'EntrustDelegate'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `eventName` set to `"ExecResolution"`.
 */
export function useIBookOfDirectorsExecResolutionEvent(
  config: Omit<
    UseContractEventConfig<typeof iBookOfDirectorsABI, 'ExecResolution'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfDirectorsABI,
    eventName: 'ExecResolution',
    ...config,
  } as UseContractEventConfig<typeof iBookOfDirectorsABI, 'ExecResolution'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `eventName` set to `"ProposeMotionToBoard"`.
 */
export function useIBookOfDirectorsProposeMotionToBoardEvent(
  config: Omit<
    UseContractEventConfig<typeof iBookOfDirectorsABI, 'ProposeMotionToBoard'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfDirectorsABI,
    eventName: 'ProposeMotionToBoard',
    ...config,
  } as UseContractEventConfig<
    typeof iBookOfDirectorsABI,
    'ProposeMotionToBoard'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `eventName` set to `"ProposeMotionToGeneralMeeting"`.
 */
export function useIBookOfDirectorsProposeMotionToGeneralMeetingEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iBookOfDirectorsABI,
      'ProposeMotionToGeneralMeeting'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfDirectorsABI,
    eventName: 'ProposeMotionToGeneralMeeting',
    ...config,
  } as UseContractEventConfig<
    typeof iBookOfDirectorsABI,
    'ProposeMotionToGeneralMeeting'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `eventName` set to `"QuitPosition"`.
 */
export function useIBookOfDirectorsQuitPositionEvent(
  config: Omit<
    UseContractEventConfig<typeof iBookOfDirectorsABI, 'QuitPosition'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfDirectorsABI,
    eventName: 'QuitPosition',
    ...config,
  } as UseContractEventConfig<typeof iBookOfDirectorsABI, 'QuitPosition'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `eventName` set to `"RemoveOfficer"`.
 */
export function useIBookOfDirectorsRemoveOfficerEvent(
  config: Omit<
    UseContractEventConfig<typeof iBookOfDirectorsABI, 'RemoveOfficer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfDirectorsABI,
    eventName: 'RemoveOfficer',
    ...config,
  } as UseContractEventConfig<typeof iBookOfDirectorsABI, 'RemoveOfficer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `eventName` set to `"RemovePosition"`.
 */
export function useIBookOfDirectorsRemovePositionEvent(
  config: Omit<
    UseContractEventConfig<typeof iBookOfDirectorsABI, 'RemovePosition'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfDirectorsABI,
    eventName: 'RemovePosition',
    ...config,
  } as UseContractEventConfig<typeof iBookOfDirectorsABI, 'RemovePosition'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `eventName` set to `"TakePosition"`.
 */
export function useIBookOfDirectorsTakePositionEvent(
  config: Omit<
    UseContractEventConfig<typeof iBookOfDirectorsABI, 'TakePosition'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfDirectorsABI,
    eventName: 'TakePosition',
    ...config,
  } as UseContractEventConfig<typeof iBookOfDirectorsABI, 'TakePosition'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfDirectorsABI}__ and `eventName` set to `"VoteCounting"`.
 */
export function useIBookOfDirectorsVoteCountingEvent(
  config: Omit<
    UseContractEventConfig<typeof iBookOfDirectorsABI, 'VoteCounting'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfDirectorsABI,
    eventName: 'VoteCounting',
    ...config,
  } as UseContractEventConfig<typeof iBookOfDirectorsABI, 'VoteCounting'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link bookOfGmABI}__.
 */
export function useBookOfGm(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: bookOfGmABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfGmABI}__.
 */
export function useBookOfGmRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof bookOfGmABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfGmABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfGmABI,
    ...config,
  } as UseContractReadConfig<typeof bookOfGmABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"finalized"`.
 */
export function useBookOfGmFinalized<
  TSelectData = ReadContractResult<typeof bookOfGmABI, 'finalized'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfGmABI, 'finalized', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfGmABI,
    functionName: 'finalized',
    ...config,
  } as UseContractReadConfig<typeof bookOfGmABI, 'finalized', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"getBallot"`.
 */
export function useBookOfGmGetBallot<
  TSelectData = ReadContractResult<typeof bookOfGmABI, 'getBallot'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfGmABI, 'getBallot', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfGmABI,
    functionName: 'getBallot',
    ...config,
  } as UseContractReadConfig<typeof bookOfGmABI, 'getBallot', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"getBookeeper"`.
 */
export function useBookOfGmGetBookeeper<
  TSelectData = ReadContractResult<typeof bookOfGmABI, 'getBookeeper'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfGmABI, 'getBookeeper', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfGmABI,
    functionName: 'getBookeeper',
    ...config,
  } as UseContractReadConfig<typeof bookOfGmABI, 'getBookeeper', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"getCaseOfAttitude"`.
 */
export function useBookOfGmGetCaseOfAttitude<
  TSelectData = ReadContractResult<typeof bookOfGmABI, 'getCaseOfAttitude'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfGmABI, 'getCaseOfAttitude', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfGmABI,
    functionName: 'getCaseOfAttitude',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfGmABI,
    'getCaseOfAttitude',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"getDelegateOf"`.
 */
export function useBookOfGmGetDelegateOf<
  TSelectData = ReadContractResult<typeof bookOfGmABI, 'getDelegateOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfGmABI, 'getDelegateOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfGmABI,
    functionName: 'getDelegateOf',
    ...config,
  } as UseContractReadConfig<typeof bookOfGmABI, 'getDelegateOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"getGeneralCounsel"`.
 */
export function useBookOfGmGetGeneralCounsel<
  TSelectData = ReadContractResult<typeof bookOfGmABI, 'getGeneralCounsel'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfGmABI, 'getGeneralCounsel', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfGmABI,
    functionName: 'getGeneralCounsel',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfGmABI,
    'getGeneralCounsel',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"getLeavesHeadcountOfDirectors"`.
 */
export function useBookOfGmGetLeavesHeadcountOfDirectors<
  TSelectData = ReadContractResult<
    typeof bookOfGmABI,
    'getLeavesHeadcountOfDirectors'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bookOfGmABI,
      'getLeavesHeadcountOfDirectors',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfGmABI,
    functionName: 'getLeavesHeadcountOfDirectors',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfGmABI,
    'getLeavesHeadcountOfDirectors',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"getLeavesWeightAtDate"`.
 */
export function useBookOfGmGetLeavesWeightAtDate<
  TSelectData = ReadContractResult<typeof bookOfGmABI, 'getLeavesWeightAtDate'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bookOfGmABI,
      'getLeavesWeightAtDate',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfGmABI,
    functionName: 'getLeavesWeightAtDate',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfGmABI,
    'getLeavesWeightAtDate',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"getMotion"`.
 */
export function useBookOfGmGetMotion<
  TSelectData = ReadContractResult<typeof bookOfGmABI, 'getMotion'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfGmABI, 'getMotion', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfGmABI,
    functionName: 'getMotion',
    ...config,
  } as UseContractReadConfig<typeof bookOfGmABI, 'getMotion', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"getOwner"`.
 */
export function useBookOfGmGetOwner<
  TSelectData = ReadContractResult<typeof bookOfGmABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfGmABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfGmABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<typeof bookOfGmABI, 'getOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"getSeqList"`.
 */
export function useBookOfGmGetSeqList<
  TSelectData = ReadContractResult<typeof bookOfGmABI, 'getSeqList'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfGmABI, 'getSeqList', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfGmABI,
    functionName: 'getSeqList',
    ...config,
  } as UseContractReadConfig<typeof bookOfGmABI, 'getSeqList', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"getVoterOfDelegateMap"`.
 */
export function useBookOfGmGetVoterOfDelegateMap<
  TSelectData = ReadContractResult<typeof bookOfGmABI, 'getVoterOfDelegateMap'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bookOfGmABI,
      'getVoterOfDelegateMap',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfGmABI,
    functionName: 'getVoterOfDelegateMap',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfGmABI,
    'getVoterOfDelegateMap',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"hasRole"`.
 */
export function useBookOfGmHasRole<
  TSelectData = ReadContractResult<typeof bookOfGmABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfGmABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfGmABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof bookOfGmABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"isPassed"`.
 */
export function useBookOfGmIsPassed<
  TSelectData = ReadContractResult<typeof bookOfGmABI, 'isPassed'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfGmABI, 'isPassed', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfGmABI,
    functionName: 'isPassed',
    ...config,
  } as UseContractReadConfig<typeof bookOfGmABI, 'isPassed', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"isProposed"`.
 */
export function useBookOfGmIsProposed<
  TSelectData = ReadContractResult<typeof bookOfGmABI, 'isProposed'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfGmABI, 'isProposed', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfGmABI,
    functionName: 'isProposed',
    ...config,
  } as UseContractReadConfig<typeof bookOfGmABI, 'isProposed', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"isVoted"`.
 */
export function useBookOfGmIsVoted<
  TSelectData = ReadContractResult<typeof bookOfGmABI, 'isVoted'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfGmABI, 'isVoted', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfGmABI,
    functionName: 'isVoted',
    ...config,
  } as UseContractReadConfig<typeof bookOfGmABI, 'isVoted', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"isVotedFor"`.
 */
export function useBookOfGmIsVotedFor<
  TSelectData = ReadContractResult<typeof bookOfGmABI, 'isVotedFor'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfGmABI, 'isVotedFor', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfGmABI,
    functionName: 'isVotedFor',
    ...config,
  } as UseContractReadConfig<typeof bookOfGmABI, 'isVotedFor', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"voteEnded"`.
 */
export function useBookOfGmVoteEnded<
  TSelectData = ReadContractResult<typeof bookOfGmABI, 'voteEnded'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfGmABI, 'voteEnded', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfGmABI,
    functionName: 'voteEnded',
    ...config,
  } as UseContractReadConfig<typeof bookOfGmABI, 'voteEnded', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"voteStarted"`.
 */
export function useBookOfGmVoteStarted<
  TSelectData = ReadContractResult<typeof bookOfGmABI, 'voteStarted'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfGmABI, 'voteStarted', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfGmABI,
    functionName: 'voteStarted',
    ...config,
  } as UseContractReadConfig<typeof bookOfGmABI, 'voteStarted', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfGmABI}__.
 */
export function useBookOfGmWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfGmABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof bookOfGmABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfGmABI, TFunctionName>({
    abi: bookOfGmABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useBookOfGmAbandonRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfGmABI, 'abandonRole'>['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<TMode, typeof bookOfGmABI, 'abandonRole'> & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfGmABI, 'abandonRole'>({
    abi: bookOfGmABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"castVoteInBoardMeeting"`.
 */
export function useBookOfGmCastVoteInBoardMeeting<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfGmABI,
          'castVoteInBoardMeeting'
        >['abi'],
        'castVoteInBoardMeeting'
      > & { functionName?: 'castVoteInBoardMeeting' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfGmABI,
        'castVoteInBoardMeeting'
      > & {
        abi?: never
        functionName?: 'castVoteInBoardMeeting'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfGmABI, 'castVoteInBoardMeeting'>({
    abi: bookOfGmABI,
    functionName: 'castVoteInBoardMeeting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"castVoteInGeneralMeeting"`.
 */
export function useBookOfGmCastVoteInGeneralMeeting<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfGmABI,
          'castVoteInGeneralMeeting'
        >['abi'],
        'castVoteInGeneralMeeting'
      > & { functionName?: 'castVoteInGeneralMeeting' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfGmABI,
        'castVoteInGeneralMeeting'
      > & {
        abi?: never
        functionName?: 'castVoteInGeneralMeeting'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof bookOfGmABI,
    'castVoteInGeneralMeeting'
  >({
    abi: bookOfGmABI,
    functionName: 'castVoteInGeneralMeeting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"createAction"`.
 */
export function useBookOfGmCreateAction<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfGmABI, 'createAction'>['abi'],
        'createAction'
      > & { functionName?: 'createAction' }
    : UseContractWriteConfig<TMode, typeof bookOfGmABI, 'createAction'> & {
        abi?: never
        functionName?: 'createAction'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfGmABI, 'createAction'>({
    abi: bookOfGmABI,
    functionName: 'createAction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"createMotionToApproveDoc"`.
 */
export function useBookOfGmCreateMotionToApproveDoc<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfGmABI,
          'createMotionToApproveDoc'
        >['abi'],
        'createMotionToApproveDoc'
      > & { functionName?: 'createMotionToApproveDoc' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfGmABI,
        'createMotionToApproveDoc'
      > & {
        abi?: never
        functionName?: 'createMotionToApproveDoc'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof bookOfGmABI,
    'createMotionToApproveDoc'
  >({
    abi: bookOfGmABI,
    functionName: 'createMotionToApproveDoc',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"createMotionToRemoveOfficer"`.
 */
export function useBookOfGmCreateMotionToRemoveOfficer<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfGmABI,
          'createMotionToRemoveOfficer'
        >['abi'],
        'createMotionToRemoveOfficer'
      > & { functionName?: 'createMotionToRemoveOfficer' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfGmABI,
        'createMotionToRemoveOfficer'
      > & {
        abi?: never
        functionName?: 'createMotionToRemoveOfficer'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof bookOfGmABI,
    'createMotionToRemoveOfficer'
  >({
    abi: bookOfGmABI,
    functionName: 'createMotionToRemoveOfficer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"entrustDelegate"`.
 */
export function useBookOfGmEntrustDelegate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfGmABI,
          'entrustDelegate'
        >['abi'],
        'entrustDelegate'
      > & { functionName?: 'entrustDelegate' }
    : UseContractWriteConfig<TMode, typeof bookOfGmABI, 'entrustDelegate'> & {
        abi?: never
        functionName?: 'entrustDelegate'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfGmABI, 'entrustDelegate'>({
    abi: bookOfGmABI,
    functionName: 'entrustDelegate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"execAction"`.
 */
export function useBookOfGmExecAction<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfGmABI, 'execAction'>['abi'],
        'execAction'
      > & { functionName?: 'execAction' }
    : UseContractWriteConfig<TMode, typeof bookOfGmABI, 'execAction'> & {
        abi?: never
        functionName?: 'execAction'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfGmABI, 'execAction'>({
    abi: bookOfGmABI,
    functionName: 'execAction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"execResolution"`.
 */
export function useBookOfGmExecResolution<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfGmABI, 'execResolution'>['abi'],
        'execResolution'
      > & { functionName?: 'execResolution' }
    : UseContractWriteConfig<TMode, typeof bookOfGmABI, 'execResolution'> & {
        abi?: never
        functionName?: 'execResolution'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfGmABI, 'execResolution'>({
    abi: bookOfGmABI,
    functionName: 'execResolution',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"grantRole"`.
 */
export function useBookOfGmGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfGmABI, 'grantRole'>['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof bookOfGmABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfGmABI, 'grantRole'>({
    abi: bookOfGmABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"init"`.
 */
export function useBookOfGmInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfGmABI, 'init'>['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof bookOfGmABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfGmABI, 'init'>({
    abi: bookOfGmABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"lockContents"`.
 */
export function useBookOfGmLockContents<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfGmABI, 'lockContents'>['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<TMode, typeof bookOfGmABI, 'lockContents'> & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfGmABI, 'lockContents'>({
    abi: bookOfGmABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"nominateOfficer"`.
 */
export function useBookOfGmNominateOfficer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfGmABI,
          'nominateOfficer'
        >['abi'],
        'nominateOfficer'
      > & { functionName?: 'nominateOfficer' }
    : UseContractWriteConfig<TMode, typeof bookOfGmABI, 'nominateOfficer'> & {
        abi?: never
        functionName?: 'nominateOfficer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfGmABI, 'nominateOfficer'>({
    abi: bookOfGmABI,
    functionName: 'nominateOfficer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"proposeMotionToBoard"`.
 */
export function useBookOfGmProposeMotionToBoard<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfGmABI,
          'proposeMotionToBoard'
        >['abi'],
        'proposeMotionToBoard'
      > & { functionName?: 'proposeMotionToBoard' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfGmABI,
        'proposeMotionToBoard'
      > & {
        abi?: never
        functionName?: 'proposeMotionToBoard'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfGmABI, 'proposeMotionToBoard'>({
    abi: bookOfGmABI,
    functionName: 'proposeMotionToBoard',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"proposeMotionToGeneralMeeting"`.
 */
export function useBookOfGmProposeMotionToGeneralMeeting<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfGmABI,
          'proposeMotionToGeneralMeeting'
        >['abi'],
        'proposeMotionToGeneralMeeting'
      > & { functionName?: 'proposeMotionToGeneralMeeting' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfGmABI,
        'proposeMotionToGeneralMeeting'
      > & {
        abi?: never
        functionName?: 'proposeMotionToGeneralMeeting'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof bookOfGmABI,
    'proposeMotionToGeneralMeeting'
  >({
    abi: bookOfGmABI,
    functionName: 'proposeMotionToGeneralMeeting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function useBookOfGmRemoveDirectKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfGmABI,
          'removeDirectKeeper'
        >['abi'],
        'removeDirectKeeper'
      > & { functionName?: 'removeDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfGmABI,
        'removeDirectKeeper'
      > & {
        abi?: never
        functionName?: 'removeDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfGmABI, 'removeDirectKeeper'>({
    abi: bookOfGmABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useBookOfGmRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfGmABI, 'renounceRole'>['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<TMode, typeof bookOfGmABI, 'renounceRole'> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfGmABI, 'renounceRole'>({
    abi: bookOfGmABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useBookOfGmRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfGmABI, 'revokeRole'>['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof bookOfGmABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfGmABI, 'revokeRole'>({
    abi: bookOfGmABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useBookOfGmSetDirectKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfGmABI,
          'setDirectKeeper'
        >['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<TMode, typeof bookOfGmABI, 'setDirectKeeper'> & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfGmABI, 'setDirectKeeper'>({
    abi: bookOfGmABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function useBookOfGmSetGeneralCounsel<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfGmABI,
          'setGeneralCounsel'
        >['abi'],
        'setGeneralCounsel'
      > & { functionName?: 'setGeneralCounsel' }
    : UseContractWriteConfig<TMode, typeof bookOfGmABI, 'setGeneralCounsel'> & {
        abi?: never
        functionName?: 'setGeneralCounsel'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfGmABI, 'setGeneralCounsel'>({
    abi: bookOfGmABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"setOwner"`.
 */
export function useBookOfGmSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfGmABI, 'setOwner'>['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof bookOfGmABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfGmABI, 'setOwner'>({
    abi: bookOfGmABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useBookOfGmSetRoleAdmin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfGmABI, 'setRoleAdmin'>['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<TMode, typeof bookOfGmABI, 'setRoleAdmin'> & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfGmABI, 'setRoleAdmin'>({
    abi: bookOfGmABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"voteCounting"`.
 */
export function useBookOfGmVoteCounting<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfGmABI, 'voteCounting'>['abi'],
        'voteCounting'
      > & { functionName?: 'voteCounting' }
    : UseContractWriteConfig<TMode, typeof bookOfGmABI, 'voteCounting'> & {
        abi?: never
        functionName?: 'voteCounting'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfGmABI, 'voteCounting'>({
    abi: bookOfGmABI,
    functionName: 'voteCounting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfGmABI}__.
 */
export function usePrepareBookOfGmWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfGmABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfGmABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfGmABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareBookOfGmAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfGmABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfGmABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfGmABI, 'abandonRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"castVoteInBoardMeeting"`.
 */
export function usePrepareBookOfGmCastVoteInBoardMeeting(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfGmABI, 'castVoteInBoardMeeting'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfGmABI,
    functionName: 'castVoteInBoardMeeting',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bookOfGmABI,
    'castVoteInBoardMeeting'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"castVoteInGeneralMeeting"`.
 */
export function usePrepareBookOfGmCastVoteInGeneralMeeting(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof bookOfGmABI,
      'castVoteInGeneralMeeting'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfGmABI,
    functionName: 'castVoteInGeneralMeeting',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bookOfGmABI,
    'castVoteInGeneralMeeting'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"createAction"`.
 */
export function usePrepareBookOfGmCreateAction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfGmABI, 'createAction'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfGmABI,
    functionName: 'createAction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfGmABI, 'createAction'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"createMotionToApproveDoc"`.
 */
export function usePrepareBookOfGmCreateMotionToApproveDoc(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof bookOfGmABI,
      'createMotionToApproveDoc'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfGmABI,
    functionName: 'createMotionToApproveDoc',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bookOfGmABI,
    'createMotionToApproveDoc'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"createMotionToRemoveOfficer"`.
 */
export function usePrepareBookOfGmCreateMotionToRemoveOfficer(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof bookOfGmABI,
      'createMotionToRemoveOfficer'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfGmABI,
    functionName: 'createMotionToRemoveOfficer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bookOfGmABI,
    'createMotionToRemoveOfficer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"entrustDelegate"`.
 */
export function usePrepareBookOfGmEntrustDelegate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfGmABI, 'entrustDelegate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfGmABI,
    functionName: 'entrustDelegate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfGmABI, 'entrustDelegate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"execAction"`.
 */
export function usePrepareBookOfGmExecAction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfGmABI, 'execAction'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfGmABI,
    functionName: 'execAction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfGmABI, 'execAction'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"execResolution"`.
 */
export function usePrepareBookOfGmExecResolution(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfGmABI, 'execResolution'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfGmABI,
    functionName: 'execResolution',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfGmABI, 'execResolution'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareBookOfGmGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfGmABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfGmABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfGmABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareBookOfGmInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfGmABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfGmABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfGmABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareBookOfGmLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfGmABI, 'lockContents'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfGmABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfGmABI, 'lockContents'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"nominateOfficer"`.
 */
export function usePrepareBookOfGmNominateOfficer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfGmABI, 'nominateOfficer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfGmABI,
    functionName: 'nominateOfficer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfGmABI, 'nominateOfficer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"proposeMotionToBoard"`.
 */
export function usePrepareBookOfGmProposeMotionToBoard(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfGmABI, 'proposeMotionToBoard'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfGmABI,
    functionName: 'proposeMotionToBoard',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bookOfGmABI,
    'proposeMotionToBoard'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"proposeMotionToGeneralMeeting"`.
 */
export function usePrepareBookOfGmProposeMotionToGeneralMeeting(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof bookOfGmABI,
      'proposeMotionToGeneralMeeting'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfGmABI,
    functionName: 'proposeMotionToGeneralMeeting',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bookOfGmABI,
    'proposeMotionToGeneralMeeting'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function usePrepareBookOfGmRemoveDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfGmABI, 'removeDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfGmABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfGmABI, 'removeDirectKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareBookOfGmRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfGmABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfGmABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfGmABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareBookOfGmRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfGmABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfGmABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfGmABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareBookOfGmSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfGmABI, 'setDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfGmABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfGmABI, 'setDirectKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function usePrepareBookOfGmSetGeneralCounsel(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfGmABI, 'setGeneralCounsel'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfGmABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfGmABI, 'setGeneralCounsel'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareBookOfGmSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfGmABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfGmABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfGmABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareBookOfGmSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfGmABI, 'setRoleAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfGmABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfGmABI, 'setRoleAdmin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfGmABI}__ and `functionName` set to `"voteCounting"`.
 */
export function usePrepareBookOfGmVoteCounting(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfGmABI, 'voteCounting'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfGmABI,
    functionName: 'voteCounting',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfGmABI, 'voteCounting'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfGmABI}__.
 */
export function useBookOfGmEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof bookOfGmABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfGmABI,
    ...config,
  } as UseContractEventConfig<typeof bookOfGmABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfGmABI}__ and `eventName` set to `"CastVoteInBoardMeeting"`.
 */
export function useBookOfGmCastVoteInBoardMeetingEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfGmABI, 'CastVoteInBoardMeeting'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfGmABI,
    eventName: 'CastVoteInBoardMeeting',
    ...config,
  } as UseContractEventConfig<typeof bookOfGmABI, 'CastVoteInBoardMeeting'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfGmABI}__ and `eventName` set to `"CastVoteInGeneralMeeting"`.
 */
export function useBookOfGmCastVoteInGeneralMeetingEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfGmABI, 'CastVoteInGeneralMeeting'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfGmABI,
    eventName: 'CastVoteInGeneralMeeting',
    ...config,
  } as UseContractEventConfig<typeof bookOfGmABI, 'CastVoteInGeneralMeeting'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfGmABI}__ and `eventName` set to `"CreateMotion"`.
 */
export function useBookOfGmCreateMotionEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfGmABI, 'CreateMotion'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfGmABI,
    eventName: 'CreateMotion',
    ...config,
  } as UseContractEventConfig<typeof bookOfGmABI, 'CreateMotion'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfGmABI}__ and `eventName` set to `"EntrustDelegate"`.
 */
export function useBookOfGmEntrustDelegateEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfGmABI, 'EntrustDelegate'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfGmABI,
    eventName: 'EntrustDelegate',
    ...config,
  } as UseContractEventConfig<typeof bookOfGmABI, 'EntrustDelegate'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfGmABI}__ and `eventName` set to `"ExecResolution"`.
 */
export function useBookOfGmExecResolutionEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfGmABI, 'ExecResolution'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfGmABI,
    eventName: 'ExecResolution',
    ...config,
  } as UseContractEventConfig<typeof bookOfGmABI, 'ExecResolution'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfGmABI}__ and `eventName` set to `"Init"`.
 */
export function useBookOfGmInitEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfGmABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfGmABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof bookOfGmABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfGmABI}__ and `eventName` set to `"LockContents"`.
 */
export function useBookOfGmLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfGmABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfGmABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof bookOfGmABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfGmABI}__ and `eventName` set to `"ProposeMotionToBoard"`.
 */
export function useBookOfGmProposeMotionToBoardEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfGmABI, 'ProposeMotionToBoard'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfGmABI,
    eventName: 'ProposeMotionToBoard',
    ...config,
  } as UseContractEventConfig<typeof bookOfGmABI, 'ProposeMotionToBoard'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfGmABI}__ and `eventName` set to `"ProposeMotionToGeneralMeeting"`.
 */
export function useBookOfGmProposeMotionToGeneralMeetingEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfGmABI, 'ProposeMotionToGeneralMeeting'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfGmABI,
    eventName: 'ProposeMotionToGeneralMeeting',
    ...config,
  } as UseContractEventConfig<
    typeof bookOfGmABI,
    'ProposeMotionToGeneralMeeting'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfGmABI}__ and `eventName` set to `"RemoveDirectKeeper"`.
 */
export function useBookOfGmRemoveDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfGmABI, 'RemoveDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfGmABI,
    eventName: 'RemoveDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof bookOfGmABI, 'RemoveDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfGmABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useBookOfGmSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfGmABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfGmABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof bookOfGmABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfGmABI}__ and `eventName` set to `"SetGeneralCounsel"`.
 */
export function useBookOfGmSetGeneralCounselEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfGmABI, 'SetGeneralCounsel'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfGmABI,
    eventName: 'SetGeneralCounsel',
    ...config,
  } as UseContractEventConfig<typeof bookOfGmABI, 'SetGeneralCounsel'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfGmABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useBookOfGmSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfGmABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfGmABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof bookOfGmABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfGmABI}__ and `eventName` set to `"VoteCounting"`.
 */
export function useBookOfGmVoteCountingEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfGmABI, 'VoteCounting'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfGmABI,
    eventName: 'VoteCounting',
    ...config,
  } as UseContractEventConfig<typeof bookOfGmABI, 'VoteCounting'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iBookOfGmABI}__.
 */
export function useIBookOfGm(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iBookOfGmABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfGmABI}__.
 */
export function useIBookOfGmRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iBookOfGmABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfGmABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfGmABI,
    ...config,
  } as UseContractReadConfig<typeof iBookOfGmABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfGmABI}__ and `functionName` set to `"getBallot"`.
 */
export function useIBookOfGmGetBallot<
  TSelectData = ReadContractResult<typeof iBookOfGmABI, 'getBallot'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfGmABI, 'getBallot', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfGmABI,
    functionName: 'getBallot',
    ...config,
  } as UseContractReadConfig<typeof iBookOfGmABI, 'getBallot', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfGmABI}__ and `functionName` set to `"getCaseOfAttitude"`.
 */
export function useIBookOfGmGetCaseOfAttitude<
  TSelectData = ReadContractResult<typeof iBookOfGmABI, 'getCaseOfAttitude'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfGmABI,
      'getCaseOfAttitude',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfGmABI,
    functionName: 'getCaseOfAttitude',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfGmABI,
    'getCaseOfAttitude',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfGmABI}__ and `functionName` set to `"getDelegateOf"`.
 */
export function useIBookOfGmGetDelegateOf<
  TSelectData = ReadContractResult<typeof iBookOfGmABI, 'getDelegateOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfGmABI, 'getDelegateOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfGmABI,
    functionName: 'getDelegateOf',
    ...config,
  } as UseContractReadConfig<typeof iBookOfGmABI, 'getDelegateOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfGmABI}__ and `functionName` set to `"getLeavesHeadcountOfDirectors"`.
 */
export function useIBookOfGmGetLeavesHeadcountOfDirectors<
  TSelectData = ReadContractResult<
    typeof iBookOfGmABI,
    'getLeavesHeadcountOfDirectors'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfGmABI,
      'getLeavesHeadcountOfDirectors',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfGmABI,
    functionName: 'getLeavesHeadcountOfDirectors',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfGmABI,
    'getLeavesHeadcountOfDirectors',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfGmABI}__ and `functionName` set to `"getLeavesWeightAtDate"`.
 */
export function useIBookOfGmGetLeavesWeightAtDate<
  TSelectData = ReadContractResult<
    typeof iBookOfGmABI,
    'getLeavesWeightAtDate'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfGmABI,
      'getLeavesWeightAtDate',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfGmABI,
    functionName: 'getLeavesWeightAtDate',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfGmABI,
    'getLeavesWeightAtDate',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfGmABI}__ and `functionName` set to `"getMotion"`.
 */
export function useIBookOfGmGetMotion<
  TSelectData = ReadContractResult<typeof iBookOfGmABI, 'getMotion'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfGmABI, 'getMotion', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfGmABI,
    functionName: 'getMotion',
    ...config,
  } as UseContractReadConfig<typeof iBookOfGmABI, 'getMotion', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfGmABI}__ and `functionName` set to `"getSeqList"`.
 */
export function useIBookOfGmGetSeqList<
  TSelectData = ReadContractResult<typeof iBookOfGmABI, 'getSeqList'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfGmABI, 'getSeqList', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfGmABI,
    functionName: 'getSeqList',
    ...config,
  } as UseContractReadConfig<typeof iBookOfGmABI, 'getSeqList', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfGmABI}__ and `functionName` set to `"getVoterOfDelegateMap"`.
 */
export function useIBookOfGmGetVoterOfDelegateMap<
  TSelectData = ReadContractResult<
    typeof iBookOfGmABI,
    'getVoterOfDelegateMap'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfGmABI,
      'getVoterOfDelegateMap',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfGmABI,
    functionName: 'getVoterOfDelegateMap',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfGmABI,
    'getVoterOfDelegateMap',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfGmABI}__ and `functionName` set to `"isPassed"`.
 */
export function useIBookOfGmIsPassed<
  TSelectData = ReadContractResult<typeof iBookOfGmABI, 'isPassed'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfGmABI, 'isPassed', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfGmABI,
    functionName: 'isPassed',
    ...config,
  } as UseContractReadConfig<typeof iBookOfGmABI, 'isPassed', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfGmABI}__ and `functionName` set to `"isProposed"`.
 */
export function useIBookOfGmIsProposed<
  TSelectData = ReadContractResult<typeof iBookOfGmABI, 'isProposed'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfGmABI, 'isProposed', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfGmABI,
    functionName: 'isProposed',
    ...config,
  } as UseContractReadConfig<typeof iBookOfGmABI, 'isProposed', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfGmABI}__ and `functionName` set to `"isVoted"`.
 */
export function useIBookOfGmIsVoted<
  TSelectData = ReadContractResult<typeof iBookOfGmABI, 'isVoted'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfGmABI, 'isVoted', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfGmABI,
    functionName: 'isVoted',
    ...config,
  } as UseContractReadConfig<typeof iBookOfGmABI, 'isVoted', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfGmABI}__ and `functionName` set to `"isVotedFor"`.
 */
export function useIBookOfGmIsVotedFor<
  TSelectData = ReadContractResult<typeof iBookOfGmABI, 'isVotedFor'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfGmABI, 'isVotedFor', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfGmABI,
    functionName: 'isVotedFor',
    ...config,
  } as UseContractReadConfig<typeof iBookOfGmABI, 'isVotedFor', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfGmABI}__ and `functionName` set to `"voteEnded"`.
 */
export function useIBookOfGmVoteEnded<
  TSelectData = ReadContractResult<typeof iBookOfGmABI, 'voteEnded'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfGmABI, 'voteEnded', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfGmABI,
    functionName: 'voteEnded',
    ...config,
  } as UseContractReadConfig<typeof iBookOfGmABI, 'voteEnded', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfGmABI}__ and `functionName` set to `"voteStarted"`.
 */
export function useIBookOfGmVoteStarted<
  TSelectData = ReadContractResult<typeof iBookOfGmABI, 'voteStarted'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfGmABI, 'voteStarted', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfGmABI,
    functionName: 'voteStarted',
    ...config,
  } as UseContractReadConfig<typeof iBookOfGmABI, 'voteStarted', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfGmABI}__.
 */
export function useIBookOfGmWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iBookOfGmABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iBookOfGmABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfGmABI, TFunctionName>({
    abi: iBookOfGmABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfGmABI}__ and `functionName` set to `"castVoteInBoardMeeting"`.
 */
export function useIBookOfGmCastVoteInBoardMeeting<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfGmABI,
          'castVoteInBoardMeeting'
        >['abi'],
        'castVoteInBoardMeeting'
      > & { functionName?: 'castVoteInBoardMeeting' }
    : UseContractWriteConfig<
        TMode,
        typeof iBookOfGmABI,
        'castVoteInBoardMeeting'
      > & {
        abi?: never
        functionName?: 'castVoteInBoardMeeting'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfGmABI, 'castVoteInBoardMeeting'>(
    {
      abi: iBookOfGmABI,
      functionName: 'castVoteInBoardMeeting',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfGmABI}__ and `functionName` set to `"castVoteInGeneralMeeting"`.
 */
export function useIBookOfGmCastVoteInGeneralMeeting<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfGmABI,
          'castVoteInGeneralMeeting'
        >['abi'],
        'castVoteInGeneralMeeting'
      > & { functionName?: 'castVoteInGeneralMeeting' }
    : UseContractWriteConfig<
        TMode,
        typeof iBookOfGmABI,
        'castVoteInGeneralMeeting'
      > & {
        abi?: never
        functionName?: 'castVoteInGeneralMeeting'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iBookOfGmABI,
    'castVoteInGeneralMeeting'
  >({
    abi: iBookOfGmABI,
    functionName: 'castVoteInGeneralMeeting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfGmABI}__ and `functionName` set to `"createAction"`.
 */
export function useIBookOfGmCreateAction<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iBookOfGmABI, 'createAction'>['abi'],
        'createAction'
      > & { functionName?: 'createAction' }
    : UseContractWriteConfig<TMode, typeof iBookOfGmABI, 'createAction'> & {
        abi?: never
        functionName?: 'createAction'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfGmABI, 'createAction'>({
    abi: iBookOfGmABI,
    functionName: 'createAction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfGmABI}__ and `functionName` set to `"createMotionToApproveDoc"`.
 */
export function useIBookOfGmCreateMotionToApproveDoc<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfGmABI,
          'createMotionToApproveDoc'
        >['abi'],
        'createMotionToApproveDoc'
      > & { functionName?: 'createMotionToApproveDoc' }
    : UseContractWriteConfig<
        TMode,
        typeof iBookOfGmABI,
        'createMotionToApproveDoc'
      > & {
        abi?: never
        functionName?: 'createMotionToApproveDoc'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iBookOfGmABI,
    'createMotionToApproveDoc'
  >({
    abi: iBookOfGmABI,
    functionName: 'createMotionToApproveDoc',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfGmABI}__ and `functionName` set to `"createMotionToRemoveOfficer"`.
 */
export function useIBookOfGmCreateMotionToRemoveOfficer<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfGmABI,
          'createMotionToRemoveOfficer'
        >['abi'],
        'createMotionToRemoveOfficer'
      > & { functionName?: 'createMotionToRemoveOfficer' }
    : UseContractWriteConfig<
        TMode,
        typeof iBookOfGmABI,
        'createMotionToRemoveOfficer'
      > & {
        abi?: never
        functionName?: 'createMotionToRemoveOfficer'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iBookOfGmABI,
    'createMotionToRemoveOfficer'
  >({
    abi: iBookOfGmABI,
    functionName: 'createMotionToRemoveOfficer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfGmABI}__ and `functionName` set to `"entrustDelegate"`.
 */
export function useIBookOfGmEntrustDelegate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfGmABI,
          'entrustDelegate'
        >['abi'],
        'entrustDelegate'
      > & { functionName?: 'entrustDelegate' }
    : UseContractWriteConfig<TMode, typeof iBookOfGmABI, 'entrustDelegate'> & {
        abi?: never
        functionName?: 'entrustDelegate'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfGmABI, 'entrustDelegate'>({
    abi: iBookOfGmABI,
    functionName: 'entrustDelegate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfGmABI}__ and `functionName` set to `"execAction"`.
 */
export function useIBookOfGmExecAction<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iBookOfGmABI, 'execAction'>['abi'],
        'execAction'
      > & { functionName?: 'execAction' }
    : UseContractWriteConfig<TMode, typeof iBookOfGmABI, 'execAction'> & {
        abi?: never
        functionName?: 'execAction'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfGmABI, 'execAction'>({
    abi: iBookOfGmABI,
    functionName: 'execAction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfGmABI}__ and `functionName` set to `"execResolution"`.
 */
export function useIBookOfGmExecResolution<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfGmABI,
          'execResolution'
        >['abi'],
        'execResolution'
      > & { functionName?: 'execResolution' }
    : UseContractWriteConfig<TMode, typeof iBookOfGmABI, 'execResolution'> & {
        abi?: never
        functionName?: 'execResolution'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfGmABI, 'execResolution'>({
    abi: iBookOfGmABI,
    functionName: 'execResolution',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfGmABI}__ and `functionName` set to `"nominateOfficer"`.
 */
export function useIBookOfGmNominateOfficer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfGmABI,
          'nominateOfficer'
        >['abi'],
        'nominateOfficer'
      > & { functionName?: 'nominateOfficer' }
    : UseContractWriteConfig<TMode, typeof iBookOfGmABI, 'nominateOfficer'> & {
        abi?: never
        functionName?: 'nominateOfficer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfGmABI, 'nominateOfficer'>({
    abi: iBookOfGmABI,
    functionName: 'nominateOfficer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfGmABI}__ and `functionName` set to `"proposeMotionToBoard"`.
 */
export function useIBookOfGmProposeMotionToBoard<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfGmABI,
          'proposeMotionToBoard'
        >['abi'],
        'proposeMotionToBoard'
      > & { functionName?: 'proposeMotionToBoard' }
    : UseContractWriteConfig<
        TMode,
        typeof iBookOfGmABI,
        'proposeMotionToBoard'
      > & {
        abi?: never
        functionName?: 'proposeMotionToBoard'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfGmABI, 'proposeMotionToBoard'>({
    abi: iBookOfGmABI,
    functionName: 'proposeMotionToBoard',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfGmABI}__ and `functionName` set to `"proposeMotionToGeneralMeeting"`.
 */
export function useIBookOfGmProposeMotionToGeneralMeeting<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfGmABI,
          'proposeMotionToGeneralMeeting'
        >['abi'],
        'proposeMotionToGeneralMeeting'
      > & { functionName?: 'proposeMotionToGeneralMeeting' }
    : UseContractWriteConfig<
        TMode,
        typeof iBookOfGmABI,
        'proposeMotionToGeneralMeeting'
      > & {
        abi?: never
        functionName?: 'proposeMotionToGeneralMeeting'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iBookOfGmABI,
    'proposeMotionToGeneralMeeting'
  >({
    abi: iBookOfGmABI,
    functionName: 'proposeMotionToGeneralMeeting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfGmABI}__ and `functionName` set to `"voteCounting"`.
 */
export function useIBookOfGmVoteCounting<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iBookOfGmABI, 'voteCounting'>['abi'],
        'voteCounting'
      > & { functionName?: 'voteCounting' }
    : UseContractWriteConfig<TMode, typeof iBookOfGmABI, 'voteCounting'> & {
        abi?: never
        functionName?: 'voteCounting'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfGmABI, 'voteCounting'>({
    abi: iBookOfGmABI,
    functionName: 'voteCounting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfGmABI}__.
 */
export function usePrepareIBookOfGmWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfGmABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfGmABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfGmABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfGmABI}__ and `functionName` set to `"castVoteInBoardMeeting"`.
 */
export function usePrepareIBookOfGmCastVoteInBoardMeeting(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iBookOfGmABI,
      'castVoteInBoardMeeting'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfGmABI,
    functionName: 'castVoteInBoardMeeting',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iBookOfGmABI,
    'castVoteInBoardMeeting'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfGmABI}__ and `functionName` set to `"castVoteInGeneralMeeting"`.
 */
export function usePrepareIBookOfGmCastVoteInGeneralMeeting(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iBookOfGmABI,
      'castVoteInGeneralMeeting'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfGmABI,
    functionName: 'castVoteInGeneralMeeting',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iBookOfGmABI,
    'castVoteInGeneralMeeting'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfGmABI}__ and `functionName` set to `"createAction"`.
 */
export function usePrepareIBookOfGmCreateAction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfGmABI, 'createAction'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfGmABI,
    functionName: 'createAction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfGmABI, 'createAction'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfGmABI}__ and `functionName` set to `"createMotionToApproveDoc"`.
 */
export function usePrepareIBookOfGmCreateMotionToApproveDoc(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iBookOfGmABI,
      'createMotionToApproveDoc'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfGmABI,
    functionName: 'createMotionToApproveDoc',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iBookOfGmABI,
    'createMotionToApproveDoc'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfGmABI}__ and `functionName` set to `"createMotionToRemoveOfficer"`.
 */
export function usePrepareIBookOfGmCreateMotionToRemoveOfficer(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iBookOfGmABI,
      'createMotionToRemoveOfficer'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfGmABI,
    functionName: 'createMotionToRemoveOfficer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iBookOfGmABI,
    'createMotionToRemoveOfficer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfGmABI}__ and `functionName` set to `"entrustDelegate"`.
 */
export function usePrepareIBookOfGmEntrustDelegate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfGmABI, 'entrustDelegate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfGmABI,
    functionName: 'entrustDelegate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfGmABI, 'entrustDelegate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfGmABI}__ and `functionName` set to `"execAction"`.
 */
export function usePrepareIBookOfGmExecAction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfGmABI, 'execAction'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfGmABI,
    functionName: 'execAction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfGmABI, 'execAction'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfGmABI}__ and `functionName` set to `"execResolution"`.
 */
export function usePrepareIBookOfGmExecResolution(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfGmABI, 'execResolution'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfGmABI,
    functionName: 'execResolution',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfGmABI, 'execResolution'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfGmABI}__ and `functionName` set to `"nominateOfficer"`.
 */
export function usePrepareIBookOfGmNominateOfficer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfGmABI, 'nominateOfficer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfGmABI,
    functionName: 'nominateOfficer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfGmABI, 'nominateOfficer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfGmABI}__ and `functionName` set to `"proposeMotionToBoard"`.
 */
export function usePrepareIBookOfGmProposeMotionToBoard(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfGmABI, 'proposeMotionToBoard'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfGmABI,
    functionName: 'proposeMotionToBoard',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iBookOfGmABI,
    'proposeMotionToBoard'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfGmABI}__ and `functionName` set to `"proposeMotionToGeneralMeeting"`.
 */
export function usePrepareIBookOfGmProposeMotionToGeneralMeeting(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iBookOfGmABI,
      'proposeMotionToGeneralMeeting'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfGmABI,
    functionName: 'proposeMotionToGeneralMeeting',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iBookOfGmABI,
    'proposeMotionToGeneralMeeting'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfGmABI}__ and `functionName` set to `"voteCounting"`.
 */
export function usePrepareIBookOfGmVoteCounting(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfGmABI, 'voteCounting'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfGmABI,
    functionName: 'voteCounting',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfGmABI, 'voteCounting'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfGmABI}__.
 */
export function useIBookOfGmEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iBookOfGmABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfGmABI,
    ...config,
  } as UseContractEventConfig<typeof iBookOfGmABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfGmABI}__ and `eventName` set to `"CastVoteInBoardMeeting"`.
 */
export function useIBookOfGmCastVoteInBoardMeetingEvent(
  config: Omit<
    UseContractEventConfig<typeof iBookOfGmABI, 'CastVoteInBoardMeeting'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfGmABI,
    eventName: 'CastVoteInBoardMeeting',
    ...config,
  } as UseContractEventConfig<typeof iBookOfGmABI, 'CastVoteInBoardMeeting'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfGmABI}__ and `eventName` set to `"CastVoteInGeneralMeeting"`.
 */
export function useIBookOfGmCastVoteInGeneralMeetingEvent(
  config: Omit<
    UseContractEventConfig<typeof iBookOfGmABI, 'CastVoteInGeneralMeeting'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfGmABI,
    eventName: 'CastVoteInGeneralMeeting',
    ...config,
  } as UseContractEventConfig<typeof iBookOfGmABI, 'CastVoteInGeneralMeeting'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfGmABI}__ and `eventName` set to `"CreateMotion"`.
 */
export function useIBookOfGmCreateMotionEvent(
  config: Omit<
    UseContractEventConfig<typeof iBookOfGmABI, 'CreateMotion'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfGmABI,
    eventName: 'CreateMotion',
    ...config,
  } as UseContractEventConfig<typeof iBookOfGmABI, 'CreateMotion'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfGmABI}__ and `eventName` set to `"EntrustDelegate"`.
 */
export function useIBookOfGmEntrustDelegateEvent(
  config: Omit<
    UseContractEventConfig<typeof iBookOfGmABI, 'EntrustDelegate'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfGmABI,
    eventName: 'EntrustDelegate',
    ...config,
  } as UseContractEventConfig<typeof iBookOfGmABI, 'EntrustDelegate'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfGmABI}__ and `eventName` set to `"ExecResolution"`.
 */
export function useIBookOfGmExecResolutionEvent(
  config: Omit<
    UseContractEventConfig<typeof iBookOfGmABI, 'ExecResolution'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfGmABI,
    eventName: 'ExecResolution',
    ...config,
  } as UseContractEventConfig<typeof iBookOfGmABI, 'ExecResolution'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfGmABI}__ and `eventName` set to `"ProposeMotionToBoard"`.
 */
export function useIBookOfGmProposeMotionToBoardEvent(
  config: Omit<
    UseContractEventConfig<typeof iBookOfGmABI, 'ProposeMotionToBoard'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfGmABI,
    eventName: 'ProposeMotionToBoard',
    ...config,
  } as UseContractEventConfig<typeof iBookOfGmABI, 'ProposeMotionToBoard'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfGmABI}__ and `eventName` set to `"ProposeMotionToGeneralMeeting"`.
 */
export function useIBookOfGmProposeMotionToGeneralMeetingEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iBookOfGmABI,
      'ProposeMotionToGeneralMeeting'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfGmABI,
    eventName: 'ProposeMotionToGeneralMeeting',
    ...config,
  } as UseContractEventConfig<
    typeof iBookOfGmABI,
    'ProposeMotionToGeneralMeeting'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfGmABI}__ and `eventName` set to `"VoteCounting"`.
 */
export function useIBookOfGmVoteCountingEvent(
  config: Omit<
    UseContractEventConfig<typeof iBookOfGmABI, 'VoteCounting'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfGmABI,
    eventName: 'VoteCounting',
    ...config,
  } as UseContractEventConfig<typeof iBookOfGmABI, 'VoteCounting'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link bookOfShaABI}__.
 */
export function useBookOfSha(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: bookOfShaABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfShaABI}__.
 */
export function useBookOfShaRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof bookOfShaABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfShaABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfShaABI,
    ...config,
  } as UseContractReadConfig<typeof bookOfShaABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"closingDeadline"`.
 */
export function useBookOfShaClosingDeadline<
  TSelectData = ReadContractResult<typeof bookOfShaABI, 'closingDeadline'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfShaABI, 'closingDeadline', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfShaABI,
    functionName: 'closingDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfShaABI,
    'closingDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"finalized"`.
 */
export function useBookOfShaFinalized<
  TSelectData = ReadContractResult<typeof bookOfShaABI, 'finalized'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfShaABI, 'finalized', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfShaABI,
    functionName: 'finalized',
    ...config,
  } as UseContractReadConfig<typeof bookOfShaABI, 'finalized', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"getBookeeper"`.
 */
export function useBookOfShaGetBookeeper<
  TSelectData = ReadContractResult<typeof bookOfShaABI, 'getBookeeper'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfShaABI, 'getBookeeper', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfShaABI,
    functionName: 'getBookeeper',
    ...config,
  } as UseContractReadConfig<typeof bookOfShaABI, 'getBookeeper', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"getFile"`.
 */
export function useBookOfShaGetFile<
  TSelectData = ReadContractResult<typeof bookOfShaABI, 'getFile'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfShaABI, 'getFile', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfShaABI,
    functionName: 'getFile',
    ...config,
  } as UseContractReadConfig<typeof bookOfShaABI, 'getFile', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"getFilesList"`.
 */
export function useBookOfShaGetFilesList<
  TSelectData = ReadContractResult<typeof bookOfShaABI, 'getFilesList'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfShaABI, 'getFilesList', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfShaABI,
    functionName: 'getFilesList',
    ...config,
  } as UseContractReadConfig<typeof bookOfShaABI, 'getFilesList', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"getGeneralCounsel"`.
 */
export function useBookOfShaGetGeneralCounsel<
  TSelectData = ReadContractResult<typeof bookOfShaABI, 'getGeneralCounsel'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bookOfShaABI,
      'getGeneralCounsel',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfShaABI,
    functionName: 'getGeneralCounsel',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfShaABI,
    'getGeneralCounsel',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"getHeadOfFile"`.
 */
export function useBookOfShaGetHeadOfFile<
  TSelectData = ReadContractResult<typeof bookOfShaABI, 'getHeadOfFile'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfShaABI, 'getHeadOfFile', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfShaABI,
    functionName: 'getHeadOfFile',
    ...config,
  } as UseContractReadConfig<typeof bookOfShaABI, 'getHeadOfFile', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"getOwner"`.
 */
export function useBookOfShaGetOwner<
  TSelectData = ReadContractResult<typeof bookOfShaABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfShaABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfShaABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<typeof bookOfShaABI, 'getOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"getRefOfFile"`.
 */
export function useBookOfShaGetRefOfFile<
  TSelectData = ReadContractResult<typeof bookOfShaABI, 'getRefOfFile'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfShaABI, 'getRefOfFile', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfShaABI,
    functionName: 'getRefOfFile',
    ...config,
  } as UseContractReadConfig<typeof bookOfShaABI, 'getRefOfFile', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"getSNOfFile"`.
 */
export function useBookOfShaGetSnOfFile<
  TSelectData = ReadContractResult<typeof bookOfShaABI, 'getSNOfFile'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfShaABI, 'getSNOfFile', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfShaABI,
    functionName: 'getSNOfFile',
    ...config,
  } as UseContractReadConfig<typeof bookOfShaABI, 'getSNOfFile', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"hasRole"`.
 */
export function useBookOfShaHasRole<
  TSelectData = ReadContractResult<typeof bookOfShaABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfShaABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfShaABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof bookOfShaABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"isRegistered"`.
 */
export function useBookOfShaIsRegistered<
  TSelectData = ReadContractResult<typeof bookOfShaABI, 'isRegistered'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfShaABI, 'isRegistered', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfShaABI,
    functionName: 'isRegistered',
    ...config,
  } as UseContractReadConfig<typeof bookOfShaABI, 'isRegistered', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"pointer"`.
 */
export function useBookOfShaPointer<
  TSelectData = ReadContractResult<typeof bookOfShaABI, 'pointer'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfShaABI, 'pointer', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfShaABI,
    functionName: 'pointer',
    ...config,
  } as UseContractReadConfig<typeof bookOfShaABI, 'pointer', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"qtyOfFiles"`.
 */
export function useBookOfShaQtyOfFiles<
  TSelectData = ReadContractResult<typeof bookOfShaABI, 'qtyOfFiles'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfShaABI, 'qtyOfFiles', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfShaABI,
    functionName: 'qtyOfFiles',
    ...config,
  } as UseContractReadConfig<typeof bookOfShaABI, 'qtyOfFiles', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"shaExecDeadline"`.
 */
export function useBookOfShaShaExecDeadline<
  TSelectData = ReadContractResult<typeof bookOfShaABI, 'shaExecDeadline'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfShaABI, 'shaExecDeadline', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfShaABI,
    functionName: 'shaExecDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfShaABI,
    'shaExecDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"signingDeadline"`.
 */
export function useBookOfShaSigningDeadline<
  TSelectData = ReadContractResult<typeof bookOfShaABI, 'signingDeadline'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfShaABI, 'signingDeadline', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfShaABI,
    functionName: 'signingDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfShaABI,
    'signingDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"terminateStartpoint"`.
 */
export function useBookOfShaTerminateStartpoint<
  TSelectData = ReadContractResult<typeof bookOfShaABI, 'terminateStartpoint'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bookOfShaABI,
      'terminateStartpoint',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfShaABI,
    functionName: 'terminateStartpoint',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfShaABI,
    'terminateStartpoint',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"votingDeadline"`.
 */
export function useBookOfShaVotingDeadline<
  TSelectData = ReadContractResult<typeof bookOfShaABI, 'votingDeadline'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfShaABI, 'votingDeadline', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfShaABI,
    functionName: 'votingDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfShaABI,
    'votingDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfShaABI}__.
 */
export function useBookOfShaWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfShaABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof bookOfShaABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfShaABI, TFunctionName>({
    abi: bookOfShaABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useBookOfShaAbandonRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfShaABI, 'abandonRole'>['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<TMode, typeof bookOfShaABI, 'abandonRole'> & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfShaABI, 'abandonRole'>({
    abi: bookOfShaABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"changePointer"`.
 */
export function useBookOfShaChangePointer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfShaABI, 'changePointer'>['abi'],
        'changePointer'
      > & { functionName?: 'changePointer' }
    : UseContractWriteConfig<TMode, typeof bookOfShaABI, 'changePointer'> & {
        abi?: never
        functionName?: 'changePointer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfShaABI, 'changePointer'>({
    abi: bookOfShaABI,
    functionName: 'changePointer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"circulateFile"`.
 */
export function useBookOfShaCirculateFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfShaABI, 'circulateFile'>['abi'],
        'circulateFile'
      > & { functionName?: 'circulateFile' }
    : UseContractWriteConfig<TMode, typeof bookOfShaABI, 'circulateFile'> & {
        abi?: never
        functionName?: 'circulateFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfShaABI, 'circulateFile'>({
    abi: bookOfShaABI,
    functionName: 'circulateFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"establishFile"`.
 */
export function useBookOfShaEstablishFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfShaABI, 'establishFile'>['abi'],
        'establishFile'
      > & { functionName?: 'establishFile' }
    : UseContractWriteConfig<TMode, typeof bookOfShaABI, 'establishFile'> & {
        abi?: never
        functionName?: 'establishFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfShaABI, 'establishFile'>({
    abi: bookOfShaABI,
    functionName: 'establishFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"execFile"`.
 */
export function useBookOfShaExecFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfShaABI, 'execFile'>['abi'],
        'execFile'
      > & { functionName?: 'execFile' }
    : UseContractWriteConfig<TMode, typeof bookOfShaABI, 'execFile'> & {
        abi?: never
        functionName?: 'execFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfShaABI, 'execFile'>({
    abi: bookOfShaABI,
    functionName: 'execFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"grantRole"`.
 */
export function useBookOfShaGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfShaABI, 'grantRole'>['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof bookOfShaABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfShaABI, 'grantRole'>({
    abi: bookOfShaABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"init"`.
 */
export function useBookOfShaInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfShaABI, 'init'>['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof bookOfShaABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfShaABI, 'init'>({
    abi: bookOfShaABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"lockContents"`.
 */
export function useBookOfShaLockContents<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfShaABI, 'lockContents'>['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<TMode, typeof bookOfShaABI, 'lockContents'> & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfShaABI, 'lockContents'>({
    abi: bookOfShaABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"proposeFile"`.
 */
export function useBookOfShaProposeFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfShaABI, 'proposeFile'>['abi'],
        'proposeFile'
      > & { functionName?: 'proposeFile' }
    : UseContractWriteConfig<TMode, typeof bookOfShaABI, 'proposeFile'> & {
        abi?: never
        functionName?: 'proposeFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfShaABI, 'proposeFile'>({
    abi: bookOfShaABI,
    functionName: 'proposeFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"regFile"`.
 */
export function useBookOfShaRegFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfShaABI, 'regFile'>['abi'],
        'regFile'
      > & { functionName?: 'regFile' }
    : UseContractWriteConfig<TMode, typeof bookOfShaABI, 'regFile'> & {
        abi?: never
        functionName?: 'regFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfShaABI, 'regFile'>({
    abi: bookOfShaABI,
    functionName: 'regFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function useBookOfShaRemoveDirectKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfShaABI,
          'removeDirectKeeper'
        >['abi'],
        'removeDirectKeeper'
      > & { functionName?: 'removeDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfShaABI,
        'removeDirectKeeper'
      > & {
        abi?: never
        functionName?: 'removeDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfShaABI, 'removeDirectKeeper'>({
    abi: bookOfShaABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useBookOfShaRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfShaABI, 'renounceRole'>['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<TMode, typeof bookOfShaABI, 'renounceRole'> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfShaABI, 'renounceRole'>({
    abi: bookOfShaABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useBookOfShaRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfShaABI, 'revokeRole'>['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof bookOfShaABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfShaABI, 'revokeRole'>({
    abi: bookOfShaABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useBookOfShaSetDirectKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfShaABI,
          'setDirectKeeper'
        >['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<TMode, typeof bookOfShaABI, 'setDirectKeeper'> & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfShaABI, 'setDirectKeeper'>({
    abi: bookOfShaABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function useBookOfShaSetGeneralCounsel<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfShaABI,
          'setGeneralCounsel'
        >['abi'],
        'setGeneralCounsel'
      > & { functionName?: 'setGeneralCounsel' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfShaABI,
        'setGeneralCounsel'
      > & {
        abi?: never
        functionName?: 'setGeneralCounsel'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfShaABI, 'setGeneralCounsel'>({
    abi: bookOfShaABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"setOwner"`.
 */
export function useBookOfShaSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfShaABI, 'setOwner'>['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof bookOfShaABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfShaABI, 'setOwner'>({
    abi: bookOfShaABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useBookOfShaSetRoleAdmin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfShaABI, 'setRoleAdmin'>['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<TMode, typeof bookOfShaABI, 'setRoleAdmin'> & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfShaABI, 'setRoleAdmin'>({
    abi: bookOfShaABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"setStateOfFile"`.
 */
export function useBookOfShaSetStateOfFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfShaABI,
          'setStateOfFile'
        >['abi'],
        'setStateOfFile'
      > & { functionName?: 'setStateOfFile' }
    : UseContractWriteConfig<TMode, typeof bookOfShaABI, 'setStateOfFile'> & {
        abi?: never
        functionName?: 'setStateOfFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfShaABI, 'setStateOfFile'>({
    abi: bookOfShaABI,
    functionName: 'setStateOfFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"terminateFile"`.
 */
export function useBookOfShaTerminateFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfShaABI, 'terminateFile'>['abi'],
        'terminateFile'
      > & { functionName?: 'terminateFile' }
    : UseContractWriteConfig<TMode, typeof bookOfShaABI, 'terminateFile'> & {
        abi?: never
        functionName?: 'terminateFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfShaABI, 'terminateFile'>({
    abi: bookOfShaABI,
    functionName: 'terminateFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"voteCountingForFile"`.
 */
export function useBookOfShaVoteCountingForFile<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfShaABI,
          'voteCountingForFile'
        >['abi'],
        'voteCountingForFile'
      > & { functionName?: 'voteCountingForFile' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfShaABI,
        'voteCountingForFile'
      > & {
        abi?: never
        functionName?: 'voteCountingForFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfShaABI, 'voteCountingForFile'>({
    abi: bookOfShaABI,
    functionName: 'voteCountingForFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfShaABI}__.
 */
export function usePrepareBookOfShaWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfShaABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfShaABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfShaABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareBookOfShaAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfShaABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfShaABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfShaABI, 'abandonRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"changePointer"`.
 */
export function usePrepareBookOfShaChangePointer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfShaABI, 'changePointer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfShaABI,
    functionName: 'changePointer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfShaABI, 'changePointer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"circulateFile"`.
 */
export function usePrepareBookOfShaCirculateFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfShaABI, 'circulateFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfShaABI,
    functionName: 'circulateFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfShaABI, 'circulateFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"establishFile"`.
 */
export function usePrepareBookOfShaEstablishFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfShaABI, 'establishFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfShaABI,
    functionName: 'establishFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfShaABI, 'establishFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"execFile"`.
 */
export function usePrepareBookOfShaExecFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfShaABI, 'execFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfShaABI,
    functionName: 'execFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfShaABI, 'execFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareBookOfShaGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfShaABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfShaABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfShaABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareBookOfShaInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfShaABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfShaABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfShaABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareBookOfShaLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfShaABI, 'lockContents'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfShaABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfShaABI, 'lockContents'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"proposeFile"`.
 */
export function usePrepareBookOfShaProposeFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfShaABI, 'proposeFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfShaABI,
    functionName: 'proposeFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfShaABI, 'proposeFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"regFile"`.
 */
export function usePrepareBookOfShaRegFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfShaABI, 'regFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfShaABI,
    functionName: 'regFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfShaABI, 'regFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function usePrepareBookOfShaRemoveDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfShaABI, 'removeDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfShaABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfShaABI, 'removeDirectKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareBookOfShaRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfShaABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfShaABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfShaABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareBookOfShaRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfShaABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfShaABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfShaABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareBookOfShaSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfShaABI, 'setDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfShaABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfShaABI, 'setDirectKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function usePrepareBookOfShaSetGeneralCounsel(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfShaABI, 'setGeneralCounsel'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfShaABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfShaABI, 'setGeneralCounsel'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareBookOfShaSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfShaABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfShaABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfShaABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareBookOfShaSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfShaABI, 'setRoleAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfShaABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfShaABI, 'setRoleAdmin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"setStateOfFile"`.
 */
export function usePrepareBookOfShaSetStateOfFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfShaABI, 'setStateOfFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfShaABI,
    functionName: 'setStateOfFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfShaABI, 'setStateOfFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"terminateFile"`.
 */
export function usePrepareBookOfShaTerminateFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfShaABI, 'terminateFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfShaABI,
    functionName: 'terminateFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfShaABI, 'terminateFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfShaABI}__ and `functionName` set to `"voteCountingForFile"`.
 */
export function usePrepareBookOfShaVoteCountingForFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfShaABI, 'voteCountingForFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfShaABI,
    functionName: 'voteCountingForFile',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bookOfShaABI,
    'voteCountingForFile'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfShaABI}__.
 */
export function useBookOfShaEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof bookOfShaABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfShaABI,
    ...config,
  } as UseContractEventConfig<typeof bookOfShaABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfShaABI}__ and `eventName` set to `"ChangePointer"`.
 */
export function useBookOfShaChangePointerEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfShaABI, 'ChangePointer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfShaABI,
    eventName: 'ChangePointer',
    ...config,
  } as UseContractEventConfig<typeof bookOfShaABI, 'ChangePointer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfShaABI}__ and `eventName` set to `"Init"`.
 */
export function useBookOfShaInitEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfShaABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfShaABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof bookOfShaABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfShaABI}__ and `eventName` set to `"LockContents"`.
 */
export function useBookOfShaLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfShaABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfShaABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof bookOfShaABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfShaABI}__ and `eventName` set to `"RemoveDirectKeeper"`.
 */
export function useBookOfShaRemoveDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfShaABI, 'RemoveDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfShaABI,
    eventName: 'RemoveDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof bookOfShaABI, 'RemoveDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfShaABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useBookOfShaSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfShaABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfShaABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof bookOfShaABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfShaABI}__ and `eventName` set to `"SetGeneralCounsel"`.
 */
export function useBookOfShaSetGeneralCounselEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfShaABI, 'SetGeneralCounsel'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfShaABI,
    eventName: 'SetGeneralCounsel',
    ...config,
  } as UseContractEventConfig<typeof bookOfShaABI, 'SetGeneralCounsel'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfShaABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useBookOfShaSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfShaABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfShaABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof bookOfShaABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfShaABI}__ and `eventName` set to `"UpdateStateOfFile"`.
 */
export function useBookOfShaUpdateStateOfFileEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfShaABI, 'UpdateStateOfFile'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfShaABI,
    eventName: 'UpdateStateOfFile',
    ...config,
  } as UseContractEventConfig<typeof bookOfShaABI, 'UpdateStateOfFile'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iBookOfShaABI}__.
 */
export function useIBookOfSha(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iBookOfShaABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfShaABI}__.
 */
export function useIBookOfShaRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iBookOfShaABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfShaABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfShaABI,
    ...config,
  } as UseContractReadConfig<typeof iBookOfShaABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfShaABI}__ and `functionName` set to `"closingDeadline"`.
 */
export function useIBookOfShaClosingDeadline<
  TSelectData = ReadContractResult<typeof iBookOfShaABI, 'closingDeadline'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfShaABI, 'closingDeadline', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfShaABI,
    functionName: 'closingDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfShaABI,
    'closingDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfShaABI}__ and `functionName` set to `"getFile"`.
 */
export function useIBookOfShaGetFile<
  TSelectData = ReadContractResult<typeof iBookOfShaABI, 'getFile'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfShaABI, 'getFile', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfShaABI,
    functionName: 'getFile',
    ...config,
  } as UseContractReadConfig<typeof iBookOfShaABI, 'getFile', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfShaABI}__ and `functionName` set to `"getFilesList"`.
 */
export function useIBookOfShaGetFilesList<
  TSelectData = ReadContractResult<typeof iBookOfShaABI, 'getFilesList'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfShaABI, 'getFilesList', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfShaABI,
    functionName: 'getFilesList',
    ...config,
  } as UseContractReadConfig<typeof iBookOfShaABI, 'getFilesList', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfShaABI}__ and `functionName` set to `"getHeadOfFile"`.
 */
export function useIBookOfShaGetHeadOfFile<
  TSelectData = ReadContractResult<typeof iBookOfShaABI, 'getHeadOfFile'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfShaABI, 'getHeadOfFile', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfShaABI,
    functionName: 'getHeadOfFile',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfShaABI,
    'getHeadOfFile',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfShaABI}__ and `functionName` set to `"getRefOfFile"`.
 */
export function useIBookOfShaGetRefOfFile<
  TSelectData = ReadContractResult<typeof iBookOfShaABI, 'getRefOfFile'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfShaABI, 'getRefOfFile', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfShaABI,
    functionName: 'getRefOfFile',
    ...config,
  } as UseContractReadConfig<typeof iBookOfShaABI, 'getRefOfFile', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfShaABI}__ and `functionName` set to `"getSNOfFile"`.
 */
export function useIBookOfShaGetSnOfFile<
  TSelectData = ReadContractResult<typeof iBookOfShaABI, 'getSNOfFile'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfShaABI, 'getSNOfFile', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfShaABI,
    functionName: 'getSNOfFile',
    ...config,
  } as UseContractReadConfig<typeof iBookOfShaABI, 'getSNOfFile', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfShaABI}__ and `functionName` set to `"isRegistered"`.
 */
export function useIBookOfShaIsRegistered<
  TSelectData = ReadContractResult<typeof iBookOfShaABI, 'isRegistered'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfShaABI, 'isRegistered', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfShaABI,
    functionName: 'isRegistered',
    ...config,
  } as UseContractReadConfig<typeof iBookOfShaABI, 'isRegistered', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfShaABI}__ and `functionName` set to `"pointer"`.
 */
export function useIBookOfShaPointer<
  TSelectData = ReadContractResult<typeof iBookOfShaABI, 'pointer'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfShaABI, 'pointer', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfShaABI,
    functionName: 'pointer',
    ...config,
  } as UseContractReadConfig<typeof iBookOfShaABI, 'pointer', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfShaABI}__ and `functionName` set to `"qtyOfFiles"`.
 */
export function useIBookOfShaQtyOfFiles<
  TSelectData = ReadContractResult<typeof iBookOfShaABI, 'qtyOfFiles'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfShaABI, 'qtyOfFiles', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfShaABI,
    functionName: 'qtyOfFiles',
    ...config,
  } as UseContractReadConfig<typeof iBookOfShaABI, 'qtyOfFiles', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfShaABI}__ and `functionName` set to `"shaExecDeadline"`.
 */
export function useIBookOfShaShaExecDeadline<
  TSelectData = ReadContractResult<typeof iBookOfShaABI, 'shaExecDeadline'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfShaABI, 'shaExecDeadline', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfShaABI,
    functionName: 'shaExecDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfShaABI,
    'shaExecDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfShaABI}__ and `functionName` set to `"signingDeadline"`.
 */
export function useIBookOfShaSigningDeadline<
  TSelectData = ReadContractResult<typeof iBookOfShaABI, 'signingDeadline'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfShaABI, 'signingDeadline', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfShaABI,
    functionName: 'signingDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfShaABI,
    'signingDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfShaABI}__ and `functionName` set to `"terminateStartpoint"`.
 */
export function useIBookOfShaTerminateStartpoint<
  TSelectData = ReadContractResult<typeof iBookOfShaABI, 'terminateStartpoint'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfShaABI,
      'terminateStartpoint',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfShaABI,
    functionName: 'terminateStartpoint',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfShaABI,
    'terminateStartpoint',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfShaABI}__ and `functionName` set to `"votingDeadline"`.
 */
export function useIBookOfShaVotingDeadline<
  TSelectData = ReadContractResult<typeof iBookOfShaABI, 'votingDeadline'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfShaABI, 'votingDeadline', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfShaABI,
    functionName: 'votingDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfShaABI,
    'votingDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfShaABI}__.
 */
export function useIBookOfShaWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iBookOfShaABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iBookOfShaABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfShaABI, TFunctionName>({
    abi: iBookOfShaABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfShaABI}__ and `functionName` set to `"changePointer"`.
 */
export function useIBookOfShaChangePointer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfShaABI,
          'changePointer'
        >['abi'],
        'changePointer'
      > & { functionName?: 'changePointer' }
    : UseContractWriteConfig<TMode, typeof iBookOfShaABI, 'changePointer'> & {
        abi?: never
        functionName?: 'changePointer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfShaABI, 'changePointer'>({
    abi: iBookOfShaABI,
    functionName: 'changePointer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfShaABI}__ and `functionName` set to `"circulateFile"`.
 */
export function useIBookOfShaCirculateFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfShaABI,
          'circulateFile'
        >['abi'],
        'circulateFile'
      > & { functionName?: 'circulateFile' }
    : UseContractWriteConfig<TMode, typeof iBookOfShaABI, 'circulateFile'> & {
        abi?: never
        functionName?: 'circulateFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfShaABI, 'circulateFile'>({
    abi: iBookOfShaABI,
    functionName: 'circulateFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfShaABI}__ and `functionName` set to `"establishFile"`.
 */
export function useIBookOfShaEstablishFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfShaABI,
          'establishFile'
        >['abi'],
        'establishFile'
      > & { functionName?: 'establishFile' }
    : UseContractWriteConfig<TMode, typeof iBookOfShaABI, 'establishFile'> & {
        abi?: never
        functionName?: 'establishFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfShaABI, 'establishFile'>({
    abi: iBookOfShaABI,
    functionName: 'establishFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfShaABI}__ and `functionName` set to `"execFile"`.
 */
export function useIBookOfShaExecFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iBookOfShaABI, 'execFile'>['abi'],
        'execFile'
      > & { functionName?: 'execFile' }
    : UseContractWriteConfig<TMode, typeof iBookOfShaABI, 'execFile'> & {
        abi?: never
        functionName?: 'execFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfShaABI, 'execFile'>({
    abi: iBookOfShaABI,
    functionName: 'execFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfShaABI}__ and `functionName` set to `"proposeFile"`.
 */
export function useIBookOfShaProposeFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iBookOfShaABI, 'proposeFile'>['abi'],
        'proposeFile'
      > & { functionName?: 'proposeFile' }
    : UseContractWriteConfig<TMode, typeof iBookOfShaABI, 'proposeFile'> & {
        abi?: never
        functionName?: 'proposeFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfShaABI, 'proposeFile'>({
    abi: iBookOfShaABI,
    functionName: 'proposeFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfShaABI}__ and `functionName` set to `"regFile"`.
 */
export function useIBookOfShaRegFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iBookOfShaABI, 'regFile'>['abi'],
        'regFile'
      > & { functionName?: 'regFile' }
    : UseContractWriteConfig<TMode, typeof iBookOfShaABI, 'regFile'> & {
        abi?: never
        functionName?: 'regFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfShaABI, 'regFile'>({
    abi: iBookOfShaABI,
    functionName: 'regFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfShaABI}__ and `functionName` set to `"setStateOfFile"`.
 */
export function useIBookOfShaSetStateOfFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfShaABI,
          'setStateOfFile'
        >['abi'],
        'setStateOfFile'
      > & { functionName?: 'setStateOfFile' }
    : UseContractWriteConfig<TMode, typeof iBookOfShaABI, 'setStateOfFile'> & {
        abi?: never
        functionName?: 'setStateOfFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfShaABI, 'setStateOfFile'>({
    abi: iBookOfShaABI,
    functionName: 'setStateOfFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfShaABI}__ and `functionName` set to `"terminateFile"`.
 */
export function useIBookOfShaTerminateFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfShaABI,
          'terminateFile'
        >['abi'],
        'terminateFile'
      > & { functionName?: 'terminateFile' }
    : UseContractWriteConfig<TMode, typeof iBookOfShaABI, 'terminateFile'> & {
        abi?: never
        functionName?: 'terminateFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfShaABI, 'terminateFile'>({
    abi: iBookOfShaABI,
    functionName: 'terminateFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfShaABI}__ and `functionName` set to `"voteCountingForFile"`.
 */
export function useIBookOfShaVoteCountingForFile<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfShaABI,
          'voteCountingForFile'
        >['abi'],
        'voteCountingForFile'
      > & { functionName?: 'voteCountingForFile' }
    : UseContractWriteConfig<
        TMode,
        typeof iBookOfShaABI,
        'voteCountingForFile'
      > & {
        abi?: never
        functionName?: 'voteCountingForFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfShaABI, 'voteCountingForFile'>({
    abi: iBookOfShaABI,
    functionName: 'voteCountingForFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfShaABI}__.
 */
export function usePrepareIBookOfShaWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfShaABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfShaABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfShaABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfShaABI}__ and `functionName` set to `"changePointer"`.
 */
export function usePrepareIBookOfShaChangePointer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfShaABI, 'changePointer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfShaABI,
    functionName: 'changePointer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfShaABI, 'changePointer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfShaABI}__ and `functionName` set to `"circulateFile"`.
 */
export function usePrepareIBookOfShaCirculateFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfShaABI, 'circulateFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfShaABI,
    functionName: 'circulateFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfShaABI, 'circulateFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfShaABI}__ and `functionName` set to `"establishFile"`.
 */
export function usePrepareIBookOfShaEstablishFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfShaABI, 'establishFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfShaABI,
    functionName: 'establishFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfShaABI, 'establishFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfShaABI}__ and `functionName` set to `"execFile"`.
 */
export function usePrepareIBookOfShaExecFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfShaABI, 'execFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfShaABI,
    functionName: 'execFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfShaABI, 'execFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfShaABI}__ and `functionName` set to `"proposeFile"`.
 */
export function usePrepareIBookOfShaProposeFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfShaABI, 'proposeFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfShaABI,
    functionName: 'proposeFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfShaABI, 'proposeFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfShaABI}__ and `functionName` set to `"regFile"`.
 */
export function usePrepareIBookOfShaRegFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfShaABI, 'regFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfShaABI,
    functionName: 'regFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfShaABI, 'regFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfShaABI}__ and `functionName` set to `"setStateOfFile"`.
 */
export function usePrepareIBookOfShaSetStateOfFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfShaABI, 'setStateOfFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfShaABI,
    functionName: 'setStateOfFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfShaABI, 'setStateOfFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfShaABI}__ and `functionName` set to `"terminateFile"`.
 */
export function usePrepareIBookOfShaTerminateFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfShaABI, 'terminateFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfShaABI,
    functionName: 'terminateFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfShaABI, 'terminateFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfShaABI}__ and `functionName` set to `"voteCountingForFile"`.
 */
export function usePrepareIBookOfShaVoteCountingForFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfShaABI, 'voteCountingForFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfShaABI,
    functionName: 'voteCountingForFile',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iBookOfShaABI,
    'voteCountingForFile'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfShaABI}__.
 */
export function useIBookOfShaEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iBookOfShaABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfShaABI,
    ...config,
  } as UseContractEventConfig<typeof iBookOfShaABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfShaABI}__ and `eventName` set to `"ChangePointer"`.
 */
export function useIBookOfShaChangePointerEvent(
  config: Omit<
    UseContractEventConfig<typeof iBookOfShaABI, 'ChangePointer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfShaABI,
    eventName: 'ChangePointer',
    ...config,
  } as UseContractEventConfig<typeof iBookOfShaABI, 'ChangePointer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfShaABI}__ and `eventName` set to `"UpdateStateOfFile"`.
 */
export function useIBookOfShaUpdateStateOfFileEvent(
  config: Omit<
    UseContractEventConfig<typeof iBookOfShaABI, 'UpdateStateOfFile'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfShaABI,
    eventName: 'UpdateStateOfFile',
    ...config,
  } as UseContractEventConfig<typeof iBookOfShaABI, 'UpdateStateOfFile'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iShareholdersAgreementABI}__.
 */
export function useIShareholdersAgreement(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iShareholdersAgreementABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iShareholdersAgreementABI}__.
 */
export function useIShareholdersAgreementRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof iShareholdersAgreementABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iShareholdersAgreementABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iShareholdersAgreementABI,
    ...config,
  } as UseContractReadConfig<
    typeof iShareholdersAgreementABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"getRule"`.
 */
export function useIShareholdersAgreementGetRule<
  TSelectData = ReadContractResult<typeof iShareholdersAgreementABI, 'getRule'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iShareholdersAgreementABI,
      'getRule',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iShareholdersAgreementABI,
    functionName: 'getRule',
    ...config,
  } as UseContractReadConfig<
    typeof iShareholdersAgreementABI,
    'getRule',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"getTerm"`.
 */
export function useIShareholdersAgreementGetTerm<
  TSelectData = ReadContractResult<typeof iShareholdersAgreementABI, 'getTerm'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iShareholdersAgreementABI,
      'getTerm',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iShareholdersAgreementABI,
    functionName: 'getTerm',
    ...config,
  } as UseContractReadConfig<
    typeof iShareholdersAgreementABI,
    'getTerm',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"hasRule"`.
 */
export function useIShareholdersAgreementHasRule<
  TSelectData = ReadContractResult<typeof iShareholdersAgreementABI, 'hasRule'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iShareholdersAgreementABI,
      'hasRule',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iShareholdersAgreementABI,
    functionName: 'hasRule',
    ...config,
  } as UseContractReadConfig<
    typeof iShareholdersAgreementABI,
    'hasRule',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"hasTitle"`.
 */
export function useIShareholdersAgreementHasTitle<
  TSelectData = ReadContractResult<
    typeof iShareholdersAgreementABI,
    'hasTitle'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iShareholdersAgreementABI,
      'hasTitle',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iShareholdersAgreementABI,
    functionName: 'hasTitle',
    ...config,
  } as UseContractReadConfig<
    typeof iShareholdersAgreementABI,
    'hasTitle',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"qtyOfRules"`.
 */
export function useIShareholdersAgreementQtyOfRules<
  TSelectData = ReadContractResult<
    typeof iShareholdersAgreementABI,
    'qtyOfRules'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iShareholdersAgreementABI,
      'qtyOfRules',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iShareholdersAgreementABI,
    functionName: 'qtyOfRules',
    ...config,
  } as UseContractReadConfig<
    typeof iShareholdersAgreementABI,
    'qtyOfRules',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"qtyOfTerms"`.
 */
export function useIShareholdersAgreementQtyOfTerms<
  TSelectData = ReadContractResult<
    typeof iShareholdersAgreementABI,
    'qtyOfTerms'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iShareholdersAgreementABI,
      'qtyOfTerms',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iShareholdersAgreementABI,
    functionName: 'qtyOfTerms',
    ...config,
  } as UseContractReadConfig<
    typeof iShareholdersAgreementABI,
    'qtyOfTerms',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"rules"`.
 */
export function useIShareholdersAgreementRules<
  TSelectData = ReadContractResult<typeof iShareholdersAgreementABI, 'rules'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iShareholdersAgreementABI,
      'rules',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iShareholdersAgreementABI,
    functionName: 'rules',
    ...config,
  } as UseContractReadConfig<
    typeof iShareholdersAgreementABI,
    'rules',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"termIsExempted"`.
 */
export function useIShareholdersAgreementTermIsExempted<
  TSelectData = ReadContractResult<
    typeof iShareholdersAgreementABI,
    'termIsExempted'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iShareholdersAgreementABI,
      'termIsExempted',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iShareholdersAgreementABI,
    functionName: 'termIsExempted',
    ...config,
  } as UseContractReadConfig<
    typeof iShareholdersAgreementABI,
    'termIsExempted',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"termIsTriggered"`.
 */
export function useIShareholdersAgreementTermIsTriggered<
  TSelectData = ReadContractResult<
    typeof iShareholdersAgreementABI,
    'termIsTriggered'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iShareholdersAgreementABI,
      'termIsTriggered',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iShareholdersAgreementABI,
    functionName: 'termIsTriggered',
    ...config,
  } as UseContractReadConfig<
    typeof iShareholdersAgreementABI,
    'termIsTriggered',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"titles"`.
 */
export function useIShareholdersAgreementTitles<
  TSelectData = ReadContractResult<typeof iShareholdersAgreementABI, 'titles'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iShareholdersAgreementABI,
      'titles',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iShareholdersAgreementABI,
    functionName: 'titles',
    ...config,
  } as UseContractReadConfig<
    typeof iShareholdersAgreementABI,
    'titles',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iShareholdersAgreementABI}__.
 */
export function useIShareholdersAgreementWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iShareholdersAgreementABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof iShareholdersAgreementABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iShareholdersAgreementABI,
    TFunctionName
  >({ abi: iShareholdersAgreementABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"addRule"`.
 */
export function useIShareholdersAgreementAddRule<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iShareholdersAgreementABI,
          'addRule'
        >['abi'],
        'addRule'
      > & { functionName?: 'addRule' }
    : UseContractWriteConfig<
        TMode,
        typeof iShareholdersAgreementABI,
        'addRule'
      > & {
        abi?: never
        functionName?: 'addRule'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iShareholdersAgreementABI, 'addRule'>({
    abi: iShareholdersAgreementABI,
    functionName: 'addRule',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"createTerm"`.
 */
export function useIShareholdersAgreementCreateTerm<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iShareholdersAgreementABI,
          'createTerm'
        >['abi'],
        'createTerm'
      > & { functionName?: 'createTerm' }
    : UseContractWriteConfig<
        TMode,
        typeof iShareholdersAgreementABI,
        'createTerm'
      > & {
        abi?: never
        functionName?: 'createTerm'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iShareholdersAgreementABI,
    'createTerm'
  >({
    abi: iShareholdersAgreementABI,
    functionName: 'createTerm',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"removeRule"`.
 */
export function useIShareholdersAgreementRemoveRule<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iShareholdersAgreementABI,
          'removeRule'
        >['abi'],
        'removeRule'
      > & { functionName?: 'removeRule' }
    : UseContractWriteConfig<
        TMode,
        typeof iShareholdersAgreementABI,
        'removeRule'
      > & {
        abi?: never
        functionName?: 'removeRule'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iShareholdersAgreementABI,
    'removeRule'
  >({
    abi: iShareholdersAgreementABI,
    functionName: 'removeRule',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"removeTerm"`.
 */
export function useIShareholdersAgreementRemoveTerm<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iShareholdersAgreementABI,
          'removeTerm'
        >['abi'],
        'removeTerm'
      > & { functionName?: 'removeTerm' }
    : UseContractWriteConfig<
        TMode,
        typeof iShareholdersAgreementABI,
        'removeTerm'
      > & {
        abi?: never
        functionName?: 'removeTerm'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iShareholdersAgreementABI,
    'removeTerm'
  >({
    abi: iShareholdersAgreementABI,
    functionName: 'removeTerm',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iShareholdersAgreementABI}__.
 */
export function usePrepareIShareholdersAgreementWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iShareholdersAgreementABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iShareholdersAgreementABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iShareholdersAgreementABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"addRule"`.
 */
export function usePrepareIShareholdersAgreementAddRule(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iShareholdersAgreementABI, 'addRule'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iShareholdersAgreementABI,
    functionName: 'addRule',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iShareholdersAgreementABI,
    'addRule'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"createTerm"`.
 */
export function usePrepareIShareholdersAgreementCreateTerm(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iShareholdersAgreementABI,
      'createTerm'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iShareholdersAgreementABI,
    functionName: 'createTerm',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iShareholdersAgreementABI,
    'createTerm'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"removeRule"`.
 */
export function usePrepareIShareholdersAgreementRemoveRule(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iShareholdersAgreementABI,
      'removeRule'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iShareholdersAgreementABI,
    functionName: 'removeRule',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iShareholdersAgreementABI,
    'removeRule'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iShareholdersAgreementABI}__ and `functionName` set to `"removeTerm"`.
 */
export function usePrepareIShareholdersAgreementRemoveTerm(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iShareholdersAgreementABI,
      'removeTerm'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iShareholdersAgreementABI,
    functionName: 'removeTerm',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iShareholdersAgreementABI,
    'removeTerm'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link shareholdersAgreementABI}__.
 */
export function useShareholdersAgreement(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: shareholdersAgreementABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__.
 */
export function useShareholdersAgreementRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof shareholdersAgreementABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"circulated"`.
 */
export function useShareholdersAgreementCirculated<
  TSelectData = ReadContractResult<
    typeof shareholdersAgreementABI,
    'circulated'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'circulated',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'circulated',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'circulated',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"established"`.
 */
export function useShareholdersAgreementEstablished<
  TSelectData = ReadContractResult<
    typeof shareholdersAgreementABI,
    'established'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'established',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'established',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'established',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"finalized"`.
 */
export function useShareholdersAgreementFinalized<
  TSelectData = ReadContractResult<
    typeof shareholdersAgreementABI,
    'finalized'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'finalized',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'finalized',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'finalized',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"getBookeeper"`.
 */
export function useShareholdersAgreementGetBookeeper<
  TSelectData = ReadContractResult<
    typeof shareholdersAgreementABI,
    'getBookeeper'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'getBookeeper',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'getBookeeper',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'getBookeeper',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"getBuyers"`.
 */
export function useShareholdersAgreementGetBuyers<
  TSelectData = ReadContractResult<
    typeof shareholdersAgreementABI,
    'getBuyers'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'getBuyers',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'getBuyers',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'getBuyers',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"getCirculateDate"`.
 */
export function useShareholdersAgreementGetCirculateDate<
  TSelectData = ReadContractResult<
    typeof shareholdersAgreementABI,
    'getCirculateDate'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'getCirculateDate',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'getCirculateDate',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'getCirculateDate',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"getClosingDays"`.
 */
export function useShareholdersAgreementGetClosingDays<
  TSelectData = ReadContractResult<
    typeof shareholdersAgreementABI,
    'getClosingDays'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'getClosingDays',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'getClosingDays',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'getClosingDays',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"getClosingDeadline"`.
 */
export function useShareholdersAgreementGetClosingDeadline<
  TSelectData = ReadContractResult<
    typeof shareholdersAgreementABI,
    'getClosingDeadline'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'getClosingDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'getClosingDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'getClosingDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"getGeneralCounsel"`.
 */
export function useShareholdersAgreementGetGeneralCounsel<
  TSelectData = ReadContractResult<
    typeof shareholdersAgreementABI,
    'getGeneralCounsel'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'getGeneralCounsel',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'getGeneralCounsel',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'getGeneralCounsel',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"getOwner"`.
 */
export function useShareholdersAgreementGetOwner<
  TSelectData = ReadContractResult<typeof shareholdersAgreementABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'getOwner',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'getOwner',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"getParasOfPage"`.
 */
export function useShareholdersAgreementGetParasOfPage<
  TSelectData = ReadContractResult<
    typeof shareholdersAgreementABI,
    'getParasOfPage'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'getParasOfPage',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'getParasOfPage',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'getParasOfPage',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"getParties"`.
 */
export function useShareholdersAgreementGetParties<
  TSelectData = ReadContractResult<
    typeof shareholdersAgreementABI,
    'getParties'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'getParties',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'getParties',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'getParties',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"getRule"`.
 */
export function useShareholdersAgreementGetRule<
  TSelectData = ReadContractResult<typeof shareholdersAgreementABI, 'getRule'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'getRule',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'getRule',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'getRule',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"getSellers"`.
 */
export function useShareholdersAgreementGetSellers<
  TSelectData = ReadContractResult<
    typeof shareholdersAgreementABI,
    'getSellers'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'getSellers',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'getSellers',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'getSellers',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"getSigDeadline"`.
 */
export function useShareholdersAgreementGetSigDeadline<
  TSelectData = ReadContractResult<
    typeof shareholdersAgreementABI,
    'getSigDeadline'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'getSigDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'getSigDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'getSigDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"getSigOfParty"`.
 */
export function useShareholdersAgreementGetSigOfParty<
  TSelectData = ReadContractResult<
    typeof shareholdersAgreementABI,
    'getSigOfParty'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'getSigOfParty',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'getSigOfParty',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'getSigOfParty',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"getSigningDays"`.
 */
export function useShareholdersAgreementGetSigningDays<
  TSelectData = ReadContractResult<
    typeof shareholdersAgreementABI,
    'getSigningDays'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'getSigningDays',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'getSigningDays',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'getSigningDays',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"getSigsOfPage"`.
 */
export function useShareholdersAgreementGetSigsOfPage<
  TSelectData = ReadContractResult<
    typeof shareholdersAgreementABI,
    'getSigsOfPage'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'getSigsOfPage',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'getSigsOfPage',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'getSigsOfPage',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"getTerm"`.
 */
export function useShareholdersAgreementGetTerm<
  TSelectData = ReadContractResult<typeof shareholdersAgreementABI, 'getTerm'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'getTerm',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'getTerm',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'getTerm',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"hasRole"`.
 */
export function useShareholdersAgreementHasRole<
  TSelectData = ReadContractResult<typeof shareholdersAgreementABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'hasRole',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'hasRole',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"hasRule"`.
 */
export function useShareholdersAgreementHasRule<
  TSelectData = ReadContractResult<typeof shareholdersAgreementABI, 'hasRule'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'hasRule',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'hasRule',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'hasRule',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"hasTitle"`.
 */
export function useShareholdersAgreementHasTitle<
  TSelectData = ReadContractResult<typeof shareholdersAgreementABI, 'hasTitle'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'hasTitle',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'hasTitle',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'hasTitle',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"isBuyer"`.
 */
export function useShareholdersAgreementIsBuyer<
  TSelectData = ReadContractResult<typeof shareholdersAgreementABI, 'isBuyer'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'isBuyer',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'isBuyer',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'isBuyer',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"isInitSigner"`.
 */
export function useShareholdersAgreementIsInitSigner<
  TSelectData = ReadContractResult<
    typeof shareholdersAgreementABI,
    'isInitSigner'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'isInitSigner',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'isInitSigner',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'isInitSigner',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"isParty"`.
 */
export function useShareholdersAgreementIsParty<
  TSelectData = ReadContractResult<typeof shareholdersAgreementABI, 'isParty'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'isParty',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'isParty',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'isParty',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"isSeller"`.
 */
export function useShareholdersAgreementIsSeller<
  TSelectData = ReadContractResult<typeof shareholdersAgreementABI, 'isSeller'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'isSeller',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'isSeller',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'isSeller',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"isSigner"`.
 */
export function useShareholdersAgreementIsSigner<
  TSelectData = ReadContractResult<typeof shareholdersAgreementABI, 'isSigner'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'isSigner',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'isSigner',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'isSigner',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"qtyOfRules"`.
 */
export function useShareholdersAgreementQtyOfRules<
  TSelectData = ReadContractResult<
    typeof shareholdersAgreementABI,
    'qtyOfRules'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'qtyOfRules',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'qtyOfRules',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'qtyOfRules',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"qtyOfTerms"`.
 */
export function useShareholdersAgreementQtyOfTerms<
  TSelectData = ReadContractResult<
    typeof shareholdersAgreementABI,
    'qtyOfTerms'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'qtyOfTerms',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'qtyOfTerms',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'qtyOfTerms',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"rules"`.
 */
export function useShareholdersAgreementRules<
  TSelectData = ReadContractResult<typeof shareholdersAgreementABI, 'rules'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'rules',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'rules',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'rules',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"termIsExempted"`.
 */
export function useShareholdersAgreementTermIsExempted<
  TSelectData = ReadContractResult<
    typeof shareholdersAgreementABI,
    'termIsExempted'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'termIsExempted',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'termIsExempted',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'termIsExempted',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"termIsTriggered"`.
 */
export function useShareholdersAgreementTermIsTriggered<
  TSelectData = ReadContractResult<
    typeof shareholdersAgreementABI,
    'termIsTriggered'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'termIsTriggered',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'termIsTriggered',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'termIsTriggered',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"titles"`.
 */
export function useShareholdersAgreementTitles<
  TSelectData = ReadContractResult<typeof shareholdersAgreementABI, 'titles'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof shareholdersAgreementABI,
      'titles',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: shareholdersAgreementABI,
    functionName: 'titles',
    ...config,
  } as UseContractReadConfig<
    typeof shareholdersAgreementABI,
    'titles',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__.
 */
export function useShareholdersAgreementWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shareholdersAgreementABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof shareholdersAgreementABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof shareholdersAgreementABI,
    TFunctionName
  >({ abi: shareholdersAgreementABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useShareholdersAgreementAbandonRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shareholdersAgreementABI,
          'abandonRole'
        >['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<
        TMode,
        typeof shareholdersAgreementABI,
        'abandonRole'
      > & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof shareholdersAgreementABI,
    'abandonRole'
  >({
    abi: shareholdersAgreementABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"addBlank"`.
 */
export function useShareholdersAgreementAddBlank<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shareholdersAgreementABI,
          'addBlank'
        >['abi'],
        'addBlank'
      > & { functionName?: 'addBlank' }
    : UseContractWriteConfig<
        TMode,
        typeof shareholdersAgreementABI,
        'addBlank'
      > & {
        abi?: never
        functionName?: 'addBlank'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shareholdersAgreementABI, 'addBlank'>({
    abi: shareholdersAgreementABI,
    functionName: 'addBlank',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"addRule"`.
 */
export function useShareholdersAgreementAddRule<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shareholdersAgreementABI,
          'addRule'
        >['abi'],
        'addRule'
      > & { functionName?: 'addRule' }
    : UseContractWriteConfig<
        TMode,
        typeof shareholdersAgreementABI,
        'addRule'
      > & {
        abi?: never
        functionName?: 'addRule'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shareholdersAgreementABI, 'addRule'>({
    abi: shareholdersAgreementABI,
    functionName: 'addRule',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"circulateDoc"`.
 */
export function useShareholdersAgreementCirculateDoc<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shareholdersAgreementABI,
          'circulateDoc'
        >['abi'],
        'circulateDoc'
      > & { functionName?: 'circulateDoc' }
    : UseContractWriteConfig<
        TMode,
        typeof shareholdersAgreementABI,
        'circulateDoc'
      > & {
        abi?: never
        functionName?: 'circulateDoc'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof shareholdersAgreementABI,
    'circulateDoc'
  >({
    abi: shareholdersAgreementABI,
    functionName: 'circulateDoc',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"createTerm"`.
 */
export function useShareholdersAgreementCreateTerm<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shareholdersAgreementABI,
          'createTerm'
        >['abi'],
        'createTerm'
      > & { functionName?: 'createTerm' }
    : UseContractWriteConfig<
        TMode,
        typeof shareholdersAgreementABI,
        'createTerm'
      > & {
        abi?: never
        functionName?: 'createTerm'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shareholdersAgreementABI, 'createTerm'>(
    {
      abi: shareholdersAgreementABI,
      functionName: 'createTerm',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"grantRole"`.
 */
export function useShareholdersAgreementGrantRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shareholdersAgreementABI,
          'grantRole'
        >['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<
        TMode,
        typeof shareholdersAgreementABI,
        'grantRole'
      > & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shareholdersAgreementABI, 'grantRole'>({
    abi: shareholdersAgreementABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"init"`.
 */
export function useShareholdersAgreementInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shareholdersAgreementABI,
          'init'
        >['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof shareholdersAgreementABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shareholdersAgreementABI, 'init'>({
    abi: shareholdersAgreementABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"lockContents"`.
 */
export function useShareholdersAgreementLockContents<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shareholdersAgreementABI,
          'lockContents'
        >['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<
        TMode,
        typeof shareholdersAgreementABI,
        'lockContents'
      > & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof shareholdersAgreementABI,
    'lockContents'
  >({
    abi: shareholdersAgreementABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"regSig"`.
 */
export function useShareholdersAgreementRegSig<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shareholdersAgreementABI,
          'regSig'
        >['abi'],
        'regSig'
      > & { functionName?: 'regSig' }
    : UseContractWriteConfig<
        TMode,
        typeof shareholdersAgreementABI,
        'regSig'
      > & {
        abi?: never
        functionName?: 'regSig'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shareholdersAgreementABI, 'regSig'>({
    abi: shareholdersAgreementABI,
    functionName: 'regSig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"removeBlank"`.
 */
export function useShareholdersAgreementRemoveBlank<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shareholdersAgreementABI,
          'removeBlank'
        >['abi'],
        'removeBlank'
      > & { functionName?: 'removeBlank' }
    : UseContractWriteConfig<
        TMode,
        typeof shareholdersAgreementABI,
        'removeBlank'
      > & {
        abi?: never
        functionName?: 'removeBlank'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof shareholdersAgreementABI,
    'removeBlank'
  >({
    abi: shareholdersAgreementABI,
    functionName: 'removeBlank',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function useShareholdersAgreementRemoveDirectKeeper<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shareholdersAgreementABI,
          'removeDirectKeeper'
        >['abi'],
        'removeDirectKeeper'
      > & { functionName?: 'removeDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof shareholdersAgreementABI,
        'removeDirectKeeper'
      > & {
        abi?: never
        functionName?: 'removeDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof shareholdersAgreementABI,
    'removeDirectKeeper'
  >({
    abi: shareholdersAgreementABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"removeRule"`.
 */
export function useShareholdersAgreementRemoveRule<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shareholdersAgreementABI,
          'removeRule'
        >['abi'],
        'removeRule'
      > & { functionName?: 'removeRule' }
    : UseContractWriteConfig<
        TMode,
        typeof shareholdersAgreementABI,
        'removeRule'
      > & {
        abi?: never
        functionName?: 'removeRule'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shareholdersAgreementABI, 'removeRule'>(
    {
      abi: shareholdersAgreementABI,
      functionName: 'removeRule',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"removeTerm"`.
 */
export function useShareholdersAgreementRemoveTerm<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shareholdersAgreementABI,
          'removeTerm'
        >['abi'],
        'removeTerm'
      > & { functionName?: 'removeTerm' }
    : UseContractWriteConfig<
        TMode,
        typeof shareholdersAgreementABI,
        'removeTerm'
      > & {
        abi?: never
        functionName?: 'removeTerm'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shareholdersAgreementABI, 'removeTerm'>(
    {
      abi: shareholdersAgreementABI,
      functionName: 'removeTerm',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useShareholdersAgreementRenounceRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shareholdersAgreementABI,
          'renounceRole'
        >['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<
        TMode,
        typeof shareholdersAgreementABI,
        'renounceRole'
      > & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof shareholdersAgreementABI,
    'renounceRole'
  >({
    abi: shareholdersAgreementABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useShareholdersAgreementRevokeRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shareholdersAgreementABI,
          'revokeRole'
        >['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<
        TMode,
        typeof shareholdersAgreementABI,
        'revokeRole'
      > & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shareholdersAgreementABI, 'revokeRole'>(
    {
      abi: shareholdersAgreementABI,
      functionName: 'revokeRole',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useShareholdersAgreementSetDirectKeeper<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shareholdersAgreementABI,
          'setDirectKeeper'
        >['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof shareholdersAgreementABI,
        'setDirectKeeper'
      > & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof shareholdersAgreementABI,
    'setDirectKeeper'
  >({
    abi: shareholdersAgreementABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function useShareholdersAgreementSetGeneralCounsel<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shareholdersAgreementABI,
          'setGeneralCounsel'
        >['abi'],
        'setGeneralCounsel'
      > & { functionName?: 'setGeneralCounsel' }
    : UseContractWriteConfig<
        TMode,
        typeof shareholdersAgreementABI,
        'setGeneralCounsel'
      > & {
        abi?: never
        functionName?: 'setGeneralCounsel'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof shareholdersAgreementABI,
    'setGeneralCounsel'
  >({
    abi: shareholdersAgreementABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"setOwner"`.
 */
export function useShareholdersAgreementSetOwner<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shareholdersAgreementABI,
          'setOwner'
        >['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<
        TMode,
        typeof shareholdersAgreementABI,
        'setOwner'
      > & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shareholdersAgreementABI, 'setOwner'>({
    abi: shareholdersAgreementABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useShareholdersAgreementSetRoleAdmin<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shareholdersAgreementABI,
          'setRoleAdmin'
        >['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<
        TMode,
        typeof shareholdersAgreementABI,
        'setRoleAdmin'
      > & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof shareholdersAgreementABI,
    'setRoleAdmin'
  >({
    abi: shareholdersAgreementABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"setTiming"`.
 */
export function useShareholdersAgreementSetTiming<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shareholdersAgreementABI,
          'setTiming'
        >['abi'],
        'setTiming'
      > & { functionName?: 'setTiming' }
    : UseContractWriteConfig<
        TMode,
        typeof shareholdersAgreementABI,
        'setTiming'
      > & {
        abi?: never
        functionName?: 'setTiming'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shareholdersAgreementABI, 'setTiming'>({
    abi: shareholdersAgreementABI,
    functionName: 'setTiming',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"signDoc"`.
 */
export function useShareholdersAgreementSignDoc<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof shareholdersAgreementABI,
          'signDoc'
        >['abi'],
        'signDoc'
      > & { functionName?: 'signDoc' }
    : UseContractWriteConfig<
        TMode,
        typeof shareholdersAgreementABI,
        'signDoc'
      > & {
        abi?: never
        functionName?: 'signDoc'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof shareholdersAgreementABI, 'signDoc'>({
    abi: shareholdersAgreementABI,
    functionName: 'signDoc',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__.
 */
export function usePrepareShareholdersAgreementWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof shareholdersAgreementABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shareholdersAgreementABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof shareholdersAgreementABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareShareholdersAgreementAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof shareholdersAgreementABI,
      'abandonRole'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shareholdersAgreementABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof shareholdersAgreementABI,
    'abandonRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"addBlank"`.
 */
export function usePrepareShareholdersAgreementAddBlank(
  config: Omit<
    UsePrepareContractWriteConfig<typeof shareholdersAgreementABI, 'addBlank'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shareholdersAgreementABI,
    functionName: 'addBlank',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof shareholdersAgreementABI,
    'addBlank'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"addRule"`.
 */
export function usePrepareShareholdersAgreementAddRule(
  config: Omit<
    UsePrepareContractWriteConfig<typeof shareholdersAgreementABI, 'addRule'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shareholdersAgreementABI,
    functionName: 'addRule',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof shareholdersAgreementABI,
    'addRule'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"circulateDoc"`.
 */
export function usePrepareShareholdersAgreementCirculateDoc(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof shareholdersAgreementABI,
      'circulateDoc'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shareholdersAgreementABI,
    functionName: 'circulateDoc',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof shareholdersAgreementABI,
    'circulateDoc'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"createTerm"`.
 */
export function usePrepareShareholdersAgreementCreateTerm(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof shareholdersAgreementABI,
      'createTerm'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shareholdersAgreementABI,
    functionName: 'createTerm',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof shareholdersAgreementABI,
    'createTerm'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareShareholdersAgreementGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof shareholdersAgreementABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shareholdersAgreementABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof shareholdersAgreementABI,
    'grantRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareShareholdersAgreementInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof shareholdersAgreementABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shareholdersAgreementABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof shareholdersAgreementABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareShareholdersAgreementLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof shareholdersAgreementABI,
      'lockContents'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shareholdersAgreementABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof shareholdersAgreementABI,
    'lockContents'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"regSig"`.
 */
export function usePrepareShareholdersAgreementRegSig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof shareholdersAgreementABI, 'regSig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shareholdersAgreementABI,
    functionName: 'regSig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof shareholdersAgreementABI, 'regSig'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"removeBlank"`.
 */
export function usePrepareShareholdersAgreementRemoveBlank(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof shareholdersAgreementABI,
      'removeBlank'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shareholdersAgreementABI,
    functionName: 'removeBlank',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof shareholdersAgreementABI,
    'removeBlank'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function usePrepareShareholdersAgreementRemoveDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof shareholdersAgreementABI,
      'removeDirectKeeper'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shareholdersAgreementABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof shareholdersAgreementABI,
    'removeDirectKeeper'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"removeRule"`.
 */
export function usePrepareShareholdersAgreementRemoveRule(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof shareholdersAgreementABI,
      'removeRule'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shareholdersAgreementABI,
    functionName: 'removeRule',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof shareholdersAgreementABI,
    'removeRule'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"removeTerm"`.
 */
export function usePrepareShareholdersAgreementRemoveTerm(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof shareholdersAgreementABI,
      'removeTerm'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shareholdersAgreementABI,
    functionName: 'removeTerm',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof shareholdersAgreementABI,
    'removeTerm'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareShareholdersAgreementRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof shareholdersAgreementABI,
      'renounceRole'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shareholdersAgreementABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof shareholdersAgreementABI,
    'renounceRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareShareholdersAgreementRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof shareholdersAgreementABI,
      'revokeRole'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shareholdersAgreementABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof shareholdersAgreementABI,
    'revokeRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareShareholdersAgreementSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof shareholdersAgreementABI,
      'setDirectKeeper'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shareholdersAgreementABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof shareholdersAgreementABI,
    'setDirectKeeper'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function usePrepareShareholdersAgreementSetGeneralCounsel(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof shareholdersAgreementABI,
      'setGeneralCounsel'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shareholdersAgreementABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof shareholdersAgreementABI,
    'setGeneralCounsel'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareShareholdersAgreementSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof shareholdersAgreementABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shareholdersAgreementABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof shareholdersAgreementABI,
    'setOwner'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareShareholdersAgreementSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof shareholdersAgreementABI,
      'setRoleAdmin'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shareholdersAgreementABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof shareholdersAgreementABI,
    'setRoleAdmin'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"setTiming"`.
 */
export function usePrepareShareholdersAgreementSetTiming(
  config: Omit<
    UsePrepareContractWriteConfig<typeof shareholdersAgreementABI, 'setTiming'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shareholdersAgreementABI,
    functionName: 'setTiming',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof shareholdersAgreementABI,
    'setTiming'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `functionName` set to `"signDoc"`.
 */
export function usePrepareShareholdersAgreementSignDoc(
  config: Omit<
    UsePrepareContractWriteConfig<typeof shareholdersAgreementABI, 'signDoc'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: shareholdersAgreementABI,
    functionName: 'signDoc',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof shareholdersAgreementABI,
    'signDoc'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link shareholdersAgreementABI}__.
 */
export function useShareholdersAgreementEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof shareholdersAgreementABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: shareholdersAgreementABI,
    ...config,
  } as UseContractEventConfig<typeof shareholdersAgreementABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `eventName` set to `"CirculateDoc"`.
 */
export function useShareholdersAgreementCirculateDocEvent(
  config: Omit<
    UseContractEventConfig<typeof shareholdersAgreementABI, 'CirculateDoc'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: shareholdersAgreementABI,
    eventName: 'CirculateDoc',
    ...config,
  } as UseContractEventConfig<typeof shareholdersAgreementABI, 'CirculateDoc'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `eventName` set to `"Init"`.
 */
export function useShareholdersAgreementInitEvent(
  config: Omit<
    UseContractEventConfig<typeof shareholdersAgreementABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: shareholdersAgreementABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof shareholdersAgreementABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `eventName` set to `"LockContents"`.
 */
export function useShareholdersAgreementLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof shareholdersAgreementABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: shareholdersAgreementABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof shareholdersAgreementABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `eventName` set to `"RemoveDirectKeeper"`.
 */
export function useShareholdersAgreementRemoveDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<
      typeof shareholdersAgreementABI,
      'RemoveDirectKeeper'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: shareholdersAgreementABI,
    eventName: 'RemoveDirectKeeper',
    ...config,
  } as UseContractEventConfig<
    typeof shareholdersAgreementABI,
    'RemoveDirectKeeper'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useShareholdersAgreementSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof shareholdersAgreementABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: shareholdersAgreementABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<
    typeof shareholdersAgreementABI,
    'SetDirectKeeper'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `eventName` set to `"SetGeneralCounsel"`.
 */
export function useShareholdersAgreementSetGeneralCounselEvent(
  config: Omit<
    UseContractEventConfig<
      typeof shareholdersAgreementABI,
      'SetGeneralCounsel'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: shareholdersAgreementABI,
    eventName: 'SetGeneralCounsel',
    ...config,
  } as UseContractEventConfig<
    typeof shareholdersAgreementABI,
    'SetGeneralCounsel'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link shareholdersAgreementABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useShareholdersAgreementSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof shareholdersAgreementABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: shareholdersAgreementABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof shareholdersAgreementABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link bookOfOptionsABI}__.
 */
export function useBookOfOptions(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: bookOfOptionsABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfOptionsABI}__.
 */
export function useBookOfOptionsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof bookOfOptionsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfOptionsABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfOptionsABI,
    ...config,
  } as UseContractReadConfig<
    typeof bookOfOptionsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"counterOfBriefs"`.
 */
export function useBookOfOptionsCounterOfBriefs<
  TSelectData = ReadContractResult<typeof bookOfOptionsABI, 'counterOfBriefs'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bookOfOptionsABI,
      'counterOfBriefs',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfOptionsABI,
    functionName: 'counterOfBriefs',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfOptionsABI,
    'counterOfBriefs',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"counterOfOptions"`.
 */
export function useBookOfOptionsCounterOfOptions<
  TSelectData = ReadContractResult<typeof bookOfOptionsABI, 'counterOfOptions'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bookOfOptionsABI,
      'counterOfOptions',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfOptionsABI,
    functionName: 'counterOfOptions',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfOptionsABI,
    'counterOfOptions',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"createSwapOrder"`.
 */
export function useBookOfOptionsCreateSwapOrder<
  TSelectData = ReadContractResult<typeof bookOfOptionsABI, 'createSwapOrder'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bookOfOptionsABI,
      'createSwapOrder',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfOptionsABI,
    functionName: 'createSwapOrder',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfOptionsABI,
    'createSwapOrder',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"finalized"`.
 */
export function useBookOfOptionsFinalized<
  TSelectData = ReadContractResult<typeof bookOfOptionsABI, 'finalized'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfOptionsABI, 'finalized', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfOptionsABI,
    functionName: 'finalized',
    ...config,
  } as UseContractReadConfig<typeof bookOfOptionsABI, 'finalized', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"getALLOraclesOfOption"`.
 */
export function useBookOfOptionsGetAllOraclesOfOption<
  TSelectData = ReadContractResult<
    typeof bookOfOptionsABI,
    'getALLOraclesOfOption'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bookOfOptionsABI,
      'getALLOraclesOfOption',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfOptionsABI,
    functionName: 'getALLOraclesOfOption',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfOptionsABI,
    'getALLOraclesOfOption',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"getAllBriefsOfOption"`.
 */
export function useBookOfOptionsGetAllBriefsOfOption<
  TSelectData = ReadContractResult<
    typeof bookOfOptionsABI,
    'getAllBriefsOfOption'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bookOfOptionsABI,
      'getAllBriefsOfOption',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfOptionsABI,
    functionName: 'getAllBriefsOfOption',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfOptionsABI,
    'getAllBriefsOfOption',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"getAllOptions"`.
 */
export function useBookOfOptionsGetAllOptions<
  TSelectData = ReadContractResult<typeof bookOfOptionsABI, 'getAllOptions'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bookOfOptionsABI,
      'getAllOptions',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfOptionsABI,
    functionName: 'getAllOptions',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfOptionsABI,
    'getAllOptions',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"getBookeeper"`.
 */
export function useBookOfOptionsGetBookeeper<
  TSelectData = ReadContractResult<typeof bookOfOptionsABI, 'getBookeeper'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfOptionsABI, 'getBookeeper', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfOptionsABI,
    functionName: 'getBookeeper',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfOptionsABI,
    'getBookeeper',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"getBrief"`.
 */
export function useBookOfOptionsGetBrief<
  TSelectData = ReadContractResult<typeof bookOfOptionsABI, 'getBrief'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfOptionsABI, 'getBrief', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfOptionsABI,
    functionName: 'getBrief',
    ...config,
  } as UseContractReadConfig<typeof bookOfOptionsABI, 'getBrief', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"getGeneralCounsel"`.
 */
export function useBookOfOptionsGetGeneralCounsel<
  TSelectData = ReadContractResult<
    typeof bookOfOptionsABI,
    'getGeneralCounsel'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bookOfOptionsABI,
      'getGeneralCounsel',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfOptionsABI,
    functionName: 'getGeneralCounsel',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfOptionsABI,
    'getGeneralCounsel',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"getObligorsOfOption"`.
 */
export function useBookOfOptionsGetObligorsOfOption<
  TSelectData = ReadContractResult<
    typeof bookOfOptionsABI,
    'getObligorsOfOption'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bookOfOptionsABI,
      'getObligorsOfOption',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfOptionsABI,
    functionName: 'getObligorsOfOption',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfOptionsABI,
    'getObligorsOfOption',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"getOption"`.
 */
export function useBookOfOptionsGetOption<
  TSelectData = ReadContractResult<typeof bookOfOptionsABI, 'getOption'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfOptionsABI, 'getOption', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfOptionsABI,
    functionName: 'getOption',
    ...config,
  } as UseContractReadConfig<typeof bookOfOptionsABI, 'getOption', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"getOracleAtDate"`.
 */
export function useBookOfOptionsGetOracleAtDate<
  TSelectData = ReadContractResult<typeof bookOfOptionsABI, 'getOracleAtDate'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bookOfOptionsABI,
      'getOracleAtDate',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfOptionsABI,
    functionName: 'getOracleAtDate',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfOptionsABI,
    'getOracleAtDate',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"getOwner"`.
 */
export function useBookOfOptionsGetOwner<
  TSelectData = ReadContractResult<typeof bookOfOptionsABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfOptionsABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfOptionsABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<typeof bookOfOptionsABI, 'getOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"hasRole"`.
 */
export function useBookOfOptionsHasRole<
  TSelectData = ReadContractResult<typeof bookOfOptionsABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfOptionsABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfOptionsABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof bookOfOptionsABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"isObligor"`.
 */
export function useBookOfOptionsIsObligor<
  TSelectData = ReadContractResult<typeof bookOfOptionsABI, 'isObligor'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfOptionsABI, 'isObligor', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfOptionsABI,
    functionName: 'isObligor',
    ...config,
  } as UseContractReadConfig<typeof bookOfOptionsABI, 'isObligor', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"isOption"`.
 */
export function useBookOfOptionsIsOption<
  TSelectData = ReadContractResult<typeof bookOfOptionsABI, 'isOption'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfOptionsABI, 'isOption', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfOptionsABI,
    functionName: 'isOption',
    ...config,
  } as UseContractReadConfig<typeof bookOfOptionsABI, 'isOption', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"isRightholder"`.
 */
export function useBookOfOptionsIsRightholder<
  TSelectData = ReadContractResult<typeof bookOfOptionsABI, 'isRightholder'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bookOfOptionsABI,
      'isRightholder',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfOptionsABI,
    functionName: 'isRightholder',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfOptionsABI,
    'isRightholder',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfOptionsABI}__.
 */
export function useBookOfOptionsWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfOptionsABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof bookOfOptionsABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfOptionsABI, TFunctionName>({
    abi: bookOfOptionsABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useBookOfOptionsAbandonRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfOptionsABI,
          'abandonRole'
        >['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<TMode, typeof bookOfOptionsABI, 'abandonRole'> & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfOptionsABI, 'abandonRole'>({
    abi: bookOfOptionsABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"addObligorIntoOption"`.
 */
export function useBookOfOptionsAddObligorIntoOption<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfOptionsABI,
          'addObligorIntoOption'
        >['abi'],
        'addObligorIntoOption'
      > & { functionName?: 'addObligorIntoOption' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfOptionsABI,
        'addObligorIntoOption'
      > & {
        abi?: never
        functionName?: 'addObligorIntoOption'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof bookOfOptionsABI,
    'addObligorIntoOption'
  >({
    abi: bookOfOptionsABI,
    functionName: 'addObligorIntoOption',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"createOption"`.
 */
export function useBookOfOptionsCreateOption<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfOptionsABI,
          'createOption'
        >['abi'],
        'createOption'
      > & { functionName?: 'createOption' }
    : UseContractWriteConfig<TMode, typeof bookOfOptionsABI, 'createOption'> & {
        abi?: never
        functionName?: 'createOption'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfOptionsABI, 'createOption'>({
    abi: bookOfOptionsABI,
    functionName: 'createOption',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"execOption"`.
 */
export function useBookOfOptionsExecOption<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfOptionsABI,
          'execOption'
        >['abi'],
        'execOption'
      > & { functionName?: 'execOption' }
    : UseContractWriteConfig<TMode, typeof bookOfOptionsABI, 'execOption'> & {
        abi?: never
        functionName?: 'execOption'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfOptionsABI, 'execOption'>({
    abi: bookOfOptionsABI,
    functionName: 'execOption',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"grantRole"`.
 */
export function useBookOfOptionsGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfOptionsABI, 'grantRole'>['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof bookOfOptionsABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfOptionsABI, 'grantRole'>({
    abi: bookOfOptionsABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"init"`.
 */
export function useBookOfOptionsInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfOptionsABI, 'init'>['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof bookOfOptionsABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfOptionsABI, 'init'>({
    abi: bookOfOptionsABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"issueOption"`.
 */
export function useBookOfOptionsIssueOption<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfOptionsABI,
          'issueOption'
        >['abi'],
        'issueOption'
      > & { functionName?: 'issueOption' }
    : UseContractWriteConfig<TMode, typeof bookOfOptionsABI, 'issueOption'> & {
        abi?: never
        functionName?: 'issueOption'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfOptionsABI, 'issueOption'>({
    abi: bookOfOptionsABI,
    functionName: 'issueOption',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"lockContents"`.
 */
export function useBookOfOptionsLockContents<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfOptionsABI,
          'lockContents'
        >['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<TMode, typeof bookOfOptionsABI, 'lockContents'> & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfOptionsABI, 'lockContents'>({
    abi: bookOfOptionsABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"regOptionTerms"`.
 */
export function useBookOfOptionsRegOptionTerms<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfOptionsABI,
          'regOptionTerms'
        >['abi'],
        'regOptionTerms'
      > & { functionName?: 'regOptionTerms' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfOptionsABI,
        'regOptionTerms'
      > & {
        abi?: never
        functionName?: 'regOptionTerms'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfOptionsABI, 'regOptionTerms'>({
    abi: bookOfOptionsABI,
    functionName: 'regOptionTerms',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"regSwapOrder"`.
 */
export function useBookOfOptionsRegSwapOrder<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfOptionsABI,
          'regSwapOrder'
        >['abi'],
        'regSwapOrder'
      > & { functionName?: 'regSwapOrder' }
    : UseContractWriteConfig<TMode, typeof bookOfOptionsABI, 'regSwapOrder'> & {
        abi?: never
        functionName?: 'regSwapOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfOptionsABI, 'regSwapOrder'>({
    abi: bookOfOptionsABI,
    functionName: 'regSwapOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function useBookOfOptionsRemoveDirectKeeper<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfOptionsABI,
          'removeDirectKeeper'
        >['abi'],
        'removeDirectKeeper'
      > & { functionName?: 'removeDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfOptionsABI,
        'removeDirectKeeper'
      > & {
        abi?: never
        functionName?: 'removeDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfOptionsABI, 'removeDirectKeeper'>(
    {
      abi: bookOfOptionsABI,
      functionName: 'removeDirectKeeper',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"removeObligorFromOption"`.
 */
export function useBookOfOptionsRemoveObligorFromOption<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfOptionsABI,
          'removeObligorFromOption'
        >['abi'],
        'removeObligorFromOption'
      > & { functionName?: 'removeObligorFromOption' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfOptionsABI,
        'removeObligorFromOption'
      > & {
        abi?: never
        functionName?: 'removeObligorFromOption'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof bookOfOptionsABI,
    'removeObligorFromOption'
  >({
    abi: bookOfOptionsABI,
    functionName: 'removeObligorFromOption',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useBookOfOptionsRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfOptionsABI,
          'renounceRole'
        >['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<TMode, typeof bookOfOptionsABI, 'renounceRole'> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfOptionsABI, 'renounceRole'>({
    abi: bookOfOptionsABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useBookOfOptionsRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfOptionsABI,
          'revokeRole'
        >['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof bookOfOptionsABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfOptionsABI, 'revokeRole'>({
    abi: bookOfOptionsABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useBookOfOptionsSetDirectKeeper<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfOptionsABI,
          'setDirectKeeper'
        >['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfOptionsABI,
        'setDirectKeeper'
      > & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfOptionsABI, 'setDirectKeeper'>({
    abi: bookOfOptionsABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function useBookOfOptionsSetGeneralCounsel<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfOptionsABI,
          'setGeneralCounsel'
        >['abi'],
        'setGeneralCounsel'
      > & { functionName?: 'setGeneralCounsel' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfOptionsABI,
        'setGeneralCounsel'
      > & {
        abi?: never
        functionName?: 'setGeneralCounsel'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfOptionsABI, 'setGeneralCounsel'>({
    abi: bookOfOptionsABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"setOwner"`.
 */
export function useBookOfOptionsSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfOptionsABI, 'setOwner'>['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof bookOfOptionsABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfOptionsABI, 'setOwner'>({
    abi: bookOfOptionsABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useBookOfOptionsSetRoleAdmin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfOptionsABI,
          'setRoleAdmin'
        >['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<TMode, typeof bookOfOptionsABI, 'setRoleAdmin'> & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfOptionsABI, 'setRoleAdmin'>({
    abi: bookOfOptionsABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"updateOracle"`.
 */
export function useBookOfOptionsUpdateOracle<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfOptionsABI,
          'updateOracle'
        >['abi'],
        'updateOracle'
      > & { functionName?: 'updateOracle' }
    : UseContractWriteConfig<TMode, typeof bookOfOptionsABI, 'updateOracle'> & {
        abi?: never
        functionName?: 'updateOracle'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfOptionsABI, 'updateOracle'>({
    abi: bookOfOptionsABI,
    functionName: 'updateOracle',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"updateStateOfBrief"`.
 */
export function useBookOfOptionsUpdateStateOfBrief<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfOptionsABI,
          'updateStateOfBrief'
        >['abi'],
        'updateStateOfBrief'
      > & { functionName?: 'updateStateOfBrief' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfOptionsABI,
        'updateStateOfBrief'
      > & {
        abi?: never
        functionName?: 'updateStateOfBrief'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfOptionsABI, 'updateStateOfBrief'>(
    {
      abi: bookOfOptionsABI,
      functionName: 'updateStateOfBrief',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfOptionsABI}__.
 */
export function usePrepareBookOfOptionsWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfOptionsABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfOptionsABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfOptionsABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareBookOfOptionsAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfOptionsABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfOptionsABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfOptionsABI, 'abandonRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"addObligorIntoOption"`.
 */
export function usePrepareBookOfOptionsAddObligorIntoOption(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof bookOfOptionsABI,
      'addObligorIntoOption'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfOptionsABI,
    functionName: 'addObligorIntoOption',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bookOfOptionsABI,
    'addObligorIntoOption'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"createOption"`.
 */
export function usePrepareBookOfOptionsCreateOption(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfOptionsABI, 'createOption'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfOptionsABI,
    functionName: 'createOption',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfOptionsABI, 'createOption'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"execOption"`.
 */
export function usePrepareBookOfOptionsExecOption(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfOptionsABI, 'execOption'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfOptionsABI,
    functionName: 'execOption',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfOptionsABI, 'execOption'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareBookOfOptionsGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfOptionsABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfOptionsABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfOptionsABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareBookOfOptionsInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfOptionsABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfOptionsABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfOptionsABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"issueOption"`.
 */
export function usePrepareBookOfOptionsIssueOption(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfOptionsABI, 'issueOption'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfOptionsABI,
    functionName: 'issueOption',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfOptionsABI, 'issueOption'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareBookOfOptionsLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfOptionsABI, 'lockContents'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfOptionsABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfOptionsABI, 'lockContents'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"regOptionTerms"`.
 */
export function usePrepareBookOfOptionsRegOptionTerms(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfOptionsABI, 'regOptionTerms'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfOptionsABI,
    functionName: 'regOptionTerms',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfOptionsABI, 'regOptionTerms'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"regSwapOrder"`.
 */
export function usePrepareBookOfOptionsRegSwapOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfOptionsABI, 'regSwapOrder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfOptionsABI,
    functionName: 'regSwapOrder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfOptionsABI, 'regSwapOrder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function usePrepareBookOfOptionsRemoveDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof bookOfOptionsABI,
      'removeDirectKeeper'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfOptionsABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bookOfOptionsABI,
    'removeDirectKeeper'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"removeObligorFromOption"`.
 */
export function usePrepareBookOfOptionsRemoveObligorFromOption(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof bookOfOptionsABI,
      'removeObligorFromOption'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfOptionsABI,
    functionName: 'removeObligorFromOption',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bookOfOptionsABI,
    'removeObligorFromOption'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareBookOfOptionsRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfOptionsABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfOptionsABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfOptionsABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareBookOfOptionsRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfOptionsABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfOptionsABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfOptionsABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareBookOfOptionsSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfOptionsABI, 'setDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfOptionsABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bookOfOptionsABI,
    'setDirectKeeper'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function usePrepareBookOfOptionsSetGeneralCounsel(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfOptionsABI, 'setGeneralCounsel'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfOptionsABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bookOfOptionsABI,
    'setGeneralCounsel'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareBookOfOptionsSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfOptionsABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfOptionsABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfOptionsABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareBookOfOptionsSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfOptionsABI, 'setRoleAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfOptionsABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfOptionsABI, 'setRoleAdmin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"updateOracle"`.
 */
export function usePrepareBookOfOptionsUpdateOracle(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfOptionsABI, 'updateOracle'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfOptionsABI,
    functionName: 'updateOracle',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfOptionsABI, 'updateOracle'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfOptionsABI}__ and `functionName` set to `"updateStateOfBrief"`.
 */
export function usePrepareBookOfOptionsUpdateStateOfBrief(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof bookOfOptionsABI,
      'updateStateOfBrief'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfOptionsABI,
    functionName: 'updateStateOfBrief',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bookOfOptionsABI,
    'updateStateOfBrief'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfOptionsABI}__.
 */
export function useBookOfOptionsEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof bookOfOptionsABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfOptionsABI,
    ...config,
  } as UseContractEventConfig<typeof bookOfOptionsABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfOptionsABI}__ and `eventName` set to `"AddObligorIntoOpt"`.
 */
export function useBookOfOptionsAddObligorIntoOptEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfOptionsABI, 'AddObligorIntoOpt'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfOptionsABI,
    eventName: 'AddObligorIntoOpt',
    ...config,
  } as UseContractEventConfig<typeof bookOfOptionsABI, 'AddObligorIntoOpt'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfOptionsABI}__ and `eventName` set to `"CreateOpt"`.
 */
export function useBookOfOptionsCreateOptEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfOptionsABI, 'CreateOpt'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfOptionsABI,
    eventName: 'CreateOpt',
    ...config,
  } as UseContractEventConfig<typeof bookOfOptionsABI, 'CreateOpt'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfOptionsABI}__ and `eventName` set to `"ExecOpt"`.
 */
export function useBookOfOptionsExecOptEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfOptionsABI, 'ExecOpt'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfOptionsABI,
    eventName: 'ExecOpt',
    ...config,
  } as UseContractEventConfig<typeof bookOfOptionsABI, 'ExecOpt'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfOptionsABI}__ and `eventName` set to `"Init"`.
 */
export function useBookOfOptionsInitEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfOptionsABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfOptionsABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof bookOfOptionsABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfOptionsABI}__ and `eventName` set to `"LockContents"`.
 */
export function useBookOfOptionsLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfOptionsABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfOptionsABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof bookOfOptionsABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfOptionsABI}__ and `eventName` set to `"RegSwapOrder"`.
 */
export function useBookOfOptionsRegSwapOrderEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfOptionsABI, 'RegSwapOrder'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfOptionsABI,
    eventName: 'RegSwapOrder',
    ...config,
  } as UseContractEventConfig<typeof bookOfOptionsABI, 'RegSwapOrder'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfOptionsABI}__ and `eventName` set to `"RemoveDirectKeeper"`.
 */
export function useBookOfOptionsRemoveDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfOptionsABI, 'RemoveDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfOptionsABI,
    eventName: 'RemoveDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof bookOfOptionsABI, 'RemoveDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfOptionsABI}__ and `eventName` set to `"RemoveObligorFromOpt"`.
 */
export function useBookOfOptionsRemoveObligorFromOptEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfOptionsABI, 'RemoveObligorFromOpt'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfOptionsABI,
    eventName: 'RemoveObligorFromOpt',
    ...config,
  } as UseContractEventConfig<typeof bookOfOptionsABI, 'RemoveObligorFromOpt'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfOptionsABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useBookOfOptionsSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfOptionsABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfOptionsABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof bookOfOptionsABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfOptionsABI}__ and `eventName` set to `"SetGeneralCounsel"`.
 */
export function useBookOfOptionsSetGeneralCounselEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfOptionsABI, 'SetGeneralCounsel'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfOptionsABI,
    eventName: 'SetGeneralCounsel',
    ...config,
  } as UseContractEventConfig<typeof bookOfOptionsABI, 'SetGeneralCounsel'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfOptionsABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useBookOfOptionsSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfOptionsABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfOptionsABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof bookOfOptionsABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfOptionsABI}__ and `eventName` set to `"UpdateOracle"`.
 */
export function useBookOfOptionsUpdateOracleEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfOptionsABI, 'UpdateOracle'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfOptionsABI,
    eventName: 'UpdateOracle',
    ...config,
  } as UseContractEventConfig<typeof bookOfOptionsABI, 'UpdateOracle'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfOptionsABI}__ and `eventName` set to `"UpdateStateOfBrief"`.
 */
export function useBookOfOptionsUpdateStateOfBriefEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfOptionsABI, 'UpdateStateOfBrief'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfOptionsABI,
    eventName: 'UpdateStateOfBrief',
    ...config,
  } as UseContractEventConfig<typeof bookOfOptionsABI, 'UpdateStateOfBrief'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iBookOfOptionsABI}__.
 */
export function useIBookOfOptions(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iBookOfOptionsABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfOptionsABI}__.
 */
export function useIBookOfOptionsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iBookOfOptionsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfOptionsABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfOptionsABI,
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfOptionsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfOptionsABI}__ and `functionName` set to `"counterOfBriefs"`.
 */
export function useIBookOfOptionsCounterOfBriefs<
  TSelectData = ReadContractResult<typeof iBookOfOptionsABI, 'counterOfBriefs'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfOptionsABI,
      'counterOfBriefs',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfOptionsABI,
    functionName: 'counterOfBriefs',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfOptionsABI,
    'counterOfBriefs',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfOptionsABI}__ and `functionName` set to `"counterOfOptions"`.
 */
export function useIBookOfOptionsCounterOfOptions<
  TSelectData = ReadContractResult<
    typeof iBookOfOptionsABI,
    'counterOfOptions'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfOptionsABI,
      'counterOfOptions',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfOptionsABI,
    functionName: 'counterOfOptions',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfOptionsABI,
    'counterOfOptions',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfOptionsABI}__ and `functionName` set to `"createSwapOrder"`.
 */
export function useIBookOfOptionsCreateSwapOrder<
  TSelectData = ReadContractResult<typeof iBookOfOptionsABI, 'createSwapOrder'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfOptionsABI,
      'createSwapOrder',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfOptionsABI,
    functionName: 'createSwapOrder',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfOptionsABI,
    'createSwapOrder',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfOptionsABI}__ and `functionName` set to `"getALLOraclesOfOption"`.
 */
export function useIBookOfOptionsGetAllOraclesOfOption<
  TSelectData = ReadContractResult<
    typeof iBookOfOptionsABI,
    'getALLOraclesOfOption'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfOptionsABI,
      'getALLOraclesOfOption',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfOptionsABI,
    functionName: 'getALLOraclesOfOption',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfOptionsABI,
    'getALLOraclesOfOption',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfOptionsABI}__ and `functionName` set to `"getAllBriefsOfOption"`.
 */
export function useIBookOfOptionsGetAllBriefsOfOption<
  TSelectData = ReadContractResult<
    typeof iBookOfOptionsABI,
    'getAllBriefsOfOption'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfOptionsABI,
      'getAllBriefsOfOption',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfOptionsABI,
    functionName: 'getAllBriefsOfOption',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfOptionsABI,
    'getAllBriefsOfOption',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfOptionsABI}__ and `functionName` set to `"getAllOptions"`.
 */
export function useIBookOfOptionsGetAllOptions<
  TSelectData = ReadContractResult<typeof iBookOfOptionsABI, 'getAllOptions'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfOptionsABI,
      'getAllOptions',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfOptionsABI,
    functionName: 'getAllOptions',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfOptionsABI,
    'getAllOptions',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfOptionsABI}__ and `functionName` set to `"getBrief"`.
 */
export function useIBookOfOptionsGetBrief<
  TSelectData = ReadContractResult<typeof iBookOfOptionsABI, 'getBrief'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfOptionsABI, 'getBrief', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfOptionsABI,
    functionName: 'getBrief',
    ...config,
  } as UseContractReadConfig<typeof iBookOfOptionsABI, 'getBrief', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfOptionsABI}__ and `functionName` set to `"getObligorsOfOption"`.
 */
export function useIBookOfOptionsGetObligorsOfOption<
  TSelectData = ReadContractResult<
    typeof iBookOfOptionsABI,
    'getObligorsOfOption'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfOptionsABI,
      'getObligorsOfOption',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfOptionsABI,
    functionName: 'getObligorsOfOption',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfOptionsABI,
    'getObligorsOfOption',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfOptionsABI}__ and `functionName` set to `"getOption"`.
 */
export function useIBookOfOptionsGetOption<
  TSelectData = ReadContractResult<typeof iBookOfOptionsABI, 'getOption'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfOptionsABI, 'getOption', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfOptionsABI,
    functionName: 'getOption',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfOptionsABI,
    'getOption',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfOptionsABI}__ and `functionName` set to `"getOracleAtDate"`.
 */
export function useIBookOfOptionsGetOracleAtDate<
  TSelectData = ReadContractResult<typeof iBookOfOptionsABI, 'getOracleAtDate'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfOptionsABI,
      'getOracleAtDate',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfOptionsABI,
    functionName: 'getOracleAtDate',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfOptionsABI,
    'getOracleAtDate',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfOptionsABI}__ and `functionName` set to `"isObligor"`.
 */
export function useIBookOfOptionsIsObligor<
  TSelectData = ReadContractResult<typeof iBookOfOptionsABI, 'isObligor'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfOptionsABI, 'isObligor', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfOptionsABI,
    functionName: 'isObligor',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfOptionsABI,
    'isObligor',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfOptionsABI}__ and `functionName` set to `"isOption"`.
 */
export function useIBookOfOptionsIsOption<
  TSelectData = ReadContractResult<typeof iBookOfOptionsABI, 'isOption'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfOptionsABI, 'isOption', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfOptionsABI,
    functionName: 'isOption',
    ...config,
  } as UseContractReadConfig<typeof iBookOfOptionsABI, 'isOption', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfOptionsABI}__ and `functionName` set to `"isRightholder"`.
 */
export function useIBookOfOptionsIsRightholder<
  TSelectData = ReadContractResult<typeof iBookOfOptionsABI, 'isRightholder'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfOptionsABI,
      'isRightholder',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfOptionsABI,
    functionName: 'isRightholder',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfOptionsABI,
    'isRightholder',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfOptionsABI}__.
 */
export function useIBookOfOptionsWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iBookOfOptionsABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iBookOfOptionsABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfOptionsABI, TFunctionName>({
    abi: iBookOfOptionsABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfOptionsABI}__ and `functionName` set to `"addObligorIntoOption"`.
 */
export function useIBookOfOptionsAddObligorIntoOption<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfOptionsABI,
          'addObligorIntoOption'
        >['abi'],
        'addObligorIntoOption'
      > & { functionName?: 'addObligorIntoOption' }
    : UseContractWriteConfig<
        TMode,
        typeof iBookOfOptionsABI,
        'addObligorIntoOption'
      > & {
        abi?: never
        functionName?: 'addObligorIntoOption'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iBookOfOptionsABI,
    'addObligorIntoOption'
  >({
    abi: iBookOfOptionsABI,
    functionName: 'addObligorIntoOption',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfOptionsABI}__ and `functionName` set to `"createOption"`.
 */
export function useIBookOfOptionsCreateOption<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfOptionsABI,
          'createOption'
        >['abi'],
        'createOption'
      > & { functionName?: 'createOption' }
    : UseContractWriteConfig<
        TMode,
        typeof iBookOfOptionsABI,
        'createOption'
      > & {
        abi?: never
        functionName?: 'createOption'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfOptionsABI, 'createOption'>({
    abi: iBookOfOptionsABI,
    functionName: 'createOption',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfOptionsABI}__ and `functionName` set to `"execOption"`.
 */
export function useIBookOfOptionsExecOption<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfOptionsABI,
          'execOption'
        >['abi'],
        'execOption'
      > & { functionName?: 'execOption' }
    : UseContractWriteConfig<TMode, typeof iBookOfOptionsABI, 'execOption'> & {
        abi?: never
        functionName?: 'execOption'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfOptionsABI, 'execOption'>({
    abi: iBookOfOptionsABI,
    functionName: 'execOption',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfOptionsABI}__ and `functionName` set to `"issueOption"`.
 */
export function useIBookOfOptionsIssueOption<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfOptionsABI,
          'issueOption'
        >['abi'],
        'issueOption'
      > & { functionName?: 'issueOption' }
    : UseContractWriteConfig<TMode, typeof iBookOfOptionsABI, 'issueOption'> & {
        abi?: never
        functionName?: 'issueOption'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfOptionsABI, 'issueOption'>({
    abi: iBookOfOptionsABI,
    functionName: 'issueOption',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfOptionsABI}__ and `functionName` set to `"regOptionTerms"`.
 */
export function useIBookOfOptionsRegOptionTerms<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfOptionsABI,
          'regOptionTerms'
        >['abi'],
        'regOptionTerms'
      > & { functionName?: 'regOptionTerms' }
    : UseContractWriteConfig<
        TMode,
        typeof iBookOfOptionsABI,
        'regOptionTerms'
      > & {
        abi?: never
        functionName?: 'regOptionTerms'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfOptionsABI, 'regOptionTerms'>({
    abi: iBookOfOptionsABI,
    functionName: 'regOptionTerms',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfOptionsABI}__ and `functionName` set to `"regSwapOrder"`.
 */
export function useIBookOfOptionsRegSwapOrder<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfOptionsABI,
          'regSwapOrder'
        >['abi'],
        'regSwapOrder'
      > & { functionName?: 'regSwapOrder' }
    : UseContractWriteConfig<
        TMode,
        typeof iBookOfOptionsABI,
        'regSwapOrder'
      > & {
        abi?: never
        functionName?: 'regSwapOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfOptionsABI, 'regSwapOrder'>({
    abi: iBookOfOptionsABI,
    functionName: 'regSwapOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfOptionsABI}__ and `functionName` set to `"removeObligorFromOption"`.
 */
export function useIBookOfOptionsRemoveObligorFromOption<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfOptionsABI,
          'removeObligorFromOption'
        >['abi'],
        'removeObligorFromOption'
      > & { functionName?: 'removeObligorFromOption' }
    : UseContractWriteConfig<
        TMode,
        typeof iBookOfOptionsABI,
        'removeObligorFromOption'
      > & {
        abi?: never
        functionName?: 'removeObligorFromOption'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iBookOfOptionsABI,
    'removeObligorFromOption'
  >({
    abi: iBookOfOptionsABI,
    functionName: 'removeObligorFromOption',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfOptionsABI}__ and `functionName` set to `"updateOracle"`.
 */
export function useIBookOfOptionsUpdateOracle<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfOptionsABI,
          'updateOracle'
        >['abi'],
        'updateOracle'
      > & { functionName?: 'updateOracle' }
    : UseContractWriteConfig<
        TMode,
        typeof iBookOfOptionsABI,
        'updateOracle'
      > & {
        abi?: never
        functionName?: 'updateOracle'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfOptionsABI, 'updateOracle'>({
    abi: iBookOfOptionsABI,
    functionName: 'updateOracle',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfOptionsABI}__ and `functionName` set to `"updateStateOfBrief"`.
 */
export function useIBookOfOptionsUpdateStateOfBrief<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfOptionsABI,
          'updateStateOfBrief'
        >['abi'],
        'updateStateOfBrief'
      > & { functionName?: 'updateStateOfBrief' }
    : UseContractWriteConfig<
        TMode,
        typeof iBookOfOptionsABI,
        'updateStateOfBrief'
      > & {
        abi?: never
        functionName?: 'updateStateOfBrief'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iBookOfOptionsABI,
    'updateStateOfBrief'
  >({
    abi: iBookOfOptionsABI,
    functionName: 'updateStateOfBrief',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfOptionsABI}__.
 */
export function usePrepareIBookOfOptionsWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfOptionsABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfOptionsABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfOptionsABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfOptionsABI}__ and `functionName` set to `"addObligorIntoOption"`.
 */
export function usePrepareIBookOfOptionsAddObligorIntoOption(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iBookOfOptionsABI,
      'addObligorIntoOption'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfOptionsABI,
    functionName: 'addObligorIntoOption',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iBookOfOptionsABI,
    'addObligorIntoOption'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfOptionsABI}__ and `functionName` set to `"createOption"`.
 */
export function usePrepareIBookOfOptionsCreateOption(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfOptionsABI, 'createOption'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfOptionsABI,
    functionName: 'createOption',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfOptionsABI, 'createOption'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfOptionsABI}__ and `functionName` set to `"execOption"`.
 */
export function usePrepareIBookOfOptionsExecOption(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfOptionsABI, 'execOption'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfOptionsABI,
    functionName: 'execOption',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfOptionsABI, 'execOption'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfOptionsABI}__ and `functionName` set to `"issueOption"`.
 */
export function usePrepareIBookOfOptionsIssueOption(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfOptionsABI, 'issueOption'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfOptionsABI,
    functionName: 'issueOption',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfOptionsABI, 'issueOption'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfOptionsABI}__ and `functionName` set to `"regOptionTerms"`.
 */
export function usePrepareIBookOfOptionsRegOptionTerms(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfOptionsABI, 'regOptionTerms'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfOptionsABI,
    functionName: 'regOptionTerms',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iBookOfOptionsABI,
    'regOptionTerms'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfOptionsABI}__ and `functionName` set to `"regSwapOrder"`.
 */
export function usePrepareIBookOfOptionsRegSwapOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfOptionsABI, 'regSwapOrder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfOptionsABI,
    functionName: 'regSwapOrder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfOptionsABI, 'regSwapOrder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfOptionsABI}__ and `functionName` set to `"removeObligorFromOption"`.
 */
export function usePrepareIBookOfOptionsRemoveObligorFromOption(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iBookOfOptionsABI,
      'removeObligorFromOption'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfOptionsABI,
    functionName: 'removeObligorFromOption',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iBookOfOptionsABI,
    'removeObligorFromOption'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfOptionsABI}__ and `functionName` set to `"updateOracle"`.
 */
export function usePrepareIBookOfOptionsUpdateOracle(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfOptionsABI, 'updateOracle'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfOptionsABI,
    functionName: 'updateOracle',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfOptionsABI, 'updateOracle'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfOptionsABI}__ and `functionName` set to `"updateStateOfBrief"`.
 */
export function usePrepareIBookOfOptionsUpdateStateOfBrief(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iBookOfOptionsABI,
      'updateStateOfBrief'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfOptionsABI,
    functionName: 'updateStateOfBrief',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iBookOfOptionsABI,
    'updateStateOfBrief'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfOptionsABI}__.
 */
export function useIBookOfOptionsEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iBookOfOptionsABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfOptionsABI,
    ...config,
  } as UseContractEventConfig<typeof iBookOfOptionsABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfOptionsABI}__ and `eventName` set to `"AddObligorIntoOpt"`.
 */
export function useIBookOfOptionsAddObligorIntoOptEvent(
  config: Omit<
    UseContractEventConfig<typeof iBookOfOptionsABI, 'AddObligorIntoOpt'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfOptionsABI,
    eventName: 'AddObligorIntoOpt',
    ...config,
  } as UseContractEventConfig<typeof iBookOfOptionsABI, 'AddObligorIntoOpt'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfOptionsABI}__ and `eventName` set to `"CreateOpt"`.
 */
export function useIBookOfOptionsCreateOptEvent(
  config: Omit<
    UseContractEventConfig<typeof iBookOfOptionsABI, 'CreateOpt'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfOptionsABI,
    eventName: 'CreateOpt',
    ...config,
  } as UseContractEventConfig<typeof iBookOfOptionsABI, 'CreateOpt'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfOptionsABI}__ and `eventName` set to `"ExecOpt"`.
 */
export function useIBookOfOptionsExecOptEvent(
  config: Omit<
    UseContractEventConfig<typeof iBookOfOptionsABI, 'ExecOpt'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfOptionsABI,
    eventName: 'ExecOpt',
    ...config,
  } as UseContractEventConfig<typeof iBookOfOptionsABI, 'ExecOpt'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfOptionsABI}__ and `eventName` set to `"RegSwapOrder"`.
 */
export function useIBookOfOptionsRegSwapOrderEvent(
  config: Omit<
    UseContractEventConfig<typeof iBookOfOptionsABI, 'RegSwapOrder'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfOptionsABI,
    eventName: 'RegSwapOrder',
    ...config,
  } as UseContractEventConfig<typeof iBookOfOptionsABI, 'RegSwapOrder'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfOptionsABI}__ and `eventName` set to `"RemoveObligorFromOpt"`.
 */
export function useIBookOfOptionsRemoveObligorFromOptEvent(
  config: Omit<
    UseContractEventConfig<typeof iBookOfOptionsABI, 'RemoveObligorFromOpt'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfOptionsABI,
    eventName: 'RemoveObligorFromOpt',
    ...config,
  } as UseContractEventConfig<typeof iBookOfOptionsABI, 'RemoveObligorFromOpt'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfOptionsABI}__ and `eventName` set to `"UpdateOracle"`.
 */
export function useIBookOfOptionsUpdateOracleEvent(
  config: Omit<
    UseContractEventConfig<typeof iBookOfOptionsABI, 'UpdateOracle'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfOptionsABI,
    eventName: 'UpdateOracle',
    ...config,
  } as UseContractEventConfig<typeof iBookOfOptionsABI, 'UpdateOracle'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfOptionsABI}__ and `eventName` set to `"UpdateStateOfBrief"`.
 */
export function useIBookOfOptionsUpdateStateOfBriefEvent(
  config: Omit<
    UseContractEventConfig<typeof iBookOfOptionsABI, 'UpdateStateOfBrief'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfOptionsABI,
    eventName: 'UpdateStateOfBrief',
    ...config,
  } as UseContractEventConfig<typeof iBookOfOptionsABI, 'UpdateStateOfBrief'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link bookOfPledgesABI}__.
 */
export function useBookOfPledges(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: bookOfPledgesABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfPledgesABI}__.
 */
export function useBookOfPledgesRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof bookOfPledgesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfPledgesABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfPledgesABI,
    ...config,
  } as UseContractReadConfig<
    typeof bookOfPledgesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfPledgesABI}__ and `functionName` set to `"counterOfPledges"`.
 */
export function useBookOfPledgesCounterOfPledges<
  TSelectData = ReadContractResult<typeof bookOfPledgesABI, 'counterOfPledges'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bookOfPledgesABI,
      'counterOfPledges',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfPledgesABI,
    functionName: 'counterOfPledges',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfPledgesABI,
    'counterOfPledges',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfPledgesABI}__ and `functionName` set to `"finalized"`.
 */
export function useBookOfPledgesFinalized<
  TSelectData = ReadContractResult<typeof bookOfPledgesABI, 'finalized'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfPledgesABI, 'finalized', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfPledgesABI,
    functionName: 'finalized',
    ...config,
  } as UseContractReadConfig<typeof bookOfPledgesABI, 'finalized', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfPledgesABI}__ and `functionName` set to `"getBookeeper"`.
 */
export function useBookOfPledgesGetBookeeper<
  TSelectData = ReadContractResult<typeof bookOfPledgesABI, 'getBookeeper'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfPledgesABI, 'getBookeeper', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfPledgesABI,
    functionName: 'getBookeeper',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfPledgesABI,
    'getBookeeper',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfPledgesABI}__ and `functionName` set to `"getGeneralCounsel"`.
 */
export function useBookOfPledgesGetGeneralCounsel<
  TSelectData = ReadContractResult<
    typeof bookOfPledgesABI,
    'getGeneralCounsel'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bookOfPledgesABI,
      'getGeneralCounsel',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfPledgesABI,
    functionName: 'getGeneralCounsel',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfPledgesABI,
    'getGeneralCounsel',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfPledgesABI}__ and `functionName` set to `"getOwner"`.
 */
export function useBookOfPledgesGetOwner<
  TSelectData = ReadContractResult<typeof bookOfPledgesABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfPledgesABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfPledgesABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<typeof bookOfPledgesABI, 'getOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfPledgesABI}__ and `functionName` set to `"getPledge"`.
 */
export function useBookOfPledgesGetPledge<
  TSelectData = ReadContractResult<typeof bookOfPledgesABI, 'getPledge'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfPledgesABI, 'getPledge', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfPledgesABI,
    functionName: 'getPledge',
    ...config,
  } as UseContractReadConfig<typeof bookOfPledgesABI, 'getPledge', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfPledgesABI}__ and `functionName` set to `"getPledgesOfShare"`.
 */
export function useBookOfPledgesGetPledgesOfShare<
  TSelectData = ReadContractResult<
    typeof bookOfPledgesABI,
    'getPledgesOfShare'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bookOfPledgesABI,
      'getPledgesOfShare',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfPledgesABI,
    functionName: 'getPledgesOfShare',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfPledgesABI,
    'getPledgesOfShare',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfPledgesABI}__ and `functionName` set to `"getSNList"`.
 */
export function useBookOfPledgesGetSnList<
  TSelectData = ReadContractResult<typeof bookOfPledgesABI, 'getSNList'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfPledgesABI, 'getSNList', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfPledgesABI,
    functionName: 'getSNList',
    ...config,
  } as UseContractReadConfig<typeof bookOfPledgesABI, 'getSNList', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfPledgesABI}__ and `functionName` set to `"hasRole"`.
 */
export function useBookOfPledgesHasRole<
  TSelectData = ReadContractResult<typeof bookOfPledgesABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfPledgesABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfPledgesABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof bookOfPledgesABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfPledgesABI}__ and `functionName` set to `"isPledge"`.
 */
export function useBookOfPledgesIsPledge<
  TSelectData = ReadContractResult<typeof bookOfPledgesABI, 'isPledge'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfPledgesABI, 'isPledge', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfPledgesABI,
    functionName: 'isPledge',
    ...config,
  } as UseContractReadConfig<typeof bookOfPledgesABI, 'isPledge', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfPledgesABI}__.
 */
export function useBookOfPledgesWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfPledgesABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof bookOfPledgesABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfPledgesABI, TFunctionName>({
    abi: bookOfPledgesABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfPledgesABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useBookOfPledgesAbandonRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfPledgesABI,
          'abandonRole'
        >['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<TMode, typeof bookOfPledgesABI, 'abandonRole'> & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfPledgesABI, 'abandonRole'>({
    abi: bookOfPledgesABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfPledgesABI}__ and `functionName` set to `"createPledge"`.
 */
export function useBookOfPledgesCreatePledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfPledgesABI,
          'createPledge'
        >['abi'],
        'createPledge'
      > & { functionName?: 'createPledge' }
    : UseContractWriteConfig<TMode, typeof bookOfPledgesABI, 'createPledge'> & {
        abi?: never
        functionName?: 'createPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfPledgesABI, 'createPledge'>({
    abi: bookOfPledgesABI,
    functionName: 'createPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfPledgesABI}__ and `functionName` set to `"execPledge"`.
 */
export function useBookOfPledgesExecPledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfPledgesABI,
          'execPledge'
        >['abi'],
        'execPledge'
      > & { functionName?: 'execPledge' }
    : UseContractWriteConfig<TMode, typeof bookOfPledgesABI, 'execPledge'> & {
        abi?: never
        functionName?: 'execPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfPledgesABI, 'execPledge'>({
    abi: bookOfPledgesABI,
    functionName: 'execPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfPledgesABI}__ and `functionName` set to `"extendPledge"`.
 */
export function useBookOfPledgesExtendPledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfPledgesABI,
          'extendPledge'
        >['abi'],
        'extendPledge'
      > & { functionName?: 'extendPledge' }
    : UseContractWriteConfig<TMode, typeof bookOfPledgesABI, 'extendPledge'> & {
        abi?: never
        functionName?: 'extendPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfPledgesABI, 'extendPledge'>({
    abi: bookOfPledgesABI,
    functionName: 'extendPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfPledgesABI}__ and `functionName` set to `"grantRole"`.
 */
export function useBookOfPledgesGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfPledgesABI, 'grantRole'>['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof bookOfPledgesABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfPledgesABI, 'grantRole'>({
    abi: bookOfPledgesABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfPledgesABI}__ and `functionName` set to `"init"`.
 */
export function useBookOfPledgesInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfPledgesABI, 'init'>['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof bookOfPledgesABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfPledgesABI, 'init'>({
    abi: bookOfPledgesABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfPledgesABI}__ and `functionName` set to `"issuePledge"`.
 */
export function useBookOfPledgesIssuePledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfPledgesABI,
          'issuePledge'
        >['abi'],
        'issuePledge'
      > & { functionName?: 'issuePledge' }
    : UseContractWriteConfig<TMode, typeof bookOfPledgesABI, 'issuePledge'> & {
        abi?: never
        functionName?: 'issuePledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfPledgesABI, 'issuePledge'>({
    abi: bookOfPledgesABI,
    functionName: 'issuePledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfPledgesABI}__ and `functionName` set to `"lockContents"`.
 */
export function useBookOfPledgesLockContents<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfPledgesABI,
          'lockContents'
        >['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<TMode, typeof bookOfPledgesABI, 'lockContents'> & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfPledgesABI, 'lockContents'>({
    abi: bookOfPledgesABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfPledgesABI}__ and `functionName` set to `"lockPledge"`.
 */
export function useBookOfPledgesLockPledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfPledgesABI,
          'lockPledge'
        >['abi'],
        'lockPledge'
      > & { functionName?: 'lockPledge' }
    : UseContractWriteConfig<TMode, typeof bookOfPledgesABI, 'lockPledge'> & {
        abi?: never
        functionName?: 'lockPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfPledgesABI, 'lockPledge'>({
    abi: bookOfPledgesABI,
    functionName: 'lockPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfPledgesABI}__ and `functionName` set to `"refundDebt"`.
 */
export function useBookOfPledgesRefundDebt<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfPledgesABI,
          'refundDebt'
        >['abi'],
        'refundDebt'
      > & { functionName?: 'refundDebt' }
    : UseContractWriteConfig<TMode, typeof bookOfPledgesABI, 'refundDebt'> & {
        abi?: never
        functionName?: 'refundDebt'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfPledgesABI, 'refundDebt'>({
    abi: bookOfPledgesABI,
    functionName: 'refundDebt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfPledgesABI}__ and `functionName` set to `"regPledge"`.
 */
export function useBookOfPledgesRegPledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfPledgesABI, 'regPledge'>['abi'],
        'regPledge'
      > & { functionName?: 'regPledge' }
    : UseContractWriteConfig<TMode, typeof bookOfPledgesABI, 'regPledge'> & {
        abi?: never
        functionName?: 'regPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfPledgesABI, 'regPledge'>({
    abi: bookOfPledgesABI,
    functionName: 'regPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfPledgesABI}__ and `functionName` set to `"releasePledge"`.
 */
export function useBookOfPledgesReleasePledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfPledgesABI,
          'releasePledge'
        >['abi'],
        'releasePledge'
      > & { functionName?: 'releasePledge' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfPledgesABI,
        'releasePledge'
      > & {
        abi?: never
        functionName?: 'releasePledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfPledgesABI, 'releasePledge'>({
    abi: bookOfPledgesABI,
    functionName: 'releasePledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfPledgesABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function useBookOfPledgesRemoveDirectKeeper<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfPledgesABI,
          'removeDirectKeeper'
        >['abi'],
        'removeDirectKeeper'
      > & { functionName?: 'removeDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfPledgesABI,
        'removeDirectKeeper'
      > & {
        abi?: never
        functionName?: 'removeDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfPledgesABI, 'removeDirectKeeper'>(
    {
      abi: bookOfPledgesABI,
      functionName: 'removeDirectKeeper',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfPledgesABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useBookOfPledgesRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfPledgesABI,
          'renounceRole'
        >['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<TMode, typeof bookOfPledgesABI, 'renounceRole'> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfPledgesABI, 'renounceRole'>({
    abi: bookOfPledgesABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfPledgesABI}__ and `functionName` set to `"revokePledge"`.
 */
export function useBookOfPledgesRevokePledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfPledgesABI,
          'revokePledge'
        >['abi'],
        'revokePledge'
      > & { functionName?: 'revokePledge' }
    : UseContractWriteConfig<TMode, typeof bookOfPledgesABI, 'revokePledge'> & {
        abi?: never
        functionName?: 'revokePledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfPledgesABI, 'revokePledge'>({
    abi: bookOfPledgesABI,
    functionName: 'revokePledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfPledgesABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useBookOfPledgesRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfPledgesABI,
          'revokeRole'
        >['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof bookOfPledgesABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfPledgesABI, 'revokeRole'>({
    abi: bookOfPledgesABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfPledgesABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useBookOfPledgesSetDirectKeeper<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfPledgesABI,
          'setDirectKeeper'
        >['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfPledgesABI,
        'setDirectKeeper'
      > & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfPledgesABI, 'setDirectKeeper'>({
    abi: bookOfPledgesABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfPledgesABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function useBookOfPledgesSetGeneralCounsel<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfPledgesABI,
          'setGeneralCounsel'
        >['abi'],
        'setGeneralCounsel'
      > & { functionName?: 'setGeneralCounsel' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfPledgesABI,
        'setGeneralCounsel'
      > & {
        abi?: never
        functionName?: 'setGeneralCounsel'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfPledgesABI, 'setGeneralCounsel'>({
    abi: bookOfPledgesABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfPledgesABI}__ and `functionName` set to `"setOwner"`.
 */
export function useBookOfPledgesSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfPledgesABI, 'setOwner'>['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof bookOfPledgesABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfPledgesABI, 'setOwner'>({
    abi: bookOfPledgesABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfPledgesABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useBookOfPledgesSetRoleAdmin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfPledgesABI,
          'setRoleAdmin'
        >['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<TMode, typeof bookOfPledgesABI, 'setRoleAdmin'> & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfPledgesABI, 'setRoleAdmin'>({
    abi: bookOfPledgesABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfPledgesABI}__ and `functionName` set to `"transferPledge"`.
 */
export function useBookOfPledgesTransferPledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfPledgesABI,
          'transferPledge'
        >['abi'],
        'transferPledge'
      > & { functionName?: 'transferPledge' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfPledgesABI,
        'transferPledge'
      > & {
        abi?: never
        functionName?: 'transferPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfPledgesABI, 'transferPledge'>({
    abi: bookOfPledgesABI,
    functionName: 'transferPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfPledgesABI}__.
 */
export function usePrepareBookOfPledgesWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfPledgesABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfPledgesABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfPledgesABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfPledgesABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareBookOfPledgesAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfPledgesABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfPledgesABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfPledgesABI, 'abandonRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfPledgesABI}__ and `functionName` set to `"createPledge"`.
 */
export function usePrepareBookOfPledgesCreatePledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfPledgesABI, 'createPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfPledgesABI,
    functionName: 'createPledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfPledgesABI, 'createPledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfPledgesABI}__ and `functionName` set to `"execPledge"`.
 */
export function usePrepareBookOfPledgesExecPledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfPledgesABI, 'execPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfPledgesABI,
    functionName: 'execPledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfPledgesABI, 'execPledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfPledgesABI}__ and `functionName` set to `"extendPledge"`.
 */
export function usePrepareBookOfPledgesExtendPledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfPledgesABI, 'extendPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfPledgesABI,
    functionName: 'extendPledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfPledgesABI, 'extendPledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfPledgesABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareBookOfPledgesGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfPledgesABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfPledgesABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfPledgesABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfPledgesABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareBookOfPledgesInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfPledgesABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfPledgesABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfPledgesABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfPledgesABI}__ and `functionName` set to `"issuePledge"`.
 */
export function usePrepareBookOfPledgesIssuePledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfPledgesABI, 'issuePledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfPledgesABI,
    functionName: 'issuePledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfPledgesABI, 'issuePledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfPledgesABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareBookOfPledgesLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfPledgesABI, 'lockContents'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfPledgesABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfPledgesABI, 'lockContents'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfPledgesABI}__ and `functionName` set to `"lockPledge"`.
 */
export function usePrepareBookOfPledgesLockPledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfPledgesABI, 'lockPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfPledgesABI,
    functionName: 'lockPledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfPledgesABI, 'lockPledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfPledgesABI}__ and `functionName` set to `"refundDebt"`.
 */
export function usePrepareBookOfPledgesRefundDebt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfPledgesABI, 'refundDebt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfPledgesABI,
    functionName: 'refundDebt',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfPledgesABI, 'refundDebt'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfPledgesABI}__ and `functionName` set to `"regPledge"`.
 */
export function usePrepareBookOfPledgesRegPledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfPledgesABI, 'regPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfPledgesABI,
    functionName: 'regPledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfPledgesABI, 'regPledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfPledgesABI}__ and `functionName` set to `"releasePledge"`.
 */
export function usePrepareBookOfPledgesReleasePledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfPledgesABI, 'releasePledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfPledgesABI,
    functionName: 'releasePledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfPledgesABI, 'releasePledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfPledgesABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function usePrepareBookOfPledgesRemoveDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof bookOfPledgesABI,
      'removeDirectKeeper'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfPledgesABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bookOfPledgesABI,
    'removeDirectKeeper'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfPledgesABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareBookOfPledgesRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfPledgesABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfPledgesABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfPledgesABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfPledgesABI}__ and `functionName` set to `"revokePledge"`.
 */
export function usePrepareBookOfPledgesRevokePledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfPledgesABI, 'revokePledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfPledgesABI,
    functionName: 'revokePledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfPledgesABI, 'revokePledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfPledgesABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareBookOfPledgesRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfPledgesABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfPledgesABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfPledgesABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfPledgesABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareBookOfPledgesSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfPledgesABI, 'setDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfPledgesABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bookOfPledgesABI,
    'setDirectKeeper'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfPledgesABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function usePrepareBookOfPledgesSetGeneralCounsel(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfPledgesABI, 'setGeneralCounsel'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfPledgesABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bookOfPledgesABI,
    'setGeneralCounsel'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfPledgesABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareBookOfPledgesSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfPledgesABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfPledgesABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfPledgesABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfPledgesABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareBookOfPledgesSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfPledgesABI, 'setRoleAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfPledgesABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfPledgesABI, 'setRoleAdmin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfPledgesABI}__ and `functionName` set to `"transferPledge"`.
 */
export function usePrepareBookOfPledgesTransferPledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfPledgesABI, 'transferPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfPledgesABI,
    functionName: 'transferPledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfPledgesABI, 'transferPledge'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfPledgesABI}__.
 */
export function useBookOfPledgesEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof bookOfPledgesABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfPledgesABI,
    ...config,
  } as UseContractEventConfig<typeof bookOfPledgesABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfPledgesABI}__ and `eventName` set to `"CreatePledge"`.
 */
export function useBookOfPledgesCreatePledgeEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfPledgesABI, 'CreatePledge'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfPledgesABI,
    eventName: 'CreatePledge',
    ...config,
  } as UseContractEventConfig<typeof bookOfPledgesABI, 'CreatePledge'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfPledgesABI}__ and `eventName` set to `"ExecPledge"`.
 */
export function useBookOfPledgesExecPledgeEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfPledgesABI, 'ExecPledge'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfPledgesABI,
    eventName: 'ExecPledge',
    ...config,
  } as UseContractEventConfig<typeof bookOfPledgesABI, 'ExecPledge'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfPledgesABI}__ and `eventName` set to `"ExtendPledge"`.
 */
export function useBookOfPledgesExtendPledgeEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfPledgesABI, 'ExtendPledge'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfPledgesABI,
    eventName: 'ExtendPledge',
    ...config,
  } as UseContractEventConfig<typeof bookOfPledgesABI, 'ExtendPledge'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfPledgesABI}__ and `eventName` set to `"Init"`.
 */
export function useBookOfPledgesInitEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfPledgesABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfPledgesABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof bookOfPledgesABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfPledgesABI}__ and `eventName` set to `"LockContents"`.
 */
export function useBookOfPledgesLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfPledgesABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfPledgesABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof bookOfPledgesABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfPledgesABI}__ and `eventName` set to `"LockPledge"`.
 */
export function useBookOfPledgesLockPledgeEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfPledgesABI, 'LockPledge'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfPledgesABI,
    eventName: 'LockPledge',
    ...config,
  } as UseContractEventConfig<typeof bookOfPledgesABI, 'LockPledge'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfPledgesABI}__ and `eventName` set to `"RefundDebt"`.
 */
export function useBookOfPledgesRefundDebtEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfPledgesABI, 'RefundDebt'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfPledgesABI,
    eventName: 'RefundDebt',
    ...config,
  } as UseContractEventConfig<typeof bookOfPledgesABI, 'RefundDebt'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfPledgesABI}__ and `eventName` set to `"ReleasePledge"`.
 */
export function useBookOfPledgesReleasePledgeEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfPledgesABI, 'ReleasePledge'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfPledgesABI,
    eventName: 'ReleasePledge',
    ...config,
  } as UseContractEventConfig<typeof bookOfPledgesABI, 'ReleasePledge'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfPledgesABI}__ and `eventName` set to `"RemoveDirectKeeper"`.
 */
export function useBookOfPledgesRemoveDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfPledgesABI, 'RemoveDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfPledgesABI,
    eventName: 'RemoveDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof bookOfPledgesABI, 'RemoveDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfPledgesABI}__ and `eventName` set to `"RevokePledge"`.
 */
export function useBookOfPledgesRevokePledgeEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfPledgesABI, 'RevokePledge'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfPledgesABI,
    eventName: 'RevokePledge',
    ...config,
  } as UseContractEventConfig<typeof bookOfPledgesABI, 'RevokePledge'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfPledgesABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useBookOfPledgesSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfPledgesABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfPledgesABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof bookOfPledgesABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfPledgesABI}__ and `eventName` set to `"SetGeneralCounsel"`.
 */
export function useBookOfPledgesSetGeneralCounselEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfPledgesABI, 'SetGeneralCounsel'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfPledgesABI,
    eventName: 'SetGeneralCounsel',
    ...config,
  } as UseContractEventConfig<typeof bookOfPledgesABI, 'SetGeneralCounsel'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfPledgesABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useBookOfPledgesSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfPledgesABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfPledgesABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof bookOfPledgesABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfPledgesABI}__ and `eventName` set to `"TransferPledge"`.
 */
export function useBookOfPledgesTransferPledgeEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfPledgesABI, 'TransferPledge'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfPledgesABI,
    eventName: 'TransferPledge',
    ...config,
  } as UseContractEventConfig<typeof bookOfPledgesABI, 'TransferPledge'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iBookOfPledgesABI}__.
 */
export function useIBookOfPledges(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iBookOfPledgesABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfPledgesABI}__.
 */
export function useIBookOfPledgesRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iBookOfPledgesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfPledgesABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfPledgesABI,
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfPledgesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfPledgesABI}__ and `functionName` set to `"counterOfPledges"`.
 */
export function useIBookOfPledgesCounterOfPledges<
  TSelectData = ReadContractResult<
    typeof iBookOfPledgesABI,
    'counterOfPledges'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfPledgesABI,
      'counterOfPledges',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfPledgesABI,
    functionName: 'counterOfPledges',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfPledgesABI,
    'counterOfPledges',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfPledgesABI}__ and `functionName` set to `"getPledge"`.
 */
export function useIBookOfPledgesGetPledge<
  TSelectData = ReadContractResult<typeof iBookOfPledgesABI, 'getPledge'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfPledgesABI, 'getPledge', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfPledgesABI,
    functionName: 'getPledge',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfPledgesABI,
    'getPledge',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfPledgesABI}__ and `functionName` set to `"getPledgesOfShare"`.
 */
export function useIBookOfPledgesGetPledgesOfShare<
  TSelectData = ReadContractResult<
    typeof iBookOfPledgesABI,
    'getPledgesOfShare'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfPledgesABI,
      'getPledgesOfShare',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfPledgesABI,
    functionName: 'getPledgesOfShare',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfPledgesABI,
    'getPledgesOfShare',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfPledgesABI}__ and `functionName` set to `"getSNList"`.
 */
export function useIBookOfPledgesGetSnList<
  TSelectData = ReadContractResult<typeof iBookOfPledgesABI, 'getSNList'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfPledgesABI, 'getSNList', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfPledgesABI,
    functionName: 'getSNList',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfPledgesABI,
    'getSNList',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfPledgesABI}__ and `functionName` set to `"isPledge"`.
 */
export function useIBookOfPledgesIsPledge<
  TSelectData = ReadContractResult<typeof iBookOfPledgesABI, 'isPledge'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfPledgesABI, 'isPledge', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfPledgesABI,
    functionName: 'isPledge',
    ...config,
  } as UseContractReadConfig<typeof iBookOfPledgesABI, 'isPledge', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfPledgesABI}__.
 */
export function useIBookOfPledgesWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iBookOfPledgesABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iBookOfPledgesABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfPledgesABI, TFunctionName>({
    abi: iBookOfPledgesABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfPledgesABI}__ and `functionName` set to `"createPledge"`.
 */
export function useIBookOfPledgesCreatePledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfPledgesABI,
          'createPledge'
        >['abi'],
        'createPledge'
      > & { functionName?: 'createPledge' }
    : UseContractWriteConfig<
        TMode,
        typeof iBookOfPledgesABI,
        'createPledge'
      > & {
        abi?: never
        functionName?: 'createPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfPledgesABI, 'createPledge'>({
    abi: iBookOfPledgesABI,
    functionName: 'createPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfPledgesABI}__ and `functionName` set to `"execPledge"`.
 */
export function useIBookOfPledgesExecPledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfPledgesABI,
          'execPledge'
        >['abi'],
        'execPledge'
      > & { functionName?: 'execPledge' }
    : UseContractWriteConfig<TMode, typeof iBookOfPledgesABI, 'execPledge'> & {
        abi?: never
        functionName?: 'execPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfPledgesABI, 'execPledge'>({
    abi: iBookOfPledgesABI,
    functionName: 'execPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfPledgesABI}__ and `functionName` set to `"extendPledge"`.
 */
export function useIBookOfPledgesExtendPledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfPledgesABI,
          'extendPledge'
        >['abi'],
        'extendPledge'
      > & { functionName?: 'extendPledge' }
    : UseContractWriteConfig<
        TMode,
        typeof iBookOfPledgesABI,
        'extendPledge'
      > & {
        abi?: never
        functionName?: 'extendPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfPledgesABI, 'extendPledge'>({
    abi: iBookOfPledgesABI,
    functionName: 'extendPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfPledgesABI}__ and `functionName` set to `"issuePledge"`.
 */
export function useIBookOfPledgesIssuePledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfPledgesABI,
          'issuePledge'
        >['abi'],
        'issuePledge'
      > & { functionName?: 'issuePledge' }
    : UseContractWriteConfig<TMode, typeof iBookOfPledgesABI, 'issuePledge'> & {
        abi?: never
        functionName?: 'issuePledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfPledgesABI, 'issuePledge'>({
    abi: iBookOfPledgesABI,
    functionName: 'issuePledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfPledgesABI}__ and `functionName` set to `"lockPledge"`.
 */
export function useIBookOfPledgesLockPledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfPledgesABI,
          'lockPledge'
        >['abi'],
        'lockPledge'
      > & { functionName?: 'lockPledge' }
    : UseContractWriteConfig<TMode, typeof iBookOfPledgesABI, 'lockPledge'> & {
        abi?: never
        functionName?: 'lockPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfPledgesABI, 'lockPledge'>({
    abi: iBookOfPledgesABI,
    functionName: 'lockPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfPledgesABI}__ and `functionName` set to `"refundDebt"`.
 */
export function useIBookOfPledgesRefundDebt<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfPledgesABI,
          'refundDebt'
        >['abi'],
        'refundDebt'
      > & { functionName?: 'refundDebt' }
    : UseContractWriteConfig<TMode, typeof iBookOfPledgesABI, 'refundDebt'> & {
        abi?: never
        functionName?: 'refundDebt'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfPledgesABI, 'refundDebt'>({
    abi: iBookOfPledgesABI,
    functionName: 'refundDebt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfPledgesABI}__ and `functionName` set to `"regPledge"`.
 */
export function useIBookOfPledgesRegPledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfPledgesABI,
          'regPledge'
        >['abi'],
        'regPledge'
      > & { functionName?: 'regPledge' }
    : UseContractWriteConfig<TMode, typeof iBookOfPledgesABI, 'regPledge'> & {
        abi?: never
        functionName?: 'regPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfPledgesABI, 'regPledge'>({
    abi: iBookOfPledgesABI,
    functionName: 'regPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfPledgesABI}__ and `functionName` set to `"releasePledge"`.
 */
export function useIBookOfPledgesReleasePledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfPledgesABI,
          'releasePledge'
        >['abi'],
        'releasePledge'
      > & { functionName?: 'releasePledge' }
    : UseContractWriteConfig<
        TMode,
        typeof iBookOfPledgesABI,
        'releasePledge'
      > & {
        abi?: never
        functionName?: 'releasePledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfPledgesABI, 'releasePledge'>({
    abi: iBookOfPledgesABI,
    functionName: 'releasePledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfPledgesABI}__ and `functionName` set to `"revokePledge"`.
 */
export function useIBookOfPledgesRevokePledge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfPledgesABI,
          'revokePledge'
        >['abi'],
        'revokePledge'
      > & { functionName?: 'revokePledge' }
    : UseContractWriteConfig<
        TMode,
        typeof iBookOfPledgesABI,
        'revokePledge'
      > & {
        abi?: never
        functionName?: 'revokePledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfPledgesABI, 'revokePledge'>({
    abi: iBookOfPledgesABI,
    functionName: 'revokePledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfPledgesABI}__ and `functionName` set to `"transferPledge"`.
 */
export function useIBookOfPledgesTransferPledge<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfPledgesABI,
          'transferPledge'
        >['abi'],
        'transferPledge'
      > & { functionName?: 'transferPledge' }
    : UseContractWriteConfig<
        TMode,
        typeof iBookOfPledgesABI,
        'transferPledge'
      > & {
        abi?: never
        functionName?: 'transferPledge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfPledgesABI, 'transferPledge'>({
    abi: iBookOfPledgesABI,
    functionName: 'transferPledge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfPledgesABI}__.
 */
export function usePrepareIBookOfPledgesWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfPledgesABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfPledgesABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfPledgesABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfPledgesABI}__ and `functionName` set to `"createPledge"`.
 */
export function usePrepareIBookOfPledgesCreatePledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfPledgesABI, 'createPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfPledgesABI,
    functionName: 'createPledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfPledgesABI, 'createPledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfPledgesABI}__ and `functionName` set to `"execPledge"`.
 */
export function usePrepareIBookOfPledgesExecPledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfPledgesABI, 'execPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfPledgesABI,
    functionName: 'execPledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfPledgesABI, 'execPledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfPledgesABI}__ and `functionName` set to `"extendPledge"`.
 */
export function usePrepareIBookOfPledgesExtendPledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfPledgesABI, 'extendPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfPledgesABI,
    functionName: 'extendPledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfPledgesABI, 'extendPledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfPledgesABI}__ and `functionName` set to `"issuePledge"`.
 */
export function usePrepareIBookOfPledgesIssuePledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfPledgesABI, 'issuePledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfPledgesABI,
    functionName: 'issuePledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfPledgesABI, 'issuePledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfPledgesABI}__ and `functionName` set to `"lockPledge"`.
 */
export function usePrepareIBookOfPledgesLockPledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfPledgesABI, 'lockPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfPledgesABI,
    functionName: 'lockPledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfPledgesABI, 'lockPledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfPledgesABI}__ and `functionName` set to `"refundDebt"`.
 */
export function usePrepareIBookOfPledgesRefundDebt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfPledgesABI, 'refundDebt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfPledgesABI,
    functionName: 'refundDebt',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfPledgesABI, 'refundDebt'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfPledgesABI}__ and `functionName` set to `"regPledge"`.
 */
export function usePrepareIBookOfPledgesRegPledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfPledgesABI, 'regPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfPledgesABI,
    functionName: 'regPledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfPledgesABI, 'regPledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfPledgesABI}__ and `functionName` set to `"releasePledge"`.
 */
export function usePrepareIBookOfPledgesReleasePledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfPledgesABI, 'releasePledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfPledgesABI,
    functionName: 'releasePledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfPledgesABI, 'releasePledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfPledgesABI}__ and `functionName` set to `"revokePledge"`.
 */
export function usePrepareIBookOfPledgesRevokePledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfPledgesABI, 'revokePledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfPledgesABI,
    functionName: 'revokePledge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfPledgesABI, 'revokePledge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfPledgesABI}__ and `functionName` set to `"transferPledge"`.
 */
export function usePrepareIBookOfPledgesTransferPledge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfPledgesABI, 'transferPledge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfPledgesABI,
    functionName: 'transferPledge',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iBookOfPledgesABI,
    'transferPledge'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfPledgesABI}__.
 */
export function useIBookOfPledgesEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iBookOfPledgesABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfPledgesABI,
    ...config,
  } as UseContractEventConfig<typeof iBookOfPledgesABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfPledgesABI}__ and `eventName` set to `"CreatePledge"`.
 */
export function useIBookOfPledgesCreatePledgeEvent(
  config: Omit<
    UseContractEventConfig<typeof iBookOfPledgesABI, 'CreatePledge'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfPledgesABI,
    eventName: 'CreatePledge',
    ...config,
  } as UseContractEventConfig<typeof iBookOfPledgesABI, 'CreatePledge'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfPledgesABI}__ and `eventName` set to `"ExecPledge"`.
 */
export function useIBookOfPledgesExecPledgeEvent(
  config: Omit<
    UseContractEventConfig<typeof iBookOfPledgesABI, 'ExecPledge'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfPledgesABI,
    eventName: 'ExecPledge',
    ...config,
  } as UseContractEventConfig<typeof iBookOfPledgesABI, 'ExecPledge'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfPledgesABI}__ and `eventName` set to `"ExtendPledge"`.
 */
export function useIBookOfPledgesExtendPledgeEvent(
  config: Omit<
    UseContractEventConfig<typeof iBookOfPledgesABI, 'ExtendPledge'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfPledgesABI,
    eventName: 'ExtendPledge',
    ...config,
  } as UseContractEventConfig<typeof iBookOfPledgesABI, 'ExtendPledge'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfPledgesABI}__ and `eventName` set to `"LockPledge"`.
 */
export function useIBookOfPledgesLockPledgeEvent(
  config: Omit<
    UseContractEventConfig<typeof iBookOfPledgesABI, 'LockPledge'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfPledgesABI,
    eventName: 'LockPledge',
    ...config,
  } as UseContractEventConfig<typeof iBookOfPledgesABI, 'LockPledge'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfPledgesABI}__ and `eventName` set to `"RefundDebt"`.
 */
export function useIBookOfPledgesRefundDebtEvent(
  config: Omit<
    UseContractEventConfig<typeof iBookOfPledgesABI, 'RefundDebt'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfPledgesABI,
    eventName: 'RefundDebt',
    ...config,
  } as UseContractEventConfig<typeof iBookOfPledgesABI, 'RefundDebt'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfPledgesABI}__ and `eventName` set to `"ReleasePledge"`.
 */
export function useIBookOfPledgesReleasePledgeEvent(
  config: Omit<
    UseContractEventConfig<typeof iBookOfPledgesABI, 'ReleasePledge'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfPledgesABI,
    eventName: 'ReleasePledge',
    ...config,
  } as UseContractEventConfig<typeof iBookOfPledgesABI, 'ReleasePledge'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfPledgesABI}__ and `eventName` set to `"RevokePledge"`.
 */
export function useIBookOfPledgesRevokePledgeEvent(
  config: Omit<
    UseContractEventConfig<typeof iBookOfPledgesABI, 'RevokePledge'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfPledgesABI,
    eventName: 'RevokePledge',
    ...config,
  } as UseContractEventConfig<typeof iBookOfPledgesABI, 'RevokePledge'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfPledgesABI}__ and `eventName` set to `"TransferPledge"`.
 */
export function useIBookOfPledgesTransferPledgeEvent(
  config: Omit<
    UseContractEventConfig<typeof iBookOfPledgesABI, 'TransferPledge'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfPledgesABI,
    eventName: 'TransferPledge',
    ...config,
  } as UseContractEventConfig<typeof iBookOfPledgesABI, 'TransferPledge'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link bookOfSharesABI}__.
 */
export function useBookOfShares(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: bookOfSharesABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfSharesABI}__.
 */
export function useBookOfSharesRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof bookOfSharesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfSharesABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfSharesABI,
    ...config,
  } as UseContractReadConfig<
    typeof bookOfSharesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"counterOfClasses"`.
 */
export function useBookOfSharesCounterOfClasses<
  TSelectData = ReadContractResult<typeof bookOfSharesABI, 'counterOfClasses'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bookOfSharesABI,
      'counterOfClasses',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfSharesABI,
    functionName: 'counterOfClasses',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfSharesABI,
    'counterOfClasses',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"counterOfShares"`.
 */
export function useBookOfSharesCounterOfShares<
  TSelectData = ReadContractResult<typeof bookOfSharesABI, 'counterOfShares'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bookOfSharesABI,
      'counterOfShares',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfSharesABI,
    functionName: 'counterOfShares',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfSharesABI,
    'counterOfShares',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"finalized"`.
 */
export function useBookOfSharesFinalized<
  TSelectData = ReadContractResult<typeof bookOfSharesABI, 'finalized'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfSharesABI, 'finalized', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfSharesABI,
    functionName: 'finalized',
    ...config,
  } as UseContractReadConfig<typeof bookOfSharesABI, 'finalized', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"getBodyOfShare"`.
 */
export function useBookOfSharesGetBodyOfShare<
  TSelectData = ReadContractResult<typeof bookOfSharesABI, 'getBodyOfShare'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bookOfSharesABI,
      'getBodyOfShare',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfSharesABI,
    functionName: 'getBodyOfShare',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfSharesABI,
    'getBodyOfShare',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"getBookeeper"`.
 */
export function useBookOfSharesGetBookeeper<
  TSelectData = ReadContractResult<typeof bookOfSharesABI, 'getBookeeper'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfSharesABI, 'getBookeeper', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfSharesABI,
    functionName: 'getBookeeper',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfSharesABI,
    'getBookeeper',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"getGeneralCounsel"`.
 */
export function useBookOfSharesGetGeneralCounsel<
  TSelectData = ReadContractResult<typeof bookOfSharesABI, 'getGeneralCounsel'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bookOfSharesABI,
      'getGeneralCounsel',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfSharesABI,
    functionName: 'getGeneralCounsel',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfSharesABI,
    'getGeneralCounsel',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"getHeadOfShare"`.
 */
export function useBookOfSharesGetHeadOfShare<
  TSelectData = ReadContractResult<typeof bookOfSharesABI, 'getHeadOfShare'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bookOfSharesABI,
      'getHeadOfShare',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfSharesABI,
    functionName: 'getHeadOfShare',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfSharesABI,
    'getHeadOfShare',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"getLocker"`.
 */
export function useBookOfSharesGetLocker<
  TSelectData = ReadContractResult<typeof bookOfSharesABI, 'getLocker'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfSharesABI, 'getLocker', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfSharesABI,
    functionName: 'getLocker',
    ...config,
  } as UseContractReadConfig<typeof bookOfSharesABI, 'getLocker', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"getOwner"`.
 */
export function useBookOfSharesGetOwner<
  TSelectData = ReadContractResult<typeof bookOfSharesABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfSharesABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfSharesABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<typeof bookOfSharesABI, 'getOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"getShare"`.
 */
export function useBookOfSharesGetShare<
  TSelectData = ReadContractResult<typeof bookOfSharesABI, 'getShare'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfSharesABI, 'getShare', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfSharesABI,
    functionName: 'getShare',
    ...config,
  } as UseContractReadConfig<typeof bookOfSharesABI, 'getShare', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"getSharesOfClass"`.
 */
export function useBookOfSharesGetSharesOfClass<
  TSelectData = ReadContractResult<typeof bookOfSharesABI, 'getSharesOfClass'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof bookOfSharesABI,
      'getSharesOfClass',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfSharesABI,
    functionName: 'getSharesOfClass',
    ...config,
  } as UseContractReadConfig<
    typeof bookOfSharesABI,
    'getSharesOfClass',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"hasRole"`.
 */
export function useBookOfSharesHasRole<
  TSelectData = ReadContractResult<typeof bookOfSharesABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfSharesABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfSharesABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof bookOfSharesABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"isShare"`.
 */
export function useBookOfSharesIsShare<
  TSelectData = ReadContractResult<typeof bookOfSharesABI, 'isShare'>,
>(
  config: Omit<
    UseContractReadConfig<typeof bookOfSharesABI, 'isShare', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: bookOfSharesABI,
    functionName: 'isShare',
    ...config,
  } as UseContractReadConfig<typeof bookOfSharesABI, 'isShare', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__.
 */
export function useBookOfSharesWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfSharesABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof bookOfSharesABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfSharesABI, TFunctionName>({
    abi: bookOfSharesABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useBookOfSharesAbandonRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfSharesABI,
          'abandonRole'
        >['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<TMode, typeof bookOfSharesABI, 'abandonRole'> & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfSharesABI, 'abandonRole'>({
    abi: bookOfSharesABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"decreaseCapital"`.
 */
export function useBookOfSharesDecreaseCapital<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfSharesABI,
          'decreaseCapital'
        >['abi'],
        'decreaseCapital'
      > & { functionName?: 'decreaseCapital' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfSharesABI,
        'decreaseCapital'
      > & {
        abi?: never
        functionName?: 'decreaseCapital'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfSharesABI, 'decreaseCapital'>({
    abi: bookOfSharesABI,
    functionName: 'decreaseCapital',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"decreaseCleanPaid"`.
 */
export function useBookOfSharesDecreaseCleanPaid<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfSharesABI,
          'decreaseCleanPaid'
        >['abi'],
        'decreaseCleanPaid'
      > & { functionName?: 'decreaseCleanPaid' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfSharesABI,
        'decreaseCleanPaid'
      > & {
        abi?: never
        functionName?: 'decreaseCleanPaid'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfSharesABI, 'decreaseCleanPaid'>({
    abi: bookOfSharesABI,
    functionName: 'decreaseCleanPaid',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"grantRole"`.
 */
export function useBookOfSharesGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfSharesABI, 'grantRole'>['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof bookOfSharesABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfSharesABI, 'grantRole'>({
    abi: bookOfSharesABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"increaseCleanPaid"`.
 */
export function useBookOfSharesIncreaseCleanPaid<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfSharesABI,
          'increaseCleanPaid'
        >['abi'],
        'increaseCleanPaid'
      > & { functionName?: 'increaseCleanPaid' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfSharesABI,
        'increaseCleanPaid'
      > & {
        abi?: never
        functionName?: 'increaseCleanPaid'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfSharesABI, 'increaseCleanPaid'>({
    abi: bookOfSharesABI,
    functionName: 'increaseCleanPaid',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"init"`.
 */
export function useBookOfSharesInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfSharesABI, 'init'>['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof bookOfSharesABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfSharesABI, 'init'>({
    abi: bookOfSharesABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"issueShare"`.
 */
export function useBookOfSharesIssueShare<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfSharesABI, 'issueShare'>['abi'],
        'issueShare'
      > & { functionName?: 'issueShare' }
    : UseContractWriteConfig<TMode, typeof bookOfSharesABI, 'issueShare'> & {
        abi?: never
        functionName?: 'issueShare'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfSharesABI, 'issueShare'>({
    abi: bookOfSharesABI,
    functionName: 'issueShare',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"lockContents"`.
 */
export function useBookOfSharesLockContents<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfSharesABI,
          'lockContents'
        >['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<TMode, typeof bookOfSharesABI, 'lockContents'> & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfSharesABI, 'lockContents'>({
    abi: bookOfSharesABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"regShare"`.
 */
export function useBookOfSharesRegShare<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfSharesABI, 'regShare'>['abi'],
        'regShare'
      > & { functionName?: 'regShare' }
    : UseContractWriteConfig<TMode, typeof bookOfSharesABI, 'regShare'> & {
        abi?: never
        functionName?: 'regShare'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfSharesABI, 'regShare'>({
    abi: bookOfSharesABI,
    functionName: 'regShare',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function useBookOfSharesRemoveDirectKeeper<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfSharesABI,
          'removeDirectKeeper'
        >['abi'],
        'removeDirectKeeper'
      > & { functionName?: 'removeDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfSharesABI,
        'removeDirectKeeper'
      > & {
        abi?: never
        functionName?: 'removeDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfSharesABI, 'removeDirectKeeper'>({
    abi: bookOfSharesABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useBookOfSharesRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfSharesABI,
          'renounceRole'
        >['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<TMode, typeof bookOfSharesABI, 'renounceRole'> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfSharesABI, 'renounceRole'>({
    abi: bookOfSharesABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"requestPaidInCapital"`.
 */
export function useBookOfSharesRequestPaidInCapital<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfSharesABI,
          'requestPaidInCapital'
        >['abi'],
        'requestPaidInCapital'
      > & { functionName?: 'requestPaidInCapital' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfSharesABI,
        'requestPaidInCapital'
      > & {
        abi?: never
        functionName?: 'requestPaidInCapital'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof bookOfSharesABI,
    'requestPaidInCapital'
  >({
    abi: bookOfSharesABI,
    functionName: 'requestPaidInCapital',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useBookOfSharesRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfSharesABI, 'revokeRole'>['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof bookOfSharesABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfSharesABI, 'revokeRole'>({
    abi: bookOfSharesABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useBookOfSharesSetDirectKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfSharesABI,
          'setDirectKeeper'
        >['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfSharesABI,
        'setDirectKeeper'
      > & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfSharesABI, 'setDirectKeeper'>({
    abi: bookOfSharesABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function useBookOfSharesSetGeneralCounsel<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfSharesABI,
          'setGeneralCounsel'
        >['abi'],
        'setGeneralCounsel'
      > & { functionName?: 'setGeneralCounsel' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfSharesABI,
        'setGeneralCounsel'
      > & {
        abi?: never
        functionName?: 'setGeneralCounsel'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfSharesABI, 'setGeneralCounsel'>({
    abi: bookOfSharesABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"setOwner"`.
 */
export function useBookOfSharesSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bookOfSharesABI, 'setOwner'>['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof bookOfSharesABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfSharesABI, 'setOwner'>({
    abi: bookOfSharesABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"setPayInAmt"`.
 */
export function useBookOfSharesSetPayInAmt<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfSharesABI,
          'setPayInAmt'
        >['abi'],
        'setPayInAmt'
      > & { functionName?: 'setPayInAmt' }
    : UseContractWriteConfig<TMode, typeof bookOfSharesABI, 'setPayInAmt'> & {
        abi?: never
        functionName?: 'setPayInAmt'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfSharesABI, 'setPayInAmt'>({
    abi: bookOfSharesABI,
    functionName: 'setPayInAmt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useBookOfSharesSetRoleAdmin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfSharesABI,
          'setRoleAdmin'
        >['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<TMode, typeof bookOfSharesABI, 'setRoleAdmin'> & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfSharesABI, 'setRoleAdmin'>({
    abi: bookOfSharesABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"transferShare"`.
 */
export function useBookOfSharesTransferShare<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfSharesABI,
          'transferShare'
        >['abi'],
        'transferShare'
      > & { functionName?: 'transferShare' }
    : UseContractWriteConfig<TMode, typeof bookOfSharesABI, 'transferShare'> & {
        abi?: never
        functionName?: 'transferShare'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfSharesABI, 'transferShare'>({
    abi: bookOfSharesABI,
    functionName: 'transferShare',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"updateStateOfShare"`.
 */
export function useBookOfSharesUpdateStateOfShare<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfSharesABI,
          'updateStateOfShare'
        >['abi'],
        'updateStateOfShare'
      > & { functionName?: 'updateStateOfShare' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfSharesABI,
        'updateStateOfShare'
      > & {
        abi?: never
        functionName?: 'updateStateOfShare'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfSharesABI, 'updateStateOfShare'>({
    abi: bookOfSharesABI,
    functionName: 'updateStateOfShare',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"withdrawPayInAmt"`.
 */
export function useBookOfSharesWithdrawPayInAmt<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bookOfSharesABI,
          'withdrawPayInAmt'
        >['abi'],
        'withdrawPayInAmt'
      > & { functionName?: 'withdrawPayInAmt' }
    : UseContractWriteConfig<
        TMode,
        typeof bookOfSharesABI,
        'withdrawPayInAmt'
      > & {
        abi?: never
        functionName?: 'withdrawPayInAmt'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bookOfSharesABI, 'withdrawPayInAmt'>({
    abi: bookOfSharesABI,
    functionName: 'withdrawPayInAmt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__.
 */
export function usePrepareBookOfSharesWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfSharesABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfSharesABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfSharesABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareBookOfSharesAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfSharesABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'abandonRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"decreaseCapital"`.
 */
export function usePrepareBookOfSharesDecreaseCapital(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'decreaseCapital'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfSharesABI,
    functionName: 'decreaseCapital',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'decreaseCapital'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"decreaseCleanPaid"`.
 */
export function usePrepareBookOfSharesDecreaseCleanPaid(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'decreaseCleanPaid'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfSharesABI,
    functionName: 'decreaseCleanPaid',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bookOfSharesABI,
    'decreaseCleanPaid'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareBookOfSharesGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfSharesABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"increaseCleanPaid"`.
 */
export function usePrepareBookOfSharesIncreaseCleanPaid(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'increaseCleanPaid'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfSharesABI,
    functionName: 'increaseCleanPaid',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bookOfSharesABI,
    'increaseCleanPaid'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareBookOfSharesInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfSharesABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"issueShare"`.
 */
export function usePrepareBookOfSharesIssueShare(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'issueShare'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfSharesABI,
    functionName: 'issueShare',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'issueShare'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareBookOfSharesLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'lockContents'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfSharesABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'lockContents'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"regShare"`.
 */
export function usePrepareBookOfSharesRegShare(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'regShare'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfSharesABI,
    functionName: 'regShare',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'regShare'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function usePrepareBookOfSharesRemoveDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'removeDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfSharesABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bookOfSharesABI,
    'removeDirectKeeper'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareBookOfSharesRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfSharesABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"requestPaidInCapital"`.
 */
export function usePrepareBookOfSharesRequestPaidInCapital(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof bookOfSharesABI,
      'requestPaidInCapital'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfSharesABI,
    functionName: 'requestPaidInCapital',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bookOfSharesABI,
    'requestPaidInCapital'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareBookOfSharesRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfSharesABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareBookOfSharesSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'setDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfSharesABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'setDirectKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function usePrepareBookOfSharesSetGeneralCounsel(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'setGeneralCounsel'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfSharesABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bookOfSharesABI,
    'setGeneralCounsel'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareBookOfSharesSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfSharesABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"setPayInAmt"`.
 */
export function usePrepareBookOfSharesSetPayInAmt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'setPayInAmt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfSharesABI,
    functionName: 'setPayInAmt',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'setPayInAmt'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareBookOfSharesSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'setRoleAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfSharesABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'setRoleAdmin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"transferShare"`.
 */
export function usePrepareBookOfSharesTransferShare(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'transferShare'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfSharesABI,
    functionName: 'transferShare',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'transferShare'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"updateStateOfShare"`.
 */
export function usePrepareBookOfSharesUpdateStateOfShare(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'updateStateOfShare'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfSharesABI,
    functionName: 'updateStateOfShare',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bookOfSharesABI,
    'updateStateOfShare'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bookOfSharesABI}__ and `functionName` set to `"withdrawPayInAmt"`.
 */
export function usePrepareBookOfSharesWithdrawPayInAmt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bookOfSharesABI, 'withdrawPayInAmt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bookOfSharesABI,
    functionName: 'withdrawPayInAmt',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof bookOfSharesABI,
    'withdrawPayInAmt'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfSharesABI}__.
 */
export function useBookOfSharesEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof bookOfSharesABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfSharesABI,
    ...config,
  } as UseContractEventConfig<typeof bookOfSharesABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfSharesABI}__ and `eventName` set to `"DecreaseCleanPaid"`.
 */
export function useBookOfSharesDecreaseCleanPaidEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfSharesABI, 'DecreaseCleanPaid'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfSharesABI,
    eventName: 'DecreaseCleanPaid',
    ...config,
  } as UseContractEventConfig<typeof bookOfSharesABI, 'DecreaseCleanPaid'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfSharesABI}__ and `eventName` set to `"DeregisterShare"`.
 */
export function useBookOfSharesDeregisterShareEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfSharesABI, 'DeregisterShare'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfSharesABI,
    eventName: 'DeregisterShare',
    ...config,
  } as UseContractEventConfig<typeof bookOfSharesABI, 'DeregisterShare'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfSharesABI}__ and `eventName` set to `"IncreaseCleanPaid"`.
 */
export function useBookOfSharesIncreaseCleanPaidEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfSharesABI, 'IncreaseCleanPaid'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfSharesABI,
    eventName: 'IncreaseCleanPaid',
    ...config,
  } as UseContractEventConfig<typeof bookOfSharesABI, 'IncreaseCleanPaid'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfSharesABI}__ and `eventName` set to `"Init"`.
 */
export function useBookOfSharesInitEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfSharesABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfSharesABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof bookOfSharesABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfSharesABI}__ and `eventName` set to `"IssueShare"`.
 */
export function useBookOfSharesIssueShareEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfSharesABI, 'IssueShare'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfSharesABI,
    eventName: 'IssueShare',
    ...config,
  } as UseContractEventConfig<typeof bookOfSharesABI, 'IssueShare'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfSharesABI}__ and `eventName` set to `"LockContents"`.
 */
export function useBookOfSharesLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfSharesABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfSharesABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof bookOfSharesABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfSharesABI}__ and `eventName` set to `"PayInCapital"`.
 */
export function useBookOfSharesPayInCapitalEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfSharesABI, 'PayInCapital'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfSharesABI,
    eventName: 'PayInCapital',
    ...config,
  } as UseContractEventConfig<typeof bookOfSharesABI, 'PayInCapital'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfSharesABI}__ and `eventName` set to `"RemoveDirectKeeper"`.
 */
export function useBookOfSharesRemoveDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfSharesABI, 'RemoveDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfSharesABI,
    eventName: 'RemoveDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof bookOfSharesABI, 'RemoveDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfSharesABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useBookOfSharesSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfSharesABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfSharesABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof bookOfSharesABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfSharesABI}__ and `eventName` set to `"SetGeneralCounsel"`.
 */
export function useBookOfSharesSetGeneralCounselEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfSharesABI, 'SetGeneralCounsel'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfSharesABI,
    eventName: 'SetGeneralCounsel',
    ...config,
  } as UseContractEventConfig<typeof bookOfSharesABI, 'SetGeneralCounsel'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfSharesABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useBookOfSharesSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfSharesABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfSharesABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof bookOfSharesABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfSharesABI}__ and `eventName` set to `"SetPayInAmt"`.
 */
export function useBookOfSharesSetPayInAmtEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfSharesABI, 'SetPayInAmt'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfSharesABI,
    eventName: 'SetPayInAmt',
    ...config,
  } as UseContractEventConfig<typeof bookOfSharesABI, 'SetPayInAmt'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfSharesABI}__ and `eventName` set to `"SubAmountFromShare"`.
 */
export function useBookOfSharesSubAmountFromShareEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfSharesABI, 'SubAmountFromShare'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfSharesABI,
    eventName: 'SubAmountFromShare',
    ...config,
  } as UseContractEventConfig<typeof bookOfSharesABI, 'SubAmountFromShare'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfSharesABI}__ and `eventName` set to `"UpdateStateOfShare"`.
 */
export function useBookOfSharesUpdateStateOfShareEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfSharesABI, 'UpdateStateOfShare'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfSharesABI,
    eventName: 'UpdateStateOfShare',
    ...config,
  } as UseContractEventConfig<typeof bookOfSharesABI, 'UpdateStateOfShare'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bookOfSharesABI}__ and `eventName` set to `"WithdrawPayInAmt"`.
 */
export function useBookOfSharesWithdrawPayInAmtEvent(
  config: Omit<
    UseContractEventConfig<typeof bookOfSharesABI, 'WithdrawPayInAmt'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: bookOfSharesABI,
    eventName: 'WithdrawPayInAmt',
    ...config,
  } as UseContractEventConfig<typeof bookOfSharesABI, 'WithdrawPayInAmt'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iBookOfSharesABI}__.
 */
export function useIBookOfShares(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iBookOfSharesABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfSharesABI}__.
 */
export function useIBookOfSharesRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iBookOfSharesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfSharesABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfSharesABI,
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfSharesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"counterOfClasses"`.
 */
export function useIBookOfSharesCounterOfClasses<
  TSelectData = ReadContractResult<typeof iBookOfSharesABI, 'counterOfClasses'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfSharesABI,
      'counterOfClasses',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfSharesABI,
    functionName: 'counterOfClasses',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfSharesABI,
    'counterOfClasses',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"counterOfShares"`.
 */
export function useIBookOfSharesCounterOfShares<
  TSelectData = ReadContractResult<typeof iBookOfSharesABI, 'counterOfShares'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfSharesABI,
      'counterOfShares',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfSharesABI,
    functionName: 'counterOfShares',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfSharesABI,
    'counterOfShares',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"getBodyOfShare"`.
 */
export function useIBookOfSharesGetBodyOfShare<
  TSelectData = ReadContractResult<typeof iBookOfSharesABI, 'getBodyOfShare'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfSharesABI,
      'getBodyOfShare',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfSharesABI,
    functionName: 'getBodyOfShare',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfSharesABI,
    'getBodyOfShare',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"getHeadOfShare"`.
 */
export function useIBookOfSharesGetHeadOfShare<
  TSelectData = ReadContractResult<typeof iBookOfSharesABI, 'getHeadOfShare'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfSharesABI,
      'getHeadOfShare',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfSharesABI,
    functionName: 'getHeadOfShare',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfSharesABI,
    'getHeadOfShare',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"getLocker"`.
 */
export function useIBookOfSharesGetLocker<
  TSelectData = ReadContractResult<typeof iBookOfSharesABI, 'getLocker'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfSharesABI, 'getLocker', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfSharesABI,
    functionName: 'getLocker',
    ...config,
  } as UseContractReadConfig<typeof iBookOfSharesABI, 'getLocker', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"getShare"`.
 */
export function useIBookOfSharesGetShare<
  TSelectData = ReadContractResult<typeof iBookOfSharesABI, 'getShare'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfSharesABI, 'getShare', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfSharesABI,
    functionName: 'getShare',
    ...config,
  } as UseContractReadConfig<typeof iBookOfSharesABI, 'getShare', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"getSharesOfClass"`.
 */
export function useIBookOfSharesGetSharesOfClass<
  TSelectData = ReadContractResult<typeof iBookOfSharesABI, 'getSharesOfClass'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBookOfSharesABI,
      'getSharesOfClass',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfSharesABI,
    functionName: 'getSharesOfClass',
    ...config,
  } as UseContractReadConfig<
    typeof iBookOfSharesABI,
    'getSharesOfClass',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"isShare"`.
 */
export function useIBookOfSharesIsShare<
  TSelectData = ReadContractResult<typeof iBookOfSharesABI, 'isShare'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBookOfSharesABI, 'isShare', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBookOfSharesABI,
    functionName: 'isShare',
    ...config,
  } as UseContractReadConfig<typeof iBookOfSharesABI, 'isShare', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfSharesABI}__.
 */
export function useIBookOfSharesWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iBookOfSharesABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iBookOfSharesABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfSharesABI, TFunctionName>({
    abi: iBookOfSharesABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"decreaseCapital"`.
 */
export function useIBookOfSharesDecreaseCapital<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfSharesABI,
          'decreaseCapital'
        >['abi'],
        'decreaseCapital'
      > & { functionName?: 'decreaseCapital' }
    : UseContractWriteConfig<
        TMode,
        typeof iBookOfSharesABI,
        'decreaseCapital'
      > & {
        abi?: never
        functionName?: 'decreaseCapital'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfSharesABI, 'decreaseCapital'>({
    abi: iBookOfSharesABI,
    functionName: 'decreaseCapital',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"decreaseCleanPaid"`.
 */
export function useIBookOfSharesDecreaseCleanPaid<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfSharesABI,
          'decreaseCleanPaid'
        >['abi'],
        'decreaseCleanPaid'
      > & { functionName?: 'decreaseCleanPaid' }
    : UseContractWriteConfig<
        TMode,
        typeof iBookOfSharesABI,
        'decreaseCleanPaid'
      > & {
        abi?: never
        functionName?: 'decreaseCleanPaid'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfSharesABI, 'decreaseCleanPaid'>({
    abi: iBookOfSharesABI,
    functionName: 'decreaseCleanPaid',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"increaseCleanPaid"`.
 */
export function useIBookOfSharesIncreaseCleanPaid<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfSharesABI,
          'increaseCleanPaid'
        >['abi'],
        'increaseCleanPaid'
      > & { functionName?: 'increaseCleanPaid' }
    : UseContractWriteConfig<
        TMode,
        typeof iBookOfSharesABI,
        'increaseCleanPaid'
      > & {
        abi?: never
        functionName?: 'increaseCleanPaid'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfSharesABI, 'increaseCleanPaid'>({
    abi: iBookOfSharesABI,
    functionName: 'increaseCleanPaid',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"issueShare"`.
 */
export function useIBookOfSharesIssueShare<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfSharesABI,
          'issueShare'
        >['abi'],
        'issueShare'
      > & { functionName?: 'issueShare' }
    : UseContractWriteConfig<TMode, typeof iBookOfSharesABI, 'issueShare'> & {
        abi?: never
        functionName?: 'issueShare'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfSharesABI, 'issueShare'>({
    abi: iBookOfSharesABI,
    functionName: 'issueShare',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"regShare"`.
 */
export function useIBookOfSharesRegShare<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iBookOfSharesABI, 'regShare'>['abi'],
        'regShare'
      > & { functionName?: 'regShare' }
    : UseContractWriteConfig<TMode, typeof iBookOfSharesABI, 'regShare'> & {
        abi?: never
        functionName?: 'regShare'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfSharesABI, 'regShare'>({
    abi: iBookOfSharesABI,
    functionName: 'regShare',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"requestPaidInCapital"`.
 */
export function useIBookOfSharesRequestPaidInCapital<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfSharesABI,
          'requestPaidInCapital'
        >['abi'],
        'requestPaidInCapital'
      > & { functionName?: 'requestPaidInCapital' }
    : UseContractWriteConfig<
        TMode,
        typeof iBookOfSharesABI,
        'requestPaidInCapital'
      > & {
        abi?: never
        functionName?: 'requestPaidInCapital'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iBookOfSharesABI,
    'requestPaidInCapital'
  >({
    abi: iBookOfSharesABI,
    functionName: 'requestPaidInCapital',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"setPayInAmt"`.
 */
export function useIBookOfSharesSetPayInAmt<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfSharesABI,
          'setPayInAmt'
        >['abi'],
        'setPayInAmt'
      > & { functionName?: 'setPayInAmt' }
    : UseContractWriteConfig<TMode, typeof iBookOfSharesABI, 'setPayInAmt'> & {
        abi?: never
        functionName?: 'setPayInAmt'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfSharesABI, 'setPayInAmt'>({
    abi: iBookOfSharesABI,
    functionName: 'setPayInAmt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"transferShare"`.
 */
export function useIBookOfSharesTransferShare<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfSharesABI,
          'transferShare'
        >['abi'],
        'transferShare'
      > & { functionName?: 'transferShare' }
    : UseContractWriteConfig<
        TMode,
        typeof iBookOfSharesABI,
        'transferShare'
      > & {
        abi?: never
        functionName?: 'transferShare'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfSharesABI, 'transferShare'>({
    abi: iBookOfSharesABI,
    functionName: 'transferShare',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"updateStateOfShare"`.
 */
export function useIBookOfSharesUpdateStateOfShare<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfSharesABI,
          'updateStateOfShare'
        >['abi'],
        'updateStateOfShare'
      > & { functionName?: 'updateStateOfShare' }
    : UseContractWriteConfig<
        TMode,
        typeof iBookOfSharesABI,
        'updateStateOfShare'
      > & {
        abi?: never
        functionName?: 'updateStateOfShare'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfSharesABI, 'updateStateOfShare'>(
    {
      abi: iBookOfSharesABI,
      functionName: 'updateStateOfShare',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"withdrawPayInAmt"`.
 */
export function useIBookOfSharesWithdrawPayInAmt<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iBookOfSharesABI,
          'withdrawPayInAmt'
        >['abi'],
        'withdrawPayInAmt'
      > & { functionName?: 'withdrawPayInAmt' }
    : UseContractWriteConfig<
        TMode,
        typeof iBookOfSharesABI,
        'withdrawPayInAmt'
      > & {
        abi?: never
        functionName?: 'withdrawPayInAmt'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBookOfSharesABI, 'withdrawPayInAmt'>({
    abi: iBookOfSharesABI,
    functionName: 'withdrawPayInAmt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfSharesABI}__.
 */
export function usePrepareIBookOfSharesWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfSharesABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfSharesABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfSharesABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"decreaseCapital"`.
 */
export function usePrepareIBookOfSharesDecreaseCapital(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfSharesABI, 'decreaseCapital'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfSharesABI,
    functionName: 'decreaseCapital',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iBookOfSharesABI,
    'decreaseCapital'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"decreaseCleanPaid"`.
 */
export function usePrepareIBookOfSharesDecreaseCleanPaid(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfSharesABI, 'decreaseCleanPaid'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfSharesABI,
    functionName: 'decreaseCleanPaid',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iBookOfSharesABI,
    'decreaseCleanPaid'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"increaseCleanPaid"`.
 */
export function usePrepareIBookOfSharesIncreaseCleanPaid(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfSharesABI, 'increaseCleanPaid'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfSharesABI,
    functionName: 'increaseCleanPaid',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iBookOfSharesABI,
    'increaseCleanPaid'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"issueShare"`.
 */
export function usePrepareIBookOfSharesIssueShare(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfSharesABI, 'issueShare'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfSharesABI,
    functionName: 'issueShare',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfSharesABI, 'issueShare'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"regShare"`.
 */
export function usePrepareIBookOfSharesRegShare(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfSharesABI, 'regShare'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfSharesABI,
    functionName: 'regShare',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfSharesABI, 'regShare'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"requestPaidInCapital"`.
 */
export function usePrepareIBookOfSharesRequestPaidInCapital(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iBookOfSharesABI,
      'requestPaidInCapital'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfSharesABI,
    functionName: 'requestPaidInCapital',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iBookOfSharesABI,
    'requestPaidInCapital'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"setPayInAmt"`.
 */
export function usePrepareIBookOfSharesSetPayInAmt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfSharesABI, 'setPayInAmt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfSharesABI,
    functionName: 'setPayInAmt',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfSharesABI, 'setPayInAmt'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"transferShare"`.
 */
export function usePrepareIBookOfSharesTransferShare(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfSharesABI, 'transferShare'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfSharesABI,
    functionName: 'transferShare',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBookOfSharesABI, 'transferShare'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"updateStateOfShare"`.
 */
export function usePrepareIBookOfSharesUpdateStateOfShare(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iBookOfSharesABI,
      'updateStateOfShare'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfSharesABI,
    functionName: 'updateStateOfShare',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iBookOfSharesABI,
    'updateStateOfShare'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBookOfSharesABI}__ and `functionName` set to `"withdrawPayInAmt"`.
 */
export function usePrepareIBookOfSharesWithdrawPayInAmt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBookOfSharesABI, 'withdrawPayInAmt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBookOfSharesABI,
    functionName: 'withdrawPayInAmt',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iBookOfSharesABI,
    'withdrawPayInAmt'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfSharesABI}__.
 */
export function useIBookOfSharesEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iBookOfSharesABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfSharesABI,
    ...config,
  } as UseContractEventConfig<typeof iBookOfSharesABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfSharesABI}__ and `eventName` set to `"DecreaseCleanPaid"`.
 */
export function useIBookOfSharesDecreaseCleanPaidEvent(
  config: Omit<
    UseContractEventConfig<typeof iBookOfSharesABI, 'DecreaseCleanPaid'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfSharesABI,
    eventName: 'DecreaseCleanPaid',
    ...config,
  } as UseContractEventConfig<typeof iBookOfSharesABI, 'DecreaseCleanPaid'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfSharesABI}__ and `eventName` set to `"DeregisterShare"`.
 */
export function useIBookOfSharesDeregisterShareEvent(
  config: Omit<
    UseContractEventConfig<typeof iBookOfSharesABI, 'DeregisterShare'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfSharesABI,
    eventName: 'DeregisterShare',
    ...config,
  } as UseContractEventConfig<typeof iBookOfSharesABI, 'DeregisterShare'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfSharesABI}__ and `eventName` set to `"IncreaseCleanPaid"`.
 */
export function useIBookOfSharesIncreaseCleanPaidEvent(
  config: Omit<
    UseContractEventConfig<typeof iBookOfSharesABI, 'IncreaseCleanPaid'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfSharesABI,
    eventName: 'IncreaseCleanPaid',
    ...config,
  } as UseContractEventConfig<typeof iBookOfSharesABI, 'IncreaseCleanPaid'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfSharesABI}__ and `eventName` set to `"IssueShare"`.
 */
export function useIBookOfSharesIssueShareEvent(
  config: Omit<
    UseContractEventConfig<typeof iBookOfSharesABI, 'IssueShare'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfSharesABI,
    eventName: 'IssueShare',
    ...config,
  } as UseContractEventConfig<typeof iBookOfSharesABI, 'IssueShare'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfSharesABI}__ and `eventName` set to `"PayInCapital"`.
 */
export function useIBookOfSharesPayInCapitalEvent(
  config: Omit<
    UseContractEventConfig<typeof iBookOfSharesABI, 'PayInCapital'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfSharesABI,
    eventName: 'PayInCapital',
    ...config,
  } as UseContractEventConfig<typeof iBookOfSharesABI, 'PayInCapital'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfSharesABI}__ and `eventName` set to `"SetPayInAmt"`.
 */
export function useIBookOfSharesSetPayInAmtEvent(
  config: Omit<
    UseContractEventConfig<typeof iBookOfSharesABI, 'SetPayInAmt'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfSharesABI,
    eventName: 'SetPayInAmt',
    ...config,
  } as UseContractEventConfig<typeof iBookOfSharesABI, 'SetPayInAmt'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfSharesABI}__ and `eventName` set to `"SubAmountFromShare"`.
 */
export function useIBookOfSharesSubAmountFromShareEvent(
  config: Omit<
    UseContractEventConfig<typeof iBookOfSharesABI, 'SubAmountFromShare'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfSharesABI,
    eventName: 'SubAmountFromShare',
    ...config,
  } as UseContractEventConfig<typeof iBookOfSharesABI, 'SubAmountFromShare'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfSharesABI}__ and `eventName` set to `"UpdateStateOfShare"`.
 */
export function useIBookOfSharesUpdateStateOfShareEvent(
  config: Omit<
    UseContractEventConfig<typeof iBookOfSharesABI, 'UpdateStateOfShare'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfSharesABI,
    eventName: 'UpdateStateOfShare',
    ...config,
  } as UseContractEventConfig<typeof iBookOfSharesABI, 'UpdateStateOfShare'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iBookOfSharesABI}__ and `eventName` set to `"WithdrawPayInAmt"`.
 */
export function useIBookOfSharesWithdrawPayInAmtEvent(
  config: Omit<
    UseContractEventConfig<typeof iBookOfSharesABI, 'WithdrawPayInAmt'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iBookOfSharesABI,
    eventName: 'WithdrawPayInAmt',
    ...config,
  } as UseContractEventConfig<typeof iBookOfSharesABI, 'WithdrawPayInAmt'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iRegisterOfMembersABI}__.
 */
export function useIRegisterOfMembers(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iRegisterOfMembersABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfMembersABI}__.
 */
export function useIRegisterOfMembersRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iRegisterOfMembersABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfMembersABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfMembersABI,
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfMembersABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"affiliated"`.
 */
export function useIRegisterOfMembersAffiliated<
  TSelectData = ReadContractResult<typeof iRegisterOfMembersABI, 'affiliated'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfMembersABI,
      'affiliated',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfMembersABI,
    functionName: 'affiliated',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfMembersABI,
    'affiliated',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"basedOnPar"`.
 */
export function useIRegisterOfMembersBasedOnPar<
  TSelectData = ReadContractResult<typeof iRegisterOfMembersABI, 'basedOnPar'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfMembersABI,
      'basedOnPar',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfMembersABI,
    functionName: 'basedOnPar',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfMembersABI,
    'basedOnPar',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"capAtDate"`.
 */
export function useIRegisterOfMembersCapAtDate<
  TSelectData = ReadContractResult<typeof iRegisterOfMembersABI, 'capAtDate'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfMembersABI,
      'capAtDate',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfMembersABI,
    functionName: 'capAtDate',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfMembersABI,
    'capAtDate',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"controllor"`.
 */
export function useIRegisterOfMembersControllor<
  TSelectData = ReadContractResult<typeof iRegisterOfMembersABI, 'controllor'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfMembersABI,
      'controllor',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfMembersABI,
    functionName: 'controllor',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfMembersABI,
    'controllor',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"deepOfGroup"`.
 */
export function useIRegisterOfMembersDeepOfGroup<
  TSelectData = ReadContractResult<typeof iRegisterOfMembersABI, 'deepOfGroup'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfMembersABI,
      'deepOfGroup',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfMembersABI,
    functionName: 'deepOfGroup',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfMembersABI,
    'deepOfGroup',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"getMembersOfClass"`.
 */
export function useIRegisterOfMembersGetMembersOfClass<
  TSelectData = ReadContractResult<
    typeof iRegisterOfMembersABI,
    'getMembersOfClass'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfMembersABI,
      'getMembersOfClass',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfMembersABI,
    functionName: 'getMembersOfClass',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfMembersABI,
    'getMembersOfClass',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"getNumOfMembers"`.
 */
export function useIRegisterOfMembersGetNumOfMembers<
  TSelectData = ReadContractResult<
    typeof iRegisterOfMembersABI,
    'getNumOfMembers'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfMembersABI,
      'getNumOfMembers',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfMembersABI,
    functionName: 'getNumOfMembers',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfMembersABI,
    'getNumOfMembers',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"getSnapshot"`.
 */
export function useIRegisterOfMembersGetSnapshot<
  TSelectData = ReadContractResult<typeof iRegisterOfMembersABI, 'getSnapshot'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfMembersABI,
      'getSnapshot',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfMembersABI,
    functionName: 'getSnapshot',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfMembersABI,
    'getSnapshot',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"groupRep"`.
 */
export function useIRegisterOfMembersGroupRep<
  TSelectData = ReadContractResult<typeof iRegisterOfMembersABI, 'groupRep'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfMembersABI,
      'groupRep',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfMembersABI,
    functionName: 'groupRep',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfMembersABI,
    'groupRep',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"isClassMember"`.
 */
export function useIRegisterOfMembersIsClassMember<
  TSelectData = ReadContractResult<
    typeof iRegisterOfMembersABI,
    'isClassMember'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfMembersABI,
      'isClassMember',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfMembersABI,
    functionName: 'isClassMember',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfMembersABI,
    'isClassMember',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"isGroupRep"`.
 */
export function useIRegisterOfMembersIsGroupRep<
  TSelectData = ReadContractResult<typeof iRegisterOfMembersABI, 'isGroupRep'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfMembersABI,
      'isGroupRep',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfMembersABI,
    functionName: 'isGroupRep',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfMembersABI,
    'isGroupRep',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"isMember"`.
 */
export function useIRegisterOfMembersIsMember<
  TSelectData = ReadContractResult<typeof iRegisterOfMembersABI, 'isMember'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfMembersABI,
      'isMember',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfMembersABI,
    functionName: 'isMember',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfMembersABI,
    'isMember',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"isSNOfShare"`.
 */
export function useIRegisterOfMembersIsSnOfShare<
  TSelectData = ReadContractResult<typeof iRegisterOfMembersABI, 'isSNOfShare'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfMembersABI,
      'isSNOfShare',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfMembersABI,
    functionName: 'isSNOfShare',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfMembersABI,
    'isSNOfShare',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"maxQtyOfMembers"`.
 */
export function useIRegisterOfMembersMaxQtyOfMembers<
  TSelectData = ReadContractResult<
    typeof iRegisterOfMembersABI,
    'maxQtyOfMembers'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfMembersABI,
      'maxQtyOfMembers',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfMembersABI,
    functionName: 'maxQtyOfMembers',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfMembersABI,
    'maxQtyOfMembers',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"membersList"`.
 */
export function useIRegisterOfMembersMembersList<
  TSelectData = ReadContractResult<typeof iRegisterOfMembersABI, 'membersList'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfMembersABI,
      'membersList',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfMembersABI,
    functionName: 'membersList',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfMembersABI,
    'membersList',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"membersOfGroup"`.
 */
export function useIRegisterOfMembersMembersOfGroup<
  TSelectData = ReadContractResult<
    typeof iRegisterOfMembersABI,
    'membersOfGroup'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfMembersABI,
      'membersOfGroup',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfMembersABI,
    functionName: 'membersOfGroup',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfMembersABI,
    'membersOfGroup',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"ownersEquity"`.
 */
export function useIRegisterOfMembersOwnersEquity<
  TSelectData = ReadContractResult<
    typeof iRegisterOfMembersABI,
    'ownersEquity'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfMembersABI,
      'ownersEquity',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfMembersABI,
    functionName: 'ownersEquity',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfMembersABI,
    'ownersEquity',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"qtyOfGroups"`.
 */
export function useIRegisterOfMembersQtyOfGroups<
  TSelectData = ReadContractResult<typeof iRegisterOfMembersABI, 'qtyOfGroups'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfMembersABI,
      'qtyOfGroups',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfMembersABI,
    functionName: 'qtyOfGroups',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfMembersABI,
    'qtyOfGroups',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"sharesClipOfMember"`.
 */
export function useIRegisterOfMembersSharesClipOfMember<
  TSelectData = ReadContractResult<
    typeof iRegisterOfMembersABI,
    'sharesClipOfMember'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfMembersABI,
      'sharesClipOfMember',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfMembersABI,
    functionName: 'sharesClipOfMember',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfMembersABI,
    'sharesClipOfMember',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"sharesInHand"`.
 */
export function useIRegisterOfMembersSharesInHand<
  TSelectData = ReadContractResult<
    typeof iRegisterOfMembersABI,
    'sharesInHand'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfMembersABI,
      'sharesInHand',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfMembersABI,
    functionName: 'sharesInHand',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfMembersABI,
    'sharesInHand',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"sharesList"`.
 */
export function useIRegisterOfMembersSharesList<
  TSelectData = ReadContractResult<typeof iRegisterOfMembersABI, 'sharesList'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfMembersABI,
      'sharesList',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfMembersABI,
    functionName: 'sharesList',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfMembersABI,
    'sharesList',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"totalVotes"`.
 */
export function useIRegisterOfMembersTotalVotes<
  TSelectData = ReadContractResult<typeof iRegisterOfMembersABI, 'totalVotes'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfMembersABI,
      'totalVotes',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfMembersABI,
    functionName: 'totalVotes',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfMembersABI,
    'totalVotes',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"votesAtDate"`.
 */
export function useIRegisterOfMembersVotesAtDate<
  TSelectData = ReadContractResult<typeof iRegisterOfMembersABI, 'votesAtDate'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfMembersABI,
      'votesAtDate',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfMembersABI,
    functionName: 'votesAtDate',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfMembersABI,
    'votesAtDate',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"votesInHand"`.
 */
export function useIRegisterOfMembersVotesInHand<
  TSelectData = ReadContractResult<typeof iRegisterOfMembersABI, 'votesInHand'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfMembersABI,
      'votesInHand',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfMembersABI,
    functionName: 'votesInHand',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfMembersABI,
    'votesInHand',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"votesOfController"`.
 */
export function useIRegisterOfMembersVotesOfController<
  TSelectData = ReadContractResult<
    typeof iRegisterOfMembersABI,
    'votesOfController'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfMembersABI,
      'votesOfController',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfMembersABI,
    functionName: 'votesOfController',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfMembersABI,
    'votesOfController',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"votesOfGroup"`.
 */
export function useIRegisterOfMembersVotesOfGroup<
  TSelectData = ReadContractResult<
    typeof iRegisterOfMembersABI,
    'votesOfGroup'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfMembersABI,
      'votesOfGroup',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfMembersABI,
    functionName: 'votesOfGroup',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfMembersABI,
    'votesOfGroup',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfMembersABI}__.
 */
export function useIRegisterOfMembersWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iRegisterOfMembersABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfMembersABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegisterOfMembersABI, TFunctionName>({
    abi: iRegisterOfMembersABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"addMember"`.
 */
export function useIRegisterOfMembersAddMember<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfMembersABI,
          'addMember'
        >['abi'],
        'addMember'
      > & { functionName?: 'addMember' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfMembersABI,
        'addMember'
      > & {
        abi?: never
        functionName?: 'addMember'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegisterOfMembersABI, 'addMember'>({
    abi: iRegisterOfMembersABI,
    functionName: 'addMember',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"addMemberToGroup"`.
 */
export function useIRegisterOfMembersAddMemberToGroup<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfMembersABI,
          'addMemberToGroup'
        >['abi'],
        'addMemberToGroup'
      > & { functionName?: 'addMemberToGroup' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfMembersABI,
        'addMemberToGroup'
      > & {
        abi?: never
        functionName?: 'addMemberToGroup'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iRegisterOfMembersABI,
    'addMemberToGroup'
  >({
    abi: iRegisterOfMembersABI,
    functionName: 'addMemberToGroup',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"addShareToMember"`.
 */
export function useIRegisterOfMembersAddShareToMember<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfMembersABI,
          'addShareToMember'
        >['abi'],
        'addShareToMember'
      > & { functionName?: 'addShareToMember' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfMembersABI,
        'addShareToMember'
      > & {
        abi?: never
        functionName?: 'addShareToMember'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iRegisterOfMembersABI,
    'addShareToMember'
  >({
    abi: iRegisterOfMembersABI,
    functionName: 'addShareToMember',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"capDecrease"`.
 */
export function useIRegisterOfMembersCapDecrease<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfMembersABI,
          'capDecrease'
        >['abi'],
        'capDecrease'
      > & { functionName?: 'capDecrease' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfMembersABI,
        'capDecrease'
      > & {
        abi?: never
        functionName?: 'capDecrease'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegisterOfMembersABI, 'capDecrease'>({
    abi: iRegisterOfMembersABI,
    functionName: 'capDecrease',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"capIncrease"`.
 */
export function useIRegisterOfMembersCapIncrease<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfMembersABI,
          'capIncrease'
        >['abi'],
        'capIncrease'
      > & { functionName?: 'capIncrease' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfMembersABI,
        'capIncrease'
      > & {
        abi?: never
        functionName?: 'capIncrease'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegisterOfMembersABI, 'capIncrease'>({
    abi: iRegisterOfMembersABI,
    functionName: 'capIncrease',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"changeAmtOfMember"`.
 */
export function useIRegisterOfMembersChangeAmtOfMember<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfMembersABI,
          'changeAmtOfMember'
        >['abi'],
        'changeAmtOfMember'
      > & { functionName?: 'changeAmtOfMember' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfMembersABI,
        'changeAmtOfMember'
      > & {
        abi?: never
        functionName?: 'changeAmtOfMember'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iRegisterOfMembersABI,
    'changeAmtOfMember'
  >({
    abi: iRegisterOfMembersABI,
    functionName: 'changeAmtOfMember',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"removeMemberFromGroup"`.
 */
export function useIRegisterOfMembersRemoveMemberFromGroup<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfMembersABI,
          'removeMemberFromGroup'
        >['abi'],
        'removeMemberFromGroup'
      > & { functionName?: 'removeMemberFromGroup' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfMembersABI,
        'removeMemberFromGroup'
      > & {
        abi?: never
        functionName?: 'removeMemberFromGroup'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iRegisterOfMembersABI,
    'removeMemberFromGroup'
  >({
    abi: iRegisterOfMembersABI,
    functionName: 'removeMemberFromGroup',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"removeShareFromMember"`.
 */
export function useIRegisterOfMembersRemoveShareFromMember<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfMembersABI,
          'removeShareFromMember'
        >['abi'],
        'removeShareFromMember'
      > & { functionName?: 'removeShareFromMember' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfMembersABI,
        'removeShareFromMember'
      > & {
        abi?: never
        functionName?: 'removeShareFromMember'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iRegisterOfMembersABI,
    'removeShareFromMember'
  >({
    abi: iRegisterOfMembersABI,
    functionName: 'removeShareFromMember',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"setAmtBase"`.
 */
export function useIRegisterOfMembersSetAmtBase<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfMembersABI,
          'setAmtBase'
        >['abi'],
        'setAmtBase'
      > & { functionName?: 'setAmtBase' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfMembersABI,
        'setAmtBase'
      > & {
        abi?: never
        functionName?: 'setAmtBase'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegisterOfMembersABI, 'setAmtBase'>({
    abi: iRegisterOfMembersABI,
    functionName: 'setAmtBase',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"setMaxQtyOfMembers"`.
 */
export function useIRegisterOfMembersSetMaxQtyOfMembers<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfMembersABI,
          'setMaxQtyOfMembers'
        >['abi'],
        'setMaxQtyOfMembers'
      > & { functionName?: 'setMaxQtyOfMembers' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfMembersABI,
        'setMaxQtyOfMembers'
      > & {
        abi?: never
        functionName?: 'setMaxQtyOfMembers'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iRegisterOfMembersABI,
    'setMaxQtyOfMembers'
  >({
    abi: iRegisterOfMembersABI,
    functionName: 'setMaxQtyOfMembers',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"setVoteBase"`.
 */
export function useIRegisterOfMembersSetVoteBase<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfMembersABI,
          'setVoteBase'
        >['abi'],
        'setVoteBase'
      > & { functionName?: 'setVoteBase' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfMembersABI,
        'setVoteBase'
      > & {
        abi?: never
        functionName?: 'setVoteBase'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegisterOfMembersABI, 'setVoteBase'>({
    abi: iRegisterOfMembersABI,
    functionName: 'setVoteBase',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfMembersABI}__.
 */
export function usePrepareIRegisterOfMembersWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegisterOfMembersABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfMembersABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfMembersABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"addMember"`.
 */
export function usePrepareIRegisterOfMembersAddMember(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegisterOfMembersABI, 'addMember'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfMembersABI,
    functionName: 'addMember',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegisterOfMembersABI, 'addMember'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"addMemberToGroup"`.
 */
export function usePrepareIRegisterOfMembersAddMemberToGroup(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRegisterOfMembersABI,
      'addMemberToGroup'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfMembersABI,
    functionName: 'addMemberToGroup',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfMembersABI,
    'addMemberToGroup'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"addShareToMember"`.
 */
export function usePrepareIRegisterOfMembersAddShareToMember(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRegisterOfMembersABI,
      'addShareToMember'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfMembersABI,
    functionName: 'addShareToMember',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfMembersABI,
    'addShareToMember'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"capDecrease"`.
 */
export function usePrepareIRegisterOfMembersCapDecrease(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegisterOfMembersABI, 'capDecrease'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfMembersABI,
    functionName: 'capDecrease',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfMembersABI,
    'capDecrease'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"capIncrease"`.
 */
export function usePrepareIRegisterOfMembersCapIncrease(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegisterOfMembersABI, 'capIncrease'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfMembersABI,
    functionName: 'capIncrease',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfMembersABI,
    'capIncrease'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"changeAmtOfMember"`.
 */
export function usePrepareIRegisterOfMembersChangeAmtOfMember(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRegisterOfMembersABI,
      'changeAmtOfMember'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfMembersABI,
    functionName: 'changeAmtOfMember',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfMembersABI,
    'changeAmtOfMember'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"removeMemberFromGroup"`.
 */
export function usePrepareIRegisterOfMembersRemoveMemberFromGroup(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRegisterOfMembersABI,
      'removeMemberFromGroup'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfMembersABI,
    functionName: 'removeMemberFromGroup',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfMembersABI,
    'removeMemberFromGroup'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"removeShareFromMember"`.
 */
export function usePrepareIRegisterOfMembersRemoveShareFromMember(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRegisterOfMembersABI,
      'removeShareFromMember'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfMembersABI,
    functionName: 'removeShareFromMember',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfMembersABI,
    'removeShareFromMember'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"setAmtBase"`.
 */
export function usePrepareIRegisterOfMembersSetAmtBase(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegisterOfMembersABI, 'setAmtBase'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfMembersABI,
    functionName: 'setAmtBase',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfMembersABI,
    'setAmtBase'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"setMaxQtyOfMembers"`.
 */
export function usePrepareIRegisterOfMembersSetMaxQtyOfMembers(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRegisterOfMembersABI,
      'setMaxQtyOfMembers'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfMembersABI,
    functionName: 'setMaxQtyOfMembers',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfMembersABI,
    'setMaxQtyOfMembers'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `functionName` set to `"setVoteBase"`.
 */
export function usePrepareIRegisterOfMembersSetVoteBase(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegisterOfMembersABI, 'setVoteBase'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfMembersABI,
    functionName: 'setVoteBase',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfMembersABI,
    'setVoteBase'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfMembersABI}__.
 */
export function useIRegisterOfMembersEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfMembersABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfMembersABI,
    ...config,
  } as UseContractEventConfig<typeof iRegisterOfMembersABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `eventName` set to `"AddMember"`.
 */
export function useIRegisterOfMembersAddMemberEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfMembersABI, 'AddMember'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfMembersABI,
    eventName: 'AddMember',
    ...config,
  } as UseContractEventConfig<typeof iRegisterOfMembersABI, 'AddMember'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `eventName` set to `"AddMemberToGroup"`.
 */
export function useIRegisterOfMembersAddMemberToGroupEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfMembersABI, 'AddMemberToGroup'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfMembersABI,
    eventName: 'AddMemberToGroup',
    ...config,
  } as UseContractEventConfig<typeof iRegisterOfMembersABI, 'AddMemberToGroup'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `eventName` set to `"AddShareToMember"`.
 */
export function useIRegisterOfMembersAddShareToMemberEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfMembersABI, 'AddShareToMember'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfMembersABI,
    eventName: 'AddShareToMember',
    ...config,
  } as UseContractEventConfig<typeof iRegisterOfMembersABI, 'AddShareToMember'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `eventName` set to `"CapDecrease"`.
 */
export function useIRegisterOfMembersCapDecreaseEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfMembersABI, 'CapDecrease'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfMembersABI,
    eventName: 'CapDecrease',
    ...config,
  } as UseContractEventConfig<typeof iRegisterOfMembersABI, 'CapDecrease'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `eventName` set to `"CapIncrease"`.
 */
export function useIRegisterOfMembersCapIncreaseEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfMembersABI, 'CapIncrease'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfMembersABI,
    eventName: 'CapIncrease',
    ...config,
  } as UseContractEventConfig<typeof iRegisterOfMembersABI, 'CapIncrease'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `eventName` set to `"ChangeAmtOfMember"`.
 */
export function useIRegisterOfMembersChangeAmtOfMemberEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfMembersABI, 'ChangeAmtOfMember'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfMembersABI,
    eventName: 'ChangeAmtOfMember',
    ...config,
  } as UseContractEventConfig<
    typeof iRegisterOfMembersABI,
    'ChangeAmtOfMember'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `eventName` set to `"ChangeGroupRep"`.
 */
export function useIRegisterOfMembersChangeGroupRepEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfMembersABI, 'ChangeGroupRep'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfMembersABI,
    eventName: 'ChangeGroupRep',
    ...config,
  } as UseContractEventConfig<typeof iRegisterOfMembersABI, 'ChangeGroupRep'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `eventName` set to `"RemoveMemberFromGroup"`.
 */
export function useIRegisterOfMembersRemoveMemberFromGroupEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iRegisterOfMembersABI,
      'RemoveMemberFromGroup'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfMembersABI,
    eventName: 'RemoveMemberFromGroup',
    ...config,
  } as UseContractEventConfig<
    typeof iRegisterOfMembersABI,
    'RemoveMemberFromGroup'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `eventName` set to `"RemoveShareFromMember"`.
 */
export function useIRegisterOfMembersRemoveShareFromMemberEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iRegisterOfMembersABI,
      'RemoveShareFromMember'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfMembersABI,
    eventName: 'RemoveShareFromMember',
    ...config,
  } as UseContractEventConfig<
    typeof iRegisterOfMembersABI,
    'RemoveShareFromMember'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `eventName` set to `"SetAmtBase"`.
 */
export function useIRegisterOfMembersSetAmtBaseEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfMembersABI, 'SetAmtBase'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfMembersABI,
    eventName: 'SetAmtBase',
    ...config,
  } as UseContractEventConfig<typeof iRegisterOfMembersABI, 'SetAmtBase'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `eventName` set to `"SetMaxQtyOfMembers"`.
 */
export function useIRegisterOfMembersSetMaxQtyOfMembersEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfMembersABI, 'SetMaxQtyOfMembers'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfMembersABI,
    eventName: 'SetMaxQtyOfMembers',
    ...config,
  } as UseContractEventConfig<
    typeof iRegisterOfMembersABI,
    'SetMaxQtyOfMembers'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfMembersABI}__ and `eventName` set to `"SetVoteBase"`.
 */
export function useIRegisterOfMembersSetVoteBaseEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfMembersABI, 'SetVoteBase'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfMembersABI,
    eventName: 'SetVoteBase',
    ...config,
  } as UseContractEventConfig<typeof iRegisterOfMembersABI, 'SetVoteBase'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link registerOfMembersABI}__.
 */
export function useRegisterOfMembers(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: registerOfMembersABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__.
 */
export function useRegisterOfMembersRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof registerOfMembersABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfMembersABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"affiliated"`.
 */
export function useRegisterOfMembersAffiliated<
  TSelectData = ReadContractResult<typeof registerOfMembersABI, 'affiliated'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfMembersABI,
      'affiliated',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'affiliated',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'affiliated',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"basedOnPar"`.
 */
export function useRegisterOfMembersBasedOnPar<
  TSelectData = ReadContractResult<typeof registerOfMembersABI, 'basedOnPar'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfMembersABI,
      'basedOnPar',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'basedOnPar',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'basedOnPar',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"capAtDate"`.
 */
export function useRegisterOfMembersCapAtDate<
  TSelectData = ReadContractResult<typeof registerOfMembersABI, 'capAtDate'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfMembersABI,
      'capAtDate',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'capAtDate',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'capAtDate',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"controllor"`.
 */
export function useRegisterOfMembersControllor<
  TSelectData = ReadContractResult<typeof registerOfMembersABI, 'controllor'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfMembersABI,
      'controllor',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'controllor',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'controllor',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"deepOfGroup"`.
 */
export function useRegisterOfMembersDeepOfGroup<
  TSelectData = ReadContractResult<typeof registerOfMembersABI, 'deepOfGroup'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfMembersABI,
      'deepOfGroup',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'deepOfGroup',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'deepOfGroup',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"finalized"`.
 */
export function useRegisterOfMembersFinalized<
  TSelectData = ReadContractResult<typeof registerOfMembersABI, 'finalized'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfMembersABI,
      'finalized',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'finalized',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'finalized',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"getBookeeper"`.
 */
export function useRegisterOfMembersGetBookeeper<
  TSelectData = ReadContractResult<typeof registerOfMembersABI, 'getBookeeper'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfMembersABI,
      'getBookeeper',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'getBookeeper',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'getBookeeper',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"getGeneralCounsel"`.
 */
export function useRegisterOfMembersGetGeneralCounsel<
  TSelectData = ReadContractResult<
    typeof registerOfMembersABI,
    'getGeneralCounsel'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfMembersABI,
      'getGeneralCounsel',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'getGeneralCounsel',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'getGeneralCounsel',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"getMembersOfClass"`.
 */
export function useRegisterOfMembersGetMembersOfClass<
  TSelectData = ReadContractResult<
    typeof registerOfMembersABI,
    'getMembersOfClass'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfMembersABI,
      'getMembersOfClass',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'getMembersOfClass',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'getMembersOfClass',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"getNumOfMembers"`.
 */
export function useRegisterOfMembersGetNumOfMembers<
  TSelectData = ReadContractResult<
    typeof registerOfMembersABI,
    'getNumOfMembers'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfMembersABI,
      'getNumOfMembers',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'getNumOfMembers',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'getNumOfMembers',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"getOwner"`.
 */
export function useRegisterOfMembersGetOwner<
  TSelectData = ReadContractResult<typeof registerOfMembersABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof registerOfMembersABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'getOwner',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"getSnapshot"`.
 */
export function useRegisterOfMembersGetSnapshot<
  TSelectData = ReadContractResult<typeof registerOfMembersABI, 'getSnapshot'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfMembersABI,
      'getSnapshot',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'getSnapshot',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'getSnapshot',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"groupRep"`.
 */
export function useRegisterOfMembersGroupRep<
  TSelectData = ReadContractResult<typeof registerOfMembersABI, 'groupRep'>,
>(
  config: Omit<
    UseContractReadConfig<typeof registerOfMembersABI, 'groupRep', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'groupRep',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'groupRep',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"hasRole"`.
 */
export function useRegisterOfMembersHasRole<
  TSelectData = ReadContractResult<typeof registerOfMembersABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof registerOfMembersABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'hasRole',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"isClassMember"`.
 */
export function useRegisterOfMembersIsClassMember<
  TSelectData = ReadContractResult<
    typeof registerOfMembersABI,
    'isClassMember'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfMembersABI,
      'isClassMember',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'isClassMember',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'isClassMember',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"isGroupRep"`.
 */
export function useRegisterOfMembersIsGroupRep<
  TSelectData = ReadContractResult<typeof registerOfMembersABI, 'isGroupRep'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfMembersABI,
      'isGroupRep',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'isGroupRep',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'isGroupRep',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"isMember"`.
 */
export function useRegisterOfMembersIsMember<
  TSelectData = ReadContractResult<typeof registerOfMembersABI, 'isMember'>,
>(
  config: Omit<
    UseContractReadConfig<typeof registerOfMembersABI, 'isMember', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'isMember',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'isMember',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"isSNOfShare"`.
 */
export function useRegisterOfMembersIsSnOfShare<
  TSelectData = ReadContractResult<typeof registerOfMembersABI, 'isSNOfShare'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfMembersABI,
      'isSNOfShare',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'isSNOfShare',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'isSNOfShare',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"maxQtyOfMembers"`.
 */
export function useRegisterOfMembersMaxQtyOfMembers<
  TSelectData = ReadContractResult<
    typeof registerOfMembersABI,
    'maxQtyOfMembers'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfMembersABI,
      'maxQtyOfMembers',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'maxQtyOfMembers',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'maxQtyOfMembers',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"membersList"`.
 */
export function useRegisterOfMembersMembersList<
  TSelectData = ReadContractResult<typeof registerOfMembersABI, 'membersList'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfMembersABI,
      'membersList',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'membersList',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'membersList',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"membersOfGroup"`.
 */
export function useRegisterOfMembersMembersOfGroup<
  TSelectData = ReadContractResult<
    typeof registerOfMembersABI,
    'membersOfGroup'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfMembersABI,
      'membersOfGroup',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'membersOfGroup',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'membersOfGroup',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"ownersEquity"`.
 */
export function useRegisterOfMembersOwnersEquity<
  TSelectData = ReadContractResult<typeof registerOfMembersABI, 'ownersEquity'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfMembersABI,
      'ownersEquity',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'ownersEquity',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'ownersEquity',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"qtyOfGroups"`.
 */
export function useRegisterOfMembersQtyOfGroups<
  TSelectData = ReadContractResult<typeof registerOfMembersABI, 'qtyOfGroups'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfMembersABI,
      'qtyOfGroups',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'qtyOfGroups',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'qtyOfGroups',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"sharesClipOfMember"`.
 */
export function useRegisterOfMembersSharesClipOfMember<
  TSelectData = ReadContractResult<
    typeof registerOfMembersABI,
    'sharesClipOfMember'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfMembersABI,
      'sharesClipOfMember',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'sharesClipOfMember',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'sharesClipOfMember',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"sharesInHand"`.
 */
export function useRegisterOfMembersSharesInHand<
  TSelectData = ReadContractResult<typeof registerOfMembersABI, 'sharesInHand'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfMembersABI,
      'sharesInHand',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'sharesInHand',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'sharesInHand',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"sharesList"`.
 */
export function useRegisterOfMembersSharesList<
  TSelectData = ReadContractResult<typeof registerOfMembersABI, 'sharesList'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfMembersABI,
      'sharesList',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'sharesList',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'sharesList',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"totalVotes"`.
 */
export function useRegisterOfMembersTotalVotes<
  TSelectData = ReadContractResult<typeof registerOfMembersABI, 'totalVotes'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfMembersABI,
      'totalVotes',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'totalVotes',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'totalVotes',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"votesAtDate"`.
 */
export function useRegisterOfMembersVotesAtDate<
  TSelectData = ReadContractResult<typeof registerOfMembersABI, 'votesAtDate'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfMembersABI,
      'votesAtDate',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'votesAtDate',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'votesAtDate',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"votesInHand"`.
 */
export function useRegisterOfMembersVotesInHand<
  TSelectData = ReadContractResult<typeof registerOfMembersABI, 'votesInHand'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfMembersABI,
      'votesInHand',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'votesInHand',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'votesInHand',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"votesOfController"`.
 */
export function useRegisterOfMembersVotesOfController<
  TSelectData = ReadContractResult<
    typeof registerOfMembersABI,
    'votesOfController'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfMembersABI,
      'votesOfController',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'votesOfController',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'votesOfController',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"votesOfGroup"`.
 */
export function useRegisterOfMembersVotesOfGroup<
  TSelectData = ReadContractResult<typeof registerOfMembersABI, 'votesOfGroup'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfMembersABI,
      'votesOfGroup',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfMembersABI,
    functionName: 'votesOfGroup',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfMembersABI,
    'votesOfGroup',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__.
 */
export function useRegisterOfMembersWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof registerOfMembersABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof registerOfMembersABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfMembersABI, TFunctionName>({
    abi: registerOfMembersABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useRegisterOfMembersAbandonRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfMembersABI,
          'abandonRole'
        >['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfMembersABI,
        'abandonRole'
      > & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfMembersABI, 'abandonRole'>({
    abi: registerOfMembersABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"addMember"`.
 */
export function useRegisterOfMembersAddMember<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfMembersABI,
          'addMember'
        >['abi'],
        'addMember'
      > & { functionName?: 'addMember' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfMembersABI,
        'addMember'
      > & {
        abi?: never
        functionName?: 'addMember'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfMembersABI, 'addMember'>({
    abi: registerOfMembersABI,
    functionName: 'addMember',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"addMemberToGroup"`.
 */
export function useRegisterOfMembersAddMemberToGroup<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfMembersABI,
          'addMemberToGroup'
        >['abi'],
        'addMemberToGroup'
      > & { functionName?: 'addMemberToGroup' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfMembersABI,
        'addMemberToGroup'
      > & {
        abi?: never
        functionName?: 'addMemberToGroup'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfMembersABI,
    'addMemberToGroup'
  >({
    abi: registerOfMembersABI,
    functionName: 'addMemberToGroup',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"addShareToMember"`.
 */
export function useRegisterOfMembersAddShareToMember<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfMembersABI,
          'addShareToMember'
        >['abi'],
        'addShareToMember'
      > & { functionName?: 'addShareToMember' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfMembersABI,
        'addShareToMember'
      > & {
        abi?: never
        functionName?: 'addShareToMember'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfMembersABI,
    'addShareToMember'
  >({
    abi: registerOfMembersABI,
    functionName: 'addShareToMember',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"capDecrease"`.
 */
export function useRegisterOfMembersCapDecrease<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfMembersABI,
          'capDecrease'
        >['abi'],
        'capDecrease'
      > & { functionName?: 'capDecrease' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfMembersABI,
        'capDecrease'
      > & {
        abi?: never
        functionName?: 'capDecrease'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfMembersABI, 'capDecrease'>({
    abi: registerOfMembersABI,
    functionName: 'capDecrease',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"capIncrease"`.
 */
export function useRegisterOfMembersCapIncrease<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfMembersABI,
          'capIncrease'
        >['abi'],
        'capIncrease'
      > & { functionName?: 'capIncrease' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfMembersABI,
        'capIncrease'
      > & {
        abi?: never
        functionName?: 'capIncrease'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfMembersABI, 'capIncrease'>({
    abi: registerOfMembersABI,
    functionName: 'capIncrease',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"changeAmtOfMember"`.
 */
export function useRegisterOfMembersChangeAmtOfMember<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfMembersABI,
          'changeAmtOfMember'
        >['abi'],
        'changeAmtOfMember'
      > & { functionName?: 'changeAmtOfMember' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfMembersABI,
        'changeAmtOfMember'
      > & {
        abi?: never
        functionName?: 'changeAmtOfMember'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfMembersABI,
    'changeAmtOfMember'
  >({
    abi: registerOfMembersABI,
    functionName: 'changeAmtOfMember',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"grantRole"`.
 */
export function useRegisterOfMembersGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfMembersABI,
          'grantRole'
        >['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfMembersABI,
        'grantRole'
      > & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfMembersABI, 'grantRole'>({
    abi: registerOfMembersABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"init"`.
 */
export function useRegisterOfMembersInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof registerOfMembersABI, 'init'>['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof registerOfMembersABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfMembersABI, 'init'>({
    abi: registerOfMembersABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"lockContents"`.
 */
export function useRegisterOfMembersLockContents<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfMembersABI,
          'lockContents'
        >['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfMembersABI,
        'lockContents'
      > & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfMembersABI, 'lockContents'>({
    abi: registerOfMembersABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function useRegisterOfMembersRemoveDirectKeeper<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfMembersABI,
          'removeDirectKeeper'
        >['abi'],
        'removeDirectKeeper'
      > & { functionName?: 'removeDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfMembersABI,
        'removeDirectKeeper'
      > & {
        abi?: never
        functionName?: 'removeDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfMembersABI,
    'removeDirectKeeper'
  >({
    abi: registerOfMembersABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"removeMemberFromGroup"`.
 */
export function useRegisterOfMembersRemoveMemberFromGroup<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfMembersABI,
          'removeMemberFromGroup'
        >['abi'],
        'removeMemberFromGroup'
      > & { functionName?: 'removeMemberFromGroup' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfMembersABI,
        'removeMemberFromGroup'
      > & {
        abi?: never
        functionName?: 'removeMemberFromGroup'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfMembersABI,
    'removeMemberFromGroup'
  >({
    abi: registerOfMembersABI,
    functionName: 'removeMemberFromGroup',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"removeShareFromMember"`.
 */
export function useRegisterOfMembersRemoveShareFromMember<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfMembersABI,
          'removeShareFromMember'
        >['abi'],
        'removeShareFromMember'
      > & { functionName?: 'removeShareFromMember' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfMembersABI,
        'removeShareFromMember'
      > & {
        abi?: never
        functionName?: 'removeShareFromMember'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfMembersABI,
    'removeShareFromMember'
  >({
    abi: registerOfMembersABI,
    functionName: 'removeShareFromMember',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useRegisterOfMembersRenounceRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfMembersABI,
          'renounceRole'
        >['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfMembersABI,
        'renounceRole'
      > & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfMembersABI, 'renounceRole'>({
    abi: registerOfMembersABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useRegisterOfMembersRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfMembersABI,
          'revokeRole'
        >['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfMembersABI,
        'revokeRole'
      > & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfMembersABI, 'revokeRole'>({
    abi: registerOfMembersABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"setAmtBase"`.
 */
export function useRegisterOfMembersSetAmtBase<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfMembersABI,
          'setAmtBase'
        >['abi'],
        'setAmtBase'
      > & { functionName?: 'setAmtBase' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfMembersABI,
        'setAmtBase'
      > & {
        abi?: never
        functionName?: 'setAmtBase'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfMembersABI, 'setAmtBase'>({
    abi: registerOfMembersABI,
    functionName: 'setAmtBase',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useRegisterOfMembersSetDirectKeeper<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfMembersABI,
          'setDirectKeeper'
        >['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfMembersABI,
        'setDirectKeeper'
      > & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfMembersABI,
    'setDirectKeeper'
  >({
    abi: registerOfMembersABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function useRegisterOfMembersSetGeneralCounsel<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfMembersABI,
          'setGeneralCounsel'
        >['abi'],
        'setGeneralCounsel'
      > & { functionName?: 'setGeneralCounsel' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfMembersABI,
        'setGeneralCounsel'
      > & {
        abi?: never
        functionName?: 'setGeneralCounsel'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfMembersABI,
    'setGeneralCounsel'
  >({
    abi: registerOfMembersABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"setMaxQtyOfMembers"`.
 */
export function useRegisterOfMembersSetMaxQtyOfMembers<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfMembersABI,
          'setMaxQtyOfMembers'
        >['abi'],
        'setMaxQtyOfMembers'
      > & { functionName?: 'setMaxQtyOfMembers' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfMembersABI,
        'setMaxQtyOfMembers'
      > & {
        abi?: never
        functionName?: 'setMaxQtyOfMembers'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfMembersABI,
    'setMaxQtyOfMembers'
  >({
    abi: registerOfMembersABI,
    functionName: 'setMaxQtyOfMembers',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"setOwner"`.
 */
export function useRegisterOfMembersSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfMembersABI,
          'setOwner'
        >['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof registerOfMembersABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfMembersABI, 'setOwner'>({
    abi: registerOfMembersABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useRegisterOfMembersSetRoleAdmin<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfMembersABI,
          'setRoleAdmin'
        >['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfMembersABI,
        'setRoleAdmin'
      > & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfMembersABI, 'setRoleAdmin'>({
    abi: registerOfMembersABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"setVoteBase"`.
 */
export function useRegisterOfMembersSetVoteBase<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfMembersABI,
          'setVoteBase'
        >['abi'],
        'setVoteBase'
      > & { functionName?: 'setVoteBase' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfMembersABI,
        'setVoteBase'
      > & {
        abi?: never
        functionName?: 'setVoteBase'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfMembersABI, 'setVoteBase'>({
    abi: registerOfMembersABI,
    functionName: 'setVoteBase',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__.
 */
export function usePrepareRegisterOfMembersWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfMembersABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfMembersABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfMembersABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareRegisterOfMembersAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfMembersABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfMembersABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfMembersABI,
    'abandonRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"addMember"`.
 */
export function usePrepareRegisterOfMembersAddMember(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfMembersABI, 'addMember'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfMembersABI,
    functionName: 'addMember',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfMembersABI, 'addMember'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"addMemberToGroup"`.
 */
export function usePrepareRegisterOfMembersAddMemberToGroup(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfMembersABI,
      'addMemberToGroup'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfMembersABI,
    functionName: 'addMemberToGroup',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfMembersABI,
    'addMemberToGroup'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"addShareToMember"`.
 */
export function usePrepareRegisterOfMembersAddShareToMember(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfMembersABI,
      'addShareToMember'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfMembersABI,
    functionName: 'addShareToMember',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfMembersABI,
    'addShareToMember'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"capDecrease"`.
 */
export function usePrepareRegisterOfMembersCapDecrease(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfMembersABI, 'capDecrease'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfMembersABI,
    functionName: 'capDecrease',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfMembersABI,
    'capDecrease'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"capIncrease"`.
 */
export function usePrepareRegisterOfMembersCapIncrease(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfMembersABI, 'capIncrease'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfMembersABI,
    functionName: 'capIncrease',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfMembersABI,
    'capIncrease'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"changeAmtOfMember"`.
 */
export function usePrepareRegisterOfMembersChangeAmtOfMember(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfMembersABI,
      'changeAmtOfMember'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfMembersABI,
    functionName: 'changeAmtOfMember',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfMembersABI,
    'changeAmtOfMember'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareRegisterOfMembersGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfMembersABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfMembersABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfMembersABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareRegisterOfMembersInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfMembersABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfMembersABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfMembersABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareRegisterOfMembersLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfMembersABI, 'lockContents'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfMembersABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfMembersABI,
    'lockContents'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function usePrepareRegisterOfMembersRemoveDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfMembersABI,
      'removeDirectKeeper'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfMembersABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfMembersABI,
    'removeDirectKeeper'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"removeMemberFromGroup"`.
 */
export function usePrepareRegisterOfMembersRemoveMemberFromGroup(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfMembersABI,
      'removeMemberFromGroup'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfMembersABI,
    functionName: 'removeMemberFromGroup',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfMembersABI,
    'removeMemberFromGroup'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"removeShareFromMember"`.
 */
export function usePrepareRegisterOfMembersRemoveShareFromMember(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfMembersABI,
      'removeShareFromMember'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfMembersABI,
    functionName: 'removeShareFromMember',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfMembersABI,
    'removeShareFromMember'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareRegisterOfMembersRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfMembersABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfMembersABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfMembersABI,
    'renounceRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareRegisterOfMembersRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfMembersABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfMembersABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfMembersABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"setAmtBase"`.
 */
export function usePrepareRegisterOfMembersSetAmtBase(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfMembersABI, 'setAmtBase'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfMembersABI,
    functionName: 'setAmtBase',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfMembersABI, 'setAmtBase'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareRegisterOfMembersSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfMembersABI,
      'setDirectKeeper'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfMembersABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfMembersABI,
    'setDirectKeeper'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function usePrepareRegisterOfMembersSetGeneralCounsel(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfMembersABI,
      'setGeneralCounsel'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfMembersABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfMembersABI,
    'setGeneralCounsel'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"setMaxQtyOfMembers"`.
 */
export function usePrepareRegisterOfMembersSetMaxQtyOfMembers(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfMembersABI,
      'setMaxQtyOfMembers'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfMembersABI,
    functionName: 'setMaxQtyOfMembers',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfMembersABI,
    'setMaxQtyOfMembers'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareRegisterOfMembersSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfMembersABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfMembersABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfMembersABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareRegisterOfMembersSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfMembersABI, 'setRoleAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfMembersABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfMembersABI,
    'setRoleAdmin'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfMembersABI}__ and `functionName` set to `"setVoteBase"`.
 */
export function usePrepareRegisterOfMembersSetVoteBase(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfMembersABI, 'setVoteBase'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfMembersABI,
    functionName: 'setVoteBase',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfMembersABI,
    'setVoteBase'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfMembersABI}__.
 */
export function useRegisterOfMembersEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof registerOfMembersABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfMembersABI,
    ...config,
  } as UseContractEventConfig<typeof registerOfMembersABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfMembersABI}__ and `eventName` set to `"AddMember"`.
 */
export function useRegisterOfMembersAddMemberEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfMembersABI, 'AddMember'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfMembersABI,
    eventName: 'AddMember',
    ...config,
  } as UseContractEventConfig<typeof registerOfMembersABI, 'AddMember'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfMembersABI}__ and `eventName` set to `"AddMemberToGroup"`.
 */
export function useRegisterOfMembersAddMemberToGroupEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfMembersABI, 'AddMemberToGroup'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfMembersABI,
    eventName: 'AddMemberToGroup',
    ...config,
  } as UseContractEventConfig<typeof registerOfMembersABI, 'AddMemberToGroup'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfMembersABI}__ and `eventName` set to `"AddShareToMember"`.
 */
export function useRegisterOfMembersAddShareToMemberEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfMembersABI, 'AddShareToMember'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfMembersABI,
    eventName: 'AddShareToMember',
    ...config,
  } as UseContractEventConfig<typeof registerOfMembersABI, 'AddShareToMember'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfMembersABI}__ and `eventName` set to `"CapDecrease"`.
 */
export function useRegisterOfMembersCapDecreaseEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfMembersABI, 'CapDecrease'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfMembersABI,
    eventName: 'CapDecrease',
    ...config,
  } as UseContractEventConfig<typeof registerOfMembersABI, 'CapDecrease'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfMembersABI}__ and `eventName` set to `"CapIncrease"`.
 */
export function useRegisterOfMembersCapIncreaseEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfMembersABI, 'CapIncrease'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfMembersABI,
    eventName: 'CapIncrease',
    ...config,
  } as UseContractEventConfig<typeof registerOfMembersABI, 'CapIncrease'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfMembersABI}__ and `eventName` set to `"ChangeAmtOfMember"`.
 */
export function useRegisterOfMembersChangeAmtOfMemberEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfMembersABI, 'ChangeAmtOfMember'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfMembersABI,
    eventName: 'ChangeAmtOfMember',
    ...config,
  } as UseContractEventConfig<typeof registerOfMembersABI, 'ChangeAmtOfMember'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfMembersABI}__ and `eventName` set to `"ChangeGroupRep"`.
 */
export function useRegisterOfMembersChangeGroupRepEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfMembersABI, 'ChangeGroupRep'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfMembersABI,
    eventName: 'ChangeGroupRep',
    ...config,
  } as UseContractEventConfig<typeof registerOfMembersABI, 'ChangeGroupRep'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfMembersABI}__ and `eventName` set to `"Init"`.
 */
export function useRegisterOfMembersInitEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfMembersABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfMembersABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof registerOfMembersABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfMembersABI}__ and `eventName` set to `"LockContents"`.
 */
export function useRegisterOfMembersLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfMembersABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfMembersABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof registerOfMembersABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfMembersABI}__ and `eventName` set to `"RemoveDirectKeeper"`.
 */
export function useRegisterOfMembersRemoveDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfMembersABI, 'RemoveDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfMembersABI,
    eventName: 'RemoveDirectKeeper',
    ...config,
  } as UseContractEventConfig<
    typeof registerOfMembersABI,
    'RemoveDirectKeeper'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfMembersABI}__ and `eventName` set to `"RemoveMemberFromGroup"`.
 */
export function useRegisterOfMembersRemoveMemberFromGroupEvent(
  config: Omit<
    UseContractEventConfig<
      typeof registerOfMembersABI,
      'RemoveMemberFromGroup'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfMembersABI,
    eventName: 'RemoveMemberFromGroup',
    ...config,
  } as UseContractEventConfig<
    typeof registerOfMembersABI,
    'RemoveMemberFromGroup'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfMembersABI}__ and `eventName` set to `"RemoveShareFromMember"`.
 */
export function useRegisterOfMembersRemoveShareFromMemberEvent(
  config: Omit<
    UseContractEventConfig<
      typeof registerOfMembersABI,
      'RemoveShareFromMember'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfMembersABI,
    eventName: 'RemoveShareFromMember',
    ...config,
  } as UseContractEventConfig<
    typeof registerOfMembersABI,
    'RemoveShareFromMember'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfMembersABI}__ and `eventName` set to `"SetAmtBase"`.
 */
export function useRegisterOfMembersSetAmtBaseEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfMembersABI, 'SetAmtBase'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfMembersABI,
    eventName: 'SetAmtBase',
    ...config,
  } as UseContractEventConfig<typeof registerOfMembersABI, 'SetAmtBase'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfMembersABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useRegisterOfMembersSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfMembersABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfMembersABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof registerOfMembersABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfMembersABI}__ and `eventName` set to `"SetGeneralCounsel"`.
 */
export function useRegisterOfMembersSetGeneralCounselEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfMembersABI, 'SetGeneralCounsel'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfMembersABI,
    eventName: 'SetGeneralCounsel',
    ...config,
  } as UseContractEventConfig<typeof registerOfMembersABI, 'SetGeneralCounsel'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfMembersABI}__ and `eventName` set to `"SetMaxQtyOfMembers"`.
 */
export function useRegisterOfMembersSetMaxQtyOfMembersEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfMembersABI, 'SetMaxQtyOfMembers'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfMembersABI,
    eventName: 'SetMaxQtyOfMembers',
    ...config,
  } as UseContractEventConfig<
    typeof registerOfMembersABI,
    'SetMaxQtyOfMembers'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfMembersABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useRegisterOfMembersSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfMembersABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfMembersABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof registerOfMembersABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfMembersABI}__ and `eventName` set to `"SetVoteBase"`.
 */
export function useRegisterOfMembersSetVoteBaseEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfMembersABI, 'SetVoteBase'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfMembersABI,
    eventName: 'SetVoteBase',
    ...config,
  } as UseContractEventConfig<typeof registerOfMembersABI, 'SetVoteBase'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iRegisterOfSwapsABI}__.
 */
export function useIRegisterOfSwaps(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iRegisterOfSwapsABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfSwapsABI}__.
 */
export function useIRegisterOfSwapsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iRegisterOfSwapsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfSwapsABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfSwapsABI,
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfSwapsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `functionName` set to `"counterOfSwap"`.
 */
export function useIRegisterOfSwapsCounterOfSwap<
  TSelectData = ReadContractResult<typeof iRegisterOfSwapsABI, 'counterOfSwap'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfSwapsABI,
      'counterOfSwap',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfSwapsABI,
    functionName: 'counterOfSwap',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfSwapsABI,
    'counterOfSwap',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `functionName` set to `"getAllSwaps"`.
 */
export function useIRegisterOfSwapsGetAllSwaps<
  TSelectData = ReadContractResult<typeof iRegisterOfSwapsABI, 'getAllSwaps'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRegisterOfSwapsABI,
      'getAllSwaps',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfSwapsABI,
    functionName: 'getAllSwaps',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfSwapsABI,
    'getAllSwaps',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `functionName` set to `"getSNList"`.
 */
export function useIRegisterOfSwapsGetSnList<
  TSelectData = ReadContractResult<typeof iRegisterOfSwapsABI, 'getSNList'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRegisterOfSwapsABI, 'getSNList', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfSwapsABI,
    functionName: 'getSNList',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfSwapsABI,
    'getSNList',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `functionName` set to `"getSwap"`.
 */
export function useIRegisterOfSwapsGetSwap<
  TSelectData = ReadContractResult<typeof iRegisterOfSwapsABI, 'getSwap'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRegisterOfSwapsABI, 'getSwap', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfSwapsABI,
    functionName: 'getSwap',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfSwapsABI,
    'getSwap',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `functionName` set to `"isSwapSN"`.
 */
export function useIRegisterOfSwapsIsSwapSn<
  TSelectData = ReadContractResult<typeof iRegisterOfSwapsABI, 'isSwapSN'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRegisterOfSwapsABI, 'isSwapSN', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfSwapsABI,
    functionName: 'isSwapSN',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfSwapsABI,
    'isSwapSN',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `functionName` set to `"isSwapSeq"`.
 */
export function useIRegisterOfSwapsIsSwapSeq<
  TSelectData = ReadContractResult<typeof iRegisterOfSwapsABI, 'isSwapSeq'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRegisterOfSwapsABI, 'isSwapSeq', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRegisterOfSwapsABI,
    functionName: 'isSwapSeq',
    ...config,
  } as UseContractReadConfig<
    typeof iRegisterOfSwapsABI,
    'isSwapSeq',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfSwapsABI}__.
 */
export function useIRegisterOfSwapsWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iRegisterOfSwapsABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfSwapsABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegisterOfSwapsABI, TFunctionName>({
    abi: iRegisterOfSwapsABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `functionName` set to `"createSwap"`.
 */
export function useIRegisterOfSwapsCreateSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfSwapsABI,
          'createSwap'
        >['abi'],
        'createSwap'
      > & { functionName?: 'createSwap' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfSwapsABI,
        'createSwap'
      > & {
        abi?: never
        functionName?: 'createSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegisterOfSwapsABI, 'createSwap'>({
    abi: iRegisterOfSwapsABI,
    functionName: 'createSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `functionName` set to `"crystalizeSwap"`.
 */
export function useIRegisterOfSwapsCrystalizeSwap<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfSwapsABI,
          'crystalizeSwap'
        >['abi'],
        'crystalizeSwap'
      > & { functionName?: 'crystalizeSwap' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfSwapsABI,
        'crystalizeSwap'
      > & {
        abi?: never
        functionName?: 'crystalizeSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegisterOfSwapsABI, 'crystalizeSwap'>({
    abi: iRegisterOfSwapsABI,
    functionName: 'crystalizeSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `functionName` set to `"execSwap"`.
 */
export function useIRegisterOfSwapsExecSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfSwapsABI,
          'execSwap'
        >['abi'],
        'execSwap'
      > & { functionName?: 'execSwap' }
    : UseContractWriteConfig<TMode, typeof iRegisterOfSwapsABI, 'execSwap'> & {
        abi?: never
        functionName?: 'execSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegisterOfSwapsABI, 'execSwap'>({
    abi: iRegisterOfSwapsABI,
    functionName: 'execSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `functionName` set to `"issueSwap"`.
 */
export function useIRegisterOfSwapsIssueSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfSwapsABI,
          'issueSwap'
        >['abi'],
        'issueSwap'
      > & { functionName?: 'issueSwap' }
    : UseContractWriteConfig<TMode, typeof iRegisterOfSwapsABI, 'issueSwap'> & {
        abi?: never
        functionName?: 'issueSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegisterOfSwapsABI, 'issueSwap'>({
    abi: iRegisterOfSwapsABI,
    functionName: 'issueSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `functionName` set to `"lockSwap"`.
 */
export function useIRegisterOfSwapsLockSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfSwapsABI,
          'lockSwap'
        >['abi'],
        'lockSwap'
      > & { functionName?: 'lockSwap' }
    : UseContractWriteConfig<TMode, typeof iRegisterOfSwapsABI, 'lockSwap'> & {
        abi?: never
        functionName?: 'lockSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegisterOfSwapsABI, 'lockSwap'>({
    abi: iRegisterOfSwapsABI,
    functionName: 'lockSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `functionName` set to `"regSwap"`.
 */
export function useIRegisterOfSwapsRegSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfSwapsABI,
          'regSwap'
        >['abi'],
        'regSwap'
      > & { functionName?: 'regSwap' }
    : UseContractWriteConfig<TMode, typeof iRegisterOfSwapsABI, 'regSwap'> & {
        abi?: never
        functionName?: 'regSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegisterOfSwapsABI, 'regSwap'>({
    abi: iRegisterOfSwapsABI,
    functionName: 'regSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `functionName` set to `"releaseSwap"`.
 */
export function useIRegisterOfSwapsReleaseSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfSwapsABI,
          'releaseSwap'
        >['abi'],
        'releaseSwap'
      > & { functionName?: 'releaseSwap' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfSwapsABI,
        'releaseSwap'
      > & {
        abi?: never
        functionName?: 'releaseSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegisterOfSwapsABI, 'releaseSwap'>({
    abi: iRegisterOfSwapsABI,
    functionName: 'releaseSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `functionName` set to `"revokeSwap"`.
 */
export function useIRegisterOfSwapsRevokeSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfSwapsABI,
          'revokeSwap'
        >['abi'],
        'revokeSwap'
      > & { functionName?: 'revokeSwap' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfSwapsABI,
        'revokeSwap'
      > & {
        abi?: never
        functionName?: 'revokeSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegisterOfSwapsABI, 'revokeSwap'>({
    abi: iRegisterOfSwapsABI,
    functionName: 'revokeSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `functionName` set to `"transferSwap"`.
 */
export function useIRegisterOfSwapsTransferSwap<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRegisterOfSwapsABI,
          'transferSwap'
        >['abi'],
        'transferSwap'
      > & { functionName?: 'transferSwap' }
    : UseContractWriteConfig<
        TMode,
        typeof iRegisterOfSwapsABI,
        'transferSwap'
      > & {
        abi?: never
        functionName?: 'transferSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRegisterOfSwapsABI, 'transferSwap'>({
    abi: iRegisterOfSwapsABI,
    functionName: 'transferSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfSwapsABI}__.
 */
export function usePrepareIRegisterOfSwapsWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegisterOfSwapsABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfSwapsABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegisterOfSwapsABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `functionName` set to `"createSwap"`.
 */
export function usePrepareIRegisterOfSwapsCreateSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegisterOfSwapsABI, 'createSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfSwapsABI,
    functionName: 'createSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegisterOfSwapsABI, 'createSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `functionName` set to `"crystalizeSwap"`.
 */
export function usePrepareIRegisterOfSwapsCrystalizeSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegisterOfSwapsABI, 'crystalizeSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfSwapsABI,
    functionName: 'crystalizeSwap',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfSwapsABI,
    'crystalizeSwap'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `functionName` set to `"execSwap"`.
 */
export function usePrepareIRegisterOfSwapsExecSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegisterOfSwapsABI, 'execSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfSwapsABI,
    functionName: 'execSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegisterOfSwapsABI, 'execSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `functionName` set to `"issueSwap"`.
 */
export function usePrepareIRegisterOfSwapsIssueSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegisterOfSwapsABI, 'issueSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfSwapsABI,
    functionName: 'issueSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegisterOfSwapsABI, 'issueSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `functionName` set to `"lockSwap"`.
 */
export function usePrepareIRegisterOfSwapsLockSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegisterOfSwapsABI, 'lockSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfSwapsABI,
    functionName: 'lockSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegisterOfSwapsABI, 'lockSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `functionName` set to `"regSwap"`.
 */
export function usePrepareIRegisterOfSwapsRegSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegisterOfSwapsABI, 'regSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfSwapsABI,
    functionName: 'regSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegisterOfSwapsABI, 'regSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `functionName` set to `"releaseSwap"`.
 */
export function usePrepareIRegisterOfSwapsReleaseSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegisterOfSwapsABI, 'releaseSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfSwapsABI,
    functionName: 'releaseSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegisterOfSwapsABI, 'releaseSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `functionName` set to `"revokeSwap"`.
 */
export function usePrepareIRegisterOfSwapsRevokeSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegisterOfSwapsABI, 'revokeSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfSwapsABI,
    functionName: 'revokeSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegisterOfSwapsABI, 'revokeSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `functionName` set to `"transferSwap"`.
 */
export function usePrepareIRegisterOfSwapsTransferSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegisterOfSwapsABI, 'transferSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRegisterOfSwapsABI,
    functionName: 'transferSwap',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRegisterOfSwapsABI,
    'transferSwap'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfSwapsABI}__.
 */
export function useIRegisterOfSwapsEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfSwapsABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfSwapsABI,
    ...config,
  } as UseContractEventConfig<typeof iRegisterOfSwapsABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `eventName` set to `"CreateSwap"`.
 */
export function useIRegisterOfSwapsCreateSwapEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfSwapsABI, 'CreateSwap'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfSwapsABI,
    eventName: 'CreateSwap',
    ...config,
  } as UseContractEventConfig<typeof iRegisterOfSwapsABI, 'CreateSwap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `eventName` set to `"CrystalizeSwap"`.
 */
export function useIRegisterOfSwapsCrystalizeSwapEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfSwapsABI, 'CrystalizeSwap'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfSwapsABI,
    eventName: 'CrystalizeSwap',
    ...config,
  } as UseContractEventConfig<typeof iRegisterOfSwapsABI, 'CrystalizeSwap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `eventName` set to `"ExecSwap"`.
 */
export function useIRegisterOfSwapsExecSwapEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfSwapsABI, 'ExecSwap'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfSwapsABI,
    eventName: 'ExecSwap',
    ...config,
  } as UseContractEventConfig<typeof iRegisterOfSwapsABI, 'ExecSwap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `eventName` set to `"LockSwap"`.
 */
export function useIRegisterOfSwapsLockSwapEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfSwapsABI, 'LockSwap'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfSwapsABI,
    eventName: 'LockSwap',
    ...config,
  } as UseContractEventConfig<typeof iRegisterOfSwapsABI, 'LockSwap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `eventName` set to `"ReleaseSwap"`.
 */
export function useIRegisterOfSwapsReleaseSwapEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfSwapsABI, 'ReleaseSwap'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfSwapsABI,
    eventName: 'ReleaseSwap',
    ...config,
  } as UseContractEventConfig<typeof iRegisterOfSwapsABI, 'ReleaseSwap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRegisterOfSwapsABI}__ and `eventName` set to `"RevokeSwap"`.
 */
export function useIRegisterOfSwapsRevokeSwapEvent(
  config: Omit<
    UseContractEventConfig<typeof iRegisterOfSwapsABI, 'RevokeSwap'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRegisterOfSwapsABI,
    eventName: 'RevokeSwap',
    ...config,
  } as UseContractEventConfig<typeof iRegisterOfSwapsABI, 'RevokeSwap'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link registerOfSwapsABI}__.
 */
export function useRegisterOfSwaps(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: registerOfSwapsABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfSwapsABI}__.
 */
export function useRegisterOfSwapsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof registerOfSwapsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfSwapsABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfSwapsABI,
    ...config,
  } as UseContractReadConfig<
    typeof registerOfSwapsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"counterOfSwap"`.
 */
export function useRegisterOfSwapsCounterOfSwap<
  TSelectData = ReadContractResult<typeof registerOfSwapsABI, 'counterOfSwap'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfSwapsABI,
      'counterOfSwap',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfSwapsABI,
    functionName: 'counterOfSwap',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfSwapsABI,
    'counterOfSwap',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"finalized"`.
 */
export function useRegisterOfSwapsFinalized<
  TSelectData = ReadContractResult<typeof registerOfSwapsABI, 'finalized'>,
>(
  config: Omit<
    UseContractReadConfig<typeof registerOfSwapsABI, 'finalized', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfSwapsABI,
    functionName: 'finalized',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfSwapsABI,
    'finalized',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"getAllSwaps"`.
 */
export function useRegisterOfSwapsGetAllSwaps<
  TSelectData = ReadContractResult<typeof registerOfSwapsABI, 'getAllSwaps'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfSwapsABI,
      'getAllSwaps',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfSwapsABI,
    functionName: 'getAllSwaps',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfSwapsABI,
    'getAllSwaps',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"getBookeeper"`.
 */
export function useRegisterOfSwapsGetBookeeper<
  TSelectData = ReadContractResult<typeof registerOfSwapsABI, 'getBookeeper'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfSwapsABI,
      'getBookeeper',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfSwapsABI,
    functionName: 'getBookeeper',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfSwapsABI,
    'getBookeeper',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"getGeneralCounsel"`.
 */
export function useRegisterOfSwapsGetGeneralCounsel<
  TSelectData = ReadContractResult<
    typeof registerOfSwapsABI,
    'getGeneralCounsel'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registerOfSwapsABI,
      'getGeneralCounsel',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfSwapsABI,
    functionName: 'getGeneralCounsel',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfSwapsABI,
    'getGeneralCounsel',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"getOwner"`.
 */
export function useRegisterOfSwapsGetOwner<
  TSelectData = ReadContractResult<typeof registerOfSwapsABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof registerOfSwapsABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfSwapsABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfSwapsABI,
    'getOwner',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"getSNList"`.
 */
export function useRegisterOfSwapsGetSnList<
  TSelectData = ReadContractResult<typeof registerOfSwapsABI, 'getSNList'>,
>(
  config: Omit<
    UseContractReadConfig<typeof registerOfSwapsABI, 'getSNList', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfSwapsABI,
    functionName: 'getSNList',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfSwapsABI,
    'getSNList',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"getSwap"`.
 */
export function useRegisterOfSwapsGetSwap<
  TSelectData = ReadContractResult<typeof registerOfSwapsABI, 'getSwap'>,
>(
  config: Omit<
    UseContractReadConfig<typeof registerOfSwapsABI, 'getSwap', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfSwapsABI,
    functionName: 'getSwap',
    ...config,
  } as UseContractReadConfig<typeof registerOfSwapsABI, 'getSwap', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"hasRole"`.
 */
export function useRegisterOfSwapsHasRole<
  TSelectData = ReadContractResult<typeof registerOfSwapsABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof registerOfSwapsABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfSwapsABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof registerOfSwapsABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"isSwapSN"`.
 */
export function useRegisterOfSwapsIsSwapSn<
  TSelectData = ReadContractResult<typeof registerOfSwapsABI, 'isSwapSN'>,
>(
  config: Omit<
    UseContractReadConfig<typeof registerOfSwapsABI, 'isSwapSN', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfSwapsABI,
    functionName: 'isSwapSN',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfSwapsABI,
    'isSwapSN',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"isSwapSeq"`.
 */
export function useRegisterOfSwapsIsSwapSeq<
  TSelectData = ReadContractResult<typeof registerOfSwapsABI, 'isSwapSeq'>,
>(
  config: Omit<
    UseContractReadConfig<typeof registerOfSwapsABI, 'isSwapSeq', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registerOfSwapsABI,
    functionName: 'isSwapSeq',
    ...config,
  } as UseContractReadConfig<
    typeof registerOfSwapsABI,
    'isSwapSeq',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__.
 */
export function useRegisterOfSwapsWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof registerOfSwapsABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof registerOfSwapsABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfSwapsABI, TFunctionName>({
    abi: registerOfSwapsABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useRegisterOfSwapsAbandonRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfSwapsABI,
          'abandonRole'
        >['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfSwapsABI,
        'abandonRole'
      > & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfSwapsABI, 'abandonRole'>({
    abi: registerOfSwapsABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"createSwap"`.
 */
export function useRegisterOfSwapsCreateSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfSwapsABI,
          'createSwap'
        >['abi'],
        'createSwap'
      > & { functionName?: 'createSwap' }
    : UseContractWriteConfig<TMode, typeof registerOfSwapsABI, 'createSwap'> & {
        abi?: never
        functionName?: 'createSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfSwapsABI, 'createSwap'>({
    abi: registerOfSwapsABI,
    functionName: 'createSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"crystalizeSwap"`.
 */
export function useRegisterOfSwapsCrystalizeSwap<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfSwapsABI,
          'crystalizeSwap'
        >['abi'],
        'crystalizeSwap'
      > & { functionName?: 'crystalizeSwap' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfSwapsABI,
        'crystalizeSwap'
      > & {
        abi?: never
        functionName?: 'crystalizeSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfSwapsABI, 'crystalizeSwap'>({
    abi: registerOfSwapsABI,
    functionName: 'crystalizeSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"execSwap"`.
 */
export function useRegisterOfSwapsExecSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfSwapsABI,
          'execSwap'
        >['abi'],
        'execSwap'
      > & { functionName?: 'execSwap' }
    : UseContractWriteConfig<TMode, typeof registerOfSwapsABI, 'execSwap'> & {
        abi?: never
        functionName?: 'execSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfSwapsABI, 'execSwap'>({
    abi: registerOfSwapsABI,
    functionName: 'execSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"grantRole"`.
 */
export function useRegisterOfSwapsGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfSwapsABI,
          'grantRole'
        >['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof registerOfSwapsABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfSwapsABI, 'grantRole'>({
    abi: registerOfSwapsABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"init"`.
 */
export function useRegisterOfSwapsInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof registerOfSwapsABI, 'init'>['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof registerOfSwapsABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfSwapsABI, 'init'>({
    abi: registerOfSwapsABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"issueSwap"`.
 */
export function useRegisterOfSwapsIssueSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfSwapsABI,
          'issueSwap'
        >['abi'],
        'issueSwap'
      > & { functionName?: 'issueSwap' }
    : UseContractWriteConfig<TMode, typeof registerOfSwapsABI, 'issueSwap'> & {
        abi?: never
        functionName?: 'issueSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfSwapsABI, 'issueSwap'>({
    abi: registerOfSwapsABI,
    functionName: 'issueSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"lockContents"`.
 */
export function useRegisterOfSwapsLockContents<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfSwapsABI,
          'lockContents'
        >['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfSwapsABI,
        'lockContents'
      > & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfSwapsABI, 'lockContents'>({
    abi: registerOfSwapsABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"lockSwap"`.
 */
export function useRegisterOfSwapsLockSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfSwapsABI,
          'lockSwap'
        >['abi'],
        'lockSwap'
      > & { functionName?: 'lockSwap' }
    : UseContractWriteConfig<TMode, typeof registerOfSwapsABI, 'lockSwap'> & {
        abi?: never
        functionName?: 'lockSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfSwapsABI, 'lockSwap'>({
    abi: registerOfSwapsABI,
    functionName: 'lockSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"regSwap"`.
 */
export function useRegisterOfSwapsRegSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof registerOfSwapsABI, 'regSwap'>['abi'],
        'regSwap'
      > & { functionName?: 'regSwap' }
    : UseContractWriteConfig<TMode, typeof registerOfSwapsABI, 'regSwap'> & {
        abi?: never
        functionName?: 'regSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfSwapsABI, 'regSwap'>({
    abi: registerOfSwapsABI,
    functionName: 'regSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"releaseSwap"`.
 */
export function useRegisterOfSwapsReleaseSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfSwapsABI,
          'releaseSwap'
        >['abi'],
        'releaseSwap'
      > & { functionName?: 'releaseSwap' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfSwapsABI,
        'releaseSwap'
      > & {
        abi?: never
        functionName?: 'releaseSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfSwapsABI, 'releaseSwap'>({
    abi: registerOfSwapsABI,
    functionName: 'releaseSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function useRegisterOfSwapsRemoveDirectKeeper<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfSwapsABI,
          'removeDirectKeeper'
        >['abi'],
        'removeDirectKeeper'
      > & { functionName?: 'removeDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfSwapsABI,
        'removeDirectKeeper'
      > & {
        abi?: never
        functionName?: 'removeDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfSwapsABI,
    'removeDirectKeeper'
  >({
    abi: registerOfSwapsABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useRegisterOfSwapsRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfSwapsABI,
          'renounceRole'
        >['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfSwapsABI,
        'renounceRole'
      > & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfSwapsABI, 'renounceRole'>({
    abi: registerOfSwapsABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useRegisterOfSwapsRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfSwapsABI,
          'revokeRole'
        >['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof registerOfSwapsABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfSwapsABI, 'revokeRole'>({
    abi: registerOfSwapsABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"revokeSwap"`.
 */
export function useRegisterOfSwapsRevokeSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfSwapsABI,
          'revokeSwap'
        >['abi'],
        'revokeSwap'
      > & { functionName?: 'revokeSwap' }
    : UseContractWriteConfig<TMode, typeof registerOfSwapsABI, 'revokeSwap'> & {
        abi?: never
        functionName?: 'revokeSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfSwapsABI, 'revokeSwap'>({
    abi: registerOfSwapsABI,
    functionName: 'revokeSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useRegisterOfSwapsSetDirectKeeper<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfSwapsABI,
          'setDirectKeeper'
        >['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfSwapsABI,
        'setDirectKeeper'
      > & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfSwapsABI, 'setDirectKeeper'>({
    abi: registerOfSwapsABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function useRegisterOfSwapsSetGeneralCounsel<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfSwapsABI,
          'setGeneralCounsel'
        >['abi'],
        'setGeneralCounsel'
      > & { functionName?: 'setGeneralCounsel' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfSwapsABI,
        'setGeneralCounsel'
      > & {
        abi?: never
        functionName?: 'setGeneralCounsel'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof registerOfSwapsABI,
    'setGeneralCounsel'
  >({
    abi: registerOfSwapsABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"setOwner"`.
 */
export function useRegisterOfSwapsSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfSwapsABI,
          'setOwner'
        >['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof registerOfSwapsABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfSwapsABI, 'setOwner'>({
    abi: registerOfSwapsABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useRegisterOfSwapsSetRoleAdmin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfSwapsABI,
          'setRoleAdmin'
        >['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfSwapsABI,
        'setRoleAdmin'
      > & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfSwapsABI, 'setRoleAdmin'>({
    abi: registerOfSwapsABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"transferSwap"`.
 */
export function useRegisterOfSwapsTransferSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registerOfSwapsABI,
          'transferSwap'
        >['abi'],
        'transferSwap'
      > & { functionName?: 'transferSwap' }
    : UseContractWriteConfig<
        TMode,
        typeof registerOfSwapsABI,
        'transferSwap'
      > & {
        abi?: never
        functionName?: 'transferSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof registerOfSwapsABI, 'transferSwap'>({
    abi: registerOfSwapsABI,
    functionName: 'transferSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__.
 */
export function usePrepareRegisterOfSwapsWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfSwapsABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfSwapsABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfSwapsABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareRegisterOfSwapsAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfSwapsABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'abandonRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"createSwap"`.
 */
export function usePrepareRegisterOfSwapsCreateSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'createSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfSwapsABI,
    functionName: 'createSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'createSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"crystalizeSwap"`.
 */
export function usePrepareRegisterOfSwapsCrystalizeSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'crystalizeSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfSwapsABI,
    functionName: 'crystalizeSwap',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfSwapsABI,
    'crystalizeSwap'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"execSwap"`.
 */
export function usePrepareRegisterOfSwapsExecSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'execSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfSwapsABI,
    functionName: 'execSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'execSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareRegisterOfSwapsGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfSwapsABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareRegisterOfSwapsInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfSwapsABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"issueSwap"`.
 */
export function usePrepareRegisterOfSwapsIssueSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'issueSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfSwapsABI,
    functionName: 'issueSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'issueSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareRegisterOfSwapsLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'lockContents'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfSwapsABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'lockContents'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"lockSwap"`.
 */
export function usePrepareRegisterOfSwapsLockSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'lockSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfSwapsABI,
    functionName: 'lockSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'lockSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"regSwap"`.
 */
export function usePrepareRegisterOfSwapsRegSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'regSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfSwapsABI,
    functionName: 'regSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'regSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"releaseSwap"`.
 */
export function usePrepareRegisterOfSwapsReleaseSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'releaseSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfSwapsABI,
    functionName: 'releaseSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'releaseSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function usePrepareRegisterOfSwapsRemoveDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfSwapsABI,
      'removeDirectKeeper'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfSwapsABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfSwapsABI,
    'removeDirectKeeper'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareRegisterOfSwapsRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfSwapsABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareRegisterOfSwapsRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfSwapsABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"revokeSwap"`.
 */
export function usePrepareRegisterOfSwapsRevokeSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'revokeSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfSwapsABI,
    functionName: 'revokeSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'revokeSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareRegisterOfSwapsSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'setDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfSwapsABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfSwapsABI,
    'setDirectKeeper'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function usePrepareRegisterOfSwapsSetGeneralCounsel(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registerOfSwapsABI,
      'setGeneralCounsel'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfSwapsABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registerOfSwapsABI,
    'setGeneralCounsel'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareRegisterOfSwapsSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfSwapsABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareRegisterOfSwapsSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'setRoleAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfSwapsABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'setRoleAdmin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registerOfSwapsABI}__ and `functionName` set to `"transferSwap"`.
 */
export function usePrepareRegisterOfSwapsTransferSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'transferSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registerOfSwapsABI,
    functionName: 'transferSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registerOfSwapsABI, 'transferSwap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfSwapsABI}__.
 */
export function useRegisterOfSwapsEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof registerOfSwapsABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfSwapsABI,
    ...config,
  } as UseContractEventConfig<typeof registerOfSwapsABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfSwapsABI}__ and `eventName` set to `"CreateSwap"`.
 */
export function useRegisterOfSwapsCreateSwapEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfSwapsABI, 'CreateSwap'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfSwapsABI,
    eventName: 'CreateSwap',
    ...config,
  } as UseContractEventConfig<typeof registerOfSwapsABI, 'CreateSwap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfSwapsABI}__ and `eventName` set to `"CrystalizeSwap"`.
 */
export function useRegisterOfSwapsCrystalizeSwapEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfSwapsABI, 'CrystalizeSwap'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfSwapsABI,
    eventName: 'CrystalizeSwap',
    ...config,
  } as UseContractEventConfig<typeof registerOfSwapsABI, 'CrystalizeSwap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfSwapsABI}__ and `eventName` set to `"ExecSwap"`.
 */
export function useRegisterOfSwapsExecSwapEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfSwapsABI, 'ExecSwap'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfSwapsABI,
    eventName: 'ExecSwap',
    ...config,
  } as UseContractEventConfig<typeof registerOfSwapsABI, 'ExecSwap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfSwapsABI}__ and `eventName` set to `"Init"`.
 */
export function useRegisterOfSwapsInitEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfSwapsABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfSwapsABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof registerOfSwapsABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfSwapsABI}__ and `eventName` set to `"LockContents"`.
 */
export function useRegisterOfSwapsLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfSwapsABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfSwapsABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof registerOfSwapsABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfSwapsABI}__ and `eventName` set to `"LockSwap"`.
 */
export function useRegisterOfSwapsLockSwapEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfSwapsABI, 'LockSwap'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfSwapsABI,
    eventName: 'LockSwap',
    ...config,
  } as UseContractEventConfig<typeof registerOfSwapsABI, 'LockSwap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfSwapsABI}__ and `eventName` set to `"ReleaseSwap"`.
 */
export function useRegisterOfSwapsReleaseSwapEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfSwapsABI, 'ReleaseSwap'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfSwapsABI,
    eventName: 'ReleaseSwap',
    ...config,
  } as UseContractEventConfig<typeof registerOfSwapsABI, 'ReleaseSwap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfSwapsABI}__ and `eventName` set to `"RemoveDirectKeeper"`.
 */
export function useRegisterOfSwapsRemoveDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfSwapsABI, 'RemoveDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfSwapsABI,
    eventName: 'RemoveDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof registerOfSwapsABI, 'RemoveDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfSwapsABI}__ and `eventName` set to `"RevokeSwap"`.
 */
export function useRegisterOfSwapsRevokeSwapEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfSwapsABI, 'RevokeSwap'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfSwapsABI,
    eventName: 'RevokeSwap',
    ...config,
  } as UseContractEventConfig<typeof registerOfSwapsABI, 'RevokeSwap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfSwapsABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useRegisterOfSwapsSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfSwapsABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfSwapsABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof registerOfSwapsABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfSwapsABI}__ and `eventName` set to `"SetGeneralCounsel"`.
 */
export function useRegisterOfSwapsSetGeneralCounselEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfSwapsABI, 'SetGeneralCounsel'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfSwapsABI,
    eventName: 'SetGeneralCounsel',
    ...config,
  } as UseContractEventConfig<typeof registerOfSwapsABI, 'SetGeneralCounsel'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registerOfSwapsABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useRegisterOfSwapsSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof registerOfSwapsABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registerOfSwapsABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof registerOfSwapsABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link accessControlABI}__.
 */
export function useAccessControl(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: accessControlABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__.
 */
export function useAccessControlRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof accessControlABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof accessControlABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlABI,
    ...config,
  } as UseContractReadConfig<
    typeof accessControlABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"finalized"`.
 */
export function useAccessControlFinalized<
  TSelectData = ReadContractResult<typeof accessControlABI, 'finalized'>,
>(
  config: Omit<
    UseContractReadConfig<typeof accessControlABI, 'finalized', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlABI,
    functionName: 'finalized',
    ...config,
  } as UseContractReadConfig<typeof accessControlABI, 'finalized', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"getBookeeper"`.
 */
export function useAccessControlGetBookeeper<
  TSelectData = ReadContractResult<typeof accessControlABI, 'getBookeeper'>,
>(
  config: Omit<
    UseContractReadConfig<typeof accessControlABI, 'getBookeeper', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlABI,
    functionName: 'getBookeeper',
    ...config,
  } as UseContractReadConfig<
    typeof accessControlABI,
    'getBookeeper',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"getGeneralCounsel"`.
 */
export function useAccessControlGetGeneralCounsel<
  TSelectData = ReadContractResult<
    typeof accessControlABI,
    'getGeneralCounsel'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accessControlABI,
      'getGeneralCounsel',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlABI,
    functionName: 'getGeneralCounsel',
    ...config,
  } as UseContractReadConfig<
    typeof accessControlABI,
    'getGeneralCounsel',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"getOwner"`.
 */
export function useAccessControlGetOwner<
  TSelectData = ReadContractResult<typeof accessControlABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof accessControlABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<typeof accessControlABI, 'getOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"hasRole"`.
 */
export function useAccessControlHasRole<
  TSelectData = ReadContractResult<typeof accessControlABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof accessControlABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof accessControlABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__.
 */
export function useAccessControlWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof accessControlABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof accessControlABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof accessControlABI, TFunctionName>({
    abi: accessControlABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useAccessControlAbandonRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof accessControlABI,
          'abandonRole'
        >['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<TMode, typeof accessControlABI, 'abandonRole'> & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof accessControlABI, 'abandonRole'>({
    abi: accessControlABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"grantRole"`.
 */
export function useAccessControlGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof accessControlABI, 'grantRole'>['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof accessControlABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof accessControlABI, 'grantRole'>({
    abi: accessControlABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"init"`.
 */
export function useAccessControlInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof accessControlABI, 'init'>['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof accessControlABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof accessControlABI, 'init'>({
    abi: accessControlABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"lockContents"`.
 */
export function useAccessControlLockContents<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof accessControlABI,
          'lockContents'
        >['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<TMode, typeof accessControlABI, 'lockContents'> & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof accessControlABI, 'lockContents'>({
    abi: accessControlABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function useAccessControlRemoveDirectKeeper<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof accessControlABI,
          'removeDirectKeeper'
        >['abi'],
        'removeDirectKeeper'
      > & { functionName?: 'removeDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof accessControlABI,
        'removeDirectKeeper'
      > & {
        abi?: never
        functionName?: 'removeDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof accessControlABI, 'removeDirectKeeper'>(
    {
      abi: accessControlABI,
      functionName: 'removeDirectKeeper',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useAccessControlRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof accessControlABI,
          'renounceRole'
        >['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<TMode, typeof accessControlABI, 'renounceRole'> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof accessControlABI, 'renounceRole'>({
    abi: accessControlABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useAccessControlRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof accessControlABI,
          'revokeRole'
        >['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof accessControlABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof accessControlABI, 'revokeRole'>({
    abi: accessControlABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useAccessControlSetDirectKeeper<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof accessControlABI,
          'setDirectKeeper'
        >['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof accessControlABI,
        'setDirectKeeper'
      > & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof accessControlABI, 'setDirectKeeper'>({
    abi: accessControlABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function useAccessControlSetGeneralCounsel<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof accessControlABI,
          'setGeneralCounsel'
        >['abi'],
        'setGeneralCounsel'
      > & { functionName?: 'setGeneralCounsel' }
    : UseContractWriteConfig<
        TMode,
        typeof accessControlABI,
        'setGeneralCounsel'
      > & {
        abi?: never
        functionName?: 'setGeneralCounsel'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof accessControlABI, 'setGeneralCounsel'>({
    abi: accessControlABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"setOwner"`.
 */
export function useAccessControlSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof accessControlABI, 'setOwner'>['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof accessControlABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof accessControlABI, 'setOwner'>({
    abi: accessControlABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useAccessControlSetRoleAdmin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof accessControlABI,
          'setRoleAdmin'
        >['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<TMode, typeof accessControlABI, 'setRoleAdmin'> & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof accessControlABI, 'setRoleAdmin'>({
    abi: accessControlABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__.
 */
export function usePrepareAccessControlWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareAccessControlAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlABI, 'abandonRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareAccessControlGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareAccessControlInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareAccessControlLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlABI, 'lockContents'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlABI, 'lockContents'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function usePrepareAccessControlRemoveDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof accessControlABI,
      'removeDirectKeeper'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof accessControlABI,
    'removeDirectKeeper'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareAccessControlRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareAccessControlRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareAccessControlSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlABI, 'setDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof accessControlABI,
    'setDirectKeeper'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function usePrepareAccessControlSetGeneralCounsel(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlABI, 'setGeneralCounsel'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof accessControlABI,
    'setGeneralCounsel'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareAccessControlSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareAccessControlSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlABI, 'setRoleAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlABI, 'setRoleAdmin'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlABI}__.
 */
export function useAccessControlEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof accessControlABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlABI,
    ...config,
  } as UseContractEventConfig<typeof accessControlABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlABI}__ and `eventName` set to `"Init"`.
 */
export function useAccessControlInitEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof accessControlABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlABI}__ and `eventName` set to `"LockContents"`.
 */
export function useAccessControlLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof accessControlABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlABI}__ and `eventName` set to `"RemoveDirectKeeper"`.
 */
export function useAccessControlRemoveDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlABI, 'RemoveDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlABI,
    eventName: 'RemoveDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof accessControlABI, 'RemoveDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useAccessControlSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof accessControlABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlABI}__ and `eventName` set to `"SetGeneralCounsel"`.
 */
export function useAccessControlSetGeneralCounselEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlABI, 'SetGeneralCounsel'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlABI,
    eventName: 'SetGeneralCounsel',
    ...config,
  } as UseContractEventConfig<typeof accessControlABI, 'SetGeneralCounsel'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useAccessControlSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof accessControlABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function useIAccessControl(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iAccessControlABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function useIAccessControlRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iAccessControlABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAccessControlABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iAccessControlABI,
    ...config,
  } as UseContractReadConfig<
    typeof iAccessControlABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"finalized"`.
 */
export function useIAccessControlFinalized<
  TSelectData = ReadContractResult<typeof iAccessControlABI, 'finalized'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAccessControlABI, 'finalized', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAccessControlABI,
    functionName: 'finalized',
    ...config,
  } as UseContractReadConfig<
    typeof iAccessControlABI,
    'finalized',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"getBookeeper"`.
 */
export function useIAccessControlGetBookeeper<
  TSelectData = ReadContractResult<typeof iAccessControlABI, 'getBookeeper'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iAccessControlABI,
      'getBookeeper',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAccessControlABI,
    functionName: 'getBookeeper',
    ...config,
  } as UseContractReadConfig<
    typeof iAccessControlABI,
    'getBookeeper',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"getGeneralCounsel"`.
 */
export function useIAccessControlGetGeneralCounsel<
  TSelectData = ReadContractResult<
    typeof iAccessControlABI,
    'getGeneralCounsel'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iAccessControlABI,
      'getGeneralCounsel',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAccessControlABI,
    functionName: 'getGeneralCounsel',
    ...config,
  } as UseContractReadConfig<
    typeof iAccessControlABI,
    'getGeneralCounsel',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"getOwner"`.
 */
export function useIAccessControlGetOwner<
  TSelectData = ReadContractResult<typeof iAccessControlABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAccessControlABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAccessControlABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<typeof iAccessControlABI, 'getOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"hasRole"`.
 */
export function useIAccessControlHasRole<
  TSelectData = ReadContractResult<typeof iAccessControlABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAccessControlABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAccessControlABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof iAccessControlABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function useIAccessControlWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iAccessControlABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iAccessControlABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAccessControlABI, TFunctionName>({
    abi: iAccessControlABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useIAccessControlAbandonRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iAccessControlABI,
          'abandonRole'
        >['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<TMode, typeof iAccessControlABI, 'abandonRole'> & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAccessControlABI, 'abandonRole'>({
    abi: iAccessControlABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"grantRole"`.
 */
export function useIAccessControlGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iAccessControlABI,
          'grantRole'
        >['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof iAccessControlABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAccessControlABI, 'grantRole'>({
    abi: iAccessControlABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"init"`.
 */
export function useIAccessControlInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iAccessControlABI, 'init'>['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof iAccessControlABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAccessControlABI, 'init'>({
    abi: iAccessControlABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"lockContents"`.
 */
export function useIAccessControlLockContents<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iAccessControlABI,
          'lockContents'
        >['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<
        TMode,
        typeof iAccessControlABI,
        'lockContents'
      > & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAccessControlABI, 'lockContents'>({
    abi: iAccessControlABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function useIAccessControlRemoveDirectKeeper<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iAccessControlABI,
          'removeDirectKeeper'
        >['abi'],
        'removeDirectKeeper'
      > & { functionName?: 'removeDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof iAccessControlABI,
        'removeDirectKeeper'
      > & {
        abi?: never
        functionName?: 'removeDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iAccessControlABI,
    'removeDirectKeeper'
  >({
    abi: iAccessControlABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useIAccessControlRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iAccessControlABI,
          'renounceRole'
        >['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<
        TMode,
        typeof iAccessControlABI,
        'renounceRole'
      > & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAccessControlABI, 'renounceRole'>({
    abi: iAccessControlABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useIAccessControlRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iAccessControlABI,
          'revokeRole'
        >['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof iAccessControlABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAccessControlABI, 'revokeRole'>({
    abi: iAccessControlABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useIAccessControlSetDirectKeeper<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iAccessControlABI,
          'setDirectKeeper'
        >['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof iAccessControlABI,
        'setDirectKeeper'
      > & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAccessControlABI, 'setDirectKeeper'>({
    abi: iAccessControlABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function useIAccessControlSetGeneralCounsel<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iAccessControlABI,
          'setGeneralCounsel'
        >['abi'],
        'setGeneralCounsel'
      > & { functionName?: 'setGeneralCounsel' }
    : UseContractWriteConfig<
        TMode,
        typeof iAccessControlABI,
        'setGeneralCounsel'
      > & {
        abi?: never
        functionName?: 'setGeneralCounsel'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAccessControlABI, 'setGeneralCounsel'>(
    {
      abi: iAccessControlABI,
      functionName: 'setGeneralCounsel',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"setOwner"`.
 */
export function useIAccessControlSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iAccessControlABI, 'setOwner'>['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof iAccessControlABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAccessControlABI, 'setOwner'>({
    abi: iAccessControlABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useIAccessControlSetRoleAdmin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iAccessControlABI,
          'setRoleAdmin'
        >['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<
        TMode,
        typeof iAccessControlABI,
        'setRoleAdmin'
      > & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAccessControlABI, 'setRoleAdmin'>({
    abi: iAccessControlABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function usePrepareIAccessControlWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareIAccessControlAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlABI, 'abandonRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareIAccessControlGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareIAccessControlInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareIAccessControlLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlABI, 'lockContents'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlABI, 'lockContents'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function usePrepareIAccessControlRemoveDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iAccessControlABI,
      'removeDirectKeeper'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iAccessControlABI,
    'removeDirectKeeper'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareIAccessControlRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareIAccessControlRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareIAccessControlSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlABI, 'setDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iAccessControlABI,
    'setDirectKeeper'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function usePrepareIAccessControlSetGeneralCounsel(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iAccessControlABI,
      'setGeneralCounsel'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iAccessControlABI,
    'setGeneralCounsel'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareIAccessControlSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareIAccessControlSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlABI, 'setRoleAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlABI, 'setRoleAdmin'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function useIAccessControlEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlABI,
    ...config,
  } as UseContractEventConfig<typeof iAccessControlABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlABI}__ and `eventName` set to `"Init"`.
 */
export function useIAccessControlInitEvent(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof iAccessControlABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlABI}__ and `eventName` set to `"LockContents"`.
 */
export function useIAccessControlLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof iAccessControlABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlABI}__ and `eventName` set to `"RemoveDirectKeeper"`.
 */
export function useIAccessControlRemoveDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlABI, 'RemoveDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlABI,
    eventName: 'RemoveDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof iAccessControlABI, 'RemoveDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useIAccessControlSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof iAccessControlABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlABI}__ and `eventName` set to `"SetGeneralCounsel"`.
 */
export function useIAccessControlSetGeneralCounselEvent(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlABI, 'SetGeneralCounsel'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlABI,
    eventName: 'SetGeneralCounsel',
    ...config,
  } as UseContractEventConfig<typeof iAccessControlABI, 'SetGeneralCounsel'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useIAccessControlSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof iAccessControlABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link filesFolderABI}__.
 */
export function useFilesFolder(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: filesFolderABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link filesFolderABI}__.
 */
export function useFilesFolderRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof filesFolderABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof filesFolderABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: filesFolderABI,
    ...config,
  } as UseContractReadConfig<typeof filesFolderABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"closingDeadline"`.
 */
export function useFilesFolderClosingDeadline<
  TSelectData = ReadContractResult<typeof filesFolderABI, 'closingDeadline'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof filesFolderABI,
      'closingDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: filesFolderABI,
    functionName: 'closingDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof filesFolderABI,
    'closingDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"finalized"`.
 */
export function useFilesFolderFinalized<
  TSelectData = ReadContractResult<typeof filesFolderABI, 'finalized'>,
>(
  config: Omit<
    UseContractReadConfig<typeof filesFolderABI, 'finalized', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: filesFolderABI,
    functionName: 'finalized',
    ...config,
  } as UseContractReadConfig<typeof filesFolderABI, 'finalized', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"getBookeeper"`.
 */
export function useFilesFolderGetBookeeper<
  TSelectData = ReadContractResult<typeof filesFolderABI, 'getBookeeper'>,
>(
  config: Omit<
    UseContractReadConfig<typeof filesFolderABI, 'getBookeeper', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: filesFolderABI,
    functionName: 'getBookeeper',
    ...config,
  } as UseContractReadConfig<
    typeof filesFolderABI,
    'getBookeeper',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"getFile"`.
 */
export function useFilesFolderGetFile<
  TSelectData = ReadContractResult<typeof filesFolderABI, 'getFile'>,
>(
  config: Omit<
    UseContractReadConfig<typeof filesFolderABI, 'getFile', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: filesFolderABI,
    functionName: 'getFile',
    ...config,
  } as UseContractReadConfig<typeof filesFolderABI, 'getFile', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"getFilesList"`.
 */
export function useFilesFolderGetFilesList<
  TSelectData = ReadContractResult<typeof filesFolderABI, 'getFilesList'>,
>(
  config: Omit<
    UseContractReadConfig<typeof filesFolderABI, 'getFilesList', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: filesFolderABI,
    functionName: 'getFilesList',
    ...config,
  } as UseContractReadConfig<
    typeof filesFolderABI,
    'getFilesList',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"getGeneralCounsel"`.
 */
export function useFilesFolderGetGeneralCounsel<
  TSelectData = ReadContractResult<typeof filesFolderABI, 'getGeneralCounsel'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof filesFolderABI,
      'getGeneralCounsel',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: filesFolderABI,
    functionName: 'getGeneralCounsel',
    ...config,
  } as UseContractReadConfig<
    typeof filesFolderABI,
    'getGeneralCounsel',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"getHeadOfFile"`.
 */
export function useFilesFolderGetHeadOfFile<
  TSelectData = ReadContractResult<typeof filesFolderABI, 'getHeadOfFile'>,
>(
  config: Omit<
    UseContractReadConfig<typeof filesFolderABI, 'getHeadOfFile', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: filesFolderABI,
    functionName: 'getHeadOfFile',
    ...config,
  } as UseContractReadConfig<
    typeof filesFolderABI,
    'getHeadOfFile',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"getOwner"`.
 */
export function useFilesFolderGetOwner<
  TSelectData = ReadContractResult<typeof filesFolderABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof filesFolderABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: filesFolderABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<typeof filesFolderABI, 'getOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"getRefOfFile"`.
 */
export function useFilesFolderGetRefOfFile<
  TSelectData = ReadContractResult<typeof filesFolderABI, 'getRefOfFile'>,
>(
  config: Omit<
    UseContractReadConfig<typeof filesFolderABI, 'getRefOfFile', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: filesFolderABI,
    functionName: 'getRefOfFile',
    ...config,
  } as UseContractReadConfig<
    typeof filesFolderABI,
    'getRefOfFile',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"getSNOfFile"`.
 */
export function useFilesFolderGetSnOfFile<
  TSelectData = ReadContractResult<typeof filesFolderABI, 'getSNOfFile'>,
>(
  config: Omit<
    UseContractReadConfig<typeof filesFolderABI, 'getSNOfFile', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: filesFolderABI,
    functionName: 'getSNOfFile',
    ...config,
  } as UseContractReadConfig<typeof filesFolderABI, 'getSNOfFile', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"hasRole"`.
 */
export function useFilesFolderHasRole<
  TSelectData = ReadContractResult<typeof filesFolderABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof filesFolderABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: filesFolderABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof filesFolderABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"isRegistered"`.
 */
export function useFilesFolderIsRegistered<
  TSelectData = ReadContractResult<typeof filesFolderABI, 'isRegistered'>,
>(
  config: Omit<
    UseContractReadConfig<typeof filesFolderABI, 'isRegistered', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: filesFolderABI,
    functionName: 'isRegistered',
    ...config,
  } as UseContractReadConfig<
    typeof filesFolderABI,
    'isRegistered',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"qtyOfFiles"`.
 */
export function useFilesFolderQtyOfFiles<
  TSelectData = ReadContractResult<typeof filesFolderABI, 'qtyOfFiles'>,
>(
  config: Omit<
    UseContractReadConfig<typeof filesFolderABI, 'qtyOfFiles', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: filesFolderABI,
    functionName: 'qtyOfFiles',
    ...config,
  } as UseContractReadConfig<typeof filesFolderABI, 'qtyOfFiles', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"shaExecDeadline"`.
 */
export function useFilesFolderShaExecDeadline<
  TSelectData = ReadContractResult<typeof filesFolderABI, 'shaExecDeadline'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof filesFolderABI,
      'shaExecDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: filesFolderABI,
    functionName: 'shaExecDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof filesFolderABI,
    'shaExecDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"signingDeadline"`.
 */
export function useFilesFolderSigningDeadline<
  TSelectData = ReadContractResult<typeof filesFolderABI, 'signingDeadline'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof filesFolderABI,
      'signingDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: filesFolderABI,
    functionName: 'signingDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof filesFolderABI,
    'signingDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"terminateStartpoint"`.
 */
export function useFilesFolderTerminateStartpoint<
  TSelectData = ReadContractResult<
    typeof filesFolderABI,
    'terminateStartpoint'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof filesFolderABI,
      'terminateStartpoint',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: filesFolderABI,
    functionName: 'terminateStartpoint',
    ...config,
  } as UseContractReadConfig<
    typeof filesFolderABI,
    'terminateStartpoint',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"votingDeadline"`.
 */
export function useFilesFolderVotingDeadline<
  TSelectData = ReadContractResult<typeof filesFolderABI, 'votingDeadline'>,
>(
  config: Omit<
    UseContractReadConfig<typeof filesFolderABI, 'votingDeadline', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: filesFolderABI,
    functionName: 'votingDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof filesFolderABI,
    'votingDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link filesFolderABI}__.
 */
export function useFilesFolderWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof filesFolderABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof filesFolderABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof filesFolderABI, TFunctionName>({
    abi: filesFolderABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useFilesFolderAbandonRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof filesFolderABI, 'abandonRole'>['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<TMode, typeof filesFolderABI, 'abandonRole'> & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof filesFolderABI, 'abandonRole'>({
    abi: filesFolderABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"circulateFile"`.
 */
export function useFilesFolderCirculateFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof filesFolderABI,
          'circulateFile'
        >['abi'],
        'circulateFile'
      > & { functionName?: 'circulateFile' }
    : UseContractWriteConfig<TMode, typeof filesFolderABI, 'circulateFile'> & {
        abi?: never
        functionName?: 'circulateFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof filesFolderABI, 'circulateFile'>({
    abi: filesFolderABI,
    functionName: 'circulateFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"establishFile"`.
 */
export function useFilesFolderEstablishFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof filesFolderABI,
          'establishFile'
        >['abi'],
        'establishFile'
      > & { functionName?: 'establishFile' }
    : UseContractWriteConfig<TMode, typeof filesFolderABI, 'establishFile'> & {
        abi?: never
        functionName?: 'establishFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof filesFolderABI, 'establishFile'>({
    abi: filesFolderABI,
    functionName: 'establishFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"execFile"`.
 */
export function useFilesFolderExecFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof filesFolderABI, 'execFile'>['abi'],
        'execFile'
      > & { functionName?: 'execFile' }
    : UseContractWriteConfig<TMode, typeof filesFolderABI, 'execFile'> & {
        abi?: never
        functionName?: 'execFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof filesFolderABI, 'execFile'>({
    abi: filesFolderABI,
    functionName: 'execFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"grantRole"`.
 */
export function useFilesFolderGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof filesFolderABI, 'grantRole'>['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof filesFolderABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof filesFolderABI, 'grantRole'>({
    abi: filesFolderABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"init"`.
 */
export function useFilesFolderInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof filesFolderABI, 'init'>['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof filesFolderABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof filesFolderABI, 'init'>({
    abi: filesFolderABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"lockContents"`.
 */
export function useFilesFolderLockContents<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof filesFolderABI,
          'lockContents'
        >['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<TMode, typeof filesFolderABI, 'lockContents'> & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof filesFolderABI, 'lockContents'>({
    abi: filesFolderABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"proposeFile"`.
 */
export function useFilesFolderProposeFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof filesFolderABI, 'proposeFile'>['abi'],
        'proposeFile'
      > & { functionName?: 'proposeFile' }
    : UseContractWriteConfig<TMode, typeof filesFolderABI, 'proposeFile'> & {
        abi?: never
        functionName?: 'proposeFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof filesFolderABI, 'proposeFile'>({
    abi: filesFolderABI,
    functionName: 'proposeFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"regFile"`.
 */
export function useFilesFolderRegFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof filesFolderABI, 'regFile'>['abi'],
        'regFile'
      > & { functionName?: 'regFile' }
    : UseContractWriteConfig<TMode, typeof filesFolderABI, 'regFile'> & {
        abi?: never
        functionName?: 'regFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof filesFolderABI, 'regFile'>({
    abi: filesFolderABI,
    functionName: 'regFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function useFilesFolderRemoveDirectKeeper<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof filesFolderABI,
          'removeDirectKeeper'
        >['abi'],
        'removeDirectKeeper'
      > & { functionName?: 'removeDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof filesFolderABI,
        'removeDirectKeeper'
      > & {
        abi?: never
        functionName?: 'removeDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof filesFolderABI, 'removeDirectKeeper'>({
    abi: filesFolderABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useFilesFolderRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof filesFolderABI,
          'renounceRole'
        >['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<TMode, typeof filesFolderABI, 'renounceRole'> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof filesFolderABI, 'renounceRole'>({
    abi: filesFolderABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useFilesFolderRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof filesFolderABI, 'revokeRole'>['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof filesFolderABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof filesFolderABI, 'revokeRole'>({
    abi: filesFolderABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useFilesFolderSetDirectKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof filesFolderABI,
          'setDirectKeeper'
        >['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof filesFolderABI,
        'setDirectKeeper'
      > & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof filesFolderABI, 'setDirectKeeper'>({
    abi: filesFolderABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function useFilesFolderSetGeneralCounsel<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof filesFolderABI,
          'setGeneralCounsel'
        >['abi'],
        'setGeneralCounsel'
      > & { functionName?: 'setGeneralCounsel' }
    : UseContractWriteConfig<
        TMode,
        typeof filesFolderABI,
        'setGeneralCounsel'
      > & {
        abi?: never
        functionName?: 'setGeneralCounsel'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof filesFolderABI, 'setGeneralCounsel'>({
    abi: filesFolderABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"setOwner"`.
 */
export function useFilesFolderSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof filesFolderABI, 'setOwner'>['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof filesFolderABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof filesFolderABI, 'setOwner'>({
    abi: filesFolderABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useFilesFolderSetRoleAdmin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof filesFolderABI,
          'setRoleAdmin'
        >['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<TMode, typeof filesFolderABI, 'setRoleAdmin'> & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof filesFolderABI, 'setRoleAdmin'>({
    abi: filesFolderABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"setStateOfFile"`.
 */
export function useFilesFolderSetStateOfFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof filesFolderABI,
          'setStateOfFile'
        >['abi'],
        'setStateOfFile'
      > & { functionName?: 'setStateOfFile' }
    : UseContractWriteConfig<TMode, typeof filesFolderABI, 'setStateOfFile'> & {
        abi?: never
        functionName?: 'setStateOfFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof filesFolderABI, 'setStateOfFile'>({
    abi: filesFolderABI,
    functionName: 'setStateOfFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"terminateFile"`.
 */
export function useFilesFolderTerminateFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof filesFolderABI,
          'terminateFile'
        >['abi'],
        'terminateFile'
      > & { functionName?: 'terminateFile' }
    : UseContractWriteConfig<TMode, typeof filesFolderABI, 'terminateFile'> & {
        abi?: never
        functionName?: 'terminateFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof filesFolderABI, 'terminateFile'>({
    abi: filesFolderABI,
    functionName: 'terminateFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"voteCountingForFile"`.
 */
export function useFilesFolderVoteCountingForFile<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof filesFolderABI,
          'voteCountingForFile'
        >['abi'],
        'voteCountingForFile'
      > & { functionName?: 'voteCountingForFile' }
    : UseContractWriteConfig<
        TMode,
        typeof filesFolderABI,
        'voteCountingForFile'
      > & {
        abi?: never
        functionName?: 'voteCountingForFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof filesFolderABI, 'voteCountingForFile'>({
    abi: filesFolderABI,
    functionName: 'voteCountingForFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link filesFolderABI}__.
 */
export function usePrepareFilesFolderWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof filesFolderABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: filesFolderABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof filesFolderABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareFilesFolderAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof filesFolderABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: filesFolderABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof filesFolderABI, 'abandonRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"circulateFile"`.
 */
export function usePrepareFilesFolderCirculateFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof filesFolderABI, 'circulateFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: filesFolderABI,
    functionName: 'circulateFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof filesFolderABI, 'circulateFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"establishFile"`.
 */
export function usePrepareFilesFolderEstablishFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof filesFolderABI, 'establishFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: filesFolderABI,
    functionName: 'establishFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof filesFolderABI, 'establishFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"execFile"`.
 */
export function usePrepareFilesFolderExecFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof filesFolderABI, 'execFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: filesFolderABI,
    functionName: 'execFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof filesFolderABI, 'execFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareFilesFolderGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof filesFolderABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: filesFolderABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof filesFolderABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareFilesFolderInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof filesFolderABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: filesFolderABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof filesFolderABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareFilesFolderLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<typeof filesFolderABI, 'lockContents'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: filesFolderABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<typeof filesFolderABI, 'lockContents'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"proposeFile"`.
 */
export function usePrepareFilesFolderProposeFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof filesFolderABI, 'proposeFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: filesFolderABI,
    functionName: 'proposeFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof filesFolderABI, 'proposeFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"regFile"`.
 */
export function usePrepareFilesFolderRegFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof filesFolderABI, 'regFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: filesFolderABI,
    functionName: 'regFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof filesFolderABI, 'regFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function usePrepareFilesFolderRemoveDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof filesFolderABI, 'removeDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: filesFolderABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof filesFolderABI,
    'removeDirectKeeper'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareFilesFolderRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof filesFolderABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: filesFolderABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof filesFolderABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareFilesFolderRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof filesFolderABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: filesFolderABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof filesFolderABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareFilesFolderSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof filesFolderABI, 'setDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: filesFolderABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof filesFolderABI, 'setDirectKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function usePrepareFilesFolderSetGeneralCounsel(
  config: Omit<
    UsePrepareContractWriteConfig<typeof filesFolderABI, 'setGeneralCounsel'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: filesFolderABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof filesFolderABI,
    'setGeneralCounsel'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareFilesFolderSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof filesFolderABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: filesFolderABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof filesFolderABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareFilesFolderSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof filesFolderABI, 'setRoleAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: filesFolderABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof filesFolderABI, 'setRoleAdmin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"setStateOfFile"`.
 */
export function usePrepareFilesFolderSetStateOfFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof filesFolderABI, 'setStateOfFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: filesFolderABI,
    functionName: 'setStateOfFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof filesFolderABI, 'setStateOfFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"terminateFile"`.
 */
export function usePrepareFilesFolderTerminateFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof filesFolderABI, 'terminateFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: filesFolderABI,
    functionName: 'terminateFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof filesFolderABI, 'terminateFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link filesFolderABI}__ and `functionName` set to `"voteCountingForFile"`.
 */
export function usePrepareFilesFolderVoteCountingForFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof filesFolderABI, 'voteCountingForFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: filesFolderABI,
    functionName: 'voteCountingForFile',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof filesFolderABI,
    'voteCountingForFile'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link filesFolderABI}__.
 */
export function useFilesFolderEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof filesFolderABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: filesFolderABI,
    ...config,
  } as UseContractEventConfig<typeof filesFolderABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link filesFolderABI}__ and `eventName` set to `"Init"`.
 */
export function useFilesFolderInitEvent(
  config: Omit<
    UseContractEventConfig<typeof filesFolderABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: filesFolderABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof filesFolderABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link filesFolderABI}__ and `eventName` set to `"LockContents"`.
 */
export function useFilesFolderLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof filesFolderABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: filesFolderABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof filesFolderABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link filesFolderABI}__ and `eventName` set to `"RemoveDirectKeeper"`.
 */
export function useFilesFolderRemoveDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof filesFolderABI, 'RemoveDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: filesFolderABI,
    eventName: 'RemoveDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof filesFolderABI, 'RemoveDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link filesFolderABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useFilesFolderSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof filesFolderABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: filesFolderABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof filesFolderABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link filesFolderABI}__ and `eventName` set to `"SetGeneralCounsel"`.
 */
export function useFilesFolderSetGeneralCounselEvent(
  config: Omit<
    UseContractEventConfig<typeof filesFolderABI, 'SetGeneralCounsel'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: filesFolderABI,
    eventName: 'SetGeneralCounsel',
    ...config,
  } as UseContractEventConfig<typeof filesFolderABI, 'SetGeneralCounsel'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link filesFolderABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useFilesFolderSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof filesFolderABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: filesFolderABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof filesFolderABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link filesFolderABI}__ and `eventName` set to `"UpdateStateOfFile"`.
 */
export function useFilesFolderUpdateStateOfFileEvent(
  config: Omit<
    UseContractEventConfig<typeof filesFolderABI, 'UpdateStateOfFile'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: filesFolderABI,
    eventName: 'UpdateStateOfFile',
    ...config,
  } as UseContractEventConfig<typeof filesFolderABI, 'UpdateStateOfFile'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iFilesFolderABI}__.
 */
export function useIFilesFolder(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iFilesFolderABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iFilesFolderABI}__.
 */
export function useIFilesFolderRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iFilesFolderABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iFilesFolderABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iFilesFolderABI,
    ...config,
  } as UseContractReadConfig<
    typeof iFilesFolderABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iFilesFolderABI}__ and `functionName` set to `"closingDeadline"`.
 */
export function useIFilesFolderClosingDeadline<
  TSelectData = ReadContractResult<typeof iFilesFolderABI, 'closingDeadline'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iFilesFolderABI,
      'closingDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iFilesFolderABI,
    functionName: 'closingDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof iFilesFolderABI,
    'closingDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iFilesFolderABI}__ and `functionName` set to `"getFile"`.
 */
export function useIFilesFolderGetFile<
  TSelectData = ReadContractResult<typeof iFilesFolderABI, 'getFile'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iFilesFolderABI, 'getFile', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iFilesFolderABI,
    functionName: 'getFile',
    ...config,
  } as UseContractReadConfig<typeof iFilesFolderABI, 'getFile', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iFilesFolderABI}__ and `functionName` set to `"getFilesList"`.
 */
export function useIFilesFolderGetFilesList<
  TSelectData = ReadContractResult<typeof iFilesFolderABI, 'getFilesList'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iFilesFolderABI, 'getFilesList', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iFilesFolderABI,
    functionName: 'getFilesList',
    ...config,
  } as UseContractReadConfig<
    typeof iFilesFolderABI,
    'getFilesList',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iFilesFolderABI}__ and `functionName` set to `"getHeadOfFile"`.
 */
export function useIFilesFolderGetHeadOfFile<
  TSelectData = ReadContractResult<typeof iFilesFolderABI, 'getHeadOfFile'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iFilesFolderABI, 'getHeadOfFile', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iFilesFolderABI,
    functionName: 'getHeadOfFile',
    ...config,
  } as UseContractReadConfig<
    typeof iFilesFolderABI,
    'getHeadOfFile',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iFilesFolderABI}__ and `functionName` set to `"getRefOfFile"`.
 */
export function useIFilesFolderGetRefOfFile<
  TSelectData = ReadContractResult<typeof iFilesFolderABI, 'getRefOfFile'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iFilesFolderABI, 'getRefOfFile', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iFilesFolderABI,
    functionName: 'getRefOfFile',
    ...config,
  } as UseContractReadConfig<
    typeof iFilesFolderABI,
    'getRefOfFile',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iFilesFolderABI}__ and `functionName` set to `"getSNOfFile"`.
 */
export function useIFilesFolderGetSnOfFile<
  TSelectData = ReadContractResult<typeof iFilesFolderABI, 'getSNOfFile'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iFilesFolderABI, 'getSNOfFile', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iFilesFolderABI,
    functionName: 'getSNOfFile',
    ...config,
  } as UseContractReadConfig<
    typeof iFilesFolderABI,
    'getSNOfFile',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iFilesFolderABI}__ and `functionName` set to `"isRegistered"`.
 */
export function useIFilesFolderIsRegistered<
  TSelectData = ReadContractResult<typeof iFilesFolderABI, 'isRegistered'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iFilesFolderABI, 'isRegistered', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iFilesFolderABI,
    functionName: 'isRegistered',
    ...config,
  } as UseContractReadConfig<
    typeof iFilesFolderABI,
    'isRegistered',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iFilesFolderABI}__ and `functionName` set to `"qtyOfFiles"`.
 */
export function useIFilesFolderQtyOfFiles<
  TSelectData = ReadContractResult<typeof iFilesFolderABI, 'qtyOfFiles'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iFilesFolderABI, 'qtyOfFiles', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iFilesFolderABI,
    functionName: 'qtyOfFiles',
    ...config,
  } as UseContractReadConfig<typeof iFilesFolderABI, 'qtyOfFiles', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iFilesFolderABI}__ and `functionName` set to `"shaExecDeadline"`.
 */
export function useIFilesFolderShaExecDeadline<
  TSelectData = ReadContractResult<typeof iFilesFolderABI, 'shaExecDeadline'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iFilesFolderABI,
      'shaExecDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iFilesFolderABI,
    functionName: 'shaExecDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof iFilesFolderABI,
    'shaExecDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iFilesFolderABI}__ and `functionName` set to `"signingDeadline"`.
 */
export function useIFilesFolderSigningDeadline<
  TSelectData = ReadContractResult<typeof iFilesFolderABI, 'signingDeadline'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iFilesFolderABI,
      'signingDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iFilesFolderABI,
    functionName: 'signingDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof iFilesFolderABI,
    'signingDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iFilesFolderABI}__ and `functionName` set to `"terminateStartpoint"`.
 */
export function useIFilesFolderTerminateStartpoint<
  TSelectData = ReadContractResult<
    typeof iFilesFolderABI,
    'terminateStartpoint'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iFilesFolderABI,
      'terminateStartpoint',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iFilesFolderABI,
    functionName: 'terminateStartpoint',
    ...config,
  } as UseContractReadConfig<
    typeof iFilesFolderABI,
    'terminateStartpoint',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iFilesFolderABI}__ and `functionName` set to `"votingDeadline"`.
 */
export function useIFilesFolderVotingDeadline<
  TSelectData = ReadContractResult<typeof iFilesFolderABI, 'votingDeadline'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iFilesFolderABI,
      'votingDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iFilesFolderABI,
    functionName: 'votingDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof iFilesFolderABI,
    'votingDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iFilesFolderABI}__.
 */
export function useIFilesFolderWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iFilesFolderABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iFilesFolderABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iFilesFolderABI, TFunctionName>({
    abi: iFilesFolderABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iFilesFolderABI}__ and `functionName` set to `"circulateFile"`.
 */
export function useIFilesFolderCirculateFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iFilesFolderABI,
          'circulateFile'
        >['abi'],
        'circulateFile'
      > & { functionName?: 'circulateFile' }
    : UseContractWriteConfig<TMode, typeof iFilesFolderABI, 'circulateFile'> & {
        abi?: never
        functionName?: 'circulateFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iFilesFolderABI, 'circulateFile'>({
    abi: iFilesFolderABI,
    functionName: 'circulateFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iFilesFolderABI}__ and `functionName` set to `"establishFile"`.
 */
export function useIFilesFolderEstablishFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iFilesFolderABI,
          'establishFile'
        >['abi'],
        'establishFile'
      > & { functionName?: 'establishFile' }
    : UseContractWriteConfig<TMode, typeof iFilesFolderABI, 'establishFile'> & {
        abi?: never
        functionName?: 'establishFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iFilesFolderABI, 'establishFile'>({
    abi: iFilesFolderABI,
    functionName: 'establishFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iFilesFolderABI}__ and `functionName` set to `"execFile"`.
 */
export function useIFilesFolderExecFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iFilesFolderABI, 'execFile'>['abi'],
        'execFile'
      > & { functionName?: 'execFile' }
    : UseContractWriteConfig<TMode, typeof iFilesFolderABI, 'execFile'> & {
        abi?: never
        functionName?: 'execFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iFilesFolderABI, 'execFile'>({
    abi: iFilesFolderABI,
    functionName: 'execFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iFilesFolderABI}__ and `functionName` set to `"proposeFile"`.
 */
export function useIFilesFolderProposeFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iFilesFolderABI,
          'proposeFile'
        >['abi'],
        'proposeFile'
      > & { functionName?: 'proposeFile' }
    : UseContractWriteConfig<TMode, typeof iFilesFolderABI, 'proposeFile'> & {
        abi?: never
        functionName?: 'proposeFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iFilesFolderABI, 'proposeFile'>({
    abi: iFilesFolderABI,
    functionName: 'proposeFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iFilesFolderABI}__ and `functionName` set to `"regFile"`.
 */
export function useIFilesFolderRegFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iFilesFolderABI, 'regFile'>['abi'],
        'regFile'
      > & { functionName?: 'regFile' }
    : UseContractWriteConfig<TMode, typeof iFilesFolderABI, 'regFile'> & {
        abi?: never
        functionName?: 'regFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iFilesFolderABI, 'regFile'>({
    abi: iFilesFolderABI,
    functionName: 'regFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iFilesFolderABI}__ and `functionName` set to `"setStateOfFile"`.
 */
export function useIFilesFolderSetStateOfFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iFilesFolderABI,
          'setStateOfFile'
        >['abi'],
        'setStateOfFile'
      > & { functionName?: 'setStateOfFile' }
    : UseContractWriteConfig<
        TMode,
        typeof iFilesFolderABI,
        'setStateOfFile'
      > & {
        abi?: never
        functionName?: 'setStateOfFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iFilesFolderABI, 'setStateOfFile'>({
    abi: iFilesFolderABI,
    functionName: 'setStateOfFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iFilesFolderABI}__ and `functionName` set to `"terminateFile"`.
 */
export function useIFilesFolderTerminateFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iFilesFolderABI,
          'terminateFile'
        >['abi'],
        'terminateFile'
      > & { functionName?: 'terminateFile' }
    : UseContractWriteConfig<TMode, typeof iFilesFolderABI, 'terminateFile'> & {
        abi?: never
        functionName?: 'terminateFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iFilesFolderABI, 'terminateFile'>({
    abi: iFilesFolderABI,
    functionName: 'terminateFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iFilesFolderABI}__ and `functionName` set to `"voteCountingForFile"`.
 */
export function useIFilesFolderVoteCountingForFile<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iFilesFolderABI,
          'voteCountingForFile'
        >['abi'],
        'voteCountingForFile'
      > & { functionName?: 'voteCountingForFile' }
    : UseContractWriteConfig<
        TMode,
        typeof iFilesFolderABI,
        'voteCountingForFile'
      > & {
        abi?: never
        functionName?: 'voteCountingForFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iFilesFolderABI, 'voteCountingForFile'>(
    {
      abi: iFilesFolderABI,
      functionName: 'voteCountingForFile',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iFilesFolderABI}__.
 */
export function usePrepareIFilesFolderWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iFilesFolderABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iFilesFolderABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iFilesFolderABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iFilesFolderABI}__ and `functionName` set to `"circulateFile"`.
 */
export function usePrepareIFilesFolderCirculateFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iFilesFolderABI, 'circulateFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iFilesFolderABI,
    functionName: 'circulateFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iFilesFolderABI, 'circulateFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iFilesFolderABI}__ and `functionName` set to `"establishFile"`.
 */
export function usePrepareIFilesFolderEstablishFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iFilesFolderABI, 'establishFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iFilesFolderABI,
    functionName: 'establishFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iFilesFolderABI, 'establishFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iFilesFolderABI}__ and `functionName` set to `"execFile"`.
 */
export function usePrepareIFilesFolderExecFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iFilesFolderABI, 'execFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iFilesFolderABI,
    functionName: 'execFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iFilesFolderABI, 'execFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iFilesFolderABI}__ and `functionName` set to `"proposeFile"`.
 */
export function usePrepareIFilesFolderProposeFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iFilesFolderABI, 'proposeFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iFilesFolderABI,
    functionName: 'proposeFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iFilesFolderABI, 'proposeFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iFilesFolderABI}__ and `functionName` set to `"regFile"`.
 */
export function usePrepareIFilesFolderRegFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iFilesFolderABI, 'regFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iFilesFolderABI,
    functionName: 'regFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iFilesFolderABI, 'regFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iFilesFolderABI}__ and `functionName` set to `"setStateOfFile"`.
 */
export function usePrepareIFilesFolderSetStateOfFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iFilesFolderABI, 'setStateOfFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iFilesFolderABI,
    functionName: 'setStateOfFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iFilesFolderABI, 'setStateOfFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iFilesFolderABI}__ and `functionName` set to `"terminateFile"`.
 */
export function usePrepareIFilesFolderTerminateFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iFilesFolderABI, 'terminateFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iFilesFolderABI,
    functionName: 'terminateFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iFilesFolderABI, 'terminateFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iFilesFolderABI}__ and `functionName` set to `"voteCountingForFile"`.
 */
export function usePrepareIFilesFolderVoteCountingForFile(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iFilesFolderABI,
      'voteCountingForFile'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iFilesFolderABI,
    functionName: 'voteCountingForFile',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iFilesFolderABI,
    'voteCountingForFile'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iFilesFolderABI}__.
 */
export function useIFilesFolderEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iFilesFolderABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iFilesFolderABI,
    ...config,
  } as UseContractEventConfig<typeof iFilesFolderABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iFilesFolderABI}__ and `eventName` set to `"UpdateStateOfFile"`.
 */
export function useIFilesFolderUpdateStateOfFileEvent(
  config: Omit<
    UseContractEventConfig<typeof iFilesFolderABI, 'UpdateStateOfFile'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iFilesFolderABI,
    eventName: 'UpdateStateOfFile',
    ...config,
  } as UseContractEventConfig<typeof iFilesFolderABI, 'UpdateStateOfFile'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iMeetingMinutesABI}__.
 */
export function useIMeetingMinutes(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iMeetingMinutesABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMeetingMinutesABI}__.
 */
export function useIMeetingMinutesRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iMeetingMinutesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iMeetingMinutesABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iMeetingMinutesABI,
    ...config,
  } as UseContractReadConfig<
    typeof iMeetingMinutesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"getBallot"`.
 */
export function useIMeetingMinutesGetBallot<
  TSelectData = ReadContractResult<typeof iMeetingMinutesABI, 'getBallot'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMeetingMinutesABI, 'getBallot', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMeetingMinutesABI,
    functionName: 'getBallot',
    ...config,
  } as UseContractReadConfig<
    typeof iMeetingMinutesABI,
    'getBallot',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"getCaseOfAttitude"`.
 */
export function useIMeetingMinutesGetCaseOfAttitude<
  TSelectData = ReadContractResult<
    typeof iMeetingMinutesABI,
    'getCaseOfAttitude'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iMeetingMinutesABI,
      'getCaseOfAttitude',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMeetingMinutesABI,
    functionName: 'getCaseOfAttitude',
    ...config,
  } as UseContractReadConfig<
    typeof iMeetingMinutesABI,
    'getCaseOfAttitude',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"getDelegateOf"`.
 */
export function useIMeetingMinutesGetDelegateOf<
  TSelectData = ReadContractResult<typeof iMeetingMinutesABI, 'getDelegateOf'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iMeetingMinutesABI,
      'getDelegateOf',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMeetingMinutesABI,
    functionName: 'getDelegateOf',
    ...config,
  } as UseContractReadConfig<
    typeof iMeetingMinutesABI,
    'getDelegateOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"getLeavesHeadcountOfDirectors"`.
 */
export function useIMeetingMinutesGetLeavesHeadcountOfDirectors<
  TSelectData = ReadContractResult<
    typeof iMeetingMinutesABI,
    'getLeavesHeadcountOfDirectors'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iMeetingMinutesABI,
      'getLeavesHeadcountOfDirectors',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMeetingMinutesABI,
    functionName: 'getLeavesHeadcountOfDirectors',
    ...config,
  } as UseContractReadConfig<
    typeof iMeetingMinutesABI,
    'getLeavesHeadcountOfDirectors',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"getLeavesWeightAtDate"`.
 */
export function useIMeetingMinutesGetLeavesWeightAtDate<
  TSelectData = ReadContractResult<
    typeof iMeetingMinutesABI,
    'getLeavesWeightAtDate'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iMeetingMinutesABI,
      'getLeavesWeightAtDate',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMeetingMinutesABI,
    functionName: 'getLeavesWeightAtDate',
    ...config,
  } as UseContractReadConfig<
    typeof iMeetingMinutesABI,
    'getLeavesWeightAtDate',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"getMotion"`.
 */
export function useIMeetingMinutesGetMotion<
  TSelectData = ReadContractResult<typeof iMeetingMinutesABI, 'getMotion'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMeetingMinutesABI, 'getMotion', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMeetingMinutesABI,
    functionName: 'getMotion',
    ...config,
  } as UseContractReadConfig<
    typeof iMeetingMinutesABI,
    'getMotion',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"getSeqList"`.
 */
export function useIMeetingMinutesGetSeqList<
  TSelectData = ReadContractResult<typeof iMeetingMinutesABI, 'getSeqList'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMeetingMinutesABI, 'getSeqList', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMeetingMinutesABI,
    functionName: 'getSeqList',
    ...config,
  } as UseContractReadConfig<
    typeof iMeetingMinutesABI,
    'getSeqList',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"getVoterOfDelegateMap"`.
 */
export function useIMeetingMinutesGetVoterOfDelegateMap<
  TSelectData = ReadContractResult<
    typeof iMeetingMinutesABI,
    'getVoterOfDelegateMap'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iMeetingMinutesABI,
      'getVoterOfDelegateMap',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMeetingMinutesABI,
    functionName: 'getVoterOfDelegateMap',
    ...config,
  } as UseContractReadConfig<
    typeof iMeetingMinutesABI,
    'getVoterOfDelegateMap',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"isPassed"`.
 */
export function useIMeetingMinutesIsPassed<
  TSelectData = ReadContractResult<typeof iMeetingMinutesABI, 'isPassed'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMeetingMinutesABI, 'isPassed', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMeetingMinutesABI,
    functionName: 'isPassed',
    ...config,
  } as UseContractReadConfig<
    typeof iMeetingMinutesABI,
    'isPassed',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"isProposed"`.
 */
export function useIMeetingMinutesIsProposed<
  TSelectData = ReadContractResult<typeof iMeetingMinutesABI, 'isProposed'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMeetingMinutesABI, 'isProposed', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMeetingMinutesABI,
    functionName: 'isProposed',
    ...config,
  } as UseContractReadConfig<
    typeof iMeetingMinutesABI,
    'isProposed',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"isVoted"`.
 */
export function useIMeetingMinutesIsVoted<
  TSelectData = ReadContractResult<typeof iMeetingMinutesABI, 'isVoted'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMeetingMinutesABI, 'isVoted', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMeetingMinutesABI,
    functionName: 'isVoted',
    ...config,
  } as UseContractReadConfig<typeof iMeetingMinutesABI, 'isVoted', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"isVotedFor"`.
 */
export function useIMeetingMinutesIsVotedFor<
  TSelectData = ReadContractResult<typeof iMeetingMinutesABI, 'isVotedFor'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMeetingMinutesABI, 'isVotedFor', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMeetingMinutesABI,
    functionName: 'isVotedFor',
    ...config,
  } as UseContractReadConfig<
    typeof iMeetingMinutesABI,
    'isVotedFor',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"voteEnded"`.
 */
export function useIMeetingMinutesVoteEnded<
  TSelectData = ReadContractResult<typeof iMeetingMinutesABI, 'voteEnded'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMeetingMinutesABI, 'voteEnded', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMeetingMinutesABI,
    functionName: 'voteEnded',
    ...config,
  } as UseContractReadConfig<
    typeof iMeetingMinutesABI,
    'voteEnded',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"voteStarted"`.
 */
export function useIMeetingMinutesVoteStarted<
  TSelectData = ReadContractResult<typeof iMeetingMinutesABI, 'voteStarted'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iMeetingMinutesABI,
      'voteStarted',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMeetingMinutesABI,
    functionName: 'voteStarted',
    ...config,
  } as UseContractReadConfig<
    typeof iMeetingMinutesABI,
    'voteStarted',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMeetingMinutesABI}__.
 */
export function useIMeetingMinutesWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iMeetingMinutesABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof iMeetingMinutesABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMeetingMinutesABI, TFunctionName>({
    abi: iMeetingMinutesABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"castVoteInBoardMeeting"`.
 */
export function useIMeetingMinutesCastVoteInBoardMeeting<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iMeetingMinutesABI,
          'castVoteInBoardMeeting'
        >['abi'],
        'castVoteInBoardMeeting'
      > & { functionName?: 'castVoteInBoardMeeting' }
    : UseContractWriteConfig<
        TMode,
        typeof iMeetingMinutesABI,
        'castVoteInBoardMeeting'
      > & {
        abi?: never
        functionName?: 'castVoteInBoardMeeting'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iMeetingMinutesABI,
    'castVoteInBoardMeeting'
  >({
    abi: iMeetingMinutesABI,
    functionName: 'castVoteInBoardMeeting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"castVoteInGeneralMeeting"`.
 */
export function useIMeetingMinutesCastVoteInGeneralMeeting<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iMeetingMinutesABI,
          'castVoteInGeneralMeeting'
        >['abi'],
        'castVoteInGeneralMeeting'
      > & { functionName?: 'castVoteInGeneralMeeting' }
    : UseContractWriteConfig<
        TMode,
        typeof iMeetingMinutesABI,
        'castVoteInGeneralMeeting'
      > & {
        abi?: never
        functionName?: 'castVoteInGeneralMeeting'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iMeetingMinutesABI,
    'castVoteInGeneralMeeting'
  >({
    abi: iMeetingMinutesABI,
    functionName: 'castVoteInGeneralMeeting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"createAction"`.
 */
export function useIMeetingMinutesCreateAction<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iMeetingMinutesABI,
          'createAction'
        >['abi'],
        'createAction'
      > & { functionName?: 'createAction' }
    : UseContractWriteConfig<
        TMode,
        typeof iMeetingMinutesABI,
        'createAction'
      > & {
        abi?: never
        functionName?: 'createAction'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMeetingMinutesABI, 'createAction'>({
    abi: iMeetingMinutesABI,
    functionName: 'createAction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"createMotionToApproveDoc"`.
 */
export function useIMeetingMinutesCreateMotionToApproveDoc<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iMeetingMinutesABI,
          'createMotionToApproveDoc'
        >['abi'],
        'createMotionToApproveDoc'
      > & { functionName?: 'createMotionToApproveDoc' }
    : UseContractWriteConfig<
        TMode,
        typeof iMeetingMinutesABI,
        'createMotionToApproveDoc'
      > & {
        abi?: never
        functionName?: 'createMotionToApproveDoc'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iMeetingMinutesABI,
    'createMotionToApproveDoc'
  >({
    abi: iMeetingMinutesABI,
    functionName: 'createMotionToApproveDoc',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"createMotionToRemoveOfficer"`.
 */
export function useIMeetingMinutesCreateMotionToRemoveOfficer<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iMeetingMinutesABI,
          'createMotionToRemoveOfficer'
        >['abi'],
        'createMotionToRemoveOfficer'
      > & { functionName?: 'createMotionToRemoveOfficer' }
    : UseContractWriteConfig<
        TMode,
        typeof iMeetingMinutesABI,
        'createMotionToRemoveOfficer'
      > & {
        abi?: never
        functionName?: 'createMotionToRemoveOfficer'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iMeetingMinutesABI,
    'createMotionToRemoveOfficer'
  >({
    abi: iMeetingMinutesABI,
    functionName: 'createMotionToRemoveOfficer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"entrustDelegate"`.
 */
export function useIMeetingMinutesEntrustDelegate<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iMeetingMinutesABI,
          'entrustDelegate'
        >['abi'],
        'entrustDelegate'
      > & { functionName?: 'entrustDelegate' }
    : UseContractWriteConfig<
        TMode,
        typeof iMeetingMinutesABI,
        'entrustDelegate'
      > & {
        abi?: never
        functionName?: 'entrustDelegate'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMeetingMinutesABI, 'entrustDelegate'>({
    abi: iMeetingMinutesABI,
    functionName: 'entrustDelegate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"execAction"`.
 */
export function useIMeetingMinutesExecAction<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iMeetingMinutesABI,
          'execAction'
        >['abi'],
        'execAction'
      > & { functionName?: 'execAction' }
    : UseContractWriteConfig<TMode, typeof iMeetingMinutesABI, 'execAction'> & {
        abi?: never
        functionName?: 'execAction'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMeetingMinutesABI, 'execAction'>({
    abi: iMeetingMinutesABI,
    functionName: 'execAction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"execResolution"`.
 */
export function useIMeetingMinutesExecResolution<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iMeetingMinutesABI,
          'execResolution'
        >['abi'],
        'execResolution'
      > & { functionName?: 'execResolution' }
    : UseContractWriteConfig<
        TMode,
        typeof iMeetingMinutesABI,
        'execResolution'
      > & {
        abi?: never
        functionName?: 'execResolution'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMeetingMinutesABI, 'execResolution'>({
    abi: iMeetingMinutesABI,
    functionName: 'execResolution',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"nominateOfficer"`.
 */
export function useIMeetingMinutesNominateOfficer<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iMeetingMinutesABI,
          'nominateOfficer'
        >['abi'],
        'nominateOfficer'
      > & { functionName?: 'nominateOfficer' }
    : UseContractWriteConfig<
        TMode,
        typeof iMeetingMinutesABI,
        'nominateOfficer'
      > & {
        abi?: never
        functionName?: 'nominateOfficer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMeetingMinutesABI, 'nominateOfficer'>({
    abi: iMeetingMinutesABI,
    functionName: 'nominateOfficer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"proposeMotionToBoard"`.
 */
export function useIMeetingMinutesProposeMotionToBoard<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iMeetingMinutesABI,
          'proposeMotionToBoard'
        >['abi'],
        'proposeMotionToBoard'
      > & { functionName?: 'proposeMotionToBoard' }
    : UseContractWriteConfig<
        TMode,
        typeof iMeetingMinutesABI,
        'proposeMotionToBoard'
      > & {
        abi?: never
        functionName?: 'proposeMotionToBoard'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iMeetingMinutesABI,
    'proposeMotionToBoard'
  >({
    abi: iMeetingMinutesABI,
    functionName: 'proposeMotionToBoard',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"proposeMotionToGeneralMeeting"`.
 */
export function useIMeetingMinutesProposeMotionToGeneralMeeting<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iMeetingMinutesABI,
          'proposeMotionToGeneralMeeting'
        >['abi'],
        'proposeMotionToGeneralMeeting'
      > & { functionName?: 'proposeMotionToGeneralMeeting' }
    : UseContractWriteConfig<
        TMode,
        typeof iMeetingMinutesABI,
        'proposeMotionToGeneralMeeting'
      > & {
        abi?: never
        functionName?: 'proposeMotionToGeneralMeeting'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iMeetingMinutesABI,
    'proposeMotionToGeneralMeeting'
  >({
    abi: iMeetingMinutesABI,
    functionName: 'proposeMotionToGeneralMeeting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"voteCounting"`.
 */
export function useIMeetingMinutesVoteCounting<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iMeetingMinutesABI,
          'voteCounting'
        >['abi'],
        'voteCounting'
      > & { functionName?: 'voteCounting' }
    : UseContractWriteConfig<
        TMode,
        typeof iMeetingMinutesABI,
        'voteCounting'
      > & {
        abi?: never
        functionName?: 'voteCounting'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMeetingMinutesABI, 'voteCounting'>({
    abi: iMeetingMinutesABI,
    functionName: 'voteCounting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMeetingMinutesABI}__.
 */
export function usePrepareIMeetingMinutesWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMeetingMinutesABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMeetingMinutesABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMeetingMinutesABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"castVoteInBoardMeeting"`.
 */
export function usePrepareIMeetingMinutesCastVoteInBoardMeeting(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iMeetingMinutesABI,
      'castVoteInBoardMeeting'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMeetingMinutesABI,
    functionName: 'castVoteInBoardMeeting',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iMeetingMinutesABI,
    'castVoteInBoardMeeting'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"castVoteInGeneralMeeting"`.
 */
export function usePrepareIMeetingMinutesCastVoteInGeneralMeeting(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iMeetingMinutesABI,
      'castVoteInGeneralMeeting'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMeetingMinutesABI,
    functionName: 'castVoteInGeneralMeeting',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iMeetingMinutesABI,
    'castVoteInGeneralMeeting'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"createAction"`.
 */
export function usePrepareIMeetingMinutesCreateAction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMeetingMinutesABI, 'createAction'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMeetingMinutesABI,
    functionName: 'createAction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMeetingMinutesABI, 'createAction'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"createMotionToApproveDoc"`.
 */
export function usePrepareIMeetingMinutesCreateMotionToApproveDoc(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iMeetingMinutesABI,
      'createMotionToApproveDoc'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMeetingMinutesABI,
    functionName: 'createMotionToApproveDoc',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iMeetingMinutesABI,
    'createMotionToApproveDoc'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"createMotionToRemoveOfficer"`.
 */
export function usePrepareIMeetingMinutesCreateMotionToRemoveOfficer(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iMeetingMinutesABI,
      'createMotionToRemoveOfficer'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMeetingMinutesABI,
    functionName: 'createMotionToRemoveOfficer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iMeetingMinutesABI,
    'createMotionToRemoveOfficer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"entrustDelegate"`.
 */
export function usePrepareIMeetingMinutesEntrustDelegate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMeetingMinutesABI, 'entrustDelegate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMeetingMinutesABI,
    functionName: 'entrustDelegate',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iMeetingMinutesABI,
    'entrustDelegate'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"execAction"`.
 */
export function usePrepareIMeetingMinutesExecAction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMeetingMinutesABI, 'execAction'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMeetingMinutesABI,
    functionName: 'execAction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMeetingMinutesABI, 'execAction'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"execResolution"`.
 */
export function usePrepareIMeetingMinutesExecResolution(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMeetingMinutesABI, 'execResolution'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMeetingMinutesABI,
    functionName: 'execResolution',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iMeetingMinutesABI,
    'execResolution'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"nominateOfficer"`.
 */
export function usePrepareIMeetingMinutesNominateOfficer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMeetingMinutesABI, 'nominateOfficer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMeetingMinutesABI,
    functionName: 'nominateOfficer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iMeetingMinutesABI,
    'nominateOfficer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"proposeMotionToBoard"`.
 */
export function usePrepareIMeetingMinutesProposeMotionToBoard(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iMeetingMinutesABI,
      'proposeMotionToBoard'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMeetingMinutesABI,
    functionName: 'proposeMotionToBoard',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iMeetingMinutesABI,
    'proposeMotionToBoard'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"proposeMotionToGeneralMeeting"`.
 */
export function usePrepareIMeetingMinutesProposeMotionToGeneralMeeting(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iMeetingMinutesABI,
      'proposeMotionToGeneralMeeting'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMeetingMinutesABI,
    functionName: 'proposeMotionToGeneralMeeting',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iMeetingMinutesABI,
    'proposeMotionToGeneralMeeting'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `functionName` set to `"voteCounting"`.
 */
export function usePrepareIMeetingMinutesVoteCounting(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMeetingMinutesABI, 'voteCounting'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMeetingMinutesABI,
    functionName: 'voteCounting',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMeetingMinutesABI, 'voteCounting'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iMeetingMinutesABI}__.
 */
export function useIMeetingMinutesEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iMeetingMinutesABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iMeetingMinutesABI,
    ...config,
  } as UseContractEventConfig<typeof iMeetingMinutesABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `eventName` set to `"CastVoteInBoardMeeting"`.
 */
export function useIMeetingMinutesCastVoteInBoardMeetingEvent(
  config: Omit<
    UseContractEventConfig<typeof iMeetingMinutesABI, 'CastVoteInBoardMeeting'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iMeetingMinutesABI,
    eventName: 'CastVoteInBoardMeeting',
    ...config,
  } as UseContractEventConfig<
    typeof iMeetingMinutesABI,
    'CastVoteInBoardMeeting'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `eventName` set to `"CastVoteInGeneralMeeting"`.
 */
export function useIMeetingMinutesCastVoteInGeneralMeetingEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iMeetingMinutesABI,
      'CastVoteInGeneralMeeting'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iMeetingMinutesABI,
    eventName: 'CastVoteInGeneralMeeting',
    ...config,
  } as UseContractEventConfig<
    typeof iMeetingMinutesABI,
    'CastVoteInGeneralMeeting'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `eventName` set to `"CreateMotion"`.
 */
export function useIMeetingMinutesCreateMotionEvent(
  config: Omit<
    UseContractEventConfig<typeof iMeetingMinutesABI, 'CreateMotion'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iMeetingMinutesABI,
    eventName: 'CreateMotion',
    ...config,
  } as UseContractEventConfig<typeof iMeetingMinutesABI, 'CreateMotion'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `eventName` set to `"EntrustDelegate"`.
 */
export function useIMeetingMinutesEntrustDelegateEvent(
  config: Omit<
    UseContractEventConfig<typeof iMeetingMinutesABI, 'EntrustDelegate'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iMeetingMinutesABI,
    eventName: 'EntrustDelegate',
    ...config,
  } as UseContractEventConfig<typeof iMeetingMinutesABI, 'EntrustDelegate'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `eventName` set to `"ExecResolution"`.
 */
export function useIMeetingMinutesExecResolutionEvent(
  config: Omit<
    UseContractEventConfig<typeof iMeetingMinutesABI, 'ExecResolution'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iMeetingMinutesABI,
    eventName: 'ExecResolution',
    ...config,
  } as UseContractEventConfig<typeof iMeetingMinutesABI, 'ExecResolution'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `eventName` set to `"ProposeMotionToBoard"`.
 */
export function useIMeetingMinutesProposeMotionToBoardEvent(
  config: Omit<
    UseContractEventConfig<typeof iMeetingMinutesABI, 'ProposeMotionToBoard'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iMeetingMinutesABI,
    eventName: 'ProposeMotionToBoard',
    ...config,
  } as UseContractEventConfig<
    typeof iMeetingMinutesABI,
    'ProposeMotionToBoard'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `eventName` set to `"ProposeMotionToGeneralMeeting"`.
 */
export function useIMeetingMinutesProposeMotionToGeneralMeetingEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iMeetingMinutesABI,
      'ProposeMotionToGeneralMeeting'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iMeetingMinutesABI,
    eventName: 'ProposeMotionToGeneralMeeting',
    ...config,
  } as UseContractEventConfig<
    typeof iMeetingMinutesABI,
    'ProposeMotionToGeneralMeeting'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iMeetingMinutesABI}__ and `eventName` set to `"VoteCounting"`.
 */
export function useIMeetingMinutesVoteCountingEvent(
  config: Omit<
    UseContractEventConfig<typeof iMeetingMinutesABI, 'VoteCounting'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iMeetingMinutesABI,
    eventName: 'VoteCounting',
    ...config,
  } as UseContractEventConfig<typeof iMeetingMinutesABI, 'VoteCounting'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iSigPageABI}__.
 */
export function useISigPage(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iSigPageABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSigPageABI}__.
 */
export function useISigPageRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iSigPageABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSigPageABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iSigPageABI,
    ...config,
  } as UseContractReadConfig<typeof iSigPageABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"circulated"`.
 */
export function useISigPageCirculated<
  TSelectData = ReadContractResult<typeof iSigPageABI, 'circulated'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSigPageABI, 'circulated', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSigPageABI,
    functionName: 'circulated',
    ...config,
  } as UseContractReadConfig<typeof iSigPageABI, 'circulated', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"established"`.
 */
export function useISigPageEstablished<
  TSelectData = ReadContractResult<typeof iSigPageABI, 'established'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSigPageABI, 'established', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSigPageABI,
    functionName: 'established',
    ...config,
  } as UseContractReadConfig<typeof iSigPageABI, 'established', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"getBuyers"`.
 */
export function useISigPageGetBuyers<
  TSelectData = ReadContractResult<typeof iSigPageABI, 'getBuyers'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSigPageABI, 'getBuyers', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSigPageABI,
    functionName: 'getBuyers',
    ...config,
  } as UseContractReadConfig<typeof iSigPageABI, 'getBuyers', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"getCirculateDate"`.
 */
export function useISigPageGetCirculateDate<
  TSelectData = ReadContractResult<typeof iSigPageABI, 'getCirculateDate'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSigPageABI, 'getCirculateDate', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSigPageABI,
    functionName: 'getCirculateDate',
    ...config,
  } as UseContractReadConfig<
    typeof iSigPageABI,
    'getCirculateDate',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"getClosingDays"`.
 */
export function useISigPageGetClosingDays<
  TSelectData = ReadContractResult<typeof iSigPageABI, 'getClosingDays'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSigPageABI, 'getClosingDays', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSigPageABI,
    functionName: 'getClosingDays',
    ...config,
  } as UseContractReadConfig<typeof iSigPageABI, 'getClosingDays', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"getClosingDeadline"`.
 */
export function useISigPageGetClosingDeadline<
  TSelectData = ReadContractResult<typeof iSigPageABI, 'getClosingDeadline'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSigPageABI,
      'getClosingDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSigPageABI,
    functionName: 'getClosingDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof iSigPageABI,
    'getClosingDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"getParasOfPage"`.
 */
export function useISigPageGetParasOfPage<
  TSelectData = ReadContractResult<typeof iSigPageABI, 'getParasOfPage'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSigPageABI, 'getParasOfPage', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSigPageABI,
    functionName: 'getParasOfPage',
    ...config,
  } as UseContractReadConfig<typeof iSigPageABI, 'getParasOfPage', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"getParties"`.
 */
export function useISigPageGetParties<
  TSelectData = ReadContractResult<typeof iSigPageABI, 'getParties'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSigPageABI, 'getParties', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSigPageABI,
    functionName: 'getParties',
    ...config,
  } as UseContractReadConfig<typeof iSigPageABI, 'getParties', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"getSellers"`.
 */
export function useISigPageGetSellers<
  TSelectData = ReadContractResult<typeof iSigPageABI, 'getSellers'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSigPageABI, 'getSellers', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSigPageABI,
    functionName: 'getSellers',
    ...config,
  } as UseContractReadConfig<typeof iSigPageABI, 'getSellers', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"getSigDeadline"`.
 */
export function useISigPageGetSigDeadline<
  TSelectData = ReadContractResult<typeof iSigPageABI, 'getSigDeadline'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSigPageABI, 'getSigDeadline', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSigPageABI,
    functionName: 'getSigDeadline',
    ...config,
  } as UseContractReadConfig<typeof iSigPageABI, 'getSigDeadline', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"getSigOfParty"`.
 */
export function useISigPageGetSigOfParty<
  TSelectData = ReadContractResult<typeof iSigPageABI, 'getSigOfParty'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSigPageABI, 'getSigOfParty', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSigPageABI,
    functionName: 'getSigOfParty',
    ...config,
  } as UseContractReadConfig<typeof iSigPageABI, 'getSigOfParty', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"getSigningDays"`.
 */
export function useISigPageGetSigningDays<
  TSelectData = ReadContractResult<typeof iSigPageABI, 'getSigningDays'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSigPageABI, 'getSigningDays', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSigPageABI,
    functionName: 'getSigningDays',
    ...config,
  } as UseContractReadConfig<typeof iSigPageABI, 'getSigningDays', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"getSigsOfPage"`.
 */
export function useISigPageGetSigsOfPage<
  TSelectData = ReadContractResult<typeof iSigPageABI, 'getSigsOfPage'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSigPageABI, 'getSigsOfPage', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSigPageABI,
    functionName: 'getSigsOfPage',
    ...config,
  } as UseContractReadConfig<typeof iSigPageABI, 'getSigsOfPage', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"isBuyer"`.
 */
export function useISigPageIsBuyer<
  TSelectData = ReadContractResult<typeof iSigPageABI, 'isBuyer'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSigPageABI, 'isBuyer', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSigPageABI,
    functionName: 'isBuyer',
    ...config,
  } as UseContractReadConfig<typeof iSigPageABI, 'isBuyer', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"isInitSigner"`.
 */
export function useISigPageIsInitSigner<
  TSelectData = ReadContractResult<typeof iSigPageABI, 'isInitSigner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSigPageABI, 'isInitSigner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSigPageABI,
    functionName: 'isInitSigner',
    ...config,
  } as UseContractReadConfig<typeof iSigPageABI, 'isInitSigner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"isParty"`.
 */
export function useISigPageIsParty<
  TSelectData = ReadContractResult<typeof iSigPageABI, 'isParty'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSigPageABI, 'isParty', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSigPageABI,
    functionName: 'isParty',
    ...config,
  } as UseContractReadConfig<typeof iSigPageABI, 'isParty', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"isSeller"`.
 */
export function useISigPageIsSeller<
  TSelectData = ReadContractResult<typeof iSigPageABI, 'isSeller'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSigPageABI, 'isSeller', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSigPageABI,
    functionName: 'isSeller',
    ...config,
  } as UseContractReadConfig<typeof iSigPageABI, 'isSeller', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"isSigner"`.
 */
export function useISigPageIsSigner<
  TSelectData = ReadContractResult<typeof iSigPageABI, 'isSigner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSigPageABI, 'isSigner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSigPageABI,
    functionName: 'isSigner',
    ...config,
  } as UseContractReadConfig<typeof iSigPageABI, 'isSigner', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSigPageABI}__.
 */
export function useISigPageWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iSigPageABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iSigPageABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iSigPageABI, TFunctionName>({
    abi: iSigPageABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"addBlank"`.
 */
export function useISigPageAddBlank<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iSigPageABI, 'addBlank'>['abi'],
        'addBlank'
      > & { functionName?: 'addBlank' }
    : UseContractWriteConfig<TMode, typeof iSigPageABI, 'addBlank'> & {
        abi?: never
        functionName?: 'addBlank'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iSigPageABI, 'addBlank'>({
    abi: iSigPageABI,
    functionName: 'addBlank',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"circulateDoc"`.
 */
export function useISigPageCirculateDoc<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iSigPageABI, 'circulateDoc'>['abi'],
        'circulateDoc'
      > & { functionName?: 'circulateDoc' }
    : UseContractWriteConfig<TMode, typeof iSigPageABI, 'circulateDoc'> & {
        abi?: never
        functionName?: 'circulateDoc'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iSigPageABI, 'circulateDoc'>({
    abi: iSigPageABI,
    functionName: 'circulateDoc',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"regSig"`.
 */
export function useISigPageRegSig<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iSigPageABI, 'regSig'>['abi'],
        'regSig'
      > & { functionName?: 'regSig' }
    : UseContractWriteConfig<TMode, typeof iSigPageABI, 'regSig'> & {
        abi?: never
        functionName?: 'regSig'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iSigPageABI, 'regSig'>({
    abi: iSigPageABI,
    functionName: 'regSig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"removeBlank"`.
 */
export function useISigPageRemoveBlank<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iSigPageABI, 'removeBlank'>['abi'],
        'removeBlank'
      > & { functionName?: 'removeBlank' }
    : UseContractWriteConfig<TMode, typeof iSigPageABI, 'removeBlank'> & {
        abi?: never
        functionName?: 'removeBlank'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iSigPageABI, 'removeBlank'>({
    abi: iSigPageABI,
    functionName: 'removeBlank',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"setTiming"`.
 */
export function useISigPageSetTiming<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iSigPageABI, 'setTiming'>['abi'],
        'setTiming'
      > & { functionName?: 'setTiming' }
    : UseContractWriteConfig<TMode, typeof iSigPageABI, 'setTiming'> & {
        abi?: never
        functionName?: 'setTiming'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iSigPageABI, 'setTiming'>({
    abi: iSigPageABI,
    functionName: 'setTiming',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"signDoc"`.
 */
export function useISigPageSignDoc<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iSigPageABI, 'signDoc'>['abi'],
        'signDoc'
      > & { functionName?: 'signDoc' }
    : UseContractWriteConfig<TMode, typeof iSigPageABI, 'signDoc'> & {
        abi?: never
        functionName?: 'signDoc'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iSigPageABI, 'signDoc'>({
    abi: iSigPageABI,
    functionName: 'signDoc',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSigPageABI}__.
 */
export function usePrepareISigPageWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSigPageABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSigPageABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSigPageABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"addBlank"`.
 */
export function usePrepareISigPageAddBlank(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSigPageABI, 'addBlank'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSigPageABI,
    functionName: 'addBlank',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSigPageABI, 'addBlank'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"circulateDoc"`.
 */
export function usePrepareISigPageCirculateDoc(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSigPageABI, 'circulateDoc'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSigPageABI,
    functionName: 'circulateDoc',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSigPageABI, 'circulateDoc'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"regSig"`.
 */
export function usePrepareISigPageRegSig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSigPageABI, 'regSig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSigPageABI,
    functionName: 'regSig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSigPageABI, 'regSig'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"removeBlank"`.
 */
export function usePrepareISigPageRemoveBlank(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSigPageABI, 'removeBlank'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSigPageABI,
    functionName: 'removeBlank',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSigPageABI, 'removeBlank'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"setTiming"`.
 */
export function usePrepareISigPageSetTiming(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSigPageABI, 'setTiming'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSigPageABI,
    functionName: 'setTiming',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSigPageABI, 'setTiming'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSigPageABI}__ and `functionName` set to `"signDoc"`.
 */
export function usePrepareISigPageSignDoc(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSigPageABI, 'signDoc'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSigPageABI,
    functionName: 'signDoc',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSigPageABI, 'signDoc'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSigPageABI}__.
 */
export function useISigPageEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iSigPageABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSigPageABI,
    ...config,
  } as UseContractEventConfig<typeof iSigPageABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSigPageABI}__ and `eventName` set to `"CirculateDoc"`.
 */
export function useISigPageCirculateDocEvent(
  config: Omit<
    UseContractEventConfig<typeof iSigPageABI, 'CirculateDoc'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSigPageABI,
    eventName: 'CirculateDoc',
    ...config,
  } as UseContractEventConfig<typeof iSigPageABI, 'CirculateDoc'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link meetingMinutesABI}__.
 */
export function useMeetingMinutes(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: meetingMinutesABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link meetingMinutesABI}__.
 */
export function useMeetingMinutesRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof meetingMinutesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof meetingMinutesABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: meetingMinutesABI,
    ...config,
  } as UseContractReadConfig<
    typeof meetingMinutesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"finalized"`.
 */
export function useMeetingMinutesFinalized<
  TSelectData = ReadContractResult<typeof meetingMinutesABI, 'finalized'>,
>(
  config: Omit<
    UseContractReadConfig<typeof meetingMinutesABI, 'finalized', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: meetingMinutesABI,
    functionName: 'finalized',
    ...config,
  } as UseContractReadConfig<
    typeof meetingMinutesABI,
    'finalized',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"getBallot"`.
 */
export function useMeetingMinutesGetBallot<
  TSelectData = ReadContractResult<typeof meetingMinutesABI, 'getBallot'>,
>(
  config: Omit<
    UseContractReadConfig<typeof meetingMinutesABI, 'getBallot', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: meetingMinutesABI,
    functionName: 'getBallot',
    ...config,
  } as UseContractReadConfig<
    typeof meetingMinutesABI,
    'getBallot',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"getBookeeper"`.
 */
export function useMeetingMinutesGetBookeeper<
  TSelectData = ReadContractResult<typeof meetingMinutesABI, 'getBookeeper'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof meetingMinutesABI,
      'getBookeeper',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: meetingMinutesABI,
    functionName: 'getBookeeper',
    ...config,
  } as UseContractReadConfig<
    typeof meetingMinutesABI,
    'getBookeeper',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"getCaseOfAttitude"`.
 */
export function useMeetingMinutesGetCaseOfAttitude<
  TSelectData = ReadContractResult<
    typeof meetingMinutesABI,
    'getCaseOfAttitude'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof meetingMinutesABI,
      'getCaseOfAttitude',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: meetingMinutesABI,
    functionName: 'getCaseOfAttitude',
    ...config,
  } as UseContractReadConfig<
    typeof meetingMinutesABI,
    'getCaseOfAttitude',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"getDelegateOf"`.
 */
export function useMeetingMinutesGetDelegateOf<
  TSelectData = ReadContractResult<typeof meetingMinutesABI, 'getDelegateOf'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof meetingMinutesABI,
      'getDelegateOf',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: meetingMinutesABI,
    functionName: 'getDelegateOf',
    ...config,
  } as UseContractReadConfig<
    typeof meetingMinutesABI,
    'getDelegateOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"getGeneralCounsel"`.
 */
export function useMeetingMinutesGetGeneralCounsel<
  TSelectData = ReadContractResult<
    typeof meetingMinutesABI,
    'getGeneralCounsel'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof meetingMinutesABI,
      'getGeneralCounsel',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: meetingMinutesABI,
    functionName: 'getGeneralCounsel',
    ...config,
  } as UseContractReadConfig<
    typeof meetingMinutesABI,
    'getGeneralCounsel',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"getLeavesHeadcountOfDirectors"`.
 */
export function useMeetingMinutesGetLeavesHeadcountOfDirectors<
  TSelectData = ReadContractResult<
    typeof meetingMinutesABI,
    'getLeavesHeadcountOfDirectors'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof meetingMinutesABI,
      'getLeavesHeadcountOfDirectors',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: meetingMinutesABI,
    functionName: 'getLeavesHeadcountOfDirectors',
    ...config,
  } as UseContractReadConfig<
    typeof meetingMinutesABI,
    'getLeavesHeadcountOfDirectors',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"getLeavesWeightAtDate"`.
 */
export function useMeetingMinutesGetLeavesWeightAtDate<
  TSelectData = ReadContractResult<
    typeof meetingMinutesABI,
    'getLeavesWeightAtDate'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof meetingMinutesABI,
      'getLeavesWeightAtDate',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: meetingMinutesABI,
    functionName: 'getLeavesWeightAtDate',
    ...config,
  } as UseContractReadConfig<
    typeof meetingMinutesABI,
    'getLeavesWeightAtDate',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"getMotion"`.
 */
export function useMeetingMinutesGetMotion<
  TSelectData = ReadContractResult<typeof meetingMinutesABI, 'getMotion'>,
>(
  config: Omit<
    UseContractReadConfig<typeof meetingMinutesABI, 'getMotion', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: meetingMinutesABI,
    functionName: 'getMotion',
    ...config,
  } as UseContractReadConfig<
    typeof meetingMinutesABI,
    'getMotion',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"getOwner"`.
 */
export function useMeetingMinutesGetOwner<
  TSelectData = ReadContractResult<typeof meetingMinutesABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof meetingMinutesABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: meetingMinutesABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<typeof meetingMinutesABI, 'getOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"getSeqList"`.
 */
export function useMeetingMinutesGetSeqList<
  TSelectData = ReadContractResult<typeof meetingMinutesABI, 'getSeqList'>,
>(
  config: Omit<
    UseContractReadConfig<typeof meetingMinutesABI, 'getSeqList', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: meetingMinutesABI,
    functionName: 'getSeqList',
    ...config,
  } as UseContractReadConfig<
    typeof meetingMinutesABI,
    'getSeqList',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"getVoterOfDelegateMap"`.
 */
export function useMeetingMinutesGetVoterOfDelegateMap<
  TSelectData = ReadContractResult<
    typeof meetingMinutesABI,
    'getVoterOfDelegateMap'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof meetingMinutesABI,
      'getVoterOfDelegateMap',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: meetingMinutesABI,
    functionName: 'getVoterOfDelegateMap',
    ...config,
  } as UseContractReadConfig<
    typeof meetingMinutesABI,
    'getVoterOfDelegateMap',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"hasRole"`.
 */
export function useMeetingMinutesHasRole<
  TSelectData = ReadContractResult<typeof meetingMinutesABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof meetingMinutesABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: meetingMinutesABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof meetingMinutesABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"isPassed"`.
 */
export function useMeetingMinutesIsPassed<
  TSelectData = ReadContractResult<typeof meetingMinutesABI, 'isPassed'>,
>(
  config: Omit<
    UseContractReadConfig<typeof meetingMinutesABI, 'isPassed', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: meetingMinutesABI,
    functionName: 'isPassed',
    ...config,
  } as UseContractReadConfig<typeof meetingMinutesABI, 'isPassed', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"isProposed"`.
 */
export function useMeetingMinutesIsProposed<
  TSelectData = ReadContractResult<typeof meetingMinutesABI, 'isProposed'>,
>(
  config: Omit<
    UseContractReadConfig<typeof meetingMinutesABI, 'isProposed', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: meetingMinutesABI,
    functionName: 'isProposed',
    ...config,
  } as UseContractReadConfig<
    typeof meetingMinutesABI,
    'isProposed',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"isVoted"`.
 */
export function useMeetingMinutesIsVoted<
  TSelectData = ReadContractResult<typeof meetingMinutesABI, 'isVoted'>,
>(
  config: Omit<
    UseContractReadConfig<typeof meetingMinutesABI, 'isVoted', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: meetingMinutesABI,
    functionName: 'isVoted',
    ...config,
  } as UseContractReadConfig<typeof meetingMinutesABI, 'isVoted', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"isVotedFor"`.
 */
export function useMeetingMinutesIsVotedFor<
  TSelectData = ReadContractResult<typeof meetingMinutesABI, 'isVotedFor'>,
>(
  config: Omit<
    UseContractReadConfig<typeof meetingMinutesABI, 'isVotedFor', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: meetingMinutesABI,
    functionName: 'isVotedFor',
    ...config,
  } as UseContractReadConfig<
    typeof meetingMinutesABI,
    'isVotedFor',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"voteEnded"`.
 */
export function useMeetingMinutesVoteEnded<
  TSelectData = ReadContractResult<typeof meetingMinutesABI, 'voteEnded'>,
>(
  config: Omit<
    UseContractReadConfig<typeof meetingMinutesABI, 'voteEnded', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: meetingMinutesABI,
    functionName: 'voteEnded',
    ...config,
  } as UseContractReadConfig<
    typeof meetingMinutesABI,
    'voteEnded',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"voteStarted"`.
 */
export function useMeetingMinutesVoteStarted<
  TSelectData = ReadContractResult<typeof meetingMinutesABI, 'voteStarted'>,
>(
  config: Omit<
    UseContractReadConfig<typeof meetingMinutesABI, 'voteStarted', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: meetingMinutesABI,
    functionName: 'voteStarted',
    ...config,
  } as UseContractReadConfig<
    typeof meetingMinutesABI,
    'voteStarted',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__.
 */
export function useMeetingMinutesWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof meetingMinutesABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof meetingMinutesABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof meetingMinutesABI, TFunctionName>({
    abi: meetingMinutesABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useMeetingMinutesAbandonRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof meetingMinutesABI,
          'abandonRole'
        >['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<TMode, typeof meetingMinutesABI, 'abandonRole'> & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof meetingMinutesABI, 'abandonRole'>({
    abi: meetingMinutesABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"castVoteInBoardMeeting"`.
 */
export function useMeetingMinutesCastVoteInBoardMeeting<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof meetingMinutesABI,
          'castVoteInBoardMeeting'
        >['abi'],
        'castVoteInBoardMeeting'
      > & { functionName?: 'castVoteInBoardMeeting' }
    : UseContractWriteConfig<
        TMode,
        typeof meetingMinutesABI,
        'castVoteInBoardMeeting'
      > & {
        abi?: never
        functionName?: 'castVoteInBoardMeeting'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof meetingMinutesABI,
    'castVoteInBoardMeeting'
  >({
    abi: meetingMinutesABI,
    functionName: 'castVoteInBoardMeeting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"castVoteInGeneralMeeting"`.
 */
export function useMeetingMinutesCastVoteInGeneralMeeting<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof meetingMinutesABI,
          'castVoteInGeneralMeeting'
        >['abi'],
        'castVoteInGeneralMeeting'
      > & { functionName?: 'castVoteInGeneralMeeting' }
    : UseContractWriteConfig<
        TMode,
        typeof meetingMinutesABI,
        'castVoteInGeneralMeeting'
      > & {
        abi?: never
        functionName?: 'castVoteInGeneralMeeting'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof meetingMinutesABI,
    'castVoteInGeneralMeeting'
  >({
    abi: meetingMinutesABI,
    functionName: 'castVoteInGeneralMeeting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"createAction"`.
 */
export function useMeetingMinutesCreateAction<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof meetingMinutesABI,
          'createAction'
        >['abi'],
        'createAction'
      > & { functionName?: 'createAction' }
    : UseContractWriteConfig<
        TMode,
        typeof meetingMinutesABI,
        'createAction'
      > & {
        abi?: never
        functionName?: 'createAction'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof meetingMinutesABI, 'createAction'>({
    abi: meetingMinutesABI,
    functionName: 'createAction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"createMotionToApproveDoc"`.
 */
export function useMeetingMinutesCreateMotionToApproveDoc<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof meetingMinutesABI,
          'createMotionToApproveDoc'
        >['abi'],
        'createMotionToApproveDoc'
      > & { functionName?: 'createMotionToApproveDoc' }
    : UseContractWriteConfig<
        TMode,
        typeof meetingMinutesABI,
        'createMotionToApproveDoc'
      > & {
        abi?: never
        functionName?: 'createMotionToApproveDoc'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof meetingMinutesABI,
    'createMotionToApproveDoc'
  >({
    abi: meetingMinutesABI,
    functionName: 'createMotionToApproveDoc',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"createMotionToRemoveOfficer"`.
 */
export function useMeetingMinutesCreateMotionToRemoveOfficer<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof meetingMinutesABI,
          'createMotionToRemoveOfficer'
        >['abi'],
        'createMotionToRemoveOfficer'
      > & { functionName?: 'createMotionToRemoveOfficer' }
    : UseContractWriteConfig<
        TMode,
        typeof meetingMinutesABI,
        'createMotionToRemoveOfficer'
      > & {
        abi?: never
        functionName?: 'createMotionToRemoveOfficer'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof meetingMinutesABI,
    'createMotionToRemoveOfficer'
  >({
    abi: meetingMinutesABI,
    functionName: 'createMotionToRemoveOfficer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"entrustDelegate"`.
 */
export function useMeetingMinutesEntrustDelegate<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof meetingMinutesABI,
          'entrustDelegate'
        >['abi'],
        'entrustDelegate'
      > & { functionName?: 'entrustDelegate' }
    : UseContractWriteConfig<
        TMode,
        typeof meetingMinutesABI,
        'entrustDelegate'
      > & {
        abi?: never
        functionName?: 'entrustDelegate'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof meetingMinutesABI, 'entrustDelegate'>({
    abi: meetingMinutesABI,
    functionName: 'entrustDelegate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"execAction"`.
 */
export function useMeetingMinutesExecAction<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof meetingMinutesABI,
          'execAction'
        >['abi'],
        'execAction'
      > & { functionName?: 'execAction' }
    : UseContractWriteConfig<TMode, typeof meetingMinutesABI, 'execAction'> & {
        abi?: never
        functionName?: 'execAction'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof meetingMinutesABI, 'execAction'>({
    abi: meetingMinutesABI,
    functionName: 'execAction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"execResolution"`.
 */
export function useMeetingMinutesExecResolution<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof meetingMinutesABI,
          'execResolution'
        >['abi'],
        'execResolution'
      > & { functionName?: 'execResolution' }
    : UseContractWriteConfig<
        TMode,
        typeof meetingMinutesABI,
        'execResolution'
      > & {
        abi?: never
        functionName?: 'execResolution'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof meetingMinutesABI, 'execResolution'>({
    abi: meetingMinutesABI,
    functionName: 'execResolution',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"grantRole"`.
 */
export function useMeetingMinutesGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof meetingMinutesABI,
          'grantRole'
        >['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof meetingMinutesABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof meetingMinutesABI, 'grantRole'>({
    abi: meetingMinutesABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"init"`.
 */
export function useMeetingMinutesInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof meetingMinutesABI, 'init'>['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof meetingMinutesABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof meetingMinutesABI, 'init'>({
    abi: meetingMinutesABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"lockContents"`.
 */
export function useMeetingMinutesLockContents<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof meetingMinutesABI,
          'lockContents'
        >['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<
        TMode,
        typeof meetingMinutesABI,
        'lockContents'
      > & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof meetingMinutesABI, 'lockContents'>({
    abi: meetingMinutesABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"nominateOfficer"`.
 */
export function useMeetingMinutesNominateOfficer<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof meetingMinutesABI,
          'nominateOfficer'
        >['abi'],
        'nominateOfficer'
      > & { functionName?: 'nominateOfficer' }
    : UseContractWriteConfig<
        TMode,
        typeof meetingMinutesABI,
        'nominateOfficer'
      > & {
        abi?: never
        functionName?: 'nominateOfficer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof meetingMinutesABI, 'nominateOfficer'>({
    abi: meetingMinutesABI,
    functionName: 'nominateOfficer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"proposeMotionToBoard"`.
 */
export function useMeetingMinutesProposeMotionToBoard<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof meetingMinutesABI,
          'proposeMotionToBoard'
        >['abi'],
        'proposeMotionToBoard'
      > & { functionName?: 'proposeMotionToBoard' }
    : UseContractWriteConfig<
        TMode,
        typeof meetingMinutesABI,
        'proposeMotionToBoard'
      > & {
        abi?: never
        functionName?: 'proposeMotionToBoard'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof meetingMinutesABI,
    'proposeMotionToBoard'
  >({
    abi: meetingMinutesABI,
    functionName: 'proposeMotionToBoard',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"proposeMotionToGeneralMeeting"`.
 */
export function useMeetingMinutesProposeMotionToGeneralMeeting<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof meetingMinutesABI,
          'proposeMotionToGeneralMeeting'
        >['abi'],
        'proposeMotionToGeneralMeeting'
      > & { functionName?: 'proposeMotionToGeneralMeeting' }
    : UseContractWriteConfig<
        TMode,
        typeof meetingMinutesABI,
        'proposeMotionToGeneralMeeting'
      > & {
        abi?: never
        functionName?: 'proposeMotionToGeneralMeeting'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof meetingMinutesABI,
    'proposeMotionToGeneralMeeting'
  >({
    abi: meetingMinutesABI,
    functionName: 'proposeMotionToGeneralMeeting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function useMeetingMinutesRemoveDirectKeeper<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof meetingMinutesABI,
          'removeDirectKeeper'
        >['abi'],
        'removeDirectKeeper'
      > & { functionName?: 'removeDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof meetingMinutesABI,
        'removeDirectKeeper'
      > & {
        abi?: never
        functionName?: 'removeDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof meetingMinutesABI,
    'removeDirectKeeper'
  >({
    abi: meetingMinutesABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useMeetingMinutesRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof meetingMinutesABI,
          'renounceRole'
        >['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<
        TMode,
        typeof meetingMinutesABI,
        'renounceRole'
      > & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof meetingMinutesABI, 'renounceRole'>({
    abi: meetingMinutesABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useMeetingMinutesRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof meetingMinutesABI,
          'revokeRole'
        >['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof meetingMinutesABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof meetingMinutesABI, 'revokeRole'>({
    abi: meetingMinutesABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useMeetingMinutesSetDirectKeeper<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof meetingMinutesABI,
          'setDirectKeeper'
        >['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof meetingMinutesABI,
        'setDirectKeeper'
      > & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof meetingMinutesABI, 'setDirectKeeper'>({
    abi: meetingMinutesABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function useMeetingMinutesSetGeneralCounsel<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof meetingMinutesABI,
          'setGeneralCounsel'
        >['abi'],
        'setGeneralCounsel'
      > & { functionName?: 'setGeneralCounsel' }
    : UseContractWriteConfig<
        TMode,
        typeof meetingMinutesABI,
        'setGeneralCounsel'
      > & {
        abi?: never
        functionName?: 'setGeneralCounsel'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof meetingMinutesABI, 'setGeneralCounsel'>(
    {
      abi: meetingMinutesABI,
      functionName: 'setGeneralCounsel',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"setOwner"`.
 */
export function useMeetingMinutesSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof meetingMinutesABI, 'setOwner'>['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof meetingMinutesABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof meetingMinutesABI, 'setOwner'>({
    abi: meetingMinutesABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useMeetingMinutesSetRoleAdmin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof meetingMinutesABI,
          'setRoleAdmin'
        >['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<
        TMode,
        typeof meetingMinutesABI,
        'setRoleAdmin'
      > & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof meetingMinutesABI, 'setRoleAdmin'>({
    abi: meetingMinutesABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"voteCounting"`.
 */
export function useMeetingMinutesVoteCounting<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof meetingMinutesABI,
          'voteCounting'
        >['abi'],
        'voteCounting'
      > & { functionName?: 'voteCounting' }
    : UseContractWriteConfig<
        TMode,
        typeof meetingMinutesABI,
        'voteCounting'
      > & {
        abi?: never
        functionName?: 'voteCounting'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof meetingMinutesABI, 'voteCounting'>({
    abi: meetingMinutesABI,
    functionName: 'voteCounting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__.
 */
export function usePrepareMeetingMinutesWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof meetingMinutesABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: meetingMinutesABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof meetingMinutesABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareMeetingMinutesAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof meetingMinutesABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: meetingMinutesABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof meetingMinutesABI, 'abandonRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"castVoteInBoardMeeting"`.
 */
export function usePrepareMeetingMinutesCastVoteInBoardMeeting(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof meetingMinutesABI,
      'castVoteInBoardMeeting'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: meetingMinutesABI,
    functionName: 'castVoteInBoardMeeting',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof meetingMinutesABI,
    'castVoteInBoardMeeting'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"castVoteInGeneralMeeting"`.
 */
export function usePrepareMeetingMinutesCastVoteInGeneralMeeting(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof meetingMinutesABI,
      'castVoteInGeneralMeeting'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: meetingMinutesABI,
    functionName: 'castVoteInGeneralMeeting',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof meetingMinutesABI,
    'castVoteInGeneralMeeting'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"createAction"`.
 */
export function usePrepareMeetingMinutesCreateAction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof meetingMinutesABI, 'createAction'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: meetingMinutesABI,
    functionName: 'createAction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof meetingMinutesABI, 'createAction'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"createMotionToApproveDoc"`.
 */
export function usePrepareMeetingMinutesCreateMotionToApproveDoc(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof meetingMinutesABI,
      'createMotionToApproveDoc'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: meetingMinutesABI,
    functionName: 'createMotionToApproveDoc',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof meetingMinutesABI,
    'createMotionToApproveDoc'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"createMotionToRemoveOfficer"`.
 */
export function usePrepareMeetingMinutesCreateMotionToRemoveOfficer(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof meetingMinutesABI,
      'createMotionToRemoveOfficer'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: meetingMinutesABI,
    functionName: 'createMotionToRemoveOfficer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof meetingMinutesABI,
    'createMotionToRemoveOfficer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"entrustDelegate"`.
 */
export function usePrepareMeetingMinutesEntrustDelegate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof meetingMinutesABI, 'entrustDelegate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: meetingMinutesABI,
    functionName: 'entrustDelegate',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof meetingMinutesABI,
    'entrustDelegate'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"execAction"`.
 */
export function usePrepareMeetingMinutesExecAction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof meetingMinutesABI, 'execAction'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: meetingMinutesABI,
    functionName: 'execAction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof meetingMinutesABI, 'execAction'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"execResolution"`.
 */
export function usePrepareMeetingMinutesExecResolution(
  config: Omit<
    UsePrepareContractWriteConfig<typeof meetingMinutesABI, 'execResolution'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: meetingMinutesABI,
    functionName: 'execResolution',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof meetingMinutesABI,
    'execResolution'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareMeetingMinutesGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof meetingMinutesABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: meetingMinutesABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof meetingMinutesABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareMeetingMinutesInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof meetingMinutesABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: meetingMinutesABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof meetingMinutesABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareMeetingMinutesLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<typeof meetingMinutesABI, 'lockContents'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: meetingMinutesABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<typeof meetingMinutesABI, 'lockContents'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"nominateOfficer"`.
 */
export function usePrepareMeetingMinutesNominateOfficer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof meetingMinutesABI, 'nominateOfficer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: meetingMinutesABI,
    functionName: 'nominateOfficer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof meetingMinutesABI,
    'nominateOfficer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"proposeMotionToBoard"`.
 */
export function usePrepareMeetingMinutesProposeMotionToBoard(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof meetingMinutesABI,
      'proposeMotionToBoard'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: meetingMinutesABI,
    functionName: 'proposeMotionToBoard',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof meetingMinutesABI,
    'proposeMotionToBoard'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"proposeMotionToGeneralMeeting"`.
 */
export function usePrepareMeetingMinutesProposeMotionToGeneralMeeting(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof meetingMinutesABI,
      'proposeMotionToGeneralMeeting'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: meetingMinutesABI,
    functionName: 'proposeMotionToGeneralMeeting',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof meetingMinutesABI,
    'proposeMotionToGeneralMeeting'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function usePrepareMeetingMinutesRemoveDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof meetingMinutesABI,
      'removeDirectKeeper'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: meetingMinutesABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof meetingMinutesABI,
    'removeDirectKeeper'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareMeetingMinutesRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof meetingMinutesABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: meetingMinutesABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof meetingMinutesABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareMeetingMinutesRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof meetingMinutesABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: meetingMinutesABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof meetingMinutesABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareMeetingMinutesSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof meetingMinutesABI, 'setDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: meetingMinutesABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof meetingMinutesABI,
    'setDirectKeeper'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function usePrepareMeetingMinutesSetGeneralCounsel(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof meetingMinutesABI,
      'setGeneralCounsel'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: meetingMinutesABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof meetingMinutesABI,
    'setGeneralCounsel'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareMeetingMinutesSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof meetingMinutesABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: meetingMinutesABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof meetingMinutesABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareMeetingMinutesSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof meetingMinutesABI, 'setRoleAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: meetingMinutesABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof meetingMinutesABI, 'setRoleAdmin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link meetingMinutesABI}__ and `functionName` set to `"voteCounting"`.
 */
export function usePrepareMeetingMinutesVoteCounting(
  config: Omit<
    UsePrepareContractWriteConfig<typeof meetingMinutesABI, 'voteCounting'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: meetingMinutesABI,
    functionName: 'voteCounting',
    ...config,
  } as UsePrepareContractWriteConfig<typeof meetingMinutesABI, 'voteCounting'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link meetingMinutesABI}__.
 */
export function useMeetingMinutesEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof meetingMinutesABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: meetingMinutesABI,
    ...config,
  } as UseContractEventConfig<typeof meetingMinutesABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link meetingMinutesABI}__ and `eventName` set to `"CastVoteInBoardMeeting"`.
 */
export function useMeetingMinutesCastVoteInBoardMeetingEvent(
  config: Omit<
    UseContractEventConfig<typeof meetingMinutesABI, 'CastVoteInBoardMeeting'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: meetingMinutesABI,
    eventName: 'CastVoteInBoardMeeting',
    ...config,
  } as UseContractEventConfig<
    typeof meetingMinutesABI,
    'CastVoteInBoardMeeting'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link meetingMinutesABI}__ and `eventName` set to `"CastVoteInGeneralMeeting"`.
 */
export function useMeetingMinutesCastVoteInGeneralMeetingEvent(
  config: Omit<
    UseContractEventConfig<
      typeof meetingMinutesABI,
      'CastVoteInGeneralMeeting'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: meetingMinutesABI,
    eventName: 'CastVoteInGeneralMeeting',
    ...config,
  } as UseContractEventConfig<
    typeof meetingMinutesABI,
    'CastVoteInGeneralMeeting'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link meetingMinutesABI}__ and `eventName` set to `"CreateMotion"`.
 */
export function useMeetingMinutesCreateMotionEvent(
  config: Omit<
    UseContractEventConfig<typeof meetingMinutesABI, 'CreateMotion'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: meetingMinutesABI,
    eventName: 'CreateMotion',
    ...config,
  } as UseContractEventConfig<typeof meetingMinutesABI, 'CreateMotion'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link meetingMinutesABI}__ and `eventName` set to `"EntrustDelegate"`.
 */
export function useMeetingMinutesEntrustDelegateEvent(
  config: Omit<
    UseContractEventConfig<typeof meetingMinutesABI, 'EntrustDelegate'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: meetingMinutesABI,
    eventName: 'EntrustDelegate',
    ...config,
  } as UseContractEventConfig<typeof meetingMinutesABI, 'EntrustDelegate'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link meetingMinutesABI}__ and `eventName` set to `"ExecResolution"`.
 */
export function useMeetingMinutesExecResolutionEvent(
  config: Omit<
    UseContractEventConfig<typeof meetingMinutesABI, 'ExecResolution'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: meetingMinutesABI,
    eventName: 'ExecResolution',
    ...config,
  } as UseContractEventConfig<typeof meetingMinutesABI, 'ExecResolution'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link meetingMinutesABI}__ and `eventName` set to `"Init"`.
 */
export function useMeetingMinutesInitEvent(
  config: Omit<
    UseContractEventConfig<typeof meetingMinutesABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: meetingMinutesABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof meetingMinutesABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link meetingMinutesABI}__ and `eventName` set to `"LockContents"`.
 */
export function useMeetingMinutesLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof meetingMinutesABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: meetingMinutesABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof meetingMinutesABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link meetingMinutesABI}__ and `eventName` set to `"ProposeMotionToBoard"`.
 */
export function useMeetingMinutesProposeMotionToBoardEvent(
  config: Omit<
    UseContractEventConfig<typeof meetingMinutesABI, 'ProposeMotionToBoard'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: meetingMinutesABI,
    eventName: 'ProposeMotionToBoard',
    ...config,
  } as UseContractEventConfig<typeof meetingMinutesABI, 'ProposeMotionToBoard'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link meetingMinutesABI}__ and `eventName` set to `"ProposeMotionToGeneralMeeting"`.
 */
export function useMeetingMinutesProposeMotionToGeneralMeetingEvent(
  config: Omit<
    UseContractEventConfig<
      typeof meetingMinutesABI,
      'ProposeMotionToGeneralMeeting'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: meetingMinutesABI,
    eventName: 'ProposeMotionToGeneralMeeting',
    ...config,
  } as UseContractEventConfig<
    typeof meetingMinutesABI,
    'ProposeMotionToGeneralMeeting'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link meetingMinutesABI}__ and `eventName` set to `"RemoveDirectKeeper"`.
 */
export function useMeetingMinutesRemoveDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof meetingMinutesABI, 'RemoveDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: meetingMinutesABI,
    eventName: 'RemoveDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof meetingMinutesABI, 'RemoveDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link meetingMinutesABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useMeetingMinutesSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof meetingMinutesABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: meetingMinutesABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof meetingMinutesABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link meetingMinutesABI}__ and `eventName` set to `"SetGeneralCounsel"`.
 */
export function useMeetingMinutesSetGeneralCounselEvent(
  config: Omit<
    UseContractEventConfig<typeof meetingMinutesABI, 'SetGeneralCounsel'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: meetingMinutesABI,
    eventName: 'SetGeneralCounsel',
    ...config,
  } as UseContractEventConfig<typeof meetingMinutesABI, 'SetGeneralCounsel'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link meetingMinutesABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useMeetingMinutesSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof meetingMinutesABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: meetingMinutesABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof meetingMinutesABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link meetingMinutesABI}__ and `eventName` set to `"VoteCounting"`.
 */
export function useMeetingMinutesVoteCountingEvent(
  config: Omit<
    UseContractEventConfig<typeof meetingMinutesABI, 'VoteCounting'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: meetingMinutesABI,
    eventName: 'VoteCounting',
    ...config,
  } as UseContractEventConfig<typeof meetingMinutesABI, 'VoteCounting'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link sigPageABI}__.
 */
export function useSigPage(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: sigPageABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sigPageABI}__.
 */
export function useSigPageRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof sigPageABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof sigPageABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: sigPageABI,
    ...config,
  } as UseContractReadConfig<typeof sigPageABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"circulated"`.
 */
export function useSigPageCirculated<
  TSelectData = ReadContractResult<typeof sigPageABI, 'circulated'>,
>(
  config: Omit<
    UseContractReadConfig<typeof sigPageABI, 'circulated', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sigPageABI,
    functionName: 'circulated',
    ...config,
  } as UseContractReadConfig<typeof sigPageABI, 'circulated', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"established"`.
 */
export function useSigPageEstablished<
  TSelectData = ReadContractResult<typeof sigPageABI, 'established'>,
>(
  config: Omit<
    UseContractReadConfig<typeof sigPageABI, 'established', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sigPageABI,
    functionName: 'established',
    ...config,
  } as UseContractReadConfig<typeof sigPageABI, 'established', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"finalized"`.
 */
export function useSigPageFinalized<
  TSelectData = ReadContractResult<typeof sigPageABI, 'finalized'>,
>(
  config: Omit<
    UseContractReadConfig<typeof sigPageABI, 'finalized', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sigPageABI,
    functionName: 'finalized',
    ...config,
  } as UseContractReadConfig<typeof sigPageABI, 'finalized', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"getBookeeper"`.
 */
export function useSigPageGetBookeeper<
  TSelectData = ReadContractResult<typeof sigPageABI, 'getBookeeper'>,
>(
  config: Omit<
    UseContractReadConfig<typeof sigPageABI, 'getBookeeper', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sigPageABI,
    functionName: 'getBookeeper',
    ...config,
  } as UseContractReadConfig<typeof sigPageABI, 'getBookeeper', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"getBuyers"`.
 */
export function useSigPageGetBuyers<
  TSelectData = ReadContractResult<typeof sigPageABI, 'getBuyers'>,
>(
  config: Omit<
    UseContractReadConfig<typeof sigPageABI, 'getBuyers', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sigPageABI,
    functionName: 'getBuyers',
    ...config,
  } as UseContractReadConfig<typeof sigPageABI, 'getBuyers', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"getCirculateDate"`.
 */
export function useSigPageGetCirculateDate<
  TSelectData = ReadContractResult<typeof sigPageABI, 'getCirculateDate'>,
>(
  config: Omit<
    UseContractReadConfig<typeof sigPageABI, 'getCirculateDate', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sigPageABI,
    functionName: 'getCirculateDate',
    ...config,
  } as UseContractReadConfig<
    typeof sigPageABI,
    'getCirculateDate',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"getClosingDays"`.
 */
export function useSigPageGetClosingDays<
  TSelectData = ReadContractResult<typeof sigPageABI, 'getClosingDays'>,
>(
  config: Omit<
    UseContractReadConfig<typeof sigPageABI, 'getClosingDays', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sigPageABI,
    functionName: 'getClosingDays',
    ...config,
  } as UseContractReadConfig<typeof sigPageABI, 'getClosingDays', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"getClosingDeadline"`.
 */
export function useSigPageGetClosingDeadline<
  TSelectData = ReadContractResult<typeof sigPageABI, 'getClosingDeadline'>,
>(
  config: Omit<
    UseContractReadConfig<typeof sigPageABI, 'getClosingDeadline', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sigPageABI,
    functionName: 'getClosingDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof sigPageABI,
    'getClosingDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"getGeneralCounsel"`.
 */
export function useSigPageGetGeneralCounsel<
  TSelectData = ReadContractResult<typeof sigPageABI, 'getGeneralCounsel'>,
>(
  config: Omit<
    UseContractReadConfig<typeof sigPageABI, 'getGeneralCounsel', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sigPageABI,
    functionName: 'getGeneralCounsel',
    ...config,
  } as UseContractReadConfig<
    typeof sigPageABI,
    'getGeneralCounsel',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"getOwner"`.
 */
export function useSigPageGetOwner<
  TSelectData = ReadContractResult<typeof sigPageABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof sigPageABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sigPageABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<typeof sigPageABI, 'getOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"getParasOfPage"`.
 */
export function useSigPageGetParasOfPage<
  TSelectData = ReadContractResult<typeof sigPageABI, 'getParasOfPage'>,
>(
  config: Omit<
    UseContractReadConfig<typeof sigPageABI, 'getParasOfPage', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sigPageABI,
    functionName: 'getParasOfPage',
    ...config,
  } as UseContractReadConfig<typeof sigPageABI, 'getParasOfPage', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"getParties"`.
 */
export function useSigPageGetParties<
  TSelectData = ReadContractResult<typeof sigPageABI, 'getParties'>,
>(
  config: Omit<
    UseContractReadConfig<typeof sigPageABI, 'getParties', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sigPageABI,
    functionName: 'getParties',
    ...config,
  } as UseContractReadConfig<typeof sigPageABI, 'getParties', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"getSellers"`.
 */
export function useSigPageGetSellers<
  TSelectData = ReadContractResult<typeof sigPageABI, 'getSellers'>,
>(
  config: Omit<
    UseContractReadConfig<typeof sigPageABI, 'getSellers', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sigPageABI,
    functionName: 'getSellers',
    ...config,
  } as UseContractReadConfig<typeof sigPageABI, 'getSellers', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"getSigDeadline"`.
 */
export function useSigPageGetSigDeadline<
  TSelectData = ReadContractResult<typeof sigPageABI, 'getSigDeadline'>,
>(
  config: Omit<
    UseContractReadConfig<typeof sigPageABI, 'getSigDeadline', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sigPageABI,
    functionName: 'getSigDeadline',
    ...config,
  } as UseContractReadConfig<typeof sigPageABI, 'getSigDeadline', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"getSigOfParty"`.
 */
export function useSigPageGetSigOfParty<
  TSelectData = ReadContractResult<typeof sigPageABI, 'getSigOfParty'>,
>(
  config: Omit<
    UseContractReadConfig<typeof sigPageABI, 'getSigOfParty', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sigPageABI,
    functionName: 'getSigOfParty',
    ...config,
  } as UseContractReadConfig<typeof sigPageABI, 'getSigOfParty', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"getSigningDays"`.
 */
export function useSigPageGetSigningDays<
  TSelectData = ReadContractResult<typeof sigPageABI, 'getSigningDays'>,
>(
  config: Omit<
    UseContractReadConfig<typeof sigPageABI, 'getSigningDays', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sigPageABI,
    functionName: 'getSigningDays',
    ...config,
  } as UseContractReadConfig<typeof sigPageABI, 'getSigningDays', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"getSigsOfPage"`.
 */
export function useSigPageGetSigsOfPage<
  TSelectData = ReadContractResult<typeof sigPageABI, 'getSigsOfPage'>,
>(
  config: Omit<
    UseContractReadConfig<typeof sigPageABI, 'getSigsOfPage', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sigPageABI,
    functionName: 'getSigsOfPage',
    ...config,
  } as UseContractReadConfig<typeof sigPageABI, 'getSigsOfPage', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"hasRole"`.
 */
export function useSigPageHasRole<
  TSelectData = ReadContractResult<typeof sigPageABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof sigPageABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sigPageABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof sigPageABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"isBuyer"`.
 */
export function useSigPageIsBuyer<
  TSelectData = ReadContractResult<typeof sigPageABI, 'isBuyer'>,
>(
  config: Omit<
    UseContractReadConfig<typeof sigPageABI, 'isBuyer', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sigPageABI,
    functionName: 'isBuyer',
    ...config,
  } as UseContractReadConfig<typeof sigPageABI, 'isBuyer', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"isInitSigner"`.
 */
export function useSigPageIsInitSigner<
  TSelectData = ReadContractResult<typeof sigPageABI, 'isInitSigner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof sigPageABI, 'isInitSigner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sigPageABI,
    functionName: 'isInitSigner',
    ...config,
  } as UseContractReadConfig<typeof sigPageABI, 'isInitSigner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"isParty"`.
 */
export function useSigPageIsParty<
  TSelectData = ReadContractResult<typeof sigPageABI, 'isParty'>,
>(
  config: Omit<
    UseContractReadConfig<typeof sigPageABI, 'isParty', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sigPageABI,
    functionName: 'isParty',
    ...config,
  } as UseContractReadConfig<typeof sigPageABI, 'isParty', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"isSeller"`.
 */
export function useSigPageIsSeller<
  TSelectData = ReadContractResult<typeof sigPageABI, 'isSeller'>,
>(
  config: Omit<
    UseContractReadConfig<typeof sigPageABI, 'isSeller', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sigPageABI,
    functionName: 'isSeller',
    ...config,
  } as UseContractReadConfig<typeof sigPageABI, 'isSeller', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"isSigner"`.
 */
export function useSigPageIsSigner<
  TSelectData = ReadContractResult<typeof sigPageABI, 'isSigner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof sigPageABI, 'isSigner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sigPageABI,
    functionName: 'isSigner',
    ...config,
  } as UseContractReadConfig<typeof sigPageABI, 'isSigner', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sigPageABI}__.
 */
export function useSigPageWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sigPageABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof sigPageABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof sigPageABI, TFunctionName>({
    abi: sigPageABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useSigPageAbandonRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sigPageABI, 'abandonRole'>['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<TMode, typeof sigPageABI, 'abandonRole'> & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof sigPageABI, 'abandonRole'>({
    abi: sigPageABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"addBlank"`.
 */
export function useSigPageAddBlank<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sigPageABI, 'addBlank'>['abi'],
        'addBlank'
      > & { functionName?: 'addBlank' }
    : UseContractWriteConfig<TMode, typeof sigPageABI, 'addBlank'> & {
        abi?: never
        functionName?: 'addBlank'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof sigPageABI, 'addBlank'>({
    abi: sigPageABI,
    functionName: 'addBlank',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"circulateDoc"`.
 */
export function useSigPageCirculateDoc<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sigPageABI, 'circulateDoc'>['abi'],
        'circulateDoc'
      > & { functionName?: 'circulateDoc' }
    : UseContractWriteConfig<TMode, typeof sigPageABI, 'circulateDoc'> & {
        abi?: never
        functionName?: 'circulateDoc'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof sigPageABI, 'circulateDoc'>({
    abi: sigPageABI,
    functionName: 'circulateDoc',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"grantRole"`.
 */
export function useSigPageGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sigPageABI, 'grantRole'>['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof sigPageABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof sigPageABI, 'grantRole'>({
    abi: sigPageABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"init"`.
 */
export function useSigPageInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sigPageABI, 'init'>['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof sigPageABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof sigPageABI, 'init'>({
    abi: sigPageABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"lockContents"`.
 */
export function useSigPageLockContents<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sigPageABI, 'lockContents'>['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<TMode, typeof sigPageABI, 'lockContents'> & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof sigPageABI, 'lockContents'>({
    abi: sigPageABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"regSig"`.
 */
export function useSigPageRegSig<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sigPageABI, 'regSig'>['abi'],
        'regSig'
      > & { functionName?: 'regSig' }
    : UseContractWriteConfig<TMode, typeof sigPageABI, 'regSig'> & {
        abi?: never
        functionName?: 'regSig'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof sigPageABI, 'regSig'>({
    abi: sigPageABI,
    functionName: 'regSig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"removeBlank"`.
 */
export function useSigPageRemoveBlank<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sigPageABI, 'removeBlank'>['abi'],
        'removeBlank'
      > & { functionName?: 'removeBlank' }
    : UseContractWriteConfig<TMode, typeof sigPageABI, 'removeBlank'> & {
        abi?: never
        functionName?: 'removeBlank'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof sigPageABI, 'removeBlank'>({
    abi: sigPageABI,
    functionName: 'removeBlank',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function useSigPageRemoveDirectKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof sigPageABI,
          'removeDirectKeeper'
        >['abi'],
        'removeDirectKeeper'
      > & { functionName?: 'removeDirectKeeper' }
    : UseContractWriteConfig<TMode, typeof sigPageABI, 'removeDirectKeeper'> & {
        abi?: never
        functionName?: 'removeDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof sigPageABI, 'removeDirectKeeper'>({
    abi: sigPageABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useSigPageRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sigPageABI, 'renounceRole'>['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<TMode, typeof sigPageABI, 'renounceRole'> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof sigPageABI, 'renounceRole'>({
    abi: sigPageABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useSigPageRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sigPageABI, 'revokeRole'>['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof sigPageABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof sigPageABI, 'revokeRole'>({
    abi: sigPageABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useSigPageSetDirectKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sigPageABI, 'setDirectKeeper'>['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<TMode, typeof sigPageABI, 'setDirectKeeper'> & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof sigPageABI, 'setDirectKeeper'>({
    abi: sigPageABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function useSigPageSetGeneralCounsel<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof sigPageABI,
          'setGeneralCounsel'
        >['abi'],
        'setGeneralCounsel'
      > & { functionName?: 'setGeneralCounsel' }
    : UseContractWriteConfig<TMode, typeof sigPageABI, 'setGeneralCounsel'> & {
        abi?: never
        functionName?: 'setGeneralCounsel'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof sigPageABI, 'setGeneralCounsel'>({
    abi: sigPageABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"setOwner"`.
 */
export function useSigPageSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sigPageABI, 'setOwner'>['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof sigPageABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof sigPageABI, 'setOwner'>({
    abi: sigPageABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useSigPageSetRoleAdmin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sigPageABI, 'setRoleAdmin'>['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<TMode, typeof sigPageABI, 'setRoleAdmin'> & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof sigPageABI, 'setRoleAdmin'>({
    abi: sigPageABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"setTiming"`.
 */
export function useSigPageSetTiming<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sigPageABI, 'setTiming'>['abi'],
        'setTiming'
      > & { functionName?: 'setTiming' }
    : UseContractWriteConfig<TMode, typeof sigPageABI, 'setTiming'> & {
        abi?: never
        functionName?: 'setTiming'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof sigPageABI, 'setTiming'>({
    abi: sigPageABI,
    functionName: 'setTiming',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"signDoc"`.
 */
export function useSigPageSignDoc<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sigPageABI, 'signDoc'>['abi'],
        'signDoc'
      > & { functionName?: 'signDoc' }
    : UseContractWriteConfig<TMode, typeof sigPageABI, 'signDoc'> & {
        abi?: never
        functionName?: 'signDoc'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof sigPageABI, 'signDoc'>({
    abi: sigPageABI,
    functionName: 'signDoc',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sigPageABI}__.
 */
export function usePrepareSigPageWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sigPageABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sigPageABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof sigPageABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareSigPageAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sigPageABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sigPageABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sigPageABI, 'abandonRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"addBlank"`.
 */
export function usePrepareSigPageAddBlank(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sigPageABI, 'addBlank'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sigPageABI,
    functionName: 'addBlank',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sigPageABI, 'addBlank'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"circulateDoc"`.
 */
export function usePrepareSigPageCirculateDoc(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sigPageABI, 'circulateDoc'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sigPageABI,
    functionName: 'circulateDoc',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sigPageABI, 'circulateDoc'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareSigPageGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sigPageABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sigPageABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sigPageABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareSigPageInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sigPageABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sigPageABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sigPageABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareSigPageLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sigPageABI, 'lockContents'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sigPageABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sigPageABI, 'lockContents'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"regSig"`.
 */
export function usePrepareSigPageRegSig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sigPageABI, 'regSig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sigPageABI,
    functionName: 'regSig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sigPageABI, 'regSig'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"removeBlank"`.
 */
export function usePrepareSigPageRemoveBlank(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sigPageABI, 'removeBlank'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sigPageABI,
    functionName: 'removeBlank',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sigPageABI, 'removeBlank'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function usePrepareSigPageRemoveDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sigPageABI, 'removeDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sigPageABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sigPageABI, 'removeDirectKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareSigPageRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sigPageABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sigPageABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sigPageABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareSigPageRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sigPageABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sigPageABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sigPageABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareSigPageSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sigPageABI, 'setDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sigPageABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sigPageABI, 'setDirectKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function usePrepareSigPageSetGeneralCounsel(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sigPageABI, 'setGeneralCounsel'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sigPageABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sigPageABI, 'setGeneralCounsel'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareSigPageSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sigPageABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sigPageABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sigPageABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareSigPageSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sigPageABI, 'setRoleAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sigPageABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sigPageABI, 'setRoleAdmin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"setTiming"`.
 */
export function usePrepareSigPageSetTiming(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sigPageABI, 'setTiming'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sigPageABI,
    functionName: 'setTiming',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sigPageABI, 'setTiming'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sigPageABI}__ and `functionName` set to `"signDoc"`.
 */
export function usePrepareSigPageSignDoc(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sigPageABI, 'signDoc'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sigPageABI,
    functionName: 'signDoc',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sigPageABI, 'signDoc'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sigPageABI}__.
 */
export function useSigPageEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof sigPageABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: sigPageABI,
    ...config,
  } as UseContractEventConfig<typeof sigPageABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sigPageABI}__ and `eventName` set to `"CirculateDoc"`.
 */
export function useSigPageCirculateDocEvent(
  config: Omit<
    UseContractEventConfig<typeof sigPageABI, 'CirculateDoc'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: sigPageABI,
    eventName: 'CirculateDoc',
    ...config,
  } as UseContractEventConfig<typeof sigPageABI, 'CirculateDoc'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sigPageABI}__ and `eventName` set to `"Init"`.
 */
export function useSigPageInitEvent(
  config: Omit<
    UseContractEventConfig<typeof sigPageABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: sigPageABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof sigPageABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sigPageABI}__ and `eventName` set to `"LockContents"`.
 */
export function useSigPageLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof sigPageABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: sigPageABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof sigPageABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sigPageABI}__ and `eventName` set to `"RemoveDirectKeeper"`.
 */
export function useSigPageRemoveDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof sigPageABI, 'RemoveDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: sigPageABI,
    eventName: 'RemoveDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof sigPageABI, 'RemoveDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sigPageABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useSigPageSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof sigPageABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: sigPageABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof sigPageABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sigPageABI}__ and `eventName` set to `"SetGeneralCounsel"`.
 */
export function useSigPageSetGeneralCounselEvent(
  config: Omit<
    UseContractEventConfig<typeof sigPageABI, 'SetGeneralCounsel'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: sigPageABI,
    eventName: 'SetGeneralCounsel',
    ...config,
  } as UseContractEventConfig<typeof sigPageABI, 'SetGeneralCounsel'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sigPageABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useSigPageSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof sigPageABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: sigPageABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof sigPageABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link arrayUtilsABI}__.
 */
export function useArrayUtils(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: arrayUtilsABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link arrayUtilsABI}__.
 */
export function useArrayUtilsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof arrayUtilsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof arrayUtilsABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: arrayUtilsABI,
    ...config,
  } as UseContractReadConfig<typeof arrayUtilsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link arrayUtilsABI}__ and `functionName` set to `"combine"`.
 */
export function useArrayUtilsCombine<
  TSelectData = ReadContractResult<typeof arrayUtilsABI, 'combine'>,
>(
  config: Omit<
    UseContractReadConfig<typeof arrayUtilsABI, 'combine', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: arrayUtilsABI,
    functionName: 'combine',
    ...config,
  } as UseContractReadConfig<typeof arrayUtilsABI, 'combine', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link arrayUtilsABI}__ and `functionName` set to `"filter"`.
 */
export function useArrayUtilsFilter<
  TSelectData = ReadContractResult<typeof arrayUtilsABI, 'filter'>,
>(
  config: Omit<
    UseContractReadConfig<typeof arrayUtilsABI, 'filter', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: arrayUtilsABI,
    functionName: 'filter',
    ...config,
  } as UseContractReadConfig<typeof arrayUtilsABI, 'filter', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link arrayUtilsABI}__ and `functionName` set to `"fullyCoveredBy"`.
 */
export function useArrayUtilsFullyCoveredBy<
  TSelectData = ReadContractResult<typeof arrayUtilsABI, 'fullyCoveredBy'>,
>(
  config: Omit<
    UseContractReadConfig<typeof arrayUtilsABI, 'fullyCoveredBy', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: arrayUtilsABI,
    functionName: 'fullyCoveredBy',
    ...config,
  } as UseContractReadConfig<
    typeof arrayUtilsABI,
    'fullyCoveredBy',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link arrayUtilsABI}__ and `functionName` set to `"merge"`.
 */
export function useArrayUtilsMerge<
  TSelectData = ReadContractResult<typeof arrayUtilsABI, 'merge'>,
>(
  config: Omit<
    UseContractReadConfig<typeof arrayUtilsABI, 'merge', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: arrayUtilsABI,
    functionName: 'merge',
    ...config,
  } as UseContractReadConfig<typeof arrayUtilsABI, 'merge', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link arrayUtilsABI}__ and `functionName` set to `"minus"`.
 */
export function useArrayUtilsMinus<
  TSelectData = ReadContractResult<typeof arrayUtilsABI, 'minus'>,
>(
  config: Omit<
    UseContractReadConfig<typeof arrayUtilsABI, 'minus', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: arrayUtilsABI,
    functionName: 'minus',
    ...config,
  } as UseContractReadConfig<typeof arrayUtilsABI, 'minus', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link arrayUtilsABI}__ and `functionName` set to `"refine"`.
 */
export function useArrayUtilsRefine<
  TSelectData = ReadContractResult<typeof arrayUtilsABI, 'refine'>,
>(
  config: Omit<
    UseContractReadConfig<typeof arrayUtilsABI, 'refine', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: arrayUtilsABI,
    functionName: 'refine',
    ...config,
  } as UseContractReadConfig<typeof arrayUtilsABI, 'refine', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link arrayUtilsABI}__ and `functionName` set to `"resize"`.
 */
export function useArrayUtilsResize<
  TSelectData = ReadContractResult<typeof arrayUtilsABI, 'resize'>,
>(
  config: Omit<
    UseContractReadConfig<typeof arrayUtilsABI, 'resize', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: arrayUtilsABI,
    functionName: 'resize',
    ...config,
  } as UseContractReadConfig<typeof arrayUtilsABI, 'resize', TSelectData>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link condsRepoABI}__.
 */
export function useCondsRepo(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: condsRepoABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link condsRepoABI}__.
 */
export function useCondsRepoRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof condsRepoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof condsRepoABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: condsRepoABI,
    ...config,
  } as UseContractReadConfig<typeof condsRepoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link condsRepoABI}__ and `functionName` set to `"checkCond"`.
 */
export function useCondsRepoCheckCond<
  TSelectData = ReadContractResult<typeof condsRepoABI, 'checkCond'>,
>(
  config: Omit<
    UseContractReadConfig<typeof condsRepoABI, 'checkCond', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: condsRepoABI,
    functionName: 'checkCond',
    ...config,
  } as UseContractReadConfig<typeof condsRepoABI, 'checkCond', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link condsRepoABI}__ and `functionName` set to `"checkCondsOfThree"`.
 */
export function useCondsRepoCheckCondsOfThree<
  TSelectData = ReadContractResult<typeof condsRepoABI, 'checkCondsOfThree'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof condsRepoABI,
      'checkCondsOfThree',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: condsRepoABI,
    functionName: 'checkCondsOfThree',
    ...config,
  } as UseContractReadConfig<
    typeof condsRepoABI,
    'checkCondsOfThree',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link condsRepoABI}__ and `functionName` set to `"checkCondsOfTwo"`.
 */
export function useCondsRepoCheckCondsOfTwo<
  TSelectData = ReadContractResult<typeof condsRepoABI, 'checkCondsOfTwo'>,
>(
  config: Omit<
    UseContractReadConfig<typeof condsRepoABI, 'checkCondsOfTwo', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: condsRepoABI,
    functionName: 'checkCondsOfTwo',
    ...config,
  } as UseContractReadConfig<
    typeof condsRepoABI,
    'checkCondsOfTwo',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link condsRepoABI}__ and `functionName` set to `"checkSoleCond"`.
 */
export function useCondsRepoCheckSoleCond<
  TSelectData = ReadContractResult<typeof condsRepoABI, 'checkSoleCond'>,
>(
  config: Omit<
    UseContractReadConfig<typeof condsRepoABI, 'checkSoleCond', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: condsRepoABI,
    functionName: 'checkSoleCond',
    ...config,
  } as UseContractReadConfig<typeof condsRepoABI, 'checkSoleCond', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link condsRepoABI}__ and `functionName` set to `"codifyCond"`.
 */
export function useCondsRepoCodifyCond<
  TSelectData = ReadContractResult<typeof condsRepoABI, 'codifyCond'>,
>(
  config: Omit<
    UseContractReadConfig<typeof condsRepoABI, 'codifyCond', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: condsRepoABI,
    functionName: 'codifyCond',
    ...config,
  } as UseContractReadConfig<typeof condsRepoABI, 'codifyCond', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link condsRepoABI}__ and `functionName` set to `"snParser"`.
 */
export function useCondsRepoSnParser<
  TSelectData = ReadContractResult<typeof condsRepoABI, 'snParser'>,
>(
  config: Omit<
    UseContractReadConfig<typeof condsRepoABI, 'snParser', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: condsRepoABI,
    functionName: 'snParser',
    ...config,
  } as UseContractReadConfig<typeof condsRepoABI, 'snParser', TSelectData>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link dealsRepoABI}__.
 */
export function useDealsRepo(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: dealsRepoABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dealsRepoABI}__.
 */
export function useDealsRepoRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof dealsRepoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof dealsRepoABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: dealsRepoABI,
    ...config,
  } as UseContractReadConfig<typeof dealsRepoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dealsRepoABI}__ and `functionName` set to `"codifyHead"`.
 */
export function useDealsRepoCodifyHead<
  TSelectData = ReadContractResult<typeof dealsRepoABI, 'codifyHead'>,
>(
  config: Omit<
    UseContractReadConfig<typeof dealsRepoABI, 'codifyHead', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dealsRepoABI,
    functionName: 'codifyHead',
    ...config,
  } as UseContractReadConfig<typeof dealsRepoABI, 'codifyHead', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dealsRepoABI}__ and `functionName` set to `"snParser"`.
 */
export function useDealsRepoSnParser<
  TSelectData = ReadContractResult<typeof dealsRepoABI, 'snParser'>,
>(
  config: Omit<
    UseContractReadConfig<typeof dealsRepoABI, 'snParser', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dealsRepoABI,
    functionName: 'snParser',
    ...config,
  } as UseContractReadConfig<typeof dealsRepoABI, 'snParser', TSelectData>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link docsRepoABI}__.
 */
export function useDocsRepo(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: docsRepoABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link docsRepoABI}__.
 */
export function useDocsRepoRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof docsRepoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof docsRepoABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: docsRepoABI,
    ...config,
  } as UseContractReadConfig<typeof docsRepoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link docsRepoABI}__ and `functionName` set to `"codifyHead"`.
 */
export function useDocsRepoCodifyHead<
  TSelectData = ReadContractResult<typeof docsRepoABI, 'codifyHead'>,
>(
  config: Omit<
    UseContractReadConfig<typeof docsRepoABI, 'codifyHead', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: docsRepoABI,
    functionName: 'codifyHead',
    ...config,
  } as UseContractReadConfig<typeof docsRepoABI, 'codifyHead', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link docsRepoABI}__ and `functionName` set to `"snParser"`.
 */
export function useDocsRepoSnParser<
  TSelectData = ReadContractResult<typeof docsRepoABI, 'snParser'>,
>(
  config: Omit<
    UseContractReadConfig<typeof docsRepoABI, 'snParser', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: docsRepoABI,
    functionName: 'snParser',
    ...config,
  } as UseContractReadConfig<typeof docsRepoABI, 'snParser', TSelectData>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link lockersRepoABI}__.
 */
export function useLockersRepo(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: lockersRepoABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lockersRepoABI}__.
 */
export function useLockersRepoRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof lockersRepoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof lockersRepoABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: lockersRepoABI,
    ...config,
  } as UseContractReadConfig<typeof lockersRepoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lockersRepoABI}__ and `functionName` set to `"snParser"`.
 */
export function useLockersRepoSnParser<
  TSelectData = ReadContractResult<typeof lockersRepoABI, 'snParser'>,
>(
  config: Omit<
    UseContractReadConfig<typeof lockersRepoABI, 'snParser', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lockersRepoABI,
    functionName: 'snParser',
    ...config,
  } as UseContractReadConfig<typeof lockersRepoABI, 'snParser', TSelectData>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link motionsRepoABI}__.
 */
export function useMotionsRepo(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: motionsRepoABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link motionsRepoABI}__.
 */
export function useMotionsRepoRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof motionsRepoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof motionsRepoABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: motionsRepoABI,
    ...config,
  } as UseContractReadConfig<typeof motionsRepoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link motionsRepoABI}__ and `functionName` set to `"codifyHead"`.
 */
export function useMotionsRepoCodifyHead<
  TSelectData = ReadContractResult<typeof motionsRepoABI, 'codifyHead'>,
>(
  config: Omit<
    UseContractReadConfig<typeof motionsRepoABI, 'codifyHead', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: motionsRepoABI,
    functionName: 'codifyHead',
    ...config,
  } as UseContractReadConfig<typeof motionsRepoABI, 'codifyHead', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link motionsRepoABI}__ and `functionName` set to `"snParser"`.
 */
export function useMotionsRepoSnParser<
  TSelectData = ReadContractResult<typeof motionsRepoABI, 'snParser'>,
>(
  config: Omit<
    UseContractReadConfig<typeof motionsRepoABI, 'snParser', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: motionsRepoABI,
    functionName: 'snParser',
    ...config,
  } as UseContractReadConfig<typeof motionsRepoABI, 'snParser', TSelectData>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link officersRepoABI}__.
 */
export function useOfficersRepo(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: officersRepoABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link officersRepoABI}__.
 */
export function useOfficersRepoRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof officersRepoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof officersRepoABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: officersRepoABI,
    ...config,
  } as UseContractReadConfig<
    typeof officersRepoABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link officersRepoABI}__ and `functionName` set to `"codifyPosition"`.
 */
export function useOfficersRepoCodifyPosition<
  TSelectData = ReadContractResult<typeof officersRepoABI, 'codifyPosition'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof officersRepoABI,
      'codifyPosition',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: officersRepoABI,
    functionName: 'codifyPosition',
    ...config,
  } as UseContractReadConfig<
    typeof officersRepoABI,
    'codifyPosition',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link officersRepoABI}__ and `functionName` set to `"snParser"`.
 */
export function useOfficersRepoSnParser<
  TSelectData = ReadContractResult<typeof officersRepoABI, 'snParser'>,
>(
  config: Omit<
    UseContractReadConfig<typeof officersRepoABI, 'snParser', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: officersRepoABI,
    functionName: 'snParser',
    ...config,
  } as UseContractReadConfig<typeof officersRepoABI, 'snParser', TSelectData>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link optionsRepoABI}__.
 */
export function useOptionsRepo(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: optionsRepoABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link optionsRepoABI}__.
 */
export function useOptionsRepoRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof optionsRepoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof optionsRepoABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: optionsRepoABI,
    ...config,
  } as UseContractReadConfig<typeof optionsRepoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link optionsRepoABI}__ and `functionName` set to `"codifyBrief"`.
 */
export function useOptionsRepoCodifyBrief<
  TSelectData = ReadContractResult<typeof optionsRepoABI, 'codifyBrief'>,
>(
  config: Omit<
    UseContractReadConfig<typeof optionsRepoABI, 'codifyBrief', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: optionsRepoABI,
    functionName: 'codifyBrief',
    ...config,
  } as UseContractReadConfig<typeof optionsRepoABI, 'codifyBrief', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link optionsRepoABI}__ and `functionName` set to `"codifyHead"`.
 */
export function useOptionsRepoCodifyHead<
  TSelectData = ReadContractResult<typeof optionsRepoABI, 'codifyHead'>,
>(
  config: Omit<
    UseContractReadConfig<typeof optionsRepoABI, 'codifyHead', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: optionsRepoABI,
    functionName: 'codifyHead',
    ...config,
  } as UseContractReadConfig<typeof optionsRepoABI, 'codifyHead', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link optionsRepoABI}__ and `functionName` set to `"snParser"`.
 */
export function useOptionsRepoSnParser<
  TSelectData = ReadContractResult<typeof optionsRepoABI, 'snParser'>,
>(
  config: Omit<
    UseContractReadConfig<typeof optionsRepoABI, 'snParser', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: optionsRepoABI,
    functionName: 'snParser',
    ...config,
  } as UseContractReadConfig<typeof optionsRepoABI, 'snParser', TSelectData>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link pledgesRepoABI}__.
 */
export function usePledgesRepo(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: pledgesRepoABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pledgesRepoABI}__.
 */
export function usePledgesRepoRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof pledgesRepoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pledgesRepoABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: pledgesRepoABI,
    ...config,
  } as UseContractReadConfig<typeof pledgesRepoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pledgesRepoABI}__ and `functionName` set to `"codifyHead"`.
 */
export function usePledgesRepoCodifyHead<
  TSelectData = ReadContractResult<typeof pledgesRepoABI, 'codifyHead'>,
>(
  config: Omit<
    UseContractReadConfig<typeof pledgesRepoABI, 'codifyHead', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pledgesRepoABI,
    functionName: 'codifyHead',
    ...config,
  } as UseContractReadConfig<typeof pledgesRepoABI, 'codifyHead', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pledgesRepoABI}__ and `functionName` set to `"snParser"`.
 */
export function usePledgesRepoSnParser<
  TSelectData = ReadContractResult<typeof pledgesRepoABI, 'snParser'>,
>(
  config: Omit<
    UseContractReadConfig<typeof pledgesRepoABI, 'snParser', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pledgesRepoABI,
    functionName: 'snParser',
    ...config,
  } as UseContractReadConfig<typeof pledgesRepoABI, 'snParser', TSelectData>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link rulesParserABI}__.
 */
export function useRulesParser(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: rulesParserABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rulesParserABI}__.
 */
export function useRulesParserRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof rulesParserABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof rulesParserABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: rulesParserABI,
    ...config,
  } as UseContractReadConfig<typeof rulesParserABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rulesParserABI}__ and `functionName` set to `"SHA_INIT_GR"`.
 */
export function useRulesParserShaInitGr<
  TSelectData = ReadContractResult<typeof rulesParserABI, 'SHA_INIT_GR'>,
>(
  config: Omit<
    UseContractReadConfig<typeof rulesParserABI, 'SHA_INIT_GR', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rulesParserABI,
    functionName: 'SHA_INIT_GR',
    ...config,
  } as UseContractReadConfig<typeof rulesParserABI, 'SHA_INIT_GR', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rulesParserABI}__ and `functionName` set to `"SHA_INIT_VR"`.
 */
export function useRulesParserShaInitVr<
  TSelectData = ReadContractResult<typeof rulesParserABI, 'SHA_INIT_VR'>,
>(
  config: Omit<
    UseContractReadConfig<typeof rulesParserABI, 'SHA_INIT_VR', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rulesParserABI,
    functionName: 'SHA_INIT_VR',
    ...config,
  } as UseContractReadConfig<typeof rulesParserABI, 'SHA_INIT_VR', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rulesParserABI}__ and `functionName` set to `"firstRefusalRuleParser"`.
 */
export function useRulesParserFirstRefusalRuleParser<
  TSelectData = ReadContractResult<
    typeof rulesParserABI,
    'firstRefusalRuleParser'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof rulesParserABI,
      'firstRefusalRuleParser',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rulesParserABI,
    functionName: 'firstRefusalRuleParser',
    ...config,
  } as UseContractReadConfig<
    typeof rulesParserABI,
    'firstRefusalRuleParser',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rulesParserABI}__ and `functionName` set to `"governanceRuleParser"`.
 */
export function useRulesParserGovernanceRuleParser<
  TSelectData = ReadContractResult<
    typeof rulesParserABI,
    'governanceRuleParser'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof rulesParserABI,
      'governanceRuleParser',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rulesParserABI,
    functionName: 'governanceRuleParser',
    ...config,
  } as UseContractReadConfig<
    typeof rulesParserABI,
    'governanceRuleParser',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rulesParserABI}__ and `functionName` set to `"groupUpdateOrderParser"`.
 */
export function useRulesParserGroupUpdateOrderParser<
  TSelectData = ReadContractResult<
    typeof rulesParserABI,
    'groupUpdateOrderParser'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof rulesParserABI,
      'groupUpdateOrderParser',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rulesParserABI,
    functionName: 'groupUpdateOrderParser',
    ...config,
  } as UseContractReadConfig<
    typeof rulesParserABI,
    'groupUpdateOrderParser',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rulesParserABI}__ and `functionName` set to `"linkRuleParser"`.
 */
export function useRulesParserLinkRuleParser<
  TSelectData = ReadContractResult<typeof rulesParserABI, 'linkRuleParser'>,
>(
  config: Omit<
    UseContractReadConfig<typeof rulesParserABI, 'linkRuleParser', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rulesParserABI,
    functionName: 'linkRuleParser',
    ...config,
  } as UseContractReadConfig<
    typeof rulesParserABI,
    'linkRuleParser',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rulesParserABI}__ and `functionName` set to `"positionAllocateRuleParser"`.
 */
export function useRulesParserPositionAllocateRuleParser<
  TSelectData = ReadContractResult<
    typeof rulesParserABI,
    'positionAllocateRuleParser'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof rulesParserABI,
      'positionAllocateRuleParser',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rulesParserABI,
    functionName: 'positionAllocateRuleParser',
    ...config,
  } as UseContractReadConfig<
    typeof rulesParserABI,
    'positionAllocateRuleParser',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rulesParserABI}__ and `functionName` set to `"votingRuleParser"`.
 */
export function useRulesParserVotingRuleParser<
  TSelectData = ReadContractResult<typeof rulesParserABI, 'votingRuleParser'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof rulesParserABI,
      'votingRuleParser',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rulesParserABI,
    functionName: 'votingRuleParser',
    ...config,
  } as UseContractReadConfig<
    typeof rulesParserABI,
    'votingRuleParser',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link sharesRepoABI}__.
 */
export function useSharesRepo(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: sharesRepoABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sharesRepoABI}__.
 */
export function useSharesRepoRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof sharesRepoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof sharesRepoABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: sharesRepoABI,
    ...config,
  } as UseContractReadConfig<typeof sharesRepoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sharesRepoABI}__ and `functionName` set to `"codifyHead"`.
 */
export function useSharesRepoCodifyHead<
  TSelectData = ReadContractResult<typeof sharesRepoABI, 'codifyHead'>,
>(
  config: Omit<
    UseContractReadConfig<typeof sharesRepoABI, 'codifyHead', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sharesRepoABI,
    functionName: 'codifyHead',
    ...config,
  } as UseContractReadConfig<typeof sharesRepoABI, 'codifyHead', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sharesRepoABI}__ and `functionName` set to `"snParser"`.
 */
export function useSharesRepoSnParser<
  TSelectData = ReadContractResult<typeof sharesRepoABI, 'snParser'>,
>(
  config: Omit<
    UseContractReadConfig<typeof sharesRepoABI, 'snParser', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sharesRepoABI,
    functionName: 'snParser',
    ...config,
  } as UseContractReadConfig<typeof sharesRepoABI, 'snParser', TSelectData>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link swapsRepoABI}__.
 */
export function useSwapsRepo(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: swapsRepoABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link swapsRepoABI}__.
 */
export function useSwapsRepoRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof swapsRepoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof swapsRepoABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: swapsRepoABI,
    ...config,
  } as UseContractReadConfig<typeof swapsRepoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link swapsRepoABI}__ and `functionName` set to `"codifyHead"`.
 */
export function useSwapsRepoCodifyHead<
  TSelectData = ReadContractResult<typeof swapsRepoABI, 'codifyHead'>,
>(
  config: Omit<
    UseContractReadConfig<typeof swapsRepoABI, 'codifyHead', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: swapsRepoABI,
    functionName: 'codifyHead',
    ...config,
  } as UseContractReadConfig<typeof swapsRepoABI, 'codifyHead', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link swapsRepoABI}__ and `functionName` set to `"snParser"`.
 */
export function useSwapsRepoSnParser<
  TSelectData = ReadContractResult<typeof swapsRepoABI, 'snParser'>,
>(
  config: Omit<
    UseContractReadConfig<typeof swapsRepoABI, 'snParser', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: swapsRepoABI,
    functionName: 'snParser',
    ...config,
  } as UseContractReadConfig<typeof swapsRepoABI, 'snParser', TSelectData>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link usersRepoABI}__.
 */
export function useUsersRepo(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: usersRepoABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link usersRepoABI}__.
 */
export function useUsersRepoRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof usersRepoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof usersRepoABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: usersRepoABI,
    ...config,
  } as UseContractReadConfig<typeof usersRepoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link usersRepoABI}__ and `functionName` set to `"rewardParser"`.
 */
export function useUsersRepoRewardParser<
  TSelectData = ReadContractResult<typeof usersRepoABI, 'rewardParser'>,
>(
  config: Omit<
    UseContractReadConfig<typeof usersRepoABI, 'rewardParser', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: usersRepoABI,
    functionName: 'rewardParser',
    ...config,
  } as UseContractReadConfig<typeof usersRepoABI, 'rewardParser', TSelectData>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link antiDilutionABI}__.
 */
export function useAntiDilution(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: antiDilutionABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link antiDilutionABI}__.
 */
export function useAntiDilutionRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof antiDilutionABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof antiDilutionABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: antiDilutionABI,
    ...config,
  } as UseContractReadConfig<
    typeof antiDilutionABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"finalized"`.
 */
export function useAntiDilutionFinalized<
  TSelectData = ReadContractResult<typeof antiDilutionABI, 'finalized'>,
>(
  config: Omit<
    UseContractReadConfig<typeof antiDilutionABI, 'finalized', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: antiDilutionABI,
    functionName: 'finalized',
    ...config,
  } as UseContractReadConfig<typeof antiDilutionABI, 'finalized', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"getBookeeper"`.
 */
export function useAntiDilutionGetBookeeper<
  TSelectData = ReadContractResult<typeof antiDilutionABI, 'getBookeeper'>,
>(
  config: Omit<
    UseContractReadConfig<typeof antiDilutionABI, 'getBookeeper', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: antiDilutionABI,
    functionName: 'getBookeeper',
    ...config,
  } as UseContractReadConfig<
    typeof antiDilutionABI,
    'getBookeeper',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"getClasses"`.
 */
export function useAntiDilutionGetClasses<
  TSelectData = ReadContractResult<typeof antiDilutionABI, 'getClasses'>,
>(
  config: Omit<
    UseContractReadConfig<typeof antiDilutionABI, 'getClasses', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: antiDilutionABI,
    functionName: 'getClasses',
    ...config,
  } as UseContractReadConfig<typeof antiDilutionABI, 'getClasses', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"getFloorPriceOfClass"`.
 */
export function useAntiDilutionGetFloorPriceOfClass<
  TSelectData = ReadContractResult<
    typeof antiDilutionABI,
    'getFloorPriceOfClass'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof antiDilutionABI,
      'getFloorPriceOfClass',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: antiDilutionABI,
    functionName: 'getFloorPriceOfClass',
    ...config,
  } as UseContractReadConfig<
    typeof antiDilutionABI,
    'getFloorPriceOfClass',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"getGeneralCounsel"`.
 */
export function useAntiDilutionGetGeneralCounsel<
  TSelectData = ReadContractResult<typeof antiDilutionABI, 'getGeneralCounsel'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof antiDilutionABI,
      'getGeneralCounsel',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: antiDilutionABI,
    functionName: 'getGeneralCounsel',
    ...config,
  } as UseContractReadConfig<
    typeof antiDilutionABI,
    'getGeneralCounsel',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"getGiftPaid"`.
 */
export function useAntiDilutionGetGiftPaid<
  TSelectData = ReadContractResult<typeof antiDilutionABI, 'getGiftPaid'>,
>(
  config: Omit<
    UseContractReadConfig<typeof antiDilutionABI, 'getGiftPaid', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: antiDilutionABI,
    functionName: 'getGiftPaid',
    ...config,
  } as UseContractReadConfig<
    typeof antiDilutionABI,
    'getGiftPaid',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"getObligorsOfAD"`.
 */
export function useAntiDilutionGetObligorsOfAd<
  TSelectData = ReadContractResult<typeof antiDilutionABI, 'getObligorsOfAD'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof antiDilutionABI,
      'getObligorsOfAD',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: antiDilutionABI,
    functionName: 'getObligorsOfAD',
    ...config,
  } as UseContractReadConfig<
    typeof antiDilutionABI,
    'getObligorsOfAD',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"getOwner"`.
 */
export function useAntiDilutionGetOwner<
  TSelectData = ReadContractResult<typeof antiDilutionABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof antiDilutionABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: antiDilutionABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<typeof antiDilutionABI, 'getOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"hasRole"`.
 */
export function useAntiDilutionHasRole<
  TSelectData = ReadContractResult<typeof antiDilutionABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof antiDilutionABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: antiDilutionABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof antiDilutionABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"isExempted"`.
 */
export function useAntiDilutionIsExempted<
  TSelectData = ReadContractResult<typeof antiDilutionABI, 'isExempted'>,
>(
  config: Omit<
    UseContractReadConfig<typeof antiDilutionABI, 'isExempted', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: antiDilutionABI,
    functionName: 'isExempted',
    ...config,
  } as UseContractReadConfig<typeof antiDilutionABI, 'isExempted', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"isMarked"`.
 */
export function useAntiDilutionIsMarked<
  TSelectData = ReadContractResult<typeof antiDilutionABI, 'isMarked'>,
>(
  config: Omit<
    UseContractReadConfig<typeof antiDilutionABI, 'isMarked', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: antiDilutionABI,
    functionName: 'isMarked',
    ...config,
  } as UseContractReadConfig<typeof antiDilutionABI, 'isMarked', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"isObligor"`.
 */
export function useAntiDilutionIsObligor<
  TSelectData = ReadContractResult<typeof antiDilutionABI, 'isObligor'>,
>(
  config: Omit<
    UseContractReadConfig<typeof antiDilutionABI, 'isObligor', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: antiDilutionABI,
    functionName: 'isObligor',
    ...config,
  } as UseContractReadConfig<typeof antiDilutionABI, 'isObligor', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"isTriggered"`.
 */
export function useAntiDilutionIsTriggered<
  TSelectData = ReadContractResult<typeof antiDilutionABI, 'isTriggered'>,
>(
  config: Omit<
    UseContractReadConfig<typeof antiDilutionABI, 'isTriggered', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: antiDilutionABI,
    functionName: 'isTriggered',
    ...config,
  } as UseContractReadConfig<
    typeof antiDilutionABI,
    'isTriggered',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link antiDilutionABI}__.
 */
export function useAntiDilutionWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof antiDilutionABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof antiDilutionABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof antiDilutionABI, TFunctionName>({
    abi: antiDilutionABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useAntiDilutionAbandonRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof antiDilutionABI,
          'abandonRole'
        >['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<TMode, typeof antiDilutionABI, 'abandonRole'> & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof antiDilutionABI, 'abandonRole'>({
    abi: antiDilutionABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"addBenchmark"`.
 */
export function useAntiDilutionAddBenchmark<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof antiDilutionABI,
          'addBenchmark'
        >['abi'],
        'addBenchmark'
      > & { functionName?: 'addBenchmark' }
    : UseContractWriteConfig<TMode, typeof antiDilutionABI, 'addBenchmark'> & {
        abi?: never
        functionName?: 'addBenchmark'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof antiDilutionABI, 'addBenchmark'>({
    abi: antiDilutionABI,
    functionName: 'addBenchmark',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"addObligor"`.
 */
export function useAntiDilutionAddObligor<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof antiDilutionABI, 'addObligor'>['abi'],
        'addObligor'
      > & { functionName?: 'addObligor' }
    : UseContractWriteConfig<TMode, typeof antiDilutionABI, 'addObligor'> & {
        abi?: never
        functionName?: 'addObligor'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof antiDilutionABI, 'addObligor'>({
    abi: antiDilutionABI,
    functionName: 'addObligor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"grantRole"`.
 */
export function useAntiDilutionGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof antiDilutionABI, 'grantRole'>['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof antiDilutionABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof antiDilutionABI, 'grantRole'>({
    abi: antiDilutionABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"init"`.
 */
export function useAntiDilutionInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof antiDilutionABI, 'init'>['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof antiDilutionABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof antiDilutionABI, 'init'>({
    abi: antiDilutionABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"lockContents"`.
 */
export function useAntiDilutionLockContents<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof antiDilutionABI,
          'lockContents'
        >['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<TMode, typeof antiDilutionABI, 'lockContents'> & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof antiDilutionABI, 'lockContents'>({
    abi: antiDilutionABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"removeBenchmark"`.
 */
export function useAntiDilutionRemoveBenchmark<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof antiDilutionABI,
          'removeBenchmark'
        >['abi'],
        'removeBenchmark'
      > & { functionName?: 'removeBenchmark' }
    : UseContractWriteConfig<
        TMode,
        typeof antiDilutionABI,
        'removeBenchmark'
      > & {
        abi?: never
        functionName?: 'removeBenchmark'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof antiDilutionABI, 'removeBenchmark'>({
    abi: antiDilutionABI,
    functionName: 'removeBenchmark',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function useAntiDilutionRemoveDirectKeeper<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof antiDilutionABI,
          'removeDirectKeeper'
        >['abi'],
        'removeDirectKeeper'
      > & { functionName?: 'removeDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof antiDilutionABI,
        'removeDirectKeeper'
      > & {
        abi?: never
        functionName?: 'removeDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof antiDilutionABI, 'removeDirectKeeper'>({
    abi: antiDilutionABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"removeObligor"`.
 */
export function useAntiDilutionRemoveObligor<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof antiDilutionABI,
          'removeObligor'
        >['abi'],
        'removeObligor'
      > & { functionName?: 'removeObligor' }
    : UseContractWriteConfig<TMode, typeof antiDilutionABI, 'removeObligor'> & {
        abi?: never
        functionName?: 'removeObligor'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof antiDilutionABI, 'removeObligor'>({
    abi: antiDilutionABI,
    functionName: 'removeObligor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useAntiDilutionRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof antiDilutionABI,
          'renounceRole'
        >['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<TMode, typeof antiDilutionABI, 'renounceRole'> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof antiDilutionABI, 'renounceRole'>({
    abi: antiDilutionABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useAntiDilutionRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof antiDilutionABI, 'revokeRole'>['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof antiDilutionABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof antiDilutionABI, 'revokeRole'>({
    abi: antiDilutionABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useAntiDilutionSetDirectKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof antiDilutionABI,
          'setDirectKeeper'
        >['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof antiDilutionABI,
        'setDirectKeeper'
      > & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof antiDilutionABI, 'setDirectKeeper'>({
    abi: antiDilutionABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function useAntiDilutionSetGeneralCounsel<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof antiDilutionABI,
          'setGeneralCounsel'
        >['abi'],
        'setGeneralCounsel'
      > & { functionName?: 'setGeneralCounsel' }
    : UseContractWriteConfig<
        TMode,
        typeof antiDilutionABI,
        'setGeneralCounsel'
      > & {
        abi?: never
        functionName?: 'setGeneralCounsel'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof antiDilutionABI, 'setGeneralCounsel'>({
    abi: antiDilutionABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"setOwner"`.
 */
export function useAntiDilutionSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof antiDilutionABI, 'setOwner'>['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof antiDilutionABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof antiDilutionABI, 'setOwner'>({
    abi: antiDilutionABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useAntiDilutionSetRoleAdmin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof antiDilutionABI,
          'setRoleAdmin'
        >['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<TMode, typeof antiDilutionABI, 'setRoleAdmin'> & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof antiDilutionABI, 'setRoleAdmin'>({
    abi: antiDilutionABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link antiDilutionABI}__.
 */
export function usePrepareAntiDilutionWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof antiDilutionABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: antiDilutionABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof antiDilutionABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareAntiDilutionAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof antiDilutionABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: antiDilutionABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof antiDilutionABI, 'abandonRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"addBenchmark"`.
 */
export function usePrepareAntiDilutionAddBenchmark(
  config: Omit<
    UsePrepareContractWriteConfig<typeof antiDilutionABI, 'addBenchmark'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: antiDilutionABI,
    functionName: 'addBenchmark',
    ...config,
  } as UsePrepareContractWriteConfig<typeof antiDilutionABI, 'addBenchmark'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"addObligor"`.
 */
export function usePrepareAntiDilutionAddObligor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof antiDilutionABI, 'addObligor'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: antiDilutionABI,
    functionName: 'addObligor',
    ...config,
  } as UsePrepareContractWriteConfig<typeof antiDilutionABI, 'addObligor'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareAntiDilutionGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof antiDilutionABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: antiDilutionABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof antiDilutionABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareAntiDilutionInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof antiDilutionABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: antiDilutionABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof antiDilutionABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareAntiDilutionLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<typeof antiDilutionABI, 'lockContents'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: antiDilutionABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<typeof antiDilutionABI, 'lockContents'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"removeBenchmark"`.
 */
export function usePrepareAntiDilutionRemoveBenchmark(
  config: Omit<
    UsePrepareContractWriteConfig<typeof antiDilutionABI, 'removeBenchmark'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: antiDilutionABI,
    functionName: 'removeBenchmark',
    ...config,
  } as UsePrepareContractWriteConfig<typeof antiDilutionABI, 'removeBenchmark'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function usePrepareAntiDilutionRemoveDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof antiDilutionABI, 'removeDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: antiDilutionABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof antiDilutionABI,
    'removeDirectKeeper'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"removeObligor"`.
 */
export function usePrepareAntiDilutionRemoveObligor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof antiDilutionABI, 'removeObligor'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: antiDilutionABI,
    functionName: 'removeObligor',
    ...config,
  } as UsePrepareContractWriteConfig<typeof antiDilutionABI, 'removeObligor'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareAntiDilutionRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof antiDilutionABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: antiDilutionABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof antiDilutionABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareAntiDilutionRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof antiDilutionABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: antiDilutionABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof antiDilutionABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareAntiDilutionSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof antiDilutionABI, 'setDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: antiDilutionABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof antiDilutionABI, 'setDirectKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function usePrepareAntiDilutionSetGeneralCounsel(
  config: Omit<
    UsePrepareContractWriteConfig<typeof antiDilutionABI, 'setGeneralCounsel'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: antiDilutionABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof antiDilutionABI,
    'setGeneralCounsel'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareAntiDilutionSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof antiDilutionABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: antiDilutionABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof antiDilutionABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link antiDilutionABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareAntiDilutionSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof antiDilutionABI, 'setRoleAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: antiDilutionABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof antiDilutionABI, 'setRoleAdmin'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link antiDilutionABI}__.
 */
export function useAntiDilutionEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof antiDilutionABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: antiDilutionABI,
    ...config,
  } as UseContractEventConfig<typeof antiDilutionABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link antiDilutionABI}__ and `eventName` set to `"Init"`.
 */
export function useAntiDilutionInitEvent(
  config: Omit<
    UseContractEventConfig<typeof antiDilutionABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: antiDilutionABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof antiDilutionABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link antiDilutionABI}__ and `eventName` set to `"LockContents"`.
 */
export function useAntiDilutionLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof antiDilutionABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: antiDilutionABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof antiDilutionABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link antiDilutionABI}__ and `eventName` set to `"RemoveDirectKeeper"`.
 */
export function useAntiDilutionRemoveDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof antiDilutionABI, 'RemoveDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: antiDilutionABI,
    eventName: 'RemoveDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof antiDilutionABI, 'RemoveDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link antiDilutionABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useAntiDilutionSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof antiDilutionABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: antiDilutionABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof antiDilutionABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link antiDilutionABI}__ and `eventName` set to `"SetGeneralCounsel"`.
 */
export function useAntiDilutionSetGeneralCounselEvent(
  config: Omit<
    UseContractEventConfig<typeof antiDilutionABI, 'SetGeneralCounsel'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: antiDilutionABI,
    eventName: 'SetGeneralCounsel',
    ...config,
  } as UseContractEventConfig<typeof antiDilutionABI, 'SetGeneralCounsel'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link antiDilutionABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useAntiDilutionSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof antiDilutionABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: antiDilutionABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof antiDilutionABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iAlongsABI}__.
 */
export function useIAlongs(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: iAlongsABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAlongsABI}__.
 */
export function useIAlongsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iAlongsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAlongsABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iAlongsABI,
    ...config,
  } as UseContractReadConfig<typeof iAlongsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAlongsABI}__ and `functionName` set to `"dragers"`.
 */
export function useIAlongsDragers<
  TSelectData = ReadContractResult<typeof iAlongsABI, 'dragers'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAlongsABI, 'dragers', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAlongsABI,
    functionName: 'dragers',
    ...config,
  } as UseContractReadConfig<typeof iAlongsABI, 'dragers', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAlongsABI}__ and `functionName` set to `"followers"`.
 */
export function useIAlongsFollowers<
  TSelectData = ReadContractResult<typeof iAlongsABI, 'followers'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAlongsABI, 'followers', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAlongsABI,
    functionName: 'followers',
    ...config,
  } as UseContractReadConfig<typeof iAlongsABI, 'followers', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAlongsABI}__ and `functionName` set to `"isDrager"`.
 */
export function useIAlongsIsDrager<
  TSelectData = ReadContractResult<typeof iAlongsABI, 'isDrager'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAlongsABI, 'isDrager', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAlongsABI,
    functionName: 'isDrager',
    ...config,
  } as UseContractReadConfig<typeof iAlongsABI, 'isDrager', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAlongsABI}__ and `functionName` set to `"isLinked"`.
 */
export function useIAlongsIsLinked<
  TSelectData = ReadContractResult<typeof iAlongsABI, 'isLinked'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAlongsABI, 'isLinked', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAlongsABI,
    functionName: 'isLinked',
    ...config,
  } as UseContractReadConfig<typeof iAlongsABI, 'isLinked', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAlongsABI}__ and `functionName` set to `"isTriggered"`.
 */
export function useIAlongsIsTriggered<
  TSelectData = ReadContractResult<typeof iAlongsABI, 'isTriggered'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAlongsABI, 'isTriggered', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAlongsABI,
    functionName: 'isTriggered',
    ...config,
  } as UseContractReadConfig<typeof iAlongsABI, 'isTriggered', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAlongsABI}__ and `functionName` set to `"linkRule"`.
 */
export function useIAlongsLinkRule<
  TSelectData = ReadContractResult<typeof iAlongsABI, 'linkRule'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAlongsABI, 'linkRule', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAlongsABI,
    functionName: 'linkRule',
    ...config,
  } as UseContractReadConfig<typeof iAlongsABI, 'linkRule', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAlongsABI}__ and `functionName` set to `"priceCheck"`.
 */
export function useIAlongsPriceCheck<
  TSelectData = ReadContractResult<typeof iAlongsABI, 'priceCheck'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAlongsABI, 'priceCheck', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAlongsABI,
    functionName: 'priceCheck',
    ...config,
  } as UseContractReadConfig<typeof iAlongsABI, 'priceCheck', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAlongsABI}__.
 */
export function useIAlongsWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iAlongsABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iAlongsABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAlongsABI, TFunctionName>({
    abi: iAlongsABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAlongsABI}__ and `functionName` set to `"addFollower"`.
 */
export function useIAlongsAddFollower<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iAlongsABI, 'addFollower'>['abi'],
        'addFollower'
      > & { functionName?: 'addFollower' }
    : UseContractWriteConfig<TMode, typeof iAlongsABI, 'addFollower'> & {
        abi?: never
        functionName?: 'addFollower'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAlongsABI, 'addFollower'>({
    abi: iAlongsABI,
    functionName: 'addFollower',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAlongsABI}__ and `functionName` set to `"createLink"`.
 */
export function useIAlongsCreateLink<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iAlongsABI, 'createLink'>['abi'],
        'createLink'
      > & { functionName?: 'createLink' }
    : UseContractWriteConfig<TMode, typeof iAlongsABI, 'createLink'> & {
        abi?: never
        functionName?: 'createLink'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAlongsABI, 'createLink'>({
    abi: iAlongsABI,
    functionName: 'createLink',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAlongsABI}__ and `functionName` set to `"removeDrager"`.
 */
export function useIAlongsRemoveDrager<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iAlongsABI, 'removeDrager'>['abi'],
        'removeDrager'
      > & { functionName?: 'removeDrager' }
    : UseContractWriteConfig<TMode, typeof iAlongsABI, 'removeDrager'> & {
        abi?: never
        functionName?: 'removeDrager'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAlongsABI, 'removeDrager'>({
    abi: iAlongsABI,
    functionName: 'removeDrager',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAlongsABI}__ and `functionName` set to `"removeFollower"`.
 */
export function useIAlongsRemoveFollower<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iAlongsABI, 'removeFollower'>['abi'],
        'removeFollower'
      > & { functionName?: 'removeFollower' }
    : UseContractWriteConfig<TMode, typeof iAlongsABI, 'removeFollower'> & {
        abi?: never
        functionName?: 'removeFollower'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAlongsABI, 'removeFollower'>({
    abi: iAlongsABI,
    functionName: 'removeFollower',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAlongsABI}__.
 */
export function usePrepareIAlongsWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAlongsABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAlongsABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAlongsABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAlongsABI}__ and `functionName` set to `"addFollower"`.
 */
export function usePrepareIAlongsAddFollower(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAlongsABI, 'addFollower'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAlongsABI,
    functionName: 'addFollower',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAlongsABI, 'addFollower'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAlongsABI}__ and `functionName` set to `"createLink"`.
 */
export function usePrepareIAlongsCreateLink(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAlongsABI, 'createLink'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAlongsABI,
    functionName: 'createLink',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAlongsABI, 'createLink'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAlongsABI}__ and `functionName` set to `"removeDrager"`.
 */
export function usePrepareIAlongsRemoveDrager(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAlongsABI, 'removeDrager'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAlongsABI,
    functionName: 'removeDrager',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAlongsABI, 'removeDrager'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAlongsABI}__ and `functionName` set to `"removeFollower"`.
 */
export function usePrepareIAlongsRemoveFollower(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAlongsABI, 'removeFollower'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAlongsABI,
    functionName: 'removeFollower',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAlongsABI, 'removeFollower'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link dragAlongABI}__.
 */
export function useDragAlong(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: dragAlongABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dragAlongABI}__.
 */
export function useDragAlongRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof dragAlongABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof dragAlongABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: dragAlongABI,
    ...config,
  } as UseContractReadConfig<typeof dragAlongABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dragAlongABI}__ and `functionName` set to `"dragers"`.
 */
export function useDragAlongDragers<
  TSelectData = ReadContractResult<typeof dragAlongABI, 'dragers'>,
>(
  config: Omit<
    UseContractReadConfig<typeof dragAlongABI, 'dragers', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dragAlongABI,
    functionName: 'dragers',
    ...config,
  } as UseContractReadConfig<typeof dragAlongABI, 'dragers', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dragAlongABI}__ and `functionName` set to `"finalized"`.
 */
export function useDragAlongFinalized<
  TSelectData = ReadContractResult<typeof dragAlongABI, 'finalized'>,
>(
  config: Omit<
    UseContractReadConfig<typeof dragAlongABI, 'finalized', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dragAlongABI,
    functionName: 'finalized',
    ...config,
  } as UseContractReadConfig<typeof dragAlongABI, 'finalized', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dragAlongABI}__ and `functionName` set to `"followers"`.
 */
export function useDragAlongFollowers<
  TSelectData = ReadContractResult<typeof dragAlongABI, 'followers'>,
>(
  config: Omit<
    UseContractReadConfig<typeof dragAlongABI, 'followers', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dragAlongABI,
    functionName: 'followers',
    ...config,
  } as UseContractReadConfig<typeof dragAlongABI, 'followers', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dragAlongABI}__ and `functionName` set to `"getBookeeper"`.
 */
export function useDragAlongGetBookeeper<
  TSelectData = ReadContractResult<typeof dragAlongABI, 'getBookeeper'>,
>(
  config: Omit<
    UseContractReadConfig<typeof dragAlongABI, 'getBookeeper', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dragAlongABI,
    functionName: 'getBookeeper',
    ...config,
  } as UseContractReadConfig<typeof dragAlongABI, 'getBookeeper', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dragAlongABI}__ and `functionName` set to `"getGeneralCounsel"`.
 */
export function useDragAlongGetGeneralCounsel<
  TSelectData = ReadContractResult<typeof dragAlongABI, 'getGeneralCounsel'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dragAlongABI,
      'getGeneralCounsel',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dragAlongABI,
    functionName: 'getGeneralCounsel',
    ...config,
  } as UseContractReadConfig<
    typeof dragAlongABI,
    'getGeneralCounsel',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dragAlongABI}__ and `functionName` set to `"getOwner"`.
 */
export function useDragAlongGetOwner<
  TSelectData = ReadContractResult<typeof dragAlongABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof dragAlongABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dragAlongABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<typeof dragAlongABI, 'getOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dragAlongABI}__ and `functionName` set to `"hasRole"`.
 */
export function useDragAlongHasRole<
  TSelectData = ReadContractResult<typeof dragAlongABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof dragAlongABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dragAlongABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof dragAlongABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dragAlongABI}__ and `functionName` set to `"isDrager"`.
 */
export function useDragAlongIsDrager<
  TSelectData = ReadContractResult<typeof dragAlongABI, 'isDrager'>,
>(
  config: Omit<
    UseContractReadConfig<typeof dragAlongABI, 'isDrager', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dragAlongABI,
    functionName: 'isDrager',
    ...config,
  } as UseContractReadConfig<typeof dragAlongABI, 'isDrager', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dragAlongABI}__ and `functionName` set to `"isLinked"`.
 */
export function useDragAlongIsLinked<
  TSelectData = ReadContractResult<typeof dragAlongABI, 'isLinked'>,
>(
  config: Omit<
    UseContractReadConfig<typeof dragAlongABI, 'isLinked', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dragAlongABI,
    functionName: 'isLinked',
    ...config,
  } as UseContractReadConfig<typeof dragAlongABI, 'isLinked', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dragAlongABI}__ and `functionName` set to `"isTriggered"`.
 */
export function useDragAlongIsTriggered<
  TSelectData = ReadContractResult<typeof dragAlongABI, 'isTriggered'>,
>(
  config: Omit<
    UseContractReadConfig<typeof dragAlongABI, 'isTriggered', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dragAlongABI,
    functionName: 'isTriggered',
    ...config,
  } as UseContractReadConfig<typeof dragAlongABI, 'isTriggered', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dragAlongABI}__ and `functionName` set to `"linkRule"`.
 */
export function useDragAlongLinkRule<
  TSelectData = ReadContractResult<typeof dragAlongABI, 'linkRule'>,
>(
  config: Omit<
    UseContractReadConfig<typeof dragAlongABI, 'linkRule', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dragAlongABI,
    functionName: 'linkRule',
    ...config,
  } as UseContractReadConfig<typeof dragAlongABI, 'linkRule', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dragAlongABI}__ and `functionName` set to `"priceCheck"`.
 */
export function useDragAlongPriceCheck<
  TSelectData = ReadContractResult<typeof dragAlongABI, 'priceCheck'>,
>(
  config: Omit<
    UseContractReadConfig<typeof dragAlongABI, 'priceCheck', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dragAlongABI,
    functionName: 'priceCheck',
    ...config,
  } as UseContractReadConfig<typeof dragAlongABI, 'priceCheck', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dragAlongABI}__.
 */
export function useDragAlongWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof dragAlongABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof dragAlongABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof dragAlongABI, TFunctionName>({
    abi: dragAlongABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dragAlongABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useDragAlongAbandonRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof dragAlongABI, 'abandonRole'>['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<TMode, typeof dragAlongABI, 'abandonRole'> & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof dragAlongABI, 'abandonRole'>({
    abi: dragAlongABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dragAlongABI}__ and `functionName` set to `"addFollower"`.
 */
export function useDragAlongAddFollower<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof dragAlongABI, 'addFollower'>['abi'],
        'addFollower'
      > & { functionName?: 'addFollower' }
    : UseContractWriteConfig<TMode, typeof dragAlongABI, 'addFollower'> & {
        abi?: never
        functionName?: 'addFollower'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof dragAlongABI, 'addFollower'>({
    abi: dragAlongABI,
    functionName: 'addFollower',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dragAlongABI}__ and `functionName` set to `"createLink"`.
 */
export function useDragAlongCreateLink<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof dragAlongABI, 'createLink'>['abi'],
        'createLink'
      > & { functionName?: 'createLink' }
    : UseContractWriteConfig<TMode, typeof dragAlongABI, 'createLink'> & {
        abi?: never
        functionName?: 'createLink'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof dragAlongABI, 'createLink'>({
    abi: dragAlongABI,
    functionName: 'createLink',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dragAlongABI}__ and `functionName` set to `"grantRole"`.
 */
export function useDragAlongGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof dragAlongABI, 'grantRole'>['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof dragAlongABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof dragAlongABI, 'grantRole'>({
    abi: dragAlongABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dragAlongABI}__ and `functionName` set to `"init"`.
 */
export function useDragAlongInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof dragAlongABI, 'init'>['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof dragAlongABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof dragAlongABI, 'init'>({
    abi: dragAlongABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dragAlongABI}__ and `functionName` set to `"lockContents"`.
 */
export function useDragAlongLockContents<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof dragAlongABI, 'lockContents'>['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<TMode, typeof dragAlongABI, 'lockContents'> & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof dragAlongABI, 'lockContents'>({
    abi: dragAlongABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dragAlongABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function useDragAlongRemoveDirectKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof dragAlongABI,
          'removeDirectKeeper'
        >['abi'],
        'removeDirectKeeper'
      > & { functionName?: 'removeDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof dragAlongABI,
        'removeDirectKeeper'
      > & {
        abi?: never
        functionName?: 'removeDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof dragAlongABI, 'removeDirectKeeper'>({
    abi: dragAlongABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dragAlongABI}__ and `functionName` set to `"removeDrager"`.
 */
export function useDragAlongRemoveDrager<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof dragAlongABI, 'removeDrager'>['abi'],
        'removeDrager'
      > & { functionName?: 'removeDrager' }
    : UseContractWriteConfig<TMode, typeof dragAlongABI, 'removeDrager'> & {
        abi?: never
        functionName?: 'removeDrager'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof dragAlongABI, 'removeDrager'>({
    abi: dragAlongABI,
    functionName: 'removeDrager',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dragAlongABI}__ and `functionName` set to `"removeFollower"`.
 */
export function useDragAlongRemoveFollower<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof dragAlongABI,
          'removeFollower'
        >['abi'],
        'removeFollower'
      > & { functionName?: 'removeFollower' }
    : UseContractWriteConfig<TMode, typeof dragAlongABI, 'removeFollower'> & {
        abi?: never
        functionName?: 'removeFollower'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof dragAlongABI, 'removeFollower'>({
    abi: dragAlongABI,
    functionName: 'removeFollower',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dragAlongABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useDragAlongRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof dragAlongABI, 'renounceRole'>['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<TMode, typeof dragAlongABI, 'renounceRole'> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof dragAlongABI, 'renounceRole'>({
    abi: dragAlongABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dragAlongABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useDragAlongRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof dragAlongABI, 'revokeRole'>['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof dragAlongABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof dragAlongABI, 'revokeRole'>({
    abi: dragAlongABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dragAlongABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useDragAlongSetDirectKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof dragAlongABI,
          'setDirectKeeper'
        >['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<TMode, typeof dragAlongABI, 'setDirectKeeper'> & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof dragAlongABI, 'setDirectKeeper'>({
    abi: dragAlongABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dragAlongABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function useDragAlongSetGeneralCounsel<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof dragAlongABI,
          'setGeneralCounsel'
        >['abi'],
        'setGeneralCounsel'
      > & { functionName?: 'setGeneralCounsel' }
    : UseContractWriteConfig<
        TMode,
        typeof dragAlongABI,
        'setGeneralCounsel'
      > & {
        abi?: never
        functionName?: 'setGeneralCounsel'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof dragAlongABI, 'setGeneralCounsel'>({
    abi: dragAlongABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dragAlongABI}__ and `functionName` set to `"setOwner"`.
 */
export function useDragAlongSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof dragAlongABI, 'setOwner'>['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof dragAlongABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof dragAlongABI, 'setOwner'>({
    abi: dragAlongABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dragAlongABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useDragAlongSetRoleAdmin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof dragAlongABI, 'setRoleAdmin'>['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<TMode, typeof dragAlongABI, 'setRoleAdmin'> & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof dragAlongABI, 'setRoleAdmin'>({
    abi: dragAlongABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dragAlongABI}__.
 */
export function usePrepareDragAlongWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dragAlongABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dragAlongABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof dragAlongABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dragAlongABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareDragAlongAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dragAlongABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dragAlongABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof dragAlongABI, 'abandonRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dragAlongABI}__ and `functionName` set to `"addFollower"`.
 */
export function usePrepareDragAlongAddFollower(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dragAlongABI, 'addFollower'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dragAlongABI,
    functionName: 'addFollower',
    ...config,
  } as UsePrepareContractWriteConfig<typeof dragAlongABI, 'addFollower'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dragAlongABI}__ and `functionName` set to `"createLink"`.
 */
export function usePrepareDragAlongCreateLink(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dragAlongABI, 'createLink'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dragAlongABI,
    functionName: 'createLink',
    ...config,
  } as UsePrepareContractWriteConfig<typeof dragAlongABI, 'createLink'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dragAlongABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareDragAlongGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dragAlongABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dragAlongABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof dragAlongABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dragAlongABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareDragAlongInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dragAlongABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dragAlongABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof dragAlongABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dragAlongABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareDragAlongLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dragAlongABI, 'lockContents'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dragAlongABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<typeof dragAlongABI, 'lockContents'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dragAlongABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function usePrepareDragAlongRemoveDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dragAlongABI, 'removeDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dragAlongABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof dragAlongABI, 'removeDirectKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dragAlongABI}__ and `functionName` set to `"removeDrager"`.
 */
export function usePrepareDragAlongRemoveDrager(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dragAlongABI, 'removeDrager'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dragAlongABI,
    functionName: 'removeDrager',
    ...config,
  } as UsePrepareContractWriteConfig<typeof dragAlongABI, 'removeDrager'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dragAlongABI}__ and `functionName` set to `"removeFollower"`.
 */
export function usePrepareDragAlongRemoveFollower(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dragAlongABI, 'removeFollower'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dragAlongABI,
    functionName: 'removeFollower',
    ...config,
  } as UsePrepareContractWriteConfig<typeof dragAlongABI, 'removeFollower'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dragAlongABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareDragAlongRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dragAlongABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dragAlongABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof dragAlongABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dragAlongABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareDragAlongRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dragAlongABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dragAlongABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof dragAlongABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dragAlongABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareDragAlongSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dragAlongABI, 'setDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dragAlongABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof dragAlongABI, 'setDirectKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dragAlongABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function usePrepareDragAlongSetGeneralCounsel(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dragAlongABI, 'setGeneralCounsel'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dragAlongABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as UsePrepareContractWriteConfig<typeof dragAlongABI, 'setGeneralCounsel'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dragAlongABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareDragAlongSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dragAlongABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dragAlongABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof dragAlongABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dragAlongABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareDragAlongSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dragAlongABI, 'setRoleAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dragAlongABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof dragAlongABI, 'setRoleAdmin'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dragAlongABI}__.
 */
export function useDragAlongEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof dragAlongABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: dragAlongABI,
    ...config,
  } as UseContractEventConfig<typeof dragAlongABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dragAlongABI}__ and `eventName` set to `"Init"`.
 */
export function useDragAlongInitEvent(
  config: Omit<
    UseContractEventConfig<typeof dragAlongABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dragAlongABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof dragAlongABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dragAlongABI}__ and `eventName` set to `"LockContents"`.
 */
export function useDragAlongLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof dragAlongABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dragAlongABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof dragAlongABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dragAlongABI}__ and `eventName` set to `"RemoveDirectKeeper"`.
 */
export function useDragAlongRemoveDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof dragAlongABI, 'RemoveDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dragAlongABI,
    eventName: 'RemoveDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof dragAlongABI, 'RemoveDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dragAlongABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useDragAlongSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof dragAlongABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dragAlongABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof dragAlongABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dragAlongABI}__ and `eventName` set to `"SetGeneralCounsel"`.
 */
export function useDragAlongSetGeneralCounselEvent(
  config: Omit<
    UseContractEventConfig<typeof dragAlongABI, 'SetGeneralCounsel'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dragAlongABI,
    eventName: 'SetGeneralCounsel',
    ...config,
  } as UseContractEventConfig<typeof dragAlongABI, 'SetGeneralCounsel'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dragAlongABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useDragAlongSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof dragAlongABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dragAlongABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof dragAlongABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iAntiDilutionABI}__.
 */
export function useIAntiDilution(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iAntiDilutionABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAntiDilutionABI}__.
 */
export function useIAntiDilutionRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iAntiDilutionABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAntiDilutionABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iAntiDilutionABI,
    ...config,
  } as UseContractReadConfig<
    typeof iAntiDilutionABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAntiDilutionABI}__ and `functionName` set to `"getClasses"`.
 */
export function useIAntiDilutionGetClasses<
  TSelectData = ReadContractResult<typeof iAntiDilutionABI, 'getClasses'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAntiDilutionABI, 'getClasses', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAntiDilutionABI,
    functionName: 'getClasses',
    ...config,
  } as UseContractReadConfig<
    typeof iAntiDilutionABI,
    'getClasses',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAntiDilutionABI}__ and `functionName` set to `"getFloorPriceOfClass"`.
 */
export function useIAntiDilutionGetFloorPriceOfClass<
  TSelectData = ReadContractResult<
    typeof iAntiDilutionABI,
    'getFloorPriceOfClass'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iAntiDilutionABI,
      'getFloorPriceOfClass',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAntiDilutionABI,
    functionName: 'getFloorPriceOfClass',
    ...config,
  } as UseContractReadConfig<
    typeof iAntiDilutionABI,
    'getFloorPriceOfClass',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAntiDilutionABI}__ and `functionName` set to `"getGiftPaid"`.
 */
export function useIAntiDilutionGetGiftPaid<
  TSelectData = ReadContractResult<typeof iAntiDilutionABI, 'getGiftPaid'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAntiDilutionABI, 'getGiftPaid', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAntiDilutionABI,
    functionName: 'getGiftPaid',
    ...config,
  } as UseContractReadConfig<
    typeof iAntiDilutionABI,
    'getGiftPaid',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAntiDilutionABI}__ and `functionName` set to `"getObligorsOfAD"`.
 */
export function useIAntiDilutionGetObligorsOfAd<
  TSelectData = ReadContractResult<typeof iAntiDilutionABI, 'getObligorsOfAD'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iAntiDilutionABI,
      'getObligorsOfAD',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAntiDilutionABI,
    functionName: 'getObligorsOfAD',
    ...config,
  } as UseContractReadConfig<
    typeof iAntiDilutionABI,
    'getObligorsOfAD',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAntiDilutionABI}__ and `functionName` set to `"isExempted"`.
 */
export function useIAntiDilutionIsExempted<
  TSelectData = ReadContractResult<typeof iAntiDilutionABI, 'isExempted'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAntiDilutionABI, 'isExempted', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAntiDilutionABI,
    functionName: 'isExempted',
    ...config,
  } as UseContractReadConfig<
    typeof iAntiDilutionABI,
    'isExempted',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAntiDilutionABI}__ and `functionName` set to `"isMarked"`.
 */
export function useIAntiDilutionIsMarked<
  TSelectData = ReadContractResult<typeof iAntiDilutionABI, 'isMarked'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAntiDilutionABI, 'isMarked', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAntiDilutionABI,
    functionName: 'isMarked',
    ...config,
  } as UseContractReadConfig<typeof iAntiDilutionABI, 'isMarked', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAntiDilutionABI}__ and `functionName` set to `"isObligor"`.
 */
export function useIAntiDilutionIsObligor<
  TSelectData = ReadContractResult<typeof iAntiDilutionABI, 'isObligor'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAntiDilutionABI, 'isObligor', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAntiDilutionABI,
    functionName: 'isObligor',
    ...config,
  } as UseContractReadConfig<typeof iAntiDilutionABI, 'isObligor', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAntiDilutionABI}__ and `functionName` set to `"isTriggered"`.
 */
export function useIAntiDilutionIsTriggered<
  TSelectData = ReadContractResult<typeof iAntiDilutionABI, 'isTriggered'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAntiDilutionABI, 'isTriggered', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAntiDilutionABI,
    functionName: 'isTriggered',
    ...config,
  } as UseContractReadConfig<
    typeof iAntiDilutionABI,
    'isTriggered',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAntiDilutionABI}__.
 */
export function useIAntiDilutionWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iAntiDilutionABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iAntiDilutionABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAntiDilutionABI, TFunctionName>({
    abi: iAntiDilutionABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAntiDilutionABI}__ and `functionName` set to `"addBenchmark"`.
 */
export function useIAntiDilutionAddBenchmark<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iAntiDilutionABI,
          'addBenchmark'
        >['abi'],
        'addBenchmark'
      > & { functionName?: 'addBenchmark' }
    : UseContractWriteConfig<TMode, typeof iAntiDilutionABI, 'addBenchmark'> & {
        abi?: never
        functionName?: 'addBenchmark'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAntiDilutionABI, 'addBenchmark'>({
    abi: iAntiDilutionABI,
    functionName: 'addBenchmark',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAntiDilutionABI}__ and `functionName` set to `"addObligor"`.
 */
export function useIAntiDilutionAddObligor<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iAntiDilutionABI,
          'addObligor'
        >['abi'],
        'addObligor'
      > & { functionName?: 'addObligor' }
    : UseContractWriteConfig<TMode, typeof iAntiDilutionABI, 'addObligor'> & {
        abi?: never
        functionName?: 'addObligor'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAntiDilutionABI, 'addObligor'>({
    abi: iAntiDilutionABI,
    functionName: 'addObligor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAntiDilutionABI}__ and `functionName` set to `"removeBenchmark"`.
 */
export function useIAntiDilutionRemoveBenchmark<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iAntiDilutionABI,
          'removeBenchmark'
        >['abi'],
        'removeBenchmark'
      > & { functionName?: 'removeBenchmark' }
    : UseContractWriteConfig<
        TMode,
        typeof iAntiDilutionABI,
        'removeBenchmark'
      > & {
        abi?: never
        functionName?: 'removeBenchmark'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAntiDilutionABI, 'removeBenchmark'>({
    abi: iAntiDilutionABI,
    functionName: 'removeBenchmark',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAntiDilutionABI}__ and `functionName` set to `"removeObligor"`.
 */
export function useIAntiDilutionRemoveObligor<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iAntiDilutionABI,
          'removeObligor'
        >['abi'],
        'removeObligor'
      > & { functionName?: 'removeObligor' }
    : UseContractWriteConfig<
        TMode,
        typeof iAntiDilutionABI,
        'removeObligor'
      > & {
        abi?: never
        functionName?: 'removeObligor'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAntiDilutionABI, 'removeObligor'>({
    abi: iAntiDilutionABI,
    functionName: 'removeObligor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAntiDilutionABI}__.
 */
export function usePrepareIAntiDilutionWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAntiDilutionABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAntiDilutionABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAntiDilutionABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAntiDilutionABI}__ and `functionName` set to `"addBenchmark"`.
 */
export function usePrepareIAntiDilutionAddBenchmark(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAntiDilutionABI, 'addBenchmark'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAntiDilutionABI,
    functionName: 'addBenchmark',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAntiDilutionABI, 'addBenchmark'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAntiDilutionABI}__ and `functionName` set to `"addObligor"`.
 */
export function usePrepareIAntiDilutionAddObligor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAntiDilutionABI, 'addObligor'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAntiDilutionABI,
    functionName: 'addObligor',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAntiDilutionABI, 'addObligor'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAntiDilutionABI}__ and `functionName` set to `"removeBenchmark"`.
 */
export function usePrepareIAntiDilutionRemoveBenchmark(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAntiDilutionABI, 'removeBenchmark'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAntiDilutionABI,
    functionName: 'removeBenchmark',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iAntiDilutionABI,
    'removeBenchmark'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAntiDilutionABI}__ and `functionName` set to `"removeObligor"`.
 */
export function usePrepareIAntiDilutionRemoveObligor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAntiDilutionABI, 'removeObligor'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAntiDilutionABI,
    functionName: 'removeObligor',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAntiDilutionABI, 'removeObligor'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iLockUpABI}__.
 */
export function useILockUp(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: iLockUpABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLockUpABI}__.
 */
export function useILockUpRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iLockUpABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iLockUpABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iLockUpABI,
    ...config,
  } as UseContractReadConfig<typeof iLockUpABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLockUpABI}__ and `functionName` set to `"getLocker"`.
 */
export function useILockUpGetLocker<
  TSelectData = ReadContractResult<typeof iLockUpABI, 'getLocker'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iLockUpABI, 'getLocker', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLockUpABI,
    functionName: 'getLocker',
    ...config,
  } as UseContractReadConfig<typeof iLockUpABI, 'getLocker', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLockUpABI}__ and `functionName` set to `"isExempted"`.
 */
export function useILockUpIsExempted<
  TSelectData = ReadContractResult<typeof iLockUpABI, 'isExempted'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iLockUpABI, 'isExempted', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLockUpABI,
    functionName: 'isExempted',
    ...config,
  } as UseContractReadConfig<typeof iLockUpABI, 'isExempted', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLockUpABI}__ and `functionName` set to `"isLocked"`.
 */
export function useILockUpIsLocked<
  TSelectData = ReadContractResult<typeof iLockUpABI, 'isLocked'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iLockUpABI, 'isLocked', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLockUpABI,
    functionName: 'isLocked',
    ...config,
  } as UseContractReadConfig<typeof iLockUpABI, 'isLocked', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLockUpABI}__ and `functionName` set to `"isTriggered"`.
 */
export function useILockUpIsTriggered<
  TSelectData = ReadContractResult<typeof iLockUpABI, 'isTriggered'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iLockUpABI, 'isTriggered', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLockUpABI,
    functionName: 'isTriggered',
    ...config,
  } as UseContractReadConfig<typeof iLockUpABI, 'isTriggered', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLockUpABI}__ and `functionName` set to `"lockedShares"`.
 */
export function useILockUpLockedShares<
  TSelectData = ReadContractResult<typeof iLockUpABI, 'lockedShares'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iLockUpABI, 'lockedShares', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLockUpABI,
    functionName: 'lockedShares',
    ...config,
  } as UseContractReadConfig<typeof iLockUpABI, 'lockedShares', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLockUpABI}__.
 */
export function useILockUpWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iLockUpABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iLockUpABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iLockUpABI, TFunctionName>({
    abi: iLockUpABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLockUpABI}__ and `functionName` set to `"addKeyholder"`.
 */
export function useILockUpAddKeyholder<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iLockUpABI, 'addKeyholder'>['abi'],
        'addKeyholder'
      > & { functionName?: 'addKeyholder' }
    : UseContractWriteConfig<TMode, typeof iLockUpABI, 'addKeyholder'> & {
        abi?: never
        functionName?: 'addKeyholder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iLockUpABI, 'addKeyholder'>({
    abi: iLockUpABI,
    functionName: 'addKeyholder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLockUpABI}__ and `functionName` set to `"delLocker"`.
 */
export function useILockUpDelLocker<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iLockUpABI, 'delLocker'>['abi'],
        'delLocker'
      > & { functionName?: 'delLocker' }
    : UseContractWriteConfig<TMode, typeof iLockUpABI, 'delLocker'> & {
        abi?: never
        functionName?: 'delLocker'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iLockUpABI, 'delLocker'>({
    abi: iLockUpABI,
    functionName: 'delLocker',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLockUpABI}__ and `functionName` set to `"removeKeyholder"`.
 */
export function useILockUpRemoveKeyholder<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iLockUpABI, 'removeKeyholder'>['abi'],
        'removeKeyholder'
      > & { functionName?: 'removeKeyholder' }
    : UseContractWriteConfig<TMode, typeof iLockUpABI, 'removeKeyholder'> & {
        abi?: never
        functionName?: 'removeKeyholder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iLockUpABI, 'removeKeyholder'>({
    abi: iLockUpABI,
    functionName: 'removeKeyholder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLockUpABI}__ and `functionName` set to `"setLocker"`.
 */
export function useILockUpSetLocker<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iLockUpABI, 'setLocker'>['abi'],
        'setLocker'
      > & { functionName?: 'setLocker' }
    : UseContractWriteConfig<TMode, typeof iLockUpABI, 'setLocker'> & {
        abi?: never
        functionName?: 'setLocker'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iLockUpABI, 'setLocker'>({
    abi: iLockUpABI,
    functionName: 'setLocker',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLockUpABI}__.
 */
export function usePrepareILockUpWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iLockUpABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLockUpABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iLockUpABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLockUpABI}__ and `functionName` set to `"addKeyholder"`.
 */
export function usePrepareILockUpAddKeyholder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iLockUpABI, 'addKeyholder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLockUpABI,
    functionName: 'addKeyholder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iLockUpABI, 'addKeyholder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLockUpABI}__ and `functionName` set to `"delLocker"`.
 */
export function usePrepareILockUpDelLocker(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iLockUpABI, 'delLocker'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLockUpABI,
    functionName: 'delLocker',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iLockUpABI, 'delLocker'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLockUpABI}__ and `functionName` set to `"removeKeyholder"`.
 */
export function usePrepareILockUpRemoveKeyholder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iLockUpABI, 'removeKeyholder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLockUpABI,
    functionName: 'removeKeyholder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iLockUpABI, 'removeKeyholder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLockUpABI}__ and `functionName` set to `"setLocker"`.
 */
export function usePrepareILockUpSetLocker(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iLockUpABI, 'setLocker'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLockUpABI,
    functionName: 'setLocker',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iLockUpABI, 'setLocker'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iOptionsABI}__.
 */
export function useIOptions(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iOptionsABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iOptionsABI}__.
 */
export function useIOptionsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iOptionsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iOptionsABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iOptionsABI,
    ...config,
  } as UseContractReadConfig<typeof iOptionsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iOptionsABI}__ and `functionName` set to `"counterOfOptions"`.
 */
export function useIOptionsCounterOfOptions<
  TSelectData = ReadContractResult<typeof iOptionsABI, 'counterOfOptions'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iOptionsABI, 'counterOfOptions', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iOptionsABI,
    functionName: 'counterOfOptions',
    ...config,
  } as UseContractReadConfig<
    typeof iOptionsABI,
    'counterOfOptions',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iOptionsABI}__ and `functionName` set to `"getAllOptions"`.
 */
export function useIOptionsGetAllOptions<
  TSelectData = ReadContractResult<typeof iOptionsABI, 'getAllOptions'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iOptionsABI, 'getAllOptions', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iOptionsABI,
    functionName: 'getAllOptions',
    ...config,
  } as UseContractReadConfig<typeof iOptionsABI, 'getAllOptions', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iOptionsABI}__ and `functionName` set to `"getObligorsOfOption"`.
 */
export function useIOptionsGetObligorsOfOption<
  TSelectData = ReadContractResult<typeof iOptionsABI, 'getObligorsOfOption'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iOptionsABI,
      'getObligorsOfOption',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iOptionsABI,
    functionName: 'getObligorsOfOption',
    ...config,
  } as UseContractReadConfig<
    typeof iOptionsABI,
    'getObligorsOfOption',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iOptionsABI}__ and `functionName` set to `"getOption"`.
 */
export function useIOptionsGetOption<
  TSelectData = ReadContractResult<typeof iOptionsABI, 'getOption'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iOptionsABI, 'getOption', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iOptionsABI,
    functionName: 'getOption',
    ...config,
  } as UseContractReadConfig<typeof iOptionsABI, 'getOption', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iOptionsABI}__ and `functionName` set to `"getSNList"`.
 */
export function useIOptionsGetSnList<
  TSelectData = ReadContractResult<typeof iOptionsABI, 'getSNList'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iOptionsABI, 'getSNList', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iOptionsABI,
    functionName: 'getSNList',
    ...config,
  } as UseContractReadConfig<typeof iOptionsABI, 'getSNList', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iOptionsABI}__ and `functionName` set to `"isObligor"`.
 */
export function useIOptionsIsObligor<
  TSelectData = ReadContractResult<typeof iOptionsABI, 'isObligor'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iOptionsABI, 'isObligor', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iOptionsABI,
    functionName: 'isObligor',
    ...config,
  } as UseContractReadConfig<typeof iOptionsABI, 'isObligor', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iOptionsABI}__ and `functionName` set to `"isOption"`.
 */
export function useIOptionsIsOption<
  TSelectData = ReadContractResult<typeof iOptionsABI, 'isOption'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iOptionsABI, 'isOption', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iOptionsABI,
    functionName: 'isOption',
    ...config,
  } as UseContractReadConfig<typeof iOptionsABI, 'isOption', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iOptionsABI}__.
 */
export function useIOptionsWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iOptionsABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iOptionsABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iOptionsABI, TFunctionName>({
    abi: iOptionsABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iOptionsABI}__ and `functionName` set to `"addObligorIntoOpt"`.
 */
export function useIOptionsAddObligorIntoOpt<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iOptionsABI,
          'addObligorIntoOpt'
        >['abi'],
        'addObligorIntoOpt'
      > & { functionName?: 'addObligorIntoOpt' }
    : UseContractWriteConfig<TMode, typeof iOptionsABI, 'addObligorIntoOpt'> & {
        abi?: never
        functionName?: 'addObligorIntoOpt'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iOptionsABI, 'addObligorIntoOpt'>({
    abi: iOptionsABI,
    functionName: 'addObligorIntoOpt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iOptionsABI}__ and `functionName` set to `"createOption"`.
 */
export function useIOptionsCreateOption<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iOptionsABI, 'createOption'>['abi'],
        'createOption'
      > & { functionName?: 'createOption' }
    : UseContractWriteConfig<TMode, typeof iOptionsABI, 'createOption'> & {
        abi?: never
        functionName?: 'createOption'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iOptionsABI, 'createOption'>({
    abi: iOptionsABI,
    functionName: 'createOption',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iOptionsABI}__ and `functionName` set to `"delOption"`.
 */
export function useIOptionsDelOption<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iOptionsABI, 'delOption'>['abi'],
        'delOption'
      > & { functionName?: 'delOption' }
    : UseContractWriteConfig<TMode, typeof iOptionsABI, 'delOption'> & {
        abi?: never
        functionName?: 'delOption'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iOptionsABI, 'delOption'>({
    abi: iOptionsABI,
    functionName: 'delOption',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iOptionsABI}__ and `functionName` set to `"removeObligorFromOpt"`.
 */
export function useIOptionsRemoveObligorFromOpt<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iOptionsABI,
          'removeObligorFromOpt'
        >['abi'],
        'removeObligorFromOpt'
      > & { functionName?: 'removeObligorFromOpt' }
    : UseContractWriteConfig<
        TMode,
        typeof iOptionsABI,
        'removeObligorFromOpt'
      > & {
        abi?: never
        functionName?: 'removeObligorFromOpt'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iOptionsABI, 'removeObligorFromOpt'>({
    abi: iOptionsABI,
    functionName: 'removeObligorFromOpt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iOptionsABI}__.
 */
export function usePrepareIOptionsWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iOptionsABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iOptionsABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iOptionsABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iOptionsABI}__ and `functionName` set to `"addObligorIntoOpt"`.
 */
export function usePrepareIOptionsAddObligorIntoOpt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iOptionsABI, 'addObligorIntoOpt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iOptionsABI,
    functionName: 'addObligorIntoOpt',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iOptionsABI, 'addObligorIntoOpt'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iOptionsABI}__ and `functionName` set to `"createOption"`.
 */
export function usePrepareIOptionsCreateOption(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iOptionsABI, 'createOption'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iOptionsABI,
    functionName: 'createOption',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iOptionsABI, 'createOption'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iOptionsABI}__ and `functionName` set to `"delOption"`.
 */
export function usePrepareIOptionsDelOption(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iOptionsABI, 'delOption'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iOptionsABI,
    functionName: 'delOption',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iOptionsABI, 'delOption'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iOptionsABI}__ and `functionName` set to `"removeObligorFromOpt"`.
 */
export function usePrepareIOptionsRemoveObligorFromOpt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iOptionsABI, 'removeObligorFromOpt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iOptionsABI,
    functionName: 'removeObligorFromOpt',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iOptionsABI,
    'removeObligorFromOpt'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iTermABI}__.
 */
export function useITerm(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: iTermABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iTermABI}__.
 */
export function useITermRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iTermABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iTermABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: iTermABI, ...config } as UseContractReadConfig<
    typeof iTermABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iTermABI}__ and `functionName` set to `"isExempted"`.
 */
export function useITermIsExempted<
  TSelectData = ReadContractResult<typeof iTermABI, 'isExempted'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iTermABI, 'isExempted', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iTermABI,
    functionName: 'isExempted',
    ...config,
  } as UseContractReadConfig<typeof iTermABI, 'isExempted', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iTermABI}__ and `functionName` set to `"isTriggered"`.
 */
export function useITermIsTriggered<
  TSelectData = ReadContractResult<typeof iTermABI, 'isTriggered'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iTermABI, 'isTriggered', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iTermABI,
    functionName: 'isTriggered',
    ...config,
  } as UseContractReadConfig<typeof iTermABI, 'isTriggered', TSelectData>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link lockUpABI}__.
 */
export function useLockUp(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: lockUpABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lockUpABI}__.
 */
export function useLockUpRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof lockUpABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof lockUpABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: lockUpABI, ...config } as UseContractReadConfig<
    typeof lockUpABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"finalized"`.
 */
export function useLockUpFinalized<
  TSelectData = ReadContractResult<typeof lockUpABI, 'finalized'>,
>(
  config: Omit<
    UseContractReadConfig<typeof lockUpABI, 'finalized', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lockUpABI,
    functionName: 'finalized',
    ...config,
  } as UseContractReadConfig<typeof lockUpABI, 'finalized', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"getBookeeper"`.
 */
export function useLockUpGetBookeeper<
  TSelectData = ReadContractResult<typeof lockUpABI, 'getBookeeper'>,
>(
  config: Omit<
    UseContractReadConfig<typeof lockUpABI, 'getBookeeper', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lockUpABI,
    functionName: 'getBookeeper',
    ...config,
  } as UseContractReadConfig<typeof lockUpABI, 'getBookeeper', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"getGeneralCounsel"`.
 */
export function useLockUpGetGeneralCounsel<
  TSelectData = ReadContractResult<typeof lockUpABI, 'getGeneralCounsel'>,
>(
  config: Omit<
    UseContractReadConfig<typeof lockUpABI, 'getGeneralCounsel', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lockUpABI,
    functionName: 'getGeneralCounsel',
    ...config,
  } as UseContractReadConfig<
    typeof lockUpABI,
    'getGeneralCounsel',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"getLocker"`.
 */
export function useLockUpGetLocker<
  TSelectData = ReadContractResult<typeof lockUpABI, 'getLocker'>,
>(
  config: Omit<
    UseContractReadConfig<typeof lockUpABI, 'getLocker', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lockUpABI,
    functionName: 'getLocker',
    ...config,
  } as UseContractReadConfig<typeof lockUpABI, 'getLocker', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"getOwner"`.
 */
export function useLockUpGetOwner<
  TSelectData = ReadContractResult<typeof lockUpABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof lockUpABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lockUpABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<typeof lockUpABI, 'getOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"hasRole"`.
 */
export function useLockUpHasRole<
  TSelectData = ReadContractResult<typeof lockUpABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof lockUpABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lockUpABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof lockUpABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"isExempted"`.
 */
export function useLockUpIsExempted<
  TSelectData = ReadContractResult<typeof lockUpABI, 'isExempted'>,
>(
  config: Omit<
    UseContractReadConfig<typeof lockUpABI, 'isExempted', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lockUpABI,
    functionName: 'isExempted',
    ...config,
  } as UseContractReadConfig<typeof lockUpABI, 'isExempted', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"isLocked"`.
 */
export function useLockUpIsLocked<
  TSelectData = ReadContractResult<typeof lockUpABI, 'isLocked'>,
>(
  config: Omit<
    UseContractReadConfig<typeof lockUpABI, 'isLocked', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lockUpABI,
    functionName: 'isLocked',
    ...config,
  } as UseContractReadConfig<typeof lockUpABI, 'isLocked', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"isTriggered"`.
 */
export function useLockUpIsTriggered<
  TSelectData = ReadContractResult<typeof lockUpABI, 'isTriggered'>,
>(
  config: Omit<
    UseContractReadConfig<typeof lockUpABI, 'isTriggered', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lockUpABI,
    functionName: 'isTriggered',
    ...config,
  } as UseContractReadConfig<typeof lockUpABI, 'isTriggered', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"lockedShares"`.
 */
export function useLockUpLockedShares<
  TSelectData = ReadContractResult<typeof lockUpABI, 'lockedShares'>,
>(
  config: Omit<
    UseContractReadConfig<typeof lockUpABI, 'lockedShares', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lockUpABI,
    functionName: 'lockedShares',
    ...config,
  } as UseContractReadConfig<typeof lockUpABI, 'lockedShares', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lockUpABI}__.
 */
export function useLockUpWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof lockUpABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof lockUpABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lockUpABI, TFunctionName>({
    abi: lockUpABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useLockUpAbandonRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof lockUpABI, 'abandonRole'>['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<TMode, typeof lockUpABI, 'abandonRole'> & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lockUpABI, 'abandonRole'>({
    abi: lockUpABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"addKeyholder"`.
 */
export function useLockUpAddKeyholder<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof lockUpABI, 'addKeyholder'>['abi'],
        'addKeyholder'
      > & { functionName?: 'addKeyholder' }
    : UseContractWriteConfig<TMode, typeof lockUpABI, 'addKeyholder'> & {
        abi?: never
        functionName?: 'addKeyholder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lockUpABI, 'addKeyholder'>({
    abi: lockUpABI,
    functionName: 'addKeyholder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"delLocker"`.
 */
export function useLockUpDelLocker<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof lockUpABI, 'delLocker'>['abi'],
        'delLocker'
      > & { functionName?: 'delLocker' }
    : UseContractWriteConfig<TMode, typeof lockUpABI, 'delLocker'> & {
        abi?: never
        functionName?: 'delLocker'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lockUpABI, 'delLocker'>({
    abi: lockUpABI,
    functionName: 'delLocker',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"grantRole"`.
 */
export function useLockUpGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof lockUpABI, 'grantRole'>['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof lockUpABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lockUpABI, 'grantRole'>({
    abi: lockUpABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"init"`.
 */
export function useLockUpInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof lockUpABI, 'init'>['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof lockUpABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lockUpABI, 'init'>({
    abi: lockUpABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"lockContents"`.
 */
export function useLockUpLockContents<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof lockUpABI, 'lockContents'>['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<TMode, typeof lockUpABI, 'lockContents'> & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lockUpABI, 'lockContents'>({
    abi: lockUpABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function useLockUpRemoveDirectKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof lockUpABI,
          'removeDirectKeeper'
        >['abi'],
        'removeDirectKeeper'
      > & { functionName?: 'removeDirectKeeper' }
    : UseContractWriteConfig<TMode, typeof lockUpABI, 'removeDirectKeeper'> & {
        abi?: never
        functionName?: 'removeDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lockUpABI, 'removeDirectKeeper'>({
    abi: lockUpABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"removeKeyholder"`.
 */
export function useLockUpRemoveKeyholder<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof lockUpABI, 'removeKeyholder'>['abi'],
        'removeKeyholder'
      > & { functionName?: 'removeKeyholder' }
    : UseContractWriteConfig<TMode, typeof lockUpABI, 'removeKeyholder'> & {
        abi?: never
        functionName?: 'removeKeyholder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lockUpABI, 'removeKeyholder'>({
    abi: lockUpABI,
    functionName: 'removeKeyholder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useLockUpRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof lockUpABI, 'renounceRole'>['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<TMode, typeof lockUpABI, 'renounceRole'> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lockUpABI, 'renounceRole'>({
    abi: lockUpABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useLockUpRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof lockUpABI, 'revokeRole'>['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof lockUpABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lockUpABI, 'revokeRole'>({
    abi: lockUpABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useLockUpSetDirectKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof lockUpABI, 'setDirectKeeper'>['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<TMode, typeof lockUpABI, 'setDirectKeeper'> & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lockUpABI, 'setDirectKeeper'>({
    abi: lockUpABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function useLockUpSetGeneralCounsel<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof lockUpABI,
          'setGeneralCounsel'
        >['abi'],
        'setGeneralCounsel'
      > & { functionName?: 'setGeneralCounsel' }
    : UseContractWriteConfig<TMode, typeof lockUpABI, 'setGeneralCounsel'> & {
        abi?: never
        functionName?: 'setGeneralCounsel'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lockUpABI, 'setGeneralCounsel'>({
    abi: lockUpABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"setLocker"`.
 */
export function useLockUpSetLocker<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof lockUpABI, 'setLocker'>['abi'],
        'setLocker'
      > & { functionName?: 'setLocker' }
    : UseContractWriteConfig<TMode, typeof lockUpABI, 'setLocker'> & {
        abi?: never
        functionName?: 'setLocker'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lockUpABI, 'setLocker'>({
    abi: lockUpABI,
    functionName: 'setLocker',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"setOwner"`.
 */
export function useLockUpSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof lockUpABI, 'setOwner'>['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof lockUpABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lockUpABI, 'setOwner'>({
    abi: lockUpABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useLockUpSetRoleAdmin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof lockUpABI, 'setRoleAdmin'>['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<TMode, typeof lockUpABI, 'setRoleAdmin'> & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lockUpABI, 'setRoleAdmin'>({
    abi: lockUpABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lockUpABI}__.
 */
export function usePrepareLockUpWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lockUpABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lockUpABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof lockUpABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareLockUpAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lockUpABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lockUpABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lockUpABI, 'abandonRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"addKeyholder"`.
 */
export function usePrepareLockUpAddKeyholder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lockUpABI, 'addKeyholder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lockUpABI,
    functionName: 'addKeyholder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lockUpABI, 'addKeyholder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"delLocker"`.
 */
export function usePrepareLockUpDelLocker(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lockUpABI, 'delLocker'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lockUpABI,
    functionName: 'delLocker',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lockUpABI, 'delLocker'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareLockUpGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lockUpABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lockUpABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lockUpABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareLockUpInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lockUpABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lockUpABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lockUpABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareLockUpLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lockUpABI, 'lockContents'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lockUpABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lockUpABI, 'lockContents'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function usePrepareLockUpRemoveDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lockUpABI, 'removeDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lockUpABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lockUpABI, 'removeDirectKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"removeKeyholder"`.
 */
export function usePrepareLockUpRemoveKeyholder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lockUpABI, 'removeKeyholder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lockUpABI,
    functionName: 'removeKeyholder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lockUpABI, 'removeKeyholder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareLockUpRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lockUpABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lockUpABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lockUpABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareLockUpRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lockUpABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lockUpABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lockUpABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareLockUpSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lockUpABI, 'setDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lockUpABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lockUpABI, 'setDirectKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function usePrepareLockUpSetGeneralCounsel(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lockUpABI, 'setGeneralCounsel'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lockUpABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lockUpABI, 'setGeneralCounsel'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"setLocker"`.
 */
export function usePrepareLockUpSetLocker(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lockUpABI, 'setLocker'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lockUpABI,
    functionName: 'setLocker',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lockUpABI, 'setLocker'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareLockUpSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lockUpABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lockUpABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lockUpABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lockUpABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareLockUpSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lockUpABI, 'setRoleAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lockUpABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lockUpABI, 'setRoleAdmin'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lockUpABI}__.
 */
export function useLockUpEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof lockUpABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: lockUpABI,
    ...config,
  } as UseContractEventConfig<typeof lockUpABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lockUpABI}__ and `eventName` set to `"Init"`.
 */
export function useLockUpInitEvent(
  config: Omit<
    UseContractEventConfig<typeof lockUpABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: lockUpABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof lockUpABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lockUpABI}__ and `eventName` set to `"LockContents"`.
 */
export function useLockUpLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof lockUpABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: lockUpABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof lockUpABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lockUpABI}__ and `eventName` set to `"RemoveDirectKeeper"`.
 */
export function useLockUpRemoveDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof lockUpABI, 'RemoveDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: lockUpABI,
    eventName: 'RemoveDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof lockUpABI, 'RemoveDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lockUpABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useLockUpSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof lockUpABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: lockUpABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof lockUpABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lockUpABI}__ and `eventName` set to `"SetGeneralCounsel"`.
 */
export function useLockUpSetGeneralCounselEvent(
  config: Omit<
    UseContractEventConfig<typeof lockUpABI, 'SetGeneralCounsel'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: lockUpABI,
    eventName: 'SetGeneralCounsel',
    ...config,
  } as UseContractEventConfig<typeof lockUpABI, 'SetGeneralCounsel'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lockUpABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useLockUpSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof lockUpABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: lockUpABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof lockUpABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link optionsABI}__.
 */
export function useOptions(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: optionsABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link optionsABI}__.
 */
export function useOptionsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof optionsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof optionsABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: optionsABI,
    ...config,
  } as UseContractReadConfig<typeof optionsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"counterOfOptions"`.
 */
export function useOptionsCounterOfOptions<
  TSelectData = ReadContractResult<typeof optionsABI, 'counterOfOptions'>,
>(
  config: Omit<
    UseContractReadConfig<typeof optionsABI, 'counterOfOptions', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: optionsABI,
    functionName: 'counterOfOptions',
    ...config,
  } as UseContractReadConfig<
    typeof optionsABI,
    'counterOfOptions',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"finalized"`.
 */
export function useOptionsFinalized<
  TSelectData = ReadContractResult<typeof optionsABI, 'finalized'>,
>(
  config: Omit<
    UseContractReadConfig<typeof optionsABI, 'finalized', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: optionsABI,
    functionName: 'finalized',
    ...config,
  } as UseContractReadConfig<typeof optionsABI, 'finalized', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"getAllOptions"`.
 */
export function useOptionsGetAllOptions<
  TSelectData = ReadContractResult<typeof optionsABI, 'getAllOptions'>,
>(
  config: Omit<
    UseContractReadConfig<typeof optionsABI, 'getAllOptions', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: optionsABI,
    functionName: 'getAllOptions',
    ...config,
  } as UseContractReadConfig<typeof optionsABI, 'getAllOptions', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"getBookeeper"`.
 */
export function useOptionsGetBookeeper<
  TSelectData = ReadContractResult<typeof optionsABI, 'getBookeeper'>,
>(
  config: Omit<
    UseContractReadConfig<typeof optionsABI, 'getBookeeper', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: optionsABI,
    functionName: 'getBookeeper',
    ...config,
  } as UseContractReadConfig<typeof optionsABI, 'getBookeeper', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"getGeneralCounsel"`.
 */
export function useOptionsGetGeneralCounsel<
  TSelectData = ReadContractResult<typeof optionsABI, 'getGeneralCounsel'>,
>(
  config: Omit<
    UseContractReadConfig<typeof optionsABI, 'getGeneralCounsel', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: optionsABI,
    functionName: 'getGeneralCounsel',
    ...config,
  } as UseContractReadConfig<
    typeof optionsABI,
    'getGeneralCounsel',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"getObligorsOfOption"`.
 */
export function useOptionsGetObligorsOfOption<
  TSelectData = ReadContractResult<typeof optionsABI, 'getObligorsOfOption'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof optionsABI,
      'getObligorsOfOption',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: optionsABI,
    functionName: 'getObligorsOfOption',
    ...config,
  } as UseContractReadConfig<
    typeof optionsABI,
    'getObligorsOfOption',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"getOption"`.
 */
export function useOptionsGetOption<
  TSelectData = ReadContractResult<typeof optionsABI, 'getOption'>,
>(
  config: Omit<
    UseContractReadConfig<typeof optionsABI, 'getOption', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: optionsABI,
    functionName: 'getOption',
    ...config,
  } as UseContractReadConfig<typeof optionsABI, 'getOption', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"getOwner"`.
 */
export function useOptionsGetOwner<
  TSelectData = ReadContractResult<typeof optionsABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof optionsABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: optionsABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<typeof optionsABI, 'getOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"getSNList"`.
 */
export function useOptionsGetSnList<
  TSelectData = ReadContractResult<typeof optionsABI, 'getSNList'>,
>(
  config: Omit<
    UseContractReadConfig<typeof optionsABI, 'getSNList', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: optionsABI,
    functionName: 'getSNList',
    ...config,
  } as UseContractReadConfig<typeof optionsABI, 'getSNList', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"hasRole"`.
 */
export function useOptionsHasRole<
  TSelectData = ReadContractResult<typeof optionsABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof optionsABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: optionsABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof optionsABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"isObligor"`.
 */
export function useOptionsIsObligor<
  TSelectData = ReadContractResult<typeof optionsABI, 'isObligor'>,
>(
  config: Omit<
    UseContractReadConfig<typeof optionsABI, 'isObligor', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: optionsABI,
    functionName: 'isObligor',
    ...config,
  } as UseContractReadConfig<typeof optionsABI, 'isObligor', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"isOption"`.
 */
export function useOptionsIsOption<
  TSelectData = ReadContractResult<typeof optionsABI, 'isOption'>,
>(
  config: Omit<
    UseContractReadConfig<typeof optionsABI, 'isOption', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: optionsABI,
    functionName: 'isOption',
    ...config,
  } as UseContractReadConfig<typeof optionsABI, 'isOption', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link optionsABI}__.
 */
export function useOptionsWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof optionsABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof optionsABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof optionsABI, TFunctionName>({
    abi: optionsABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useOptionsAbandonRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof optionsABI, 'abandonRole'>['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<TMode, typeof optionsABI, 'abandonRole'> & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof optionsABI, 'abandonRole'>({
    abi: optionsABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"addObligorIntoOpt"`.
 */
export function useOptionsAddObligorIntoOpt<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof optionsABI,
          'addObligorIntoOpt'
        >['abi'],
        'addObligorIntoOpt'
      > & { functionName?: 'addObligorIntoOpt' }
    : UseContractWriteConfig<TMode, typeof optionsABI, 'addObligorIntoOpt'> & {
        abi?: never
        functionName?: 'addObligorIntoOpt'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof optionsABI, 'addObligorIntoOpt'>({
    abi: optionsABI,
    functionName: 'addObligorIntoOpt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"createOption"`.
 */
export function useOptionsCreateOption<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof optionsABI, 'createOption'>['abi'],
        'createOption'
      > & { functionName?: 'createOption' }
    : UseContractWriteConfig<TMode, typeof optionsABI, 'createOption'> & {
        abi?: never
        functionName?: 'createOption'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof optionsABI, 'createOption'>({
    abi: optionsABI,
    functionName: 'createOption',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"delOption"`.
 */
export function useOptionsDelOption<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof optionsABI, 'delOption'>['abi'],
        'delOption'
      > & { functionName?: 'delOption' }
    : UseContractWriteConfig<TMode, typeof optionsABI, 'delOption'> & {
        abi?: never
        functionName?: 'delOption'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof optionsABI, 'delOption'>({
    abi: optionsABI,
    functionName: 'delOption',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"grantRole"`.
 */
export function useOptionsGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof optionsABI, 'grantRole'>['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof optionsABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof optionsABI, 'grantRole'>({
    abi: optionsABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"init"`.
 */
export function useOptionsInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof optionsABI, 'init'>['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof optionsABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof optionsABI, 'init'>({
    abi: optionsABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"lockContents"`.
 */
export function useOptionsLockContents<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof optionsABI, 'lockContents'>['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<TMode, typeof optionsABI, 'lockContents'> & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof optionsABI, 'lockContents'>({
    abi: optionsABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function useOptionsRemoveDirectKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof optionsABI,
          'removeDirectKeeper'
        >['abi'],
        'removeDirectKeeper'
      > & { functionName?: 'removeDirectKeeper' }
    : UseContractWriteConfig<TMode, typeof optionsABI, 'removeDirectKeeper'> & {
        abi?: never
        functionName?: 'removeDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof optionsABI, 'removeDirectKeeper'>({
    abi: optionsABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"removeObligorFromOpt"`.
 */
export function useOptionsRemoveObligorFromOpt<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof optionsABI,
          'removeObligorFromOpt'
        >['abi'],
        'removeObligorFromOpt'
      > & { functionName?: 'removeObligorFromOpt' }
    : UseContractWriteConfig<
        TMode,
        typeof optionsABI,
        'removeObligorFromOpt'
      > & {
        abi?: never
        functionName?: 'removeObligorFromOpt'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof optionsABI, 'removeObligorFromOpt'>({
    abi: optionsABI,
    functionName: 'removeObligorFromOpt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useOptionsRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof optionsABI, 'renounceRole'>['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<TMode, typeof optionsABI, 'renounceRole'> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof optionsABI, 'renounceRole'>({
    abi: optionsABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useOptionsRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof optionsABI, 'revokeRole'>['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof optionsABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof optionsABI, 'revokeRole'>({
    abi: optionsABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useOptionsSetDirectKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof optionsABI, 'setDirectKeeper'>['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<TMode, typeof optionsABI, 'setDirectKeeper'> & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof optionsABI, 'setDirectKeeper'>({
    abi: optionsABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function useOptionsSetGeneralCounsel<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof optionsABI,
          'setGeneralCounsel'
        >['abi'],
        'setGeneralCounsel'
      > & { functionName?: 'setGeneralCounsel' }
    : UseContractWriteConfig<TMode, typeof optionsABI, 'setGeneralCounsel'> & {
        abi?: never
        functionName?: 'setGeneralCounsel'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof optionsABI, 'setGeneralCounsel'>({
    abi: optionsABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"setOwner"`.
 */
export function useOptionsSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof optionsABI, 'setOwner'>['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof optionsABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof optionsABI, 'setOwner'>({
    abi: optionsABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useOptionsSetRoleAdmin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof optionsABI, 'setRoleAdmin'>['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<TMode, typeof optionsABI, 'setRoleAdmin'> & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof optionsABI, 'setRoleAdmin'>({
    abi: optionsABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link optionsABI}__.
 */
export function usePrepareOptionsWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof optionsABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: optionsABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof optionsABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareOptionsAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof optionsABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: optionsABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof optionsABI, 'abandonRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"addObligorIntoOpt"`.
 */
export function usePrepareOptionsAddObligorIntoOpt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof optionsABI, 'addObligorIntoOpt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: optionsABI,
    functionName: 'addObligorIntoOpt',
    ...config,
  } as UsePrepareContractWriteConfig<typeof optionsABI, 'addObligorIntoOpt'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"createOption"`.
 */
export function usePrepareOptionsCreateOption(
  config: Omit<
    UsePrepareContractWriteConfig<typeof optionsABI, 'createOption'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: optionsABI,
    functionName: 'createOption',
    ...config,
  } as UsePrepareContractWriteConfig<typeof optionsABI, 'createOption'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"delOption"`.
 */
export function usePrepareOptionsDelOption(
  config: Omit<
    UsePrepareContractWriteConfig<typeof optionsABI, 'delOption'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: optionsABI,
    functionName: 'delOption',
    ...config,
  } as UsePrepareContractWriteConfig<typeof optionsABI, 'delOption'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareOptionsGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof optionsABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: optionsABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof optionsABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareOptionsInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof optionsABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: optionsABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof optionsABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareOptionsLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<typeof optionsABI, 'lockContents'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: optionsABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<typeof optionsABI, 'lockContents'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function usePrepareOptionsRemoveDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof optionsABI, 'removeDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: optionsABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof optionsABI, 'removeDirectKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"removeObligorFromOpt"`.
 */
export function usePrepareOptionsRemoveObligorFromOpt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof optionsABI, 'removeObligorFromOpt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: optionsABI,
    functionName: 'removeObligorFromOpt',
    ...config,
  } as UsePrepareContractWriteConfig<typeof optionsABI, 'removeObligorFromOpt'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareOptionsRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof optionsABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: optionsABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof optionsABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareOptionsRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof optionsABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: optionsABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof optionsABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareOptionsSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof optionsABI, 'setDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: optionsABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof optionsABI, 'setDirectKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function usePrepareOptionsSetGeneralCounsel(
  config: Omit<
    UsePrepareContractWriteConfig<typeof optionsABI, 'setGeneralCounsel'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: optionsABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as UsePrepareContractWriteConfig<typeof optionsABI, 'setGeneralCounsel'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareOptionsSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof optionsABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: optionsABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof optionsABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link optionsABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareOptionsSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof optionsABI, 'setRoleAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: optionsABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof optionsABI, 'setRoleAdmin'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link optionsABI}__.
 */
export function useOptionsEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof optionsABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: optionsABI,
    ...config,
  } as UseContractEventConfig<typeof optionsABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link optionsABI}__ and `eventName` set to `"Init"`.
 */
export function useOptionsInitEvent(
  config: Omit<
    UseContractEventConfig<typeof optionsABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: optionsABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof optionsABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link optionsABI}__ and `eventName` set to `"LockContents"`.
 */
export function useOptionsLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof optionsABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: optionsABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof optionsABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link optionsABI}__ and `eventName` set to `"RemoveDirectKeeper"`.
 */
export function useOptionsRemoveDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof optionsABI, 'RemoveDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: optionsABI,
    eventName: 'RemoveDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof optionsABI, 'RemoveDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link optionsABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useOptionsSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof optionsABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: optionsABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof optionsABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link optionsABI}__ and `eventName` set to `"SetGeneralCounsel"`.
 */
export function useOptionsSetGeneralCounselEvent(
  config: Omit<
    UseContractEventConfig<typeof optionsABI, 'SetGeneralCounsel'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: optionsABI,
    eventName: 'SetGeneralCounsel',
    ...config,
  } as UseContractEventConfig<typeof optionsABI, 'SetGeneralCounsel'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link optionsABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useOptionsSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof optionsABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: optionsABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof optionsABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link tagAlongABI}__.
 */
export function useTagAlong(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: tagAlongABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tagAlongABI}__.
 */
export function useTagAlongRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof tagAlongABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tagAlongABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: tagAlongABI,
    ...config,
  } as UseContractReadConfig<typeof tagAlongABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tagAlongABI}__ and `functionName` set to `"dragers"`.
 */
export function useTagAlongDragers<
  TSelectData = ReadContractResult<typeof tagAlongABI, 'dragers'>,
>(
  config: Omit<
    UseContractReadConfig<typeof tagAlongABI, 'dragers', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tagAlongABI,
    functionName: 'dragers',
    ...config,
  } as UseContractReadConfig<typeof tagAlongABI, 'dragers', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tagAlongABI}__ and `functionName` set to `"finalized"`.
 */
export function useTagAlongFinalized<
  TSelectData = ReadContractResult<typeof tagAlongABI, 'finalized'>,
>(
  config: Omit<
    UseContractReadConfig<typeof tagAlongABI, 'finalized', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tagAlongABI,
    functionName: 'finalized',
    ...config,
  } as UseContractReadConfig<typeof tagAlongABI, 'finalized', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tagAlongABI}__ and `functionName` set to `"followers"`.
 */
export function useTagAlongFollowers<
  TSelectData = ReadContractResult<typeof tagAlongABI, 'followers'>,
>(
  config: Omit<
    UseContractReadConfig<typeof tagAlongABI, 'followers', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tagAlongABI,
    functionName: 'followers',
    ...config,
  } as UseContractReadConfig<typeof tagAlongABI, 'followers', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tagAlongABI}__ and `functionName` set to `"getBookeeper"`.
 */
export function useTagAlongGetBookeeper<
  TSelectData = ReadContractResult<typeof tagAlongABI, 'getBookeeper'>,
>(
  config: Omit<
    UseContractReadConfig<typeof tagAlongABI, 'getBookeeper', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tagAlongABI,
    functionName: 'getBookeeper',
    ...config,
  } as UseContractReadConfig<typeof tagAlongABI, 'getBookeeper', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tagAlongABI}__ and `functionName` set to `"getGeneralCounsel"`.
 */
export function useTagAlongGetGeneralCounsel<
  TSelectData = ReadContractResult<typeof tagAlongABI, 'getGeneralCounsel'>,
>(
  config: Omit<
    UseContractReadConfig<typeof tagAlongABI, 'getGeneralCounsel', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tagAlongABI,
    functionName: 'getGeneralCounsel',
    ...config,
  } as UseContractReadConfig<
    typeof tagAlongABI,
    'getGeneralCounsel',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tagAlongABI}__ and `functionName` set to `"getOwner"`.
 */
export function useTagAlongGetOwner<
  TSelectData = ReadContractResult<typeof tagAlongABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof tagAlongABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tagAlongABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<typeof tagAlongABI, 'getOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tagAlongABI}__ and `functionName` set to `"hasRole"`.
 */
export function useTagAlongHasRole<
  TSelectData = ReadContractResult<typeof tagAlongABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof tagAlongABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tagAlongABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof tagAlongABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tagAlongABI}__ and `functionName` set to `"isDrager"`.
 */
export function useTagAlongIsDrager<
  TSelectData = ReadContractResult<typeof tagAlongABI, 'isDrager'>,
>(
  config: Omit<
    UseContractReadConfig<typeof tagAlongABI, 'isDrager', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tagAlongABI,
    functionName: 'isDrager',
    ...config,
  } as UseContractReadConfig<typeof tagAlongABI, 'isDrager', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tagAlongABI}__ and `functionName` set to `"isExempted"`.
 */
export function useTagAlongIsExempted<
  TSelectData = ReadContractResult<typeof tagAlongABI, 'isExempted'>,
>(
  config: Omit<
    UseContractReadConfig<typeof tagAlongABI, 'isExempted', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tagAlongABI,
    functionName: 'isExempted',
    ...config,
  } as UseContractReadConfig<typeof tagAlongABI, 'isExempted', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tagAlongABI}__ and `functionName` set to `"isLinked"`.
 */
export function useTagAlongIsLinked<
  TSelectData = ReadContractResult<typeof tagAlongABI, 'isLinked'>,
>(
  config: Omit<
    UseContractReadConfig<typeof tagAlongABI, 'isLinked', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tagAlongABI,
    functionName: 'isLinked',
    ...config,
  } as UseContractReadConfig<typeof tagAlongABI, 'isLinked', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tagAlongABI}__ and `functionName` set to `"isTriggered"`.
 */
export function useTagAlongIsTriggered<
  TSelectData = ReadContractResult<typeof tagAlongABI, 'isTriggered'>,
>(
  config: Omit<
    UseContractReadConfig<typeof tagAlongABI, 'isTriggered', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tagAlongABI,
    functionName: 'isTriggered',
    ...config,
  } as UseContractReadConfig<typeof tagAlongABI, 'isTriggered', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tagAlongABI}__ and `functionName` set to `"linkRule"`.
 */
export function useTagAlongLinkRule<
  TSelectData = ReadContractResult<typeof tagAlongABI, 'linkRule'>,
>(
  config: Omit<
    UseContractReadConfig<typeof tagAlongABI, 'linkRule', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tagAlongABI,
    functionName: 'linkRule',
    ...config,
  } as UseContractReadConfig<typeof tagAlongABI, 'linkRule', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tagAlongABI}__ and `functionName` set to `"priceCheck"`.
 */
export function useTagAlongPriceCheck<
  TSelectData = ReadContractResult<typeof tagAlongABI, 'priceCheck'>,
>(
  config: Omit<
    UseContractReadConfig<typeof tagAlongABI, 'priceCheck', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tagAlongABI,
    functionName: 'priceCheck',
    ...config,
  } as UseContractReadConfig<typeof tagAlongABI, 'priceCheck', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tagAlongABI}__.
 */
export function useTagAlongWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof tagAlongABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof tagAlongABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tagAlongABI, TFunctionName>({
    abi: tagAlongABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tagAlongABI}__ and `functionName` set to `"abandonRole"`.
 */
export function useTagAlongAbandonRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof tagAlongABI, 'abandonRole'>['abi'],
        'abandonRole'
      > & { functionName?: 'abandonRole' }
    : UseContractWriteConfig<TMode, typeof tagAlongABI, 'abandonRole'> & {
        abi?: never
        functionName?: 'abandonRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tagAlongABI, 'abandonRole'>({
    abi: tagAlongABI,
    functionName: 'abandonRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tagAlongABI}__ and `functionName` set to `"addFollower"`.
 */
export function useTagAlongAddFollower<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof tagAlongABI, 'addFollower'>['abi'],
        'addFollower'
      > & { functionName?: 'addFollower' }
    : UseContractWriteConfig<TMode, typeof tagAlongABI, 'addFollower'> & {
        abi?: never
        functionName?: 'addFollower'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tagAlongABI, 'addFollower'>({
    abi: tagAlongABI,
    functionName: 'addFollower',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tagAlongABI}__ and `functionName` set to `"createLink"`.
 */
export function useTagAlongCreateLink<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof tagAlongABI, 'createLink'>['abi'],
        'createLink'
      > & { functionName?: 'createLink' }
    : UseContractWriteConfig<TMode, typeof tagAlongABI, 'createLink'> & {
        abi?: never
        functionName?: 'createLink'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tagAlongABI, 'createLink'>({
    abi: tagAlongABI,
    functionName: 'createLink',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tagAlongABI}__ and `functionName` set to `"grantRole"`.
 */
export function useTagAlongGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof tagAlongABI, 'grantRole'>['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof tagAlongABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tagAlongABI, 'grantRole'>({
    abi: tagAlongABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tagAlongABI}__ and `functionName` set to `"init"`.
 */
export function useTagAlongInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof tagAlongABI, 'init'>['abi'],
        'init'
      > & { functionName?: 'init' }
    : UseContractWriteConfig<TMode, typeof tagAlongABI, 'init'> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tagAlongABI, 'init'>({
    abi: tagAlongABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tagAlongABI}__ and `functionName` set to `"lockContents"`.
 */
export function useTagAlongLockContents<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof tagAlongABI, 'lockContents'>['abi'],
        'lockContents'
      > & { functionName?: 'lockContents' }
    : UseContractWriteConfig<TMode, typeof tagAlongABI, 'lockContents'> & {
        abi?: never
        functionName?: 'lockContents'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tagAlongABI, 'lockContents'>({
    abi: tagAlongABI,
    functionName: 'lockContents',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tagAlongABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function useTagAlongRemoveDirectKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof tagAlongABI,
          'removeDirectKeeper'
        >['abi'],
        'removeDirectKeeper'
      > & { functionName?: 'removeDirectKeeper' }
    : UseContractWriteConfig<
        TMode,
        typeof tagAlongABI,
        'removeDirectKeeper'
      > & {
        abi?: never
        functionName?: 'removeDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tagAlongABI, 'removeDirectKeeper'>({
    abi: tagAlongABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tagAlongABI}__ and `functionName` set to `"removeDrager"`.
 */
export function useTagAlongRemoveDrager<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof tagAlongABI, 'removeDrager'>['abi'],
        'removeDrager'
      > & { functionName?: 'removeDrager' }
    : UseContractWriteConfig<TMode, typeof tagAlongABI, 'removeDrager'> & {
        abi?: never
        functionName?: 'removeDrager'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tagAlongABI, 'removeDrager'>({
    abi: tagAlongABI,
    functionName: 'removeDrager',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tagAlongABI}__ and `functionName` set to `"removeFollower"`.
 */
export function useTagAlongRemoveFollower<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof tagAlongABI, 'removeFollower'>['abi'],
        'removeFollower'
      > & { functionName?: 'removeFollower' }
    : UseContractWriteConfig<TMode, typeof tagAlongABI, 'removeFollower'> & {
        abi?: never
        functionName?: 'removeFollower'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tagAlongABI, 'removeFollower'>({
    abi: tagAlongABI,
    functionName: 'removeFollower',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tagAlongABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useTagAlongRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof tagAlongABI, 'renounceRole'>['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<TMode, typeof tagAlongABI, 'renounceRole'> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tagAlongABI, 'renounceRole'>({
    abi: tagAlongABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tagAlongABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useTagAlongRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof tagAlongABI, 'revokeRole'>['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof tagAlongABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tagAlongABI, 'revokeRole'>({
    abi: tagAlongABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tagAlongABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function useTagAlongSetDirectKeeper<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof tagAlongABI,
          'setDirectKeeper'
        >['abi'],
        'setDirectKeeper'
      > & { functionName?: 'setDirectKeeper' }
    : UseContractWriteConfig<TMode, typeof tagAlongABI, 'setDirectKeeper'> & {
        abi?: never
        functionName?: 'setDirectKeeper'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tagAlongABI, 'setDirectKeeper'>({
    abi: tagAlongABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tagAlongABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function useTagAlongSetGeneralCounsel<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof tagAlongABI,
          'setGeneralCounsel'
        >['abi'],
        'setGeneralCounsel'
      > & { functionName?: 'setGeneralCounsel' }
    : UseContractWriteConfig<TMode, typeof tagAlongABI, 'setGeneralCounsel'> & {
        abi?: never
        functionName?: 'setGeneralCounsel'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tagAlongABI, 'setGeneralCounsel'>({
    abi: tagAlongABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tagAlongABI}__ and `functionName` set to `"setOwner"`.
 */
export function useTagAlongSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof tagAlongABI, 'setOwner'>['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof tagAlongABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tagAlongABI, 'setOwner'>({
    abi: tagAlongABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tagAlongABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function useTagAlongSetRoleAdmin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof tagAlongABI, 'setRoleAdmin'>['abi'],
        'setRoleAdmin'
      > & { functionName?: 'setRoleAdmin' }
    : UseContractWriteConfig<TMode, typeof tagAlongABI, 'setRoleAdmin'> & {
        abi?: never
        functionName?: 'setRoleAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tagAlongABI, 'setRoleAdmin'>({
    abi: tagAlongABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tagAlongABI}__.
 */
export function usePrepareTagAlongWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tagAlongABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tagAlongABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof tagAlongABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tagAlongABI}__ and `functionName` set to `"abandonRole"`.
 */
export function usePrepareTagAlongAbandonRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tagAlongABI, 'abandonRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tagAlongABI,
    functionName: 'abandonRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tagAlongABI, 'abandonRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tagAlongABI}__ and `functionName` set to `"addFollower"`.
 */
export function usePrepareTagAlongAddFollower(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tagAlongABI, 'addFollower'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tagAlongABI,
    functionName: 'addFollower',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tagAlongABI, 'addFollower'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tagAlongABI}__ and `functionName` set to `"createLink"`.
 */
export function usePrepareTagAlongCreateLink(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tagAlongABI, 'createLink'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tagAlongABI,
    functionName: 'createLink',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tagAlongABI, 'createLink'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tagAlongABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareTagAlongGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tagAlongABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tagAlongABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tagAlongABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tagAlongABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareTagAlongInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tagAlongABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tagAlongABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tagAlongABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tagAlongABI}__ and `functionName` set to `"lockContents"`.
 */
export function usePrepareTagAlongLockContents(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tagAlongABI, 'lockContents'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tagAlongABI,
    functionName: 'lockContents',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tagAlongABI, 'lockContents'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tagAlongABI}__ and `functionName` set to `"removeDirectKeeper"`.
 */
export function usePrepareTagAlongRemoveDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tagAlongABI, 'removeDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tagAlongABI,
    functionName: 'removeDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tagAlongABI, 'removeDirectKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tagAlongABI}__ and `functionName` set to `"removeDrager"`.
 */
export function usePrepareTagAlongRemoveDrager(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tagAlongABI, 'removeDrager'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tagAlongABI,
    functionName: 'removeDrager',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tagAlongABI, 'removeDrager'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tagAlongABI}__ and `functionName` set to `"removeFollower"`.
 */
export function usePrepareTagAlongRemoveFollower(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tagAlongABI, 'removeFollower'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tagAlongABI,
    functionName: 'removeFollower',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tagAlongABI, 'removeFollower'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tagAlongABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareTagAlongRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tagAlongABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tagAlongABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tagAlongABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tagAlongABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareTagAlongRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tagAlongABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tagAlongABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tagAlongABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tagAlongABI}__ and `functionName` set to `"setDirectKeeper"`.
 */
export function usePrepareTagAlongSetDirectKeeper(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tagAlongABI, 'setDirectKeeper'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tagAlongABI,
    functionName: 'setDirectKeeper',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tagAlongABI, 'setDirectKeeper'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tagAlongABI}__ and `functionName` set to `"setGeneralCounsel"`.
 */
export function usePrepareTagAlongSetGeneralCounsel(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tagAlongABI, 'setGeneralCounsel'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tagAlongABI,
    functionName: 'setGeneralCounsel',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tagAlongABI, 'setGeneralCounsel'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tagAlongABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareTagAlongSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tagAlongABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tagAlongABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tagAlongABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tagAlongABI}__ and `functionName` set to `"setRoleAdmin"`.
 */
export function usePrepareTagAlongSetRoleAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tagAlongABI, 'setRoleAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tagAlongABI,
    functionName: 'setRoleAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tagAlongABI, 'setRoleAdmin'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tagAlongABI}__.
 */
export function useTagAlongEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof tagAlongABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: tagAlongABI,
    ...config,
  } as UseContractEventConfig<typeof tagAlongABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tagAlongABI}__ and `eventName` set to `"Init"`.
 */
export function useTagAlongInitEvent(
  config: Omit<
    UseContractEventConfig<typeof tagAlongABI, 'Init'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tagAlongABI,
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof tagAlongABI, 'Init'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tagAlongABI}__ and `eventName` set to `"LockContents"`.
 */
export function useTagAlongLockContentsEvent(
  config: Omit<
    UseContractEventConfig<typeof tagAlongABI, 'LockContents'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tagAlongABI,
    eventName: 'LockContents',
    ...config,
  } as UseContractEventConfig<typeof tagAlongABI, 'LockContents'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tagAlongABI}__ and `eventName` set to `"RemoveDirectKeeper"`.
 */
export function useTagAlongRemoveDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof tagAlongABI, 'RemoveDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tagAlongABI,
    eventName: 'RemoveDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof tagAlongABI, 'RemoveDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tagAlongABI}__ and `eventName` set to `"SetDirectKeeper"`.
 */
export function useTagAlongSetDirectKeeperEvent(
  config: Omit<
    UseContractEventConfig<typeof tagAlongABI, 'SetDirectKeeper'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tagAlongABI,
    eventName: 'SetDirectKeeper',
    ...config,
  } as UseContractEventConfig<typeof tagAlongABI, 'SetDirectKeeper'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tagAlongABI}__ and `eventName` set to `"SetGeneralCounsel"`.
 */
export function useTagAlongSetGeneralCounselEvent(
  config: Omit<
    UseContractEventConfig<typeof tagAlongABI, 'SetGeneralCounsel'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tagAlongABI,
    eventName: 'SetGeneralCounsel',
    ...config,
  } as UseContractEventConfig<typeof tagAlongABI, 'SetGeneralCounsel'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tagAlongABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useTagAlongSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof tagAlongABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tagAlongABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof tagAlongABI, 'SetOwner'>)
}
